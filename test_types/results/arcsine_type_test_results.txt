____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 53:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7063#7065#7075::Tuple{}
  ######b#7064#7066#7076::Tuple{}
  ####_var0#7067#7077::Tuple{}
  ######tup#7068#7071#7078::Tuple{}
  ######x#7069#7072#7079::Float64
  ####_var0#7073#7080::Tuple{}
  ######types#7070#7074#7081::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7067#7077 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7067#7077 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7073#7080 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7073#7080 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7063#7065#7075::Tuple{}
  ######b#7064#7066#7076::Tuple{}
  ####_var0#7067#7077::Tuple{}
  ######tup#7068#7071#7078::Tuple{}
  ######x#7069#7072#7079::Float64
  ####_var0#7073#7080::Tuple{}
  ######types#7070#7074#7081::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7067#7077 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7067#7077 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7073#7080 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7073#7080 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7063#7065#7075::Tuple{}
  ######b#7064#7066#7076::Tuple{}
  ####_var0#7067#7077::Tuple{}
  ######tup#7068#7071#7078::Tuple{}
  ######x#7069#7072#7079::Float64
  ####_var0#7073#7080::Tuple{}
  ######types#7070#7074#7081::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7067#7077 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7067#7077 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7073#7080 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7073#7080 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7063#7065#7075::Tuple{}
  ######b#7064#7066#7076::Tuple{}
  ####_var0#7067#7077::Tuple{}
  ######tup#7068#7071#7078::Tuple{}
  ######x#7069#7072#7079::Float64
  ####_var0#7073#7080::Tuple{}
  ######types#7070#7074#7081::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7067#7077 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7067#7077 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7073#7080 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7073#7080 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7063#7065#7075::Tuple{}
  ######b#7064#7066#7076::Tuple{}
  ####_var0#7067#7077::Tuple{}
  ######tup#7068#7071#7078::Tuple{}
  ######x#7069#7072#7079::Float64
  ####_var0#7073#7080::Tuple{}
  ######types#7070#7074#7081::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7067#7077 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7067#7077 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7073#7080 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7073#7080 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7088#7090#7110::Tuple{}
  ######b#7089#7091#7111::Tuple{}
  ####_var0#7092#7112::Tuple{}
  ##a#7113::Float64
  ####G#7101#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7102#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7103#7116::Tuple{}
  ##########x#7069#7095#7099#7104#7117::Float64
  ########_var0#7096#7100#7105#7118::Tuple{}
  ########tup#7068#7071#7106#7119::Tuple{}
  ########x#7069#7072#7107#7120::Float64
  ######_var0#7073#7108#7121::Tuple{}
  ########types#7070#7074#7109#7122::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7092#7112 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7092#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7113 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7101#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7105#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7096#7100#7105#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7113::Float64,##a#7113::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7073#7108#7121 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7073#7108#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7088#7090#7110::Tuple{}
  ######b#7089#7091#7111::Tuple{}
  ####_var0#7092#7112::Tuple{}
  ##a#7113::Float64
  ####G#7101#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7102#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7103#7116::Tuple{}
  ##########x#7069#7095#7099#7104#7117::Float64
  ########_var0#7096#7100#7105#7118::Tuple{}
  ########tup#7068#7071#7106#7119::Tuple{}
  ########x#7069#7072#7107#7120::Float64
  ######_var0#7073#7108#7121::Tuple{}
  ########types#7070#7074#7109#7122::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7092#7112 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7092#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7113 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7101#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7105#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7096#7100#7105#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7113::Float64,##a#7113::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7073#7108#7121 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7073#7108#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7088#7090#7110::Tuple{}
  ######b#7089#7091#7111::Tuple{}
  ####_var0#7092#7112::Tuple{}
  ##a#7113::Float64
  ####G#7101#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7102#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7103#7116::Tuple{}
  ##########x#7069#7095#7099#7104#7117::Float64
  ########_var0#7096#7100#7105#7118::Tuple{}
  ########tup#7068#7071#7106#7119::Tuple{}
  ########x#7069#7072#7107#7120::Float64
  ######_var0#7073#7108#7121::Tuple{}
  ########types#7070#7074#7109#7122::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7092#7112 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7092#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7113 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7101#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7105#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7096#7100#7105#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7113::Float64,##a#7113::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7073#7108#7121 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7073#7108#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7088#7090#7110::Tuple{}
  ######b#7089#7091#7111::Tuple{}
  ####_var0#7092#7112::Tuple{}
  ##a#7113::Float64
  ####G#7101#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7102#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7103#7116::Tuple{}
  ##########x#7069#7095#7099#7104#7117::Float64
  ########_var0#7096#7100#7105#7118::Tuple{}
  ########tup#7068#7071#7106#7119::Tuple{}
  ########x#7069#7072#7107#7120::Float64
  ######_var0#7073#7108#7121::Tuple{}
  ########types#7070#7074#7109#7122::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7092#7112 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7092#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7113 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7101#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7105#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7096#7100#7105#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7113::Float64,##a#7113::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7073#7108#7121 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7073#7108#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7088#7090#7110::Tuple{}
  ######b#7089#7091#7111::Tuple{}
  ####_var0#7092#7112::Tuple{}
  ##a#7113::Float64
  ####G#7101#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7102#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7103#7116::Tuple{}
  ##########x#7069#7095#7099#7104#7117::Float64
  ########_var0#7096#7100#7105#7118::Tuple{}
  ########tup#7068#7071#7106#7119::Tuple{}
  ########x#7069#7072#7107#7120::Float64
  ######_var0#7073#7108#7121::Tuple{}
  ########types#7070#7074#7109#7122::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7092#7112 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7092#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7113 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7101#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7105#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7096#7100#7105#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7113::Float64,##a#7113::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7073#7108#7121 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7073#7108#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 62:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 66:
      return 0.0
  end::Float64




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      return -1.5
  end::Float64




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7138::Float64
  ####G#7131#7139::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7132#7140::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7133#7141::Tuple{}
  ##########x#7069#7095#7099#7134#7142::Float64
  ########_var0#7096#7100#7135#7143::Tuple{}
  ########types#7070#7136#7137#7144::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7138 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7138::Float64,0)::Float64
      ####G#7131#7139 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7135#7143 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7096#7100#7135#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7138::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7138::Float64
  ####G#7131#7139::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7132#7140::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7133#7141::Tuple{}
  ##########x#7069#7095#7099#7134#7142::Float64
  ########_var0#7096#7100#7135#7143::Tuple{}
  ########types#7070#7136#7137#7144::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7138 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7138::Float64,0)::Float64
      ####G#7131#7139 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7135#7143 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7096#7100#7135#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7138::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7138::Float64
  ####G#7131#7139::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7132#7140::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7133#7141::Tuple{}
  ##########x#7069#7095#7099#7134#7142::Float64
  ########_var0#7096#7100#7135#7143::Tuple{}
  ########types#7070#7136#7137#7144::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7138 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7138::Float64,0)::Float64
      ####G#7131#7139 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7135#7143 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7096#7100#7135#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7138::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7138::Float64
  ####G#7131#7139::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7132#7140::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7133#7141::Tuple{}
  ##########x#7069#7095#7099#7134#7142::Float64
  ########_var0#7096#7100#7135#7143::Tuple{}
  ########types#7070#7136#7137#7144::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7138 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7138::Float64,0)::Float64
      ####G#7131#7139 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7135#7143 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7096#7100#7135#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7138::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7138::Float64
  ####G#7131#7139::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7132#7140::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7133#7141::Tuple{}
  ##########x#7069#7095#7099#7134#7142::Float64
  ########_var0#7096#7100#7135#7143::Tuple{}
  ########types#7070#7136#7137#7144::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 69:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7138 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7138::Float64,0)::Float64
      ####G#7131#7139 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7135#7143 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7096#7100#7135#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7138::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7147#7149::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7150::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7149 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7149 = false
      2: 
      ####_var0#7147#7149::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7150 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7150::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7147#7149::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7150::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7149 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7149 = false
      2: 
      ####_var0#7147#7149::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7150 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7150::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7147#7161::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7162::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7161 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7161 = false
      2: 
      ####_var0#7147#7161::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7162 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7162::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7147#7149::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7150::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7149 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7149 = false
      2: 
      ####_var0#7147#7149::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7150 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7150::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7147#7149::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7150::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7149 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7149 = false
      2: 
      ####_var0#7147#7149::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7150 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7150::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7147#7161::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7162::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7161 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7161 = false
      2: 
      ####_var0#7147#7161::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7162 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7162::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7147#7161::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7162::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7161 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7161 = false
      2: 
      ####_var0#7147#7161::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7162 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7162::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7147#7161::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7162::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7161 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7161 = false
      2: 
      ####_var0#7147#7161::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7162 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7162::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7147#7161::UNION{BOOL,INT64}
  ########_var0#7145#7146#7148#7162::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 87:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7147#7161 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7147#7161 = false
      2: 
      ####_var0#7147#7161::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7145#7146#7148#7162 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7145#7146#7148#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7145#7146#7148#7162::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7170#7174#7214::Tuple{Type{Int64}}
  ######tup#7169#7171#7215::Tuple{}
  ####_var0#7172#7216::Tuple{}
  ######types#7170#7173#7217::Tuple{Type{Int64}}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ######a#7175#7179#7220::Tuple{}
  ######b#7176#7180#7221::Tuple{}
  ######afactor#7177#7181#7222::Float64
  ######bfactor#7178#7182#7223::Float64
  ####_var0#7183#7224::Tuple{}
  ##sqrt_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7184#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7185#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7186#7229::Tuple{}
  ##########x#7069#7095#7099#7187#7230::Float64
  ########_var0#7096#7100#7188#7231::Tuple{}
  ########tup#7189#7192#7196#7232::Tuple{}
  ########x#7190#7193#7197#7233::Irrational{:π}
  ######_var0#7194#7198#7234::Tuple{}
  ########types#7191#7195#7199#7235::Tuple{Type{Irrational{:π}}}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ##div_a#7238::Float64
  ####afactor#7206#7239::Float64
  ####bfactor#7207#7240::Float64
  ########a#7175#7200#7208#7241::Tuple{}
  ########b#7176#7201#7209#7242::Tuple{}
  ########afactor#7177#7202#7210#7243::Float64
  ########bfactor#7178#7203#7211#7244::Float64
  ######_var0#7204#7212#7245::Tuple{}
  ######types#7205#7213#7246::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7172#7216 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7172#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7218 = GenSym(1)
      ##a2#7219 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7183#7224 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7183#7224 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7218::Float64,##a2#7219::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7225 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7225::Float64))
      ####G#7184#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7188#7231 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7096#7100#7188#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7194#7198#7234 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7194#7198#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7236 = GenSym(5)
      ##a2#7237 = GenSym(6)
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7236::Float64,##a2#7237::Float64))
      ####afactor#7206#7239 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7237::Float64))
      ####bfactor#7207#7240 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7236::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7237::Float64,##a2#7237::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7204#7212#7245 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7204#7212#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7170#7174#7214::Tuple{Type{Int64}}
  ######tup#7169#7171#7215::Tuple{}
  ####_var0#7172#7216::Tuple{}
  ######types#7170#7173#7217::Tuple{Type{Int64}}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ######a#7175#7179#7220::Tuple{}
  ######b#7176#7180#7221::Tuple{}
  ######afactor#7177#7181#7222::Float64
  ######bfactor#7178#7182#7223::Float64
  ####_var0#7183#7224::Tuple{}
  ##sqrt_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7184#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7185#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7186#7229::Tuple{}
  ##########x#7069#7095#7099#7187#7230::Float64
  ########_var0#7096#7100#7188#7231::Tuple{}
  ########tup#7189#7192#7196#7232::Tuple{}
  ########x#7190#7193#7197#7233::Irrational{:π}
  ######_var0#7194#7198#7234::Tuple{}
  ########types#7191#7195#7199#7235::Tuple{Type{Irrational{:π}}}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ##div_a#7238::Float64
  ####afactor#7206#7239::Float64
  ####bfactor#7207#7240::Float64
  ########a#7175#7200#7208#7241::Tuple{}
  ########b#7176#7201#7209#7242::Tuple{}
  ########afactor#7177#7202#7210#7243::Float64
  ########bfactor#7178#7203#7211#7244::Float64
  ######_var0#7204#7212#7245::Tuple{}
  ######types#7205#7213#7246::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7172#7216 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7172#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7218 = GenSym(1)
      ##a2#7219 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7183#7224 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7183#7224 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7218::Float64,##a2#7219::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7225 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7225::Float64))
      ####G#7184#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7188#7231 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7096#7100#7188#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7194#7198#7234 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7194#7198#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7236 = GenSym(5)
      ##a2#7237 = GenSym(6)
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7236::Float64,##a2#7237::Float64))
      ####afactor#7206#7239 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7237::Float64))
      ####bfactor#7207#7240 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7236::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7237::Float64,##a2#7237::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7204#7212#7245 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7204#7212#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7170#7174#7214::Tuple{Type{Int64}}
  ######tup#7169#7171#7215::Tuple{}
  ####_var0#7172#7216::Tuple{}
  ######types#7170#7173#7217::Tuple{Type{Int64}}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ######a#7175#7179#7220::Tuple{}
  ######b#7176#7180#7221::Tuple{}
  ######afactor#7177#7181#7222::Float64
  ######bfactor#7178#7182#7223::Float64
  ####_var0#7183#7224::Tuple{}
  ##sqrt_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7184#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7185#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7186#7229::Tuple{}
  ##########x#7069#7095#7099#7187#7230::Float64
  ########_var0#7096#7100#7188#7231::Tuple{}
  ########tup#7189#7192#7196#7232::Tuple{}
  ########x#7190#7193#7197#7233::Irrational{:π}
  ######_var0#7194#7198#7234::Tuple{}
  ########types#7191#7195#7199#7235::Tuple{Type{Irrational{:π}}}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ##div_a#7238::Float64
  ####afactor#7206#7239::Float64
  ####bfactor#7207#7240::Float64
  ########a#7175#7200#7208#7241::Tuple{}
  ########b#7176#7201#7209#7242::Tuple{}
  ########afactor#7177#7202#7210#7243::Float64
  ########bfactor#7178#7203#7211#7244::Float64
  ######_var0#7204#7212#7245::Tuple{}
  ######types#7205#7213#7246::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7172#7216 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7172#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7218 = GenSym(1)
      ##a2#7219 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7183#7224 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7183#7224 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7218::Float64,##a2#7219::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7225 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7225::Float64))
      ####G#7184#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7188#7231 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7096#7100#7188#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7194#7198#7234 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7194#7198#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7236 = GenSym(5)
      ##a2#7237 = GenSym(6)
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7236::Float64,##a2#7237::Float64))
      ####afactor#7206#7239 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7237::Float64))
      ####bfactor#7207#7240 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7236::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7237::Float64,##a2#7237::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7204#7212#7245 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7204#7212#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7170#7174#7214::Tuple{Type{Int64}}
  ######tup#7169#7171#7215::Tuple{}
  ####_var0#7172#7216::Tuple{}
  ######types#7170#7173#7217::Tuple{Type{Int64}}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ######a#7175#7179#7220::Tuple{}
  ######b#7176#7180#7221::Tuple{}
  ######afactor#7177#7181#7222::Float64
  ######bfactor#7178#7182#7223::Float64
  ####_var0#7183#7224::Tuple{}
  ##sqrt_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7184#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7185#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7186#7229::Tuple{}
  ##########x#7069#7095#7099#7187#7230::Float64
  ########_var0#7096#7100#7188#7231::Tuple{}
  ########tup#7189#7192#7196#7232::Tuple{}
  ########x#7190#7193#7197#7233::Irrational{:π}
  ######_var0#7194#7198#7234::Tuple{}
  ########types#7191#7195#7199#7235::Tuple{Type{Irrational{:π}}}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ##div_a#7238::Float64
  ####afactor#7206#7239::Float64
  ####bfactor#7207#7240::Float64
  ########a#7175#7200#7208#7241::Tuple{}
  ########b#7176#7201#7209#7242::Tuple{}
  ########afactor#7177#7202#7210#7243::Float64
  ########bfactor#7178#7203#7211#7244::Float64
  ######_var0#7204#7212#7245::Tuple{}
  ######types#7205#7213#7246::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7172#7216 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7172#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7218 = GenSym(1)
      ##a2#7219 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7183#7224 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7183#7224 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7218::Float64,##a2#7219::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7225 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7225::Float64))
      ####G#7184#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7188#7231 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7096#7100#7188#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7194#7198#7234 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7194#7198#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7236 = GenSym(5)
      ##a2#7237 = GenSym(6)
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7236::Float64,##a2#7237::Float64))
      ####afactor#7206#7239 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7237::Float64))
      ####bfactor#7207#7240 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7236::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7237::Float64,##a2#7237::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7204#7212#7245 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7204#7212#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7170#7174#7214::Tuple{Type{Int64}}
  ######tup#7169#7171#7215::Tuple{}
  ####_var0#7172#7216::Tuple{}
  ######types#7170#7173#7217::Tuple{Type{Int64}}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ######a#7175#7179#7220::Tuple{}
  ######b#7176#7180#7221::Tuple{}
  ######afactor#7177#7181#7222::Float64
  ######bfactor#7178#7182#7223::Float64
  ####_var0#7183#7224::Tuple{}
  ##sqrt_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7184#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7093#7097#7185#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7094#7098#7186#7229::Tuple{}
  ##########x#7069#7095#7099#7187#7230::Float64
  ########_var0#7096#7100#7188#7231::Tuple{}
  ########tup#7189#7192#7196#7232::Tuple{}
  ########x#7190#7193#7197#7233::Irrational{:π}
  ######_var0#7194#7198#7234::Tuple{}
  ########types#7191#7195#7199#7235::Tuple{Type{Irrational{:π}}}
  ##a1#7236::Float64
  ##a2#7237::Float64
  ##div_a#7238::Float64
  ####afactor#7206#7239::Float64
  ####bfactor#7207#7240::Float64
  ########a#7175#7200#7208#7241::Tuple{}
  ########b#7176#7201#7209#7242::Tuple{}
  ########afactor#7177#7202#7210#7243::Float64
  ########bfactor#7178#7203#7211#7244::Float64
  ######_var0#7204#7212#7245::Tuple{}
  ######types#7205#7213#7246::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 74:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7172#7216 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7172#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7218 = GenSym(1)
      ##a2#7219 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7183#7224 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7183#7224 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7218::Float64,##a2#7219::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7225 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7225::Float64))
      ####G#7184#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7096#7100#7188#7231 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7096#7100#7188#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7194#7198#7234 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7194#7198#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7236 = GenSym(5)
      ##a2#7237 = GenSym(6)
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7236::Float64,##a2#7237::Float64))
      ####afactor#7206#7239 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7237::Float64))
      ####bfactor#7207#7240 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7236::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7237::Float64,##a2#7237::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7204#7212#7245 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7204#7212#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





