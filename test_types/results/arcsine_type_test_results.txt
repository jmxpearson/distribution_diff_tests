____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7102#7104#7114::Tuple{}
  ######b#7103#7105#7115::Tuple{}
  ####_var0#7106#7116::Tuple{}
  ######tup#7107#7110#7117::Tuple{}
  ######x#7108#7111#7118::Float64
  ####_var0#7112#7119::Tuple{}
  ######types#7109#7113#7120::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7106#7116 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7106#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7112#7119 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7112#7119 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7102#7104#7114::Tuple{}
  ######b#7103#7105#7115::Tuple{}
  ####_var0#7106#7116::Tuple{}
  ######tup#7107#7110#7117::Tuple{}
  ######x#7108#7111#7118::Float64
  ####_var0#7112#7119::Tuple{}
  ######types#7109#7113#7120::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7106#7116 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7106#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7112#7119 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7112#7119 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7102#7104#7114::Tuple{}
  ######b#7103#7105#7115::Tuple{}
  ####_var0#7106#7116::Tuple{}
  ######tup#7107#7110#7117::Tuple{}
  ######x#7108#7111#7118::Float64
  ####_var0#7112#7119::Tuple{}
  ######types#7109#7113#7120::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7106#7116 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7106#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7112#7119 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7112#7119 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7102#7104#7114::Tuple{}
  ######b#7103#7105#7115::Tuple{}
  ####_var0#7106#7116::Tuple{}
  ######tup#7107#7110#7117::Tuple{}
  ######x#7108#7111#7118::Float64
  ####_var0#7112#7119::Tuple{}
  ######types#7109#7113#7120::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7106#7116 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7106#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7112#7119 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7112#7119 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7102#7104#7114::Tuple{}
  ######b#7103#7105#7115::Tuple{}
  ####_var0#7106#7116::Tuple{}
  ######tup#7107#7110#7117::Tuple{}
  ######x#7108#7111#7118::Float64
  ####_var0#7112#7119::Tuple{}
  ######types#7109#7113#7120::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7106#7116 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7106#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ####_var0#7112#7119 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7112#7119 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7127#7129#7149::Tuple{}
  ######b#7128#7130#7150::Tuple{}
  ####_var0#7131#7151::Tuple{}
  ##a#7152::Float64
  ####G#7140#7153::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7141#7154::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7142#7155::Tuple{}
  ##########x#7108#7134#7138#7143#7156::Float64
  ########_var0#7135#7139#7144#7157::Tuple{}
  ########tup#7107#7110#7145#7158::Tuple{}
  ########x#7108#7111#7146#7159::Float64
  ######_var0#7112#7147#7160::Tuple{}
  ########types#7109#7113#7148#7161::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7151 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7131#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7152 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7140#7153 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7144#7157 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7135#7139#7144#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7152::Float64,##a#7152::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7160 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7112#7147#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.mul_float)(0.125,(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7127#7129#7149::Tuple{}
  ######b#7128#7130#7150::Tuple{}
  ####_var0#7131#7151::Tuple{}
  ##a#7152::Float64
  ####G#7140#7153::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7141#7154::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7142#7155::Tuple{}
  ##########x#7108#7134#7138#7143#7156::Float64
  ########_var0#7135#7139#7144#7157::Tuple{}
  ########tup#7107#7110#7145#7158::Tuple{}
  ########x#7108#7111#7146#7159::Float64
  ######_var0#7112#7147#7160::Tuple{}
  ########types#7109#7113#7148#7161::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7151 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7131#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7152 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7140#7153 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7144#7157 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7135#7139#7144#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7152::Float64,##a#7152::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7160 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7112#7147#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7127#7129#7149::Tuple{}
  ######b#7128#7130#7150::Tuple{}
  ####_var0#7131#7151::Tuple{}
  ##a#7152::Float64
  ####G#7140#7153::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7141#7154::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7142#7155::Tuple{}
  ##########x#7108#7134#7138#7143#7156::Float64
  ########_var0#7135#7139#7144#7157::Tuple{}
  ########tup#7107#7110#7145#7158::Tuple{}
  ########x#7108#7111#7146#7159::Float64
  ######_var0#7112#7147#7160::Tuple{}
  ########types#7109#7113#7148#7161::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7151 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7131#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7152 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7140#7153 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7144#7157 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7135#7139#7144#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7152::Float64,##a#7152::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7160 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7112#7147#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7127#7129#7149::Tuple{}
  ######b#7128#7130#7150::Tuple{}
  ####_var0#7131#7151::Tuple{}
  ##a#7152::Float64
  ####G#7140#7153::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7141#7154::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7142#7155::Tuple{}
  ##########x#7108#7134#7138#7143#7156::Float64
  ########_var0#7135#7139#7144#7157::Tuple{}
  ########tup#7107#7110#7145#7158::Tuple{}
  ########x#7108#7111#7146#7159::Float64
  ######_var0#7112#7147#7160::Tuple{}
  ########types#7109#7113#7148#7161::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7151 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7131#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7152 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7140#7153 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7144#7157 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7135#7139#7144#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7152::Float64,##a#7152::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7160 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7112#7147#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7127#7129#7149::Tuple{}
  ######b#7128#7130#7150::Tuple{}
  ####_var0#7131#7151::Tuple{}
  ##a#7152::Float64
  ####G#7140#7153::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7141#7154::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7142#7155::Tuple{}
  ##########x#7108#7134#7138#7143#7156::Float64
  ########_var0#7135#7139#7144#7157::Tuple{}
  ########tup#7107#7110#7145#7158::Tuple{}
  ########x#7108#7111#7146#7159::Float64
  ######_var0#7112#7147#7160::Tuple{}
  ########types#7109#7113#7148#7161::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7151 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7131#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7152 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7140#7153 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7144#7157 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7135#7139#7144#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7152::Float64,##a#7152::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7160 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7112#7147#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.125))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 60:
      return (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 61:
      return (top(vect))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64)),0.5))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 59:
      return (Distributions.mean)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 64:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7110#7145#7165::Tuple{}
  ########x#7108#7111#7146#7166::Float64
  ######_var0#7112#7147#7167::Tuple{}
  ########types#7109#7113#7148#7168::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7167 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7112#7147#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7110#7145#7165::Tuple{}
  ########x#7108#7111#7146#7166::Float64
  ######_var0#7112#7147#7167::Tuple{}
  ########types#7109#7113#7148#7168::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7167 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7112#7147#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7110#7145#7165::Tuple{}
  ########x#7108#7111#7146#7166::Float64
  ######_var0#7112#7147#7167::Tuple{}
  ########types#7109#7113#7148#7168::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7167 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7112#7147#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7110#7145#7165::Tuple{}
  ########x#7108#7111#7146#7166::Float64
  ######_var0#7112#7147#7167::Tuple{}
  ########types#7109#7113#7148#7168::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7167 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7112#7147#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7110#7145#7165::Tuple{}
  ########x#7108#7111#7146#7166::Float64
  ######_var0#7112#7147#7167::Tuple{}
  ########types#7109#7113#7148#7168::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7147#7167 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7112#7147#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7181::Float64
  ####G#7174#7182::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7175#7183::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7176#7184::Tuple{}
  ##########x#7108#7134#7138#7177#7185::Float64
  ########_var0#7135#7139#7178#7186::Tuple{}
  ########types#7109#7179#7180#7187::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7181 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7181::Float64,0)::Float64
      ####G#7174#7182 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7178#7186 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7135#7139#7178#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7181::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(-0.24156447527049044,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7181::Float64
  ####G#7174#7182::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7175#7183::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7176#7184::Tuple{}
  ##########x#7108#7134#7138#7177#7185::Float64
  ########_var0#7135#7139#7178#7186::Tuple{}
  ########types#7109#7179#7180#7187::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7181 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7181::Float64,0)::Float64
      ####G#7174#7182 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7178#7186 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7135#7139#7178#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7181::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7181::Float64
  ####G#7174#7182::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7175#7183::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7176#7184::Tuple{}
  ##########x#7108#7134#7138#7177#7185::Float64
  ########_var0#7135#7139#7178#7186::Tuple{}
  ########types#7109#7179#7180#7187::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7181 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7181::Float64,0)::Float64
      ####G#7174#7182 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7178#7186 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7135#7139#7178#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7181::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7181::Float64
  ####G#7174#7182::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7175#7183::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7176#7184::Tuple{}
  ##########x#7108#7134#7138#7177#7185::Float64
  ########_var0#7135#7139#7178#7186::Tuple{}
  ########types#7109#7179#7180#7187::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7181 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7181::Float64,0)::Float64
      ####G#7174#7182 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7178#7186 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7135#7139#7178#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7181::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7181::Float64
  ####G#7174#7182::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7175#7183::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7176#7184::Tuple{}
  ##########x#7108#7134#7138#7177#7185::Float64
  ########_var0#7135#7139#7178#7186::Tuple{}
  ########types#7109#7179#7180#7187::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 67:
      GenSym(0) = (Distributions.scale)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7181 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7181::Float64,0)::Float64
      ####G#7174#7182 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7178#7186 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7135#7139#7178#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7181::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,-0.24156447527049044))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7190#7192::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7193::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7192 = false
      2: 
      ####_var0#7190#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7193::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7190#7192::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7193::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7192 = false
      2: 
      ####_var0#7190#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7193::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7190#7204::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7205::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7204 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7204 = false
      2: 
      ####_var0#7190#7204::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7205 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7205 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7205::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7190#7192::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7193::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7192 = false
      2: 
      ####_var0#7190#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7193::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  ####_var0#7190#7192::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7193::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7192 = false
      2: 
      ####_var0#7190#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7193::Float64,1.0))
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(1.5707963267948966,GenSym(2)))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),GenSym(6))),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7190#7204::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7205::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7204 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7204 = false
      2: 
      ####_var0#7190#7204::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7205 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7205 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7205::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7190#7204::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7205::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7204 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7204 = false
      2: 
      ####_var0#7190#7204::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7205 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7205 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7205::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7190#7204::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7205::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7204 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7204 = false
      2: 
      ####_var0#7190#7204::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7205 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7205 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7205::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7190#7204::UNION{BOOL,INT64}
  ########_var0#7188#7189#7191#7205::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 89:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7190#7204 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7190#7204 = false
      2: 
      ####_var0#7190#7204::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7188#7189#7191#7205 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7188#7189#7191#7205 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7188#7189#7191#7205::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7213#7217#7257::Tuple{Type{Int64}}
  ######tup#7212#7214#7258::Tuple{}
  ####_var0#7215#7259::Tuple{}
  ######types#7213#7216#7260::Tuple{Type{Int64}}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7218#7222#7263::Tuple{}
  ######b#7219#7223#7264::Tuple{}
  ######afactor#7220#7224#7265::Float64
  ######bfactor#7221#7225#7266::Float64
  ####_var0#7226#7267::Tuple{}
  ##sqrt_a#7268::Float64
  ##deriv#7269::Float64
  ####G#7227#7270::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7228#7271::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7229#7272::Tuple{}
  ##########x#7108#7134#7138#7230#7273::Float64
  ########_var0#7135#7139#7231#7274::Tuple{}
  ########tup#7232#7235#7239#7275::Tuple{}
  ########x#7233#7236#7240#7276::Irrational{:π}
  ######_var0#7237#7241#7277::Tuple{}
  ########types#7234#7238#7242#7278::Tuple{Type{Irrational{:π}}}
  ##a1#7279::Float64
  ##a2#7280::Float64
  ##div_a#7281::Float64
  ####afactor#7249#7282::Float64
  ####bfactor#7250#7283::Float64
  ########a#7218#7243#7251#7284::Tuple{}
  ########b#7219#7244#7252#7285::Tuple{}
  ########afactor#7220#7245#7253#7286::Float64
  ########bfactor#7221#7246#7254#7287::Float64
  ######_var0#7247#7255#7288::Tuple{}
  ######types#7248#7256#7289::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7215#7259 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7215#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7226#7267 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7226#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7268 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7269 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7268::Float64))
      ####G#7227#7270 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7231#7274 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7135#7139#7231#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7268::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7237#7241#7277 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7237#7241#7277 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7279 = GenSym(5)
      ##a2#7280 = GenSym(6)
      ##div_a#7281 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7279::Float64,##a2#7280::Float64))
      ####afactor#7249#7282 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7280::Float64))
      ####bfactor#7250#7283 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7279::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7280::Float64,##a2#7280::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7247#7255#7288 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7247#7255#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Arcsine{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Arcsine{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Arcsine{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))))::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7213#7217#7257::Tuple{Type{Int64}}
  ######tup#7212#7214#7258::Tuple{}
  ####_var0#7215#7259::Tuple{}
  ######types#7213#7216#7260::Tuple{Type{Int64}}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7218#7222#7263::Tuple{}
  ######b#7219#7223#7264::Tuple{}
  ######afactor#7220#7224#7265::Float64
  ######bfactor#7221#7225#7266::Float64
  ####_var0#7226#7267::Tuple{}
  ##sqrt_a#7268::Float64
  ##deriv#7269::Float64
  ####G#7227#7270::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7228#7271::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7229#7272::Tuple{}
  ##########x#7108#7134#7138#7230#7273::Float64
  ########_var0#7135#7139#7231#7274::Tuple{}
  ########tup#7232#7235#7239#7275::Tuple{}
  ########x#7233#7236#7240#7276::Irrational{:π}
  ######_var0#7237#7241#7277::Tuple{}
  ########types#7234#7238#7242#7278::Tuple{Type{Irrational{:π}}}
  ##a1#7279::Float64
  ##a2#7280::Float64
  ##div_a#7281::Float64
  ####afactor#7249#7282::Float64
  ####bfactor#7250#7283::Float64
  ########a#7218#7243#7251#7284::Tuple{}
  ########b#7219#7244#7252#7285::Tuple{}
  ########afactor#7220#7245#7253#7286::Float64
  ########bfactor#7221#7246#7254#7287::Float64
  ######_var0#7247#7255#7288::Tuple{}
  ######types#7248#7256#7289::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7215#7259 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7215#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7226#7267 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7226#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7268 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7269 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7268::Float64))
      ####G#7227#7270 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7231#7274 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7135#7139#7231#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7268::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7237#7241#7277 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7237#7241#7277 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7279 = GenSym(5)
      ##a2#7280 = GenSym(6)
      ##div_a#7281 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7279::Float64,##a2#7280::Float64))
      ####afactor#7249#7282 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7280::Float64))
      ####bfactor#7250#7283 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7279::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7280::Float64,##a2#7280::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7247#7255#7288 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7247#7255#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7213#7217#7257::Tuple{Type{Int64}}
  ######tup#7212#7214#7258::Tuple{}
  ####_var0#7215#7259::Tuple{}
  ######types#7213#7216#7260::Tuple{Type{Int64}}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7218#7222#7263::Tuple{}
  ######b#7219#7223#7264::Tuple{}
  ######afactor#7220#7224#7265::Float64
  ######bfactor#7221#7225#7266::Float64
  ####_var0#7226#7267::Tuple{}
  ##sqrt_a#7268::Float64
  ##deriv#7269::Float64
  ####G#7227#7270::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7228#7271::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7229#7272::Tuple{}
  ##########x#7108#7134#7138#7230#7273::Float64
  ########_var0#7135#7139#7231#7274::Tuple{}
  ########tup#7232#7235#7239#7275::Tuple{}
  ########x#7233#7236#7240#7276::Irrational{:π}
  ######_var0#7237#7241#7277::Tuple{}
  ########types#7234#7238#7242#7278::Tuple{Type{Irrational{:π}}}
  ##a1#7279::Float64
  ##a2#7280::Float64
  ##div_a#7281::Float64
  ####afactor#7249#7282::Float64
  ####bfactor#7250#7283::Float64
  ########a#7218#7243#7251#7284::Tuple{}
  ########b#7219#7244#7252#7285::Tuple{}
  ########afactor#7220#7245#7253#7286::Float64
  ########bfactor#7221#7246#7254#7287::Float64
  ######_var0#7247#7255#7288::Tuple{}
  ######types#7248#7256#7289::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7215#7259 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7215#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7226#7267 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7226#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7268 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7269 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7268::Float64))
      ####G#7227#7270 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7231#7274 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7135#7139#7231#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7268::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7237#7241#7277 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7237#7241#7277 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7279 = GenSym(5)
      ##a2#7280 = GenSym(6)
      ##div_a#7281 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7279::Float64,##a2#7280::Float64))
      ####afactor#7249#7282 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7280::Float64))
      ####bfactor#7250#7283 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7279::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7280::Float64,##a2#7280::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7247#7255#7288 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7247#7255#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7213#7217#7257::Tuple{Type{Int64}}
  ######tup#7212#7214#7258::Tuple{}
  ####_var0#7215#7259::Tuple{}
  ######types#7213#7216#7260::Tuple{Type{Int64}}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7218#7222#7263::Tuple{}
  ######b#7219#7223#7264::Tuple{}
  ######afactor#7220#7224#7265::Float64
  ######bfactor#7221#7225#7266::Float64
  ####_var0#7226#7267::Tuple{}
  ##sqrt_a#7268::Float64
  ##deriv#7269::Float64
  ####G#7227#7270::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7228#7271::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7229#7272::Tuple{}
  ##########x#7108#7134#7138#7230#7273::Float64
  ########_var0#7135#7139#7231#7274::Tuple{}
  ########tup#7232#7235#7239#7275::Tuple{}
  ########x#7233#7236#7240#7276::Irrational{:π}
  ######_var0#7237#7241#7277::Tuple{}
  ########types#7234#7238#7242#7278::Tuple{Type{Irrational{:π}}}
  ##a1#7279::Float64
  ##a2#7280::Float64
  ##div_a#7281::Float64
  ####afactor#7249#7282::Float64
  ####bfactor#7250#7283::Float64
  ########a#7218#7243#7251#7284::Tuple{}
  ########b#7219#7244#7252#7285::Tuple{}
  ########afactor#7220#7245#7253#7286::Float64
  ########bfactor#7221#7246#7254#7287::Float64
  ######_var0#7247#7255#7288::Tuple{}
  ######types#7248#7256#7289::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7215#7259 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7215#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7226#7267 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7226#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7268 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7269 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7268::Float64))
      ####G#7227#7270 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7231#7274 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7135#7139#7231#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7268::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7237#7241#7277 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7237#7241#7277 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7279 = GenSym(5)
      ##a2#7280 = GenSym(6)
      ##div_a#7281 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7279::Float64,##a2#7280::Float64))
      ####afactor#7249#7282 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7280::Float64))
      ####bfactor#7250#7283 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7279::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7280::Float64,##a2#7280::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7247#7255#7288 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7247#7255#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######types#7213#7217#7257::Tuple{Type{Int64}}
  ######tup#7212#7214#7258::Tuple{}
  ####_var0#7215#7259::Tuple{}
  ######types#7213#7216#7260::Tuple{Type{Int64}}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7218#7222#7263::Tuple{}
  ######b#7219#7223#7264::Tuple{}
  ######afactor#7220#7224#7265::Float64
  ######bfactor#7221#7225#7266::Float64
  ####_var0#7226#7267::Tuple{}
  ##sqrt_a#7268::Float64
  ##deriv#7269::Float64
  ####G#7227#7270::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7132#7136#7228#7271::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7133#7137#7229#7272::Tuple{}
  ##########x#7108#7134#7138#7230#7273::Float64
  ########_var0#7135#7139#7231#7274::Tuple{}
  ########tup#7232#7235#7239#7275::Tuple{}
  ########x#7233#7236#7240#7276::Irrational{:π}
  ######_var0#7237#7241#7277::Tuple{}
  ########types#7234#7238#7242#7278::Tuple{Type{Irrational{:π}}}
  ##a1#7279::Float64
  ##a2#7280::Float64
  ##div_a#7281::Float64
  ####afactor#7249#7282::Float64
  ####bfactor#7250#7283::Float64
  ########a#7218#7243#7251#7284::Tuple{}
  ########b#7219#7244#7252#7285::Tuple{}
  ########afactor#7220#7245#7253#7286::Float64
  ########bfactor#7221#7246#7254#7287::Float64
  ######_var0#7247#7255#7288::Tuple{}
  ######types#7248#7256#7289::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/arcsine.jl, line 73:
      unless (Distributions.insupport)(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7215#7259 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7215#7259 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Arcsine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7226#7267 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7226#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7268 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(3),:value)::Float64)::ANY)::Float64
      ##deriv#7269 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7268::Float64))
      ####G#7227#7270 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7135#7139#7231#7274 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7135#7139#7231#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7268::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7237#7241#7277 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7237#7241#7277 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(4),:value)::Float64,3.141592653589793))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7279 = GenSym(5)
      ##a2#7280 = GenSym(6)
      ##div_a#7281 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7279::Float64,##a2#7280::Float64))
      ####afactor#7249#7282 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7280::Float64))
      ####bfactor#7250#7283 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7279::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7280::Float64,##a2#7280::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7247#7255#7288 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7247#7255#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





