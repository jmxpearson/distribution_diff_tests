____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      return (Base.box)(Int64,(Base.sub_int)((top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7068#7070#7073::Tuple{}
  ######b#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7068#7070#7073::Tuple{}
  ######b#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7068#7070#7073::Tuple{}
  ######b#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7068#7070#7073::Tuple{}
  ######b#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7068#7070#7073::Tuple{}
  ######b#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 55:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      return (Base.box)(Base.Int,(Base.add_int)((top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7082::Tuple{}
  ######b#7078#7080#7083::Tuple{}
  ####_var0#7081#7084::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7084 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7084 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7082::Tuple{}
  ######b#7078#7080#7083::Tuple{}
  ####_var0#7081#7084::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7084 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7084 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7082::Tuple{}
  ######b#7078#7080#7083::Tuple{}
  ####_var0#7081#7084::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7084 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7084 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7082::Tuple{}
  ######b#7078#7080#7083::Tuple{}
  ####_var0#7081#7084::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7084 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7084 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7082::Tuple{}
  ######b#7078#7080#7083::Tuple{}
  ####_var0#7081#7084::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7084 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7084 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{Int64})::ANY)::ANY
  end::ANY

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{Float64})::ANY)::ANY
  end::ANY

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ANY)::ANY
  end::ANY

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{Float64})::ANY)::ANY
  end::ANY

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{Float64})::ANY)::ANY
  end::ANY

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ANY)::ANY
  end::ANY

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ANY)::ANY
  end::ANY

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ANY)::ANY
  end::ANY

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ANY)::ANY
  end::ANY




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{Int64},0.5)::Tuple{Distributions.Skellam{Int64},Float64}))))::UNION{}
  end::UNION{}

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{Float64},0.5)::Tuple{Distributions.Skellam{Float64},Float64}))))::UNION{}
  end::UNION{}

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5)::Tuple{Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Float64}))))::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{Float64},0.5)::Tuple{Distributions.Skellam{Float64},Float64}))))::UNION{}
  end::UNION{}

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{Float64},0.5)::Tuple{Distributions.Skellam{Float64},Float64}))))::UNION{}
  end::UNION{}

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5)::Tuple{Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Float64}))))::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5)::Tuple{Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Float64}))))::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5)::Tuple{Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Float64}))))::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.quantile), :((top(tuple))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5)::Tuple{Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Float64}))))::UNION{}
  end::UNION{}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64))))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)((top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64)))),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),1.5)))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64)),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),1.5)))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7127::Float64
  ##exp_a#7128::Float64
  ##deriv#7129::Float64
  ####G#7104#7130::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7105#7131::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7106#7132::Tuple{}
  ##########x#7096#7098#7102#7107#7133::Float64
  ########_var0#7099#7103#7108#7134::Tuple{}
  ##a1#7135::Float64
  ##a2#7136::Float64
  ##div_a#7137::Float64
  ####afactor#7119#7138::Float64
  ####bfactor#7120#7139::Float64
  ########a#7109#7113#7121#7140::Tuple{}
  ########b#7110#7114#7122#7141::Tuple{}
  ########afactor#7111#7115#7123#7142::Float64
  ########bfactor#7112#7116#7124#7143::Float64
  ######_var0#7117#7125#7144::Tuple{}
  ######types#7118#7126#7145::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(8) = (Distributions.mean)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7127 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,1.5,0)::Float64
      ##exp_a#7128 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,1.5)))::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,GenSym(4),0)::Float64
      ##deriv#7129 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,GenSym(4))))::Float64))
      ####G#7104#7130 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7108#7134 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7108#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7128::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7135 = GenSym(10)
      ##a2#7136 = GenSym(11)
      ##div_a#7137 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7135::Float64,##a2#7136::Float64))
      ####afactor#7119#7138 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7136::Float64))
      ####bfactor#7120#7139 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7135::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7136::Float64,##a2#7136::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7117#7125#7144 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7117#7125#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7137::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64)),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),1.5)))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64)),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),1.5)))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7127::Float64
  ##exp_a#7128::Float64
  ##deriv#7129::Float64
  ####G#7104#7130::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7105#7131::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7106#7132::Tuple{}
  ##########x#7096#7098#7102#7107#7133::Float64
  ########_var0#7099#7103#7108#7134::Tuple{}
  ##a1#7135::Float64
  ##a2#7136::Float64
  ##div_a#7137::Float64
  ####afactor#7119#7138::Float64
  ####bfactor#7120#7139::Float64
  ########a#7109#7113#7121#7140::Tuple{}
  ########b#7110#7114#7122#7141::Tuple{}
  ########afactor#7111#7115#7123#7142::Float64
  ########bfactor#7112#7116#7124#7143::Float64
  ######_var0#7117#7125#7144::Tuple{}
  ######types#7118#7126#7145::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(8) = (Distributions.mean)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7127 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,1.5,0)::Float64
      ##exp_a#7128 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,1.5)))::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,GenSym(4),0)::Float64
      ##deriv#7129 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,GenSym(4))))::Float64))
      ####G#7104#7130 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7108#7134 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7108#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7128::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7135 = GenSym(10)
      ##a2#7136 = GenSym(11)
      ##div_a#7137 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7135::Float64,##a2#7136::Float64))
      ####afactor#7119#7138 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7136::Float64))
      ####bfactor#7120#7139 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7135::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7136::Float64,##a2#7136::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7117#7125#7144 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7117#7125#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7137::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7127::Float64
  ##exp_a#7128::Float64
  ##deriv#7129::Float64
  ####G#7104#7130::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7105#7131::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7106#7132::Tuple{}
  ##########x#7096#7098#7102#7107#7133::Float64
  ########_var0#7099#7103#7108#7134::Tuple{}
  ##a1#7135::Float64
  ##a2#7136::Float64
  ##div_a#7137::Float64
  ####afactor#7119#7138::Float64
  ####bfactor#7120#7139::Float64
  ########a#7109#7113#7121#7140::Tuple{}
  ########b#7110#7114#7122#7141::Tuple{}
  ########afactor#7111#7115#7123#7142::Float64
  ########bfactor#7112#7116#7124#7143::Float64
  ######_var0#7117#7125#7144::Tuple{}
  ######types#7118#7126#7145::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(8) = (Distributions.mean)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7127 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,1.5,0)::Float64
      ##exp_a#7128 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,1.5)))::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,GenSym(4),0)::Float64
      ##deriv#7129 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,GenSym(4))))::Float64))
      ####G#7104#7130 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7108#7134 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7108#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7128::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7135 = GenSym(10)
      ##a2#7136 = GenSym(11)
      ##div_a#7137 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7135::Float64,##a2#7136::Float64))
      ####afactor#7119#7138 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7136::Float64))
      ####bfactor#7120#7139 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7135::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7136::Float64,##a2#7136::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7117#7125#7144 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7117#7125#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7137::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7127::Float64
  ##exp_a#7128::Float64
  ##deriv#7129::Float64
  ####G#7104#7130::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7105#7131::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7106#7132::Tuple{}
  ##########x#7096#7098#7102#7107#7133::Float64
  ########_var0#7099#7103#7108#7134::Tuple{}
  ##a1#7135::Float64
  ##a2#7136::Float64
  ##div_a#7137::Float64
  ####afactor#7119#7138::Float64
  ####bfactor#7120#7139::Float64
  ########a#7109#7113#7121#7140::Tuple{}
  ########b#7110#7114#7122#7141::Tuple{}
  ########afactor#7111#7115#7123#7142::Float64
  ########bfactor#7112#7116#7124#7143::Float64
  ######_var0#7117#7125#7144::Tuple{}
  ######types#7118#7126#7145::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(8) = (Distributions.mean)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7127 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,1.5,0)::Float64
      ##exp_a#7128 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,1.5)))::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,GenSym(4),0)::Float64
      ##deriv#7129 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,GenSym(4))))::Float64))
      ####G#7104#7130 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7108#7134 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7108#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7128::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7135 = GenSym(10)
      ##a2#7136 = GenSym(11)
      ##div_a#7137 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7135::Float64,##a2#7136::Float64))
      ####afactor#7119#7138 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7136::Float64))
      ####bfactor#7120#7139 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7135::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7136::Float64,##a2#7136::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7117#7125#7144 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7117#7125#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7137::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7127::Float64
  ##exp_a#7128::Float64
  ##deriv#7129::Float64
  ####G#7104#7130::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7105#7131::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7106#7132::Tuple{}
  ##########x#7096#7098#7102#7107#7133::Float64
  ########_var0#7099#7103#7108#7134::Tuple{}
  ##a1#7135::Float64
  ##a2#7136::Float64
  ##div_a#7137::Float64
  ####afactor#7119#7138::Float64
  ####bfactor#7120#7139::Float64
  ########a#7109#7113#7121#7140::Tuple{}
  ########b#7110#7114#7122#7141::Tuple{}
  ########afactor#7111#7115#7123#7142::Float64
  ########bfactor#7112#7116#7124#7143::Float64
  ######_var0#7117#7125#7144::Tuple{}
  ######types#7118#7126#7145::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 59:
      GenSym(8) = (Distributions.mean)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7127 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,1.5,0)::Float64
      ##exp_a#7128 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,1.5)))::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7127::Float64,0,GenSym(4),0)::Float64
      ##deriv#7129 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(##a#7127::Float64,GenSym(4))))::Float64))
      ####G#7104#7130 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7108#7134 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7108#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7128::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7135 = GenSym(10)
      ##a2#7136 = GenSym(11)
      ##div_a#7137 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7135::Float64,##a2#7136::Float64))
      ####afactor#7119#7138 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7136::Float64))
      ####bfactor#7120#7139 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7135::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7136::Float64,##a2#7136::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7117#7125#7144 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7117#7125#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7137::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7153::Float64
  ##div_a#7154::Float64
  ##deriv#7155::Float64
  ####G#7148#7156::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7149#7157::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7150#7158::Tuple{}
  ##########x#7096#7098#7102#7151#7159::Float64
  ########_var0#7099#7103#7152#7160::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7153 = (top(getfield))(GenSym(0),:value)::Float64
      ##div_a#7154 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7153::Float64))
      ##deriv#7155 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7154::Float64,##a#7153::Float64))))
      ####G#7148#7156 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7152#7160 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7152#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7154::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64,(top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7153::Float64
  ##div_a#7154::Float64
  ##deriv#7155::Float64
  ####G#7148#7156::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7149#7157::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7150#7158::Tuple{}
  ##########x#7096#7098#7102#7151#7159::Float64
  ########_var0#7099#7103#7152#7160::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7153 = (top(getfield))(GenSym(0),:value)::Float64
      ##div_a#7154 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7153::Float64))
      ##deriv#7155 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7154::Float64,##a#7153::Float64))))
      ####G#7148#7156 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7152#7160 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7152#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7154::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7153::Float64
  ##div_a#7154::Float64
  ##deriv#7155::Float64
  ####G#7148#7156::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7149#7157::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7150#7158::Tuple{}
  ##########x#7096#7098#7102#7151#7159::Float64
  ########_var0#7099#7103#7152#7160::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7153 = (top(getfield))(GenSym(0),:value)::Float64
      ##div_a#7154 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7153::Float64))
      ##deriv#7155 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7154::Float64,##a#7153::Float64))))
      ####G#7148#7156 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7152#7160 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7152#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7154::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7153::Float64
  ##div_a#7154::Float64
  ##deriv#7155::Float64
  ####G#7148#7156::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7149#7157::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7150#7158::Tuple{}
  ##########x#7096#7098#7102#7151#7159::Float64
  ########_var0#7099#7103#7152#7160::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7153 = (top(getfield))(GenSym(0),:value)::Float64
      ##div_a#7154 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7153::Float64))
      ##deriv#7155 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7154::Float64,##a#7153::Float64))))
      ####G#7148#7156 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7152#7160 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7152#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7154::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7153::Float64
  ##div_a#7154::Float64
  ##deriv#7155::Float64
  ####G#7148#7156::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7149#7157::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7150#7158::Tuple{}
  ##########x#7096#7098#7102#7151#7159::Float64
  ########_var0#7099#7103#7152#7160::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 61:
      GenSym(0) = (Distributions.var)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7153 = (top(getfield))(GenSym(0),:value)::Float64
      ##div_a#7154 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7153::Float64))
      ##deriv#7155 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7154::Float64,##a#7153::Float64))))
      ####G#7148#7156 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7152#7160 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7099#7103#7152#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7154::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(41) = call(Distributions.Poisson,(top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64)::Distributions.Poisson{Float64}
      GenSym(81) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(41),:λ)::Float64,0)::Float64
      GenSym(0) = call(Distributions.Poisson,(top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64)::Distributions.Poisson{Float64}
      GenSym(40) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:λ)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(81))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(40)))))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(42) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(42))::Bool)) goto 4
      GenSym(43) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(43))))::UNION{}
      4: 
      GenSym(83) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))($(Expr(:new, Distributions.Poisson{Float64}, GenSym(42))),:λ)::Float64,0)::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(0))::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(41) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))($(Expr(:new, Distributions.Poisson{Float64}, GenSym(0))),:λ)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(83))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(41)))))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(3) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool)) goto 4
      GenSym(4) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(4))))::UNION{}
      4: 
      GenSym(5) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(3))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64)::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(2) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(0))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(5))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(2)))))
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(42) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(42))::Bool)) goto 4
      GenSym(43) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(43))))::UNION{}
      4: 
      GenSym(83) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))($(Expr(:new, Distributions.Poisson{Float64}, GenSym(42))),:λ)::Float64,0)::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(0))::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(41) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))($(Expr(:new, Distributions.Poisson{Float64}, GenSym(0))),:λ)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(83))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(41)))))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(42) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(42))::Bool)) goto 4
      GenSym(43) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(43))))::UNION{}
      4: 
      GenSym(83) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))($(Expr(:new, Distributions.Poisson{Float64}, GenSym(42))),:λ)::Float64,0)::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(0))::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(41) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))($(Expr(:new, Distributions.Poisson{Float64}, GenSym(0))),:λ)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(83))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(41)))))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(3) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool)) goto 4
      GenSym(4) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(4))))::UNION{}
      4: 
      GenSym(5) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(3))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64)::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(2) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(0))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(5))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(2)))))
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(3) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool)) goto 4
      GenSym(4) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(4))))::UNION{}
      4: 
      GenSym(5) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(3))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64)::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(2) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(0))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(5))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(2)))))
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(3) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool)) goto 4
      GenSym(4) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(4))))::UNION{}
      4: 
      GenSym(5) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(3))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64)::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(2) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(0))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(5))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(2)))))
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 85:
      GenSym(3) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool)) goto 4
      GenSym(4) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(4))))::UNION{}
      4: 
      GenSym(5) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(3))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      GenSym(0) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.le_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64)::Bool)) goto 1
      GenSym(1) = (Distributions.string)("Poisson",": the condition ","λ >= zero(λ)"," is not satisfied.")::UTF8String
      (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:ArgumentError)::Type{ArgumentError}), GenSym(1))))::UNION{}
      1: 
      GenSym(2) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))($(Expr(:new, Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, GenSym(0))),:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.sub_int)((Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(5))),(Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(2)))))
  end::Int64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Skellam{Int64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Skellam{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      return (Distributions.exp)((Distributions.logpdf)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ANY)::ANY
  end::ANY

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Skellam{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Skellam{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      return (Distributions.exp)((Distributions.logpdf)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ANY)::ANY
  end::ANY

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      return (Distributions.exp)((Distributions.logpdf)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ANY)::ANY
  end::ANY

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      return (Distributions.exp)((Distributions.logpdf)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ANY)::ANY
  end::ANY

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 71:
      return (Distributions.exp)((Distributions.logpdf)(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ANY)::ANY
  end::ANY




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}
  t::Int64
  μ1::Int64
  μ2::Int64
  #s25::Int64
  ##xs#7286::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)((Base.box)(Base.Int,(Base.add_int)(μ1::Int64,μ2::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,μ1::Int64)),GenSym(6))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,μ2::Int64)),GenSym(4))))),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}
  t::Int64
  μ1::Float64
  μ2::Float64
  #s25::Int64
  ##xs#7287::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)(μ1::Float64,μ2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,GenSym(6))))),(Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,GenSym(4))))),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7095#7198#7299::Tuple{}
  ######x#7096#7199#7300::Float64
  ####_var0#7200#7301::Tuple{}
  ######types#7197#7201#7302::Tuple{Type{Float64}}
  ######tup#7095#7198#7303::Tuple{}
  ######x#7096#7199#7304::Float64
  ####_var0#7200#7305::Tuple{}
  ######types#7197#7201#7306::Tuple{Type{Float64}}
  ######a#7077#7079#7307::Tuple{}
  ######b#7078#7080#7308::Tuple{}
  ####_var0#7081#7309::Tuple{}
  ######tup#7189#7190#7310::Tuple{}
  ####_var0#7191#7311::Tuple{}
  ##xs#7312::Tuple{}
  ########a#7077#7079#7288#7313::Tuple{}
  ########b#7078#7080#7289#7314::Tuple{}
  ######_var0#7081#7290#7315::Tuple{}
  ########a#7077#7079#7291#7316::Tuple{}
  ########b#7078#7080#7292#7317::Tuple{}
  ######_var0#7081#7293#7318::Tuple{}
  ##exp_a#7319::Float64
  ####G#7294#7320::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7295#7321::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7296#7322::Tuple{}
  ##########x#7096#7098#7102#7297#7323::Float64
  ########_var0#7099#7103#7298#7324::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7081#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7311 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7191#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7305 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7200#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7301 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7200#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7290#7315 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7081#7290#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7293#7318 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7293#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7319 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(6)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7294#7320 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7298#7324 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7099#7103#7298#7324 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7319::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}
  t::Int64
  μ1::Float64
  μ2::Float64
  #s25::Int64
  ##xs#7287::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)(μ1::Float64,μ2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,GenSym(6))))),(Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,GenSym(4))))),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}
  t::Int64
  μ1::Float64
  μ2::Float64
  #s25::Int64
  ##xs#7287::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)(μ1::Float64,μ2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,GenSym(6))))),(Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,GenSym(4))))),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7095#7198#7299::Tuple{}
  ######x#7096#7199#7300::Float64
  ####_var0#7200#7301::Tuple{}
  ######types#7197#7201#7302::Tuple{Type{Float64}}
  ######tup#7095#7198#7303::Tuple{}
  ######x#7096#7199#7304::Float64
  ####_var0#7200#7305::Tuple{}
  ######types#7197#7201#7306::Tuple{Type{Float64}}
  ######a#7077#7079#7307::Tuple{}
  ######b#7078#7080#7308::Tuple{}
  ####_var0#7081#7309::Tuple{}
  ######tup#7189#7190#7310::Tuple{}
  ####_var0#7191#7311::Tuple{}
  ##xs#7312::Tuple{}
  ########a#7077#7079#7288#7313::Tuple{}
  ########b#7078#7080#7289#7314::Tuple{}
  ######_var0#7081#7290#7315::Tuple{}
  ########a#7077#7079#7291#7316::Tuple{}
  ########b#7078#7080#7292#7317::Tuple{}
  ######_var0#7081#7293#7318::Tuple{}
  ##exp_a#7319::Float64
  ####G#7294#7320::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7295#7321::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7296#7322::Tuple{}
  ##########x#7096#7098#7102#7297#7323::Float64
  ########_var0#7099#7103#7298#7324::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7081#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7311 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7191#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7305 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7200#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7301 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7200#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7290#7315 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7081#7290#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7293#7318 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7293#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7319 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(6)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7294#7320 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7298#7324 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7099#7103#7298#7324 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7319::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7095#7198#7299::Tuple{}
  ######x#7096#7199#7300::Float64
  ####_var0#7200#7301::Tuple{}
  ######types#7197#7201#7302::Tuple{Type{Float64}}
  ######tup#7095#7198#7303::Tuple{}
  ######x#7096#7199#7304::Float64
  ####_var0#7200#7305::Tuple{}
  ######types#7197#7201#7306::Tuple{Type{Float64}}
  ######a#7077#7079#7307::Tuple{}
  ######b#7078#7080#7308::Tuple{}
  ####_var0#7081#7309::Tuple{}
  ######tup#7189#7190#7310::Tuple{}
  ####_var0#7191#7311::Tuple{}
  ##xs#7312::Tuple{}
  ########a#7077#7079#7288#7313::Tuple{}
  ########b#7078#7080#7289#7314::Tuple{}
  ######_var0#7081#7290#7315::Tuple{}
  ########a#7077#7079#7291#7316::Tuple{}
  ########b#7078#7080#7292#7317::Tuple{}
  ######_var0#7081#7293#7318::Tuple{}
  ##exp_a#7319::Float64
  ####G#7294#7320::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7295#7321::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7296#7322::Tuple{}
  ##########x#7096#7098#7102#7297#7323::Float64
  ########_var0#7099#7103#7298#7324::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7081#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7311 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7191#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7305 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7200#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7301 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7200#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7290#7315 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7081#7290#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7293#7318 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7293#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7319 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(6)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7294#7320 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7298#7324 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7099#7103#7298#7324 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7319::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7095#7198#7299::Tuple{}
  ######x#7096#7199#7300::Float64
  ####_var0#7200#7301::Tuple{}
  ######types#7197#7201#7302::Tuple{Type{Float64}}
  ######tup#7095#7198#7303::Tuple{}
  ######x#7096#7199#7304::Float64
  ####_var0#7200#7305::Tuple{}
  ######types#7197#7201#7306::Tuple{Type{Float64}}
  ######a#7077#7079#7307::Tuple{}
  ######b#7078#7080#7308::Tuple{}
  ####_var0#7081#7309::Tuple{}
  ######tup#7189#7190#7310::Tuple{}
  ####_var0#7191#7311::Tuple{}
  ##xs#7312::Tuple{}
  ########a#7077#7079#7288#7313::Tuple{}
  ########b#7078#7080#7289#7314::Tuple{}
  ######_var0#7081#7290#7315::Tuple{}
  ########a#7077#7079#7291#7316::Tuple{}
  ########b#7078#7080#7292#7317::Tuple{}
  ######_var0#7081#7293#7318::Tuple{}
  ##exp_a#7319::Float64
  ####G#7294#7320::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7295#7321::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7296#7322::Tuple{}
  ##########x#7096#7098#7102#7297#7323::Float64
  ########_var0#7099#7103#7298#7324::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7081#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7311 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7191#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7305 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7200#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7301 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7200#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7290#7315 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7081#7290#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7293#7318 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7293#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7319 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(6)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7294#7320 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7298#7324 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7099#7103#7298#7324 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7319::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7095#7198#7299::Tuple{}
  ######x#7096#7199#7300::Float64
  ####_var0#7200#7301::Tuple{}
  ######types#7197#7201#7302::Tuple{Type{Float64}}
  ######tup#7095#7198#7303::Tuple{}
  ######x#7096#7199#7304::Float64
  ####_var0#7200#7305::Tuple{}
  ######types#7197#7201#7306::Tuple{Type{Float64}}
  ######a#7077#7079#7307::Tuple{}
  ######b#7078#7080#7308::Tuple{}
  ####_var0#7081#7309::Tuple{}
  ######tup#7189#7190#7310::Tuple{}
  ####_var0#7191#7311::Tuple{}
  ##xs#7312::Tuple{}
  ########a#7077#7079#7288#7313::Tuple{}
  ########b#7078#7080#7289#7314::Tuple{}
  ######_var0#7081#7290#7315::Tuple{}
  ########a#7077#7079#7291#7316::Tuple{}
  ########b#7078#7080#7292#7317::Tuple{}
  ######_var0#7081#7293#7318::Tuple{}
  ##exp_a#7319::Float64
  ####G#7294#7320::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7094#7100#7295#7321::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7095#7097#7101#7296#7322::Tuple{}
  ##########x#7096#7098#7102#7297#7323::Float64
  ########_var0#7099#7103#7298#7324::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 74:
      GenSym(8) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 75:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7081#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7311 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7191#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7305 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7200#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7200#7301 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7200#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7290#7315 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7081#7290#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7293#7318 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7293#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7319 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(6)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7294#7320 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7099#7103#7298#7324 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7099#7103#7298#7324 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7319::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Skellam{Int64}
  t::Int64
  μ1::Int64
  μ2::Int64
  #s25::Int64
  ##xs#7327::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(21) = (top(getfield))(d::Distributions.Skellam{Int64},:μ1)::Int64
      GenSym(22) = (top(getfield))(d::Distributions.Skellam{Int64},:μ2)::Int64
      #s25 = 1
      GenSym(23) = GenSym(21)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,μ1::Int64)),(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,μ1::Int64)),(top(getfield))(GenSym(17),:im)::Float64)))))
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,μ2::Int64)),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,μ2::Int64)),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(20) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)((Base.box)(Base.Int,(Base.add_int)(μ1::Int64,μ2::Int64)))))),(top(getfield))(GenSym(19),:re)::Float64))), :((top(getfield))(GenSym(19),:im)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:re)::Float64,(top(getfield))(GenSym(18),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:im)::Float64,(top(getfield))(GenSym(18),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Skellam{Float64}
  t::Int64
  μ1::Float64
  μ2::Float64
  #s25::Int64
  ##xs#7328::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(21) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      #s25 = 1
      GenSym(23) = GenSym(21)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,(top(getfield))(GenSym(17),:im)::Float64)))))
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(20) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)(μ1::Float64,μ2::Float64)))),(top(getfield))(GenSym(19),:re)::Float64))), :((top(getfield))(GenSym(19),:im)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:re)::Float64,(top(getfield))(GenSym(18),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:im)::Float64,(top(getfield))(GenSym(18),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7077#7079#7403::Tuple{}
  ######b#7078#7080#7404::Tuple{}
  ####_var0#7081#7405::Tuple{}
  ######tup#7189#7190#7406::Tuple{}
  ####_var0#7191#7407::Tuple{}
  ##xs#7408::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(19) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(20) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7405 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7405 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7407 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7191#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(13) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(10) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(12) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      GenSym(16) = μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64), :((Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(17) = μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(18) = ($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + GenSym(16))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} + GenSym(17)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return (Distributions.exp)(GenSym(18))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Skellam{Float64}
  t::Int64
  μ1::Float64
  μ2::Float64
  #s25::Int64
  ##xs#7328::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(21) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      #s25 = 1
      GenSym(23) = GenSym(21)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,(top(getfield))(GenSym(17),:im)::Float64)))))
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(20) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)(μ1::Float64,μ2::Float64)))),(top(getfield))(GenSym(19),:re)::Float64))), :((top(getfield))(GenSym(19),:im)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:re)::Float64,(top(getfield))(GenSym(18),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:im)::Float64,(top(getfield))(GenSym(18),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Skellam{Float64}
  t::Int64
  μ1::Float64
  μ2::Float64
  #s25::Int64
  ##xs#7328::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(21) = (top(getfield))(d::Distributions.Skellam{Float64},:μ1)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.Skellam{Float64},:μ2)::Float64
      #s25 = 1
      GenSym(23) = GenSym(21)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(μ1::Float64,(top(getfield))(GenSym(17),:im)::Float64)))))
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(μ2::Float64,(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(20) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)(μ1::Float64,μ2::Float64)))),(top(getfield))(GenSym(19),:re)::Float64))), :((top(getfield))(GenSym(19),:im)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:re)::Float64,(top(getfield))(GenSym(18),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:im)::Float64,(top(getfield))(GenSym(18),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7077#7079#7403::Tuple{}
  ######b#7078#7080#7404::Tuple{}
  ####_var0#7081#7405::Tuple{}
  ######tup#7189#7190#7406::Tuple{}
  ####_var0#7191#7407::Tuple{}
  ##xs#7408::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(19) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(20) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7405 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7405 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7407 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7191#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(13) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(10) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(12) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      GenSym(16) = μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64), :((Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(17) = μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(18) = ($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + GenSym(16))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} + GenSym(17)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return (Distributions.exp)(GenSym(18))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7077#7079#7403::Tuple{}
  ######b#7078#7080#7404::Tuple{}
  ####_var0#7081#7405::Tuple{}
  ######tup#7189#7190#7406::Tuple{}
  ####_var0#7191#7407::Tuple{}
  ##xs#7408::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(19) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(20) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7405 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7405 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7407 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7191#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(13) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(10) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(12) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      GenSym(16) = μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64), :((Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(17) = μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(18) = ($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + GenSym(16))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} + GenSym(17)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return (Distributions.exp)(GenSym(18))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7077#7079#7403::Tuple{}
  ######b#7078#7080#7404::Tuple{}
  ####_var0#7081#7405::Tuple{}
  ######tup#7189#7190#7406::Tuple{}
  ####_var0#7191#7407::Tuple{}
  ##xs#7408::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(19) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(20) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7405 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7405 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7407 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7191#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(13) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(10) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(12) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      GenSym(16) = μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64), :((Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(17) = μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(18) = ($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + GenSym(16))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} + GenSym(17)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return (Distributions.exp)(GenSym(18))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7077#7079#7403::Tuple{}
  ######b#7078#7080#7404::Tuple{}
  ####_var0#7081#7405::Tuple{}
  ######tup#7189#7190#7406::Tuple{}
  ####_var0#7191#7407::Tuple{}
  ##xs#7408::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 79:
      GenSym(19) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(20) = (top(getfield))(d::Distributions.Skellam{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ1 = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      μ2 = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/skellam.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7405 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7405 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7191#7407 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7191#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(13) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(10) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(12) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      GenSym(16) = μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64), :((Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(9) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(17) = μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(18) = ($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(μ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + GenSym(16))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} + GenSym(17)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return (Distributions.exp)(GenSym(18))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




