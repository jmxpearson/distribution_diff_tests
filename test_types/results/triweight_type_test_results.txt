____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7128::Float64
  ##exp_a#7129::Float64
  ##deriv#7130::Float64
  ####G#7116#7131::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7132::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7133::Tuple{}
  ##########x#7108#7110#7114#7119#7134::Float64
  ########_var0#7111#7115#7120#7135::Tuple{}
  ##div_a#7136::Float64
  ######tup#7121#7124#7137::Tuple{}
  ######x#7122#7125#7138::Float64
  ####_var0#7126#7139::Tuple{}
  ######types#7123#7127#7140::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7128 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7129 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7130 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7116#7131 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7135 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7111#7115#7120#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7129::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7136 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7126#7139 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7126#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7136::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7128::Float64
  ##exp_a#7129::Float64
  ##deriv#7130::Float64
  ####G#7116#7131::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7132::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7133::Tuple{}
  ##########x#7108#7110#7114#7119#7134::Float64
  ########_var0#7111#7115#7120#7135::Tuple{}
  ##div_a#7136::Float64
  ######tup#7121#7124#7137::Tuple{}
  ######x#7122#7125#7138::Float64
  ####_var0#7126#7139::Tuple{}
  ######types#7123#7127#7140::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7128 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7129 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7130 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7116#7131 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7135 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7111#7115#7120#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7129::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7136 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7126#7139 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7126#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7136::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7128::Float64
  ##exp_a#7129::Float64
  ##deriv#7130::Float64
  ####G#7116#7131::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7132::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7133::Tuple{}
  ##########x#7108#7110#7114#7119#7134::Float64
  ########_var0#7111#7115#7120#7135::Tuple{}
  ##div_a#7136::Float64
  ######tup#7121#7124#7137::Tuple{}
  ######x#7122#7125#7138::Float64
  ####_var0#7126#7139::Tuple{}
  ######types#7123#7127#7140::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7128 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7129 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7130 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7116#7131 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7135 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7111#7115#7120#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7129::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7136 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7126#7139 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7126#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7136::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7128::Float64
  ##exp_a#7129::Float64
  ##deriv#7130::Float64
  ####G#7116#7131::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7132::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7133::Tuple{}
  ##########x#7108#7110#7114#7119#7134::Float64
  ########_var0#7111#7115#7120#7135::Tuple{}
  ##div_a#7136::Float64
  ######tup#7121#7124#7137::Tuple{}
  ######x#7122#7125#7138::Float64
  ####_var0#7126#7139::Tuple{}
  ######types#7123#7127#7140::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7128 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7129 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7130 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7116#7131 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7135 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7111#7115#7120#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7129::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7136 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7126#7139 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7126#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7136::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7128::Float64
  ##exp_a#7129::Float64
  ##deriv#7130::Float64
  ####G#7116#7131::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7132::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7133::Tuple{}
  ##########x#7108#7110#7114#7119#7134::Float64
  ########_var0#7111#7115#7120#7135::Tuple{}
  ##div_a#7136::Float64
  ######tup#7121#7124#7137::Tuple{}
  ######x#7122#7125#7138::Float64
  ####_var0#7126#7139::Tuple{}
  ######types#7123#7127#7140::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7128 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7129 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7130 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7128::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7116#7131 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7135 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7111#7115#7120#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7129::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7136 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7126#7139 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7126#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7136::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7151#7155#7159::Tuple{}
  ########x#7108#7152#7156#7160::Float64
  ######_var0#7153#7157#7161::Tuple{}
  ########types#7123#7154#7158#7162::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7161 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7153#7157#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7151#7155#7159::Tuple{}
  ########x#7108#7152#7156#7160::Float64
  ######_var0#7153#7157#7161::Tuple{}
  ########types#7123#7154#7158#7162::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7161 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7153#7157#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7151#7155#7159::Tuple{}
  ########x#7108#7152#7156#7160::Float64
  ######_var0#7153#7157#7161::Tuple{}
  ########types#7123#7154#7158#7162::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7161 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7153#7157#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7151#7155#7159::Tuple{}
  ########x#7108#7152#7156#7160::Float64
  ######_var0#7153#7157#7161::Tuple{}
  ########types#7123#7154#7158#7162::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7161 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7153#7157#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7107#7151#7155#7159::Tuple{}
  ########x#7108#7152#7156#7160::Float64
  ######_var0#7153#7157#7161::Tuple{}
  ########types#7123#7154#7158#7162::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7161 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7153#7157#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7165#7171::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7172::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7171 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7171 = false
      2: 
      ####_var0#7165#7171::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7172 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7172::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7165#7171::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7172::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7171 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7171 = false
      2: 
      ####_var0#7165#7171::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7172 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7172::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7165#7411::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7412::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7411 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7411 = false
      2: 
      ####_var0#7165#7411::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7412 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7412::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7165#7171::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7172::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7171 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7171 = false
      2: 
      ####_var0#7165#7171::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7172 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7172::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7165#7171::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7172::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7171 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7171 = false
      2: 
      ####_var0#7165#7171::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7172 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7172::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7165#7411::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7412::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7411 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7411 = false
      2: 
      ####_var0#7165#7411::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7412 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7412::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7165#7411::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7412::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7411 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7411 = false
      2: 
      ####_var0#7165#7411::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7412 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7412::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7165#7411::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7412::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7411 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7411 = false
      2: 
      ####_var0#7165#7411::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7412 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7412::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7165#7411::UNION{BOOL,INT64}
  ########_var0#7163#7164#7166#7412::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7165#7411 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7165#7411 = false
      2: 
      ####_var0#7165#7411::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7163#7164#7166#7412 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7163#7164#7166#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7163#7164#7166#7412::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7413::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7413 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7413::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7413::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7413::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7413 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7413::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7413::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7314#7322#7414::Tuple{}
  ####_var0#7323#7415::Tuple{}
  ######types#7245#7324#7416::Tuple{Type{Int64}}
  ########tup#7314#7318#7320#7417::Tuple{}
  ######_var0#7319#7321#7418::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7419::Float64
  ##a2#7420::Float64
  ##div_a#7421::Float64
  ####afactor#7188#7422::Float64
  ####bfactor#7189#7423::Float64
  ########a#7178#7182#7190#7424::Tuple{}
  ########b#7179#7183#7191#7425::Tuple{}
  ########afactor#7180#7184#7192#7426::Float64
  ########bfactor#7181#7185#7193#7427::Float64
  ######_var0#7186#7194#7428::Tuple{}
  ######types#7187#7195#7429::Tuple{Type{Float64}}
  ######fx#7197#7198#7430::Float64
  ##a1#7431::Float64
  ##a2#7432::Float64
  ######a#7178#7206#7433::Tuple{}
  ######b#7179#7207#7434::Tuple{}
  ######afactor#7180#7208#7435::Float64
  ######bfactor#7181#7209#7436::Float64
  ####_var0#7210#7437::Tuple{}
  ######tup#7314#7322#7438::Tuple{}
  ####_var0#7323#7439::Tuple{}
  ######types#7245#7324#7440::Tuple{Type{Int64}}
  ##a#7441::Float64
  ##exp_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7116#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7446::Tuple{}
  ##########x#7108#7110#7114#7119#7447::Float64
  ########_var0#7111#7115#7120#7448::Tuple{}
  ########tup#7107#7151#7155#7449::Tuple{}
  ########x#7108#7152#7156#7450::Float64
  ######_var0#7153#7157#7451::Tuple{}
  ########types#7123#7154#7158#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ##div_a#7455::Float64
  ####afactor#7188#7456::Float64
  ####bfactor#7189#7457::Float64
  ########a#7178#7182#7190#7458::Tuple{}
  ########b#7179#7183#7191#7459::Tuple{}
  ########afactor#7180#7184#7192#7460::Float64
  ########bfactor#7181#7185#7193#7461::Float64
  ######_var0#7186#7194#7462::Tuple{}
  ######types#7187#7195#7463::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7323#7415 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7323#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7319#7321#7418 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7319#7321#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7419 = GenSym(2)
      ##a2#7420 = GenSym(3)
      ##div_a#7421 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7419::Float64,##a2#7420::Float64))
      ####afactor#7188#7422 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7420::Float64))
      ####bfactor#7189#7423 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7419::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7420::Float64,##a2#7420::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7428 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7186#7194#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7421::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7197#7198#7430 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7197#7198#7430::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7431 = GenSym(5)
      ##a2#7432 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7210#7437 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7210#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7431::Float64,##a2#7432::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7323#7439 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7323#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7441 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7116#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7448 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7111#7115#7120#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7451 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7153#7157#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7453 = GenSym(9)
      ##a2#7454 = GenSym(10)
      ##div_a#7455 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7453::Float64,##a2#7454::Float64))
      ####afactor#7188#7456 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7454::Float64))
      ####bfactor#7189#7457 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7453::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7454::Float64,##a2#7454::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7462 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7186#7194#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7413::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7413 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7413::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7413::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7413::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7413 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7413::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7413::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7413::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7314#7322#7414::Tuple{}
  ####_var0#7323#7415::Tuple{}
  ######types#7245#7324#7416::Tuple{Type{Int64}}
  ########tup#7314#7318#7320#7417::Tuple{}
  ######_var0#7319#7321#7418::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7419::Float64
  ##a2#7420::Float64
  ##div_a#7421::Float64
  ####afactor#7188#7422::Float64
  ####bfactor#7189#7423::Float64
  ########a#7178#7182#7190#7424::Tuple{}
  ########b#7179#7183#7191#7425::Tuple{}
  ########afactor#7180#7184#7192#7426::Float64
  ########bfactor#7181#7185#7193#7427::Float64
  ######_var0#7186#7194#7428::Tuple{}
  ######types#7187#7195#7429::Tuple{Type{Float64}}
  ######fx#7197#7198#7430::Float64
  ##a1#7431::Float64
  ##a2#7432::Float64
  ######a#7178#7206#7433::Tuple{}
  ######b#7179#7207#7434::Tuple{}
  ######afactor#7180#7208#7435::Float64
  ######bfactor#7181#7209#7436::Float64
  ####_var0#7210#7437::Tuple{}
  ######tup#7314#7322#7438::Tuple{}
  ####_var0#7323#7439::Tuple{}
  ######types#7245#7324#7440::Tuple{Type{Int64}}
  ##a#7441::Float64
  ##exp_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7116#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7446::Tuple{}
  ##########x#7108#7110#7114#7119#7447::Float64
  ########_var0#7111#7115#7120#7448::Tuple{}
  ########tup#7107#7151#7155#7449::Tuple{}
  ########x#7108#7152#7156#7450::Float64
  ######_var0#7153#7157#7451::Tuple{}
  ########types#7123#7154#7158#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ##div_a#7455::Float64
  ####afactor#7188#7456::Float64
  ####bfactor#7189#7457::Float64
  ########a#7178#7182#7190#7458::Tuple{}
  ########b#7179#7183#7191#7459::Tuple{}
  ########afactor#7180#7184#7192#7460::Float64
  ########bfactor#7181#7185#7193#7461::Float64
  ######_var0#7186#7194#7462::Tuple{}
  ######types#7187#7195#7463::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7323#7415 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7323#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7319#7321#7418 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7319#7321#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7419 = GenSym(2)
      ##a2#7420 = GenSym(3)
      ##div_a#7421 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7419::Float64,##a2#7420::Float64))
      ####afactor#7188#7422 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7420::Float64))
      ####bfactor#7189#7423 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7419::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7420::Float64,##a2#7420::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7428 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7186#7194#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7421::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7197#7198#7430 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7197#7198#7430::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7431 = GenSym(5)
      ##a2#7432 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7210#7437 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7210#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7431::Float64,##a2#7432::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7323#7439 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7323#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7441 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7116#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7448 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7111#7115#7120#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7451 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7153#7157#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7453 = GenSym(9)
      ##a2#7454 = GenSym(10)
      ##div_a#7455 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7453::Float64,##a2#7454::Float64))
      ####afactor#7188#7456 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7454::Float64))
      ####bfactor#7189#7457 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7453::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7454::Float64,##a2#7454::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7462 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7186#7194#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7314#7322#7414::Tuple{}
  ####_var0#7323#7415::Tuple{}
  ######types#7245#7324#7416::Tuple{Type{Int64}}
  ########tup#7314#7318#7320#7417::Tuple{}
  ######_var0#7319#7321#7418::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7419::Float64
  ##a2#7420::Float64
  ##div_a#7421::Float64
  ####afactor#7188#7422::Float64
  ####bfactor#7189#7423::Float64
  ########a#7178#7182#7190#7424::Tuple{}
  ########b#7179#7183#7191#7425::Tuple{}
  ########afactor#7180#7184#7192#7426::Float64
  ########bfactor#7181#7185#7193#7427::Float64
  ######_var0#7186#7194#7428::Tuple{}
  ######types#7187#7195#7429::Tuple{Type{Float64}}
  ######fx#7197#7198#7430::Float64
  ##a1#7431::Float64
  ##a2#7432::Float64
  ######a#7178#7206#7433::Tuple{}
  ######b#7179#7207#7434::Tuple{}
  ######afactor#7180#7208#7435::Float64
  ######bfactor#7181#7209#7436::Float64
  ####_var0#7210#7437::Tuple{}
  ######tup#7314#7322#7438::Tuple{}
  ####_var0#7323#7439::Tuple{}
  ######types#7245#7324#7440::Tuple{Type{Int64}}
  ##a#7441::Float64
  ##exp_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7116#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7446::Tuple{}
  ##########x#7108#7110#7114#7119#7447::Float64
  ########_var0#7111#7115#7120#7448::Tuple{}
  ########tup#7107#7151#7155#7449::Tuple{}
  ########x#7108#7152#7156#7450::Float64
  ######_var0#7153#7157#7451::Tuple{}
  ########types#7123#7154#7158#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ##div_a#7455::Float64
  ####afactor#7188#7456::Float64
  ####bfactor#7189#7457::Float64
  ########a#7178#7182#7190#7458::Tuple{}
  ########b#7179#7183#7191#7459::Tuple{}
  ########afactor#7180#7184#7192#7460::Float64
  ########bfactor#7181#7185#7193#7461::Float64
  ######_var0#7186#7194#7462::Tuple{}
  ######types#7187#7195#7463::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7323#7415 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7323#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7319#7321#7418 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7319#7321#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7419 = GenSym(2)
      ##a2#7420 = GenSym(3)
      ##div_a#7421 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7419::Float64,##a2#7420::Float64))
      ####afactor#7188#7422 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7420::Float64))
      ####bfactor#7189#7423 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7419::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7420::Float64,##a2#7420::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7428 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7186#7194#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7421::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7197#7198#7430 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7197#7198#7430::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7431 = GenSym(5)
      ##a2#7432 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7210#7437 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7210#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7431::Float64,##a2#7432::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7323#7439 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7323#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7441 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7116#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7448 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7111#7115#7120#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7451 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7153#7157#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7453 = GenSym(9)
      ##a2#7454 = GenSym(10)
      ##div_a#7455 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7453::Float64,##a2#7454::Float64))
      ####afactor#7188#7456 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7454::Float64))
      ####bfactor#7189#7457 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7453::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7454::Float64,##a2#7454::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7462 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7186#7194#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7314#7322#7414::Tuple{}
  ####_var0#7323#7415::Tuple{}
  ######types#7245#7324#7416::Tuple{Type{Int64}}
  ########tup#7314#7318#7320#7417::Tuple{}
  ######_var0#7319#7321#7418::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7419::Float64
  ##a2#7420::Float64
  ##div_a#7421::Float64
  ####afactor#7188#7422::Float64
  ####bfactor#7189#7423::Float64
  ########a#7178#7182#7190#7424::Tuple{}
  ########b#7179#7183#7191#7425::Tuple{}
  ########afactor#7180#7184#7192#7426::Float64
  ########bfactor#7181#7185#7193#7427::Float64
  ######_var0#7186#7194#7428::Tuple{}
  ######types#7187#7195#7429::Tuple{Type{Float64}}
  ######fx#7197#7198#7430::Float64
  ##a1#7431::Float64
  ##a2#7432::Float64
  ######a#7178#7206#7433::Tuple{}
  ######b#7179#7207#7434::Tuple{}
  ######afactor#7180#7208#7435::Float64
  ######bfactor#7181#7209#7436::Float64
  ####_var0#7210#7437::Tuple{}
  ######tup#7314#7322#7438::Tuple{}
  ####_var0#7323#7439::Tuple{}
  ######types#7245#7324#7440::Tuple{Type{Int64}}
  ##a#7441::Float64
  ##exp_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7116#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7446::Tuple{}
  ##########x#7108#7110#7114#7119#7447::Float64
  ########_var0#7111#7115#7120#7448::Tuple{}
  ########tup#7107#7151#7155#7449::Tuple{}
  ########x#7108#7152#7156#7450::Float64
  ######_var0#7153#7157#7451::Tuple{}
  ########types#7123#7154#7158#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ##div_a#7455::Float64
  ####afactor#7188#7456::Float64
  ####bfactor#7189#7457::Float64
  ########a#7178#7182#7190#7458::Tuple{}
  ########b#7179#7183#7191#7459::Tuple{}
  ########afactor#7180#7184#7192#7460::Float64
  ########bfactor#7181#7185#7193#7461::Float64
  ######_var0#7186#7194#7462::Tuple{}
  ######types#7187#7195#7463::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7323#7415 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7323#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7319#7321#7418 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7319#7321#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7419 = GenSym(2)
      ##a2#7420 = GenSym(3)
      ##div_a#7421 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7419::Float64,##a2#7420::Float64))
      ####afactor#7188#7422 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7420::Float64))
      ####bfactor#7189#7423 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7419::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7420::Float64,##a2#7420::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7428 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7186#7194#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7421::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7197#7198#7430 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7197#7198#7430::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7431 = GenSym(5)
      ##a2#7432 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7210#7437 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7210#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7431::Float64,##a2#7432::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7323#7439 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7323#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7441 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7116#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7448 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7111#7115#7120#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7451 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7153#7157#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7453 = GenSym(9)
      ##a2#7454 = GenSym(10)
      ##div_a#7455 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7453::Float64,##a2#7454::Float64))
      ####afactor#7188#7456 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7454::Float64))
      ####bfactor#7189#7457 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7453::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7454::Float64,##a2#7454::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7462 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7186#7194#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7314#7322#7414::Tuple{}
  ####_var0#7323#7415::Tuple{}
  ######types#7245#7324#7416::Tuple{Type{Int64}}
  ########tup#7314#7318#7320#7417::Tuple{}
  ######_var0#7319#7321#7418::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7419::Float64
  ##a2#7420::Float64
  ##div_a#7421::Float64
  ####afactor#7188#7422::Float64
  ####bfactor#7189#7423::Float64
  ########a#7178#7182#7190#7424::Tuple{}
  ########b#7179#7183#7191#7425::Tuple{}
  ########afactor#7180#7184#7192#7426::Float64
  ########bfactor#7181#7185#7193#7427::Float64
  ######_var0#7186#7194#7428::Tuple{}
  ######types#7187#7195#7429::Tuple{Type{Float64}}
  ######fx#7197#7198#7430::Float64
  ##a1#7431::Float64
  ##a2#7432::Float64
  ######a#7178#7206#7433::Tuple{}
  ######b#7179#7207#7434::Tuple{}
  ######afactor#7180#7208#7435::Float64
  ######bfactor#7181#7209#7436::Float64
  ####_var0#7210#7437::Tuple{}
  ######tup#7314#7322#7438::Tuple{}
  ####_var0#7323#7439::Tuple{}
  ######types#7245#7324#7440::Tuple{Type{Int64}}
  ##a#7441::Float64
  ##exp_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7116#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7106#7112#7117#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7107#7109#7113#7118#7446::Tuple{}
  ##########x#7108#7110#7114#7119#7447::Float64
  ########_var0#7111#7115#7120#7448::Tuple{}
  ########tup#7107#7151#7155#7449::Tuple{}
  ########x#7108#7152#7156#7450::Float64
  ######_var0#7153#7157#7451::Tuple{}
  ########types#7123#7154#7158#7452::Tuple{Type{Float64}}
  ##a1#7453::Float64
  ##a2#7454::Float64
  ##div_a#7455::Float64
  ####afactor#7188#7456::Float64
  ####bfactor#7189#7457::Float64
  ########a#7178#7182#7190#7458::Tuple{}
  ########b#7179#7183#7191#7459::Tuple{}
  ########afactor#7180#7184#7192#7460::Float64
  ########bfactor#7181#7185#7193#7461::Float64
  ######_var0#7186#7194#7462::Tuple{}
  ######types#7187#7195#7463::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7323#7415 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7323#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7319#7321#7418 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7319#7321#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7419 = GenSym(2)
      ##a2#7420 = GenSym(3)
      ##div_a#7421 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7419::Float64,##a2#7420::Float64))
      ####afactor#7188#7422 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7420::Float64))
      ####bfactor#7189#7423 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7419::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7420::Float64,##a2#7420::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7428 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7186#7194#7428 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7421::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7197#7198#7430 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7197#7198#7430::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7197#7198#7430::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7431 = GenSym(5)
      ##a2#7432 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7210#7437 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7210#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7431::Float64,##a2#7432::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7323#7439 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7323#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7441 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7441::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7116#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7111#7115#7120#7448 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7111#7115#7120#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7451 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7153#7157#7451 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7453 = GenSym(9)
      ##a2#7454 = GenSym(10)
      ##div_a#7455 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7453::Float64,##a2#7454::Float64))
      ####afactor#7188#7456 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7454::Float64))
      ####bfactor#7189#7457 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7453::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7454::Float64,##a2#7454::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7186#7194#7462 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7186#7194#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





