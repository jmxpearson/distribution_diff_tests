____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 25:
      return (top(tuple))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 29:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,9.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 33:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,9.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 31:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 30:
      return (top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 34:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9696969696969697,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 35:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9696969696969697))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7128#7134::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7135::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7134 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7134 = false
      2: 
      ####_var0#7128#7134::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7135 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7135::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7128#7134::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7135::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7134 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7134 = false
      2: 
      ####_var0#7128#7134::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7135 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7135::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7374::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7375::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7374 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7374 = false
      2: 
      ####_var0#7128#7374::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7375 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7375::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7128#7134::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7135::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7134 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7134 = false
      2: 
      ####_var0#7128#7134::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7135 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7135::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}
  ####_var0#7128#7134::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7135::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7134 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7134 = false
      2: 
      ####_var0#7128#7134::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7135 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7135 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7135::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7374::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7375::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7374 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7374 = false
      2: 
      ####_var0#7128#7374::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7375 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7375::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7374::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7375::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7374 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7374 = false
      2: 
      ####_var0#7128#7374::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7375 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7375::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7374::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7375::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7374 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7374 = false
      2: 
      ####_var0#7128#7374::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7375 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7375::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7374::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7375::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7374 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7374 = false
      2: 
      ####_var0#7128#7374::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7375 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7375::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7376::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7376 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7376::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7376::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7376::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7376 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7376::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7376::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7277#7285#7377::Tuple{}
  ####_var0#7286#7378::Tuple{}
  ######types#7208#7287#7379::Tuple{Type{Int64}}
  ########tup#7277#7281#7283#7380::Tuple{}
  ######_var0#7282#7284#7381::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7382::Float64
  ##a2#7383::Float64
  ##div_a#7384::Float64
  ####afactor#7151#7385::Float64
  ####bfactor#7152#7386::Float64
  ########a#7141#7145#7153#7387::Tuple{}
  ########b#7142#7146#7154#7388::Tuple{}
  ########afactor#7143#7147#7155#7389::Float64
  ########bfactor#7144#7148#7156#7390::Float64
  ######_var0#7149#7157#7391::Tuple{}
  ######types#7150#7158#7392::Tuple{Type{Float64}}
  ######fx#7160#7161#7393::Float64
  ##a1#7394::Float64
  ##a2#7395::Float64
  ######a#7141#7169#7396::Tuple{}
  ######b#7142#7170#7397::Tuple{}
  ######afactor#7143#7171#7398::Float64
  ######bfactor#7144#7172#7399::Float64
  ####_var0#7173#7400::Tuple{}
  ######tup#7277#7285#7401::Tuple{}
  ####_var0#7286#7402::Tuple{}
  ######types#7208#7287#7403::Tuple{Type{Int64}}
  ##a#7404::Float64
  ##exp_a#7405::Float64
  ##deriv#7406::Float64
  ####G#7079#7407::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7408::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7409::Tuple{}
  ##########x#7071#7073#7077#7082#7410::Float64
  ########_var0#7074#7078#7083#7411::Tuple{}
  ########tup#7070#7114#7118#7412::Tuple{}
  ########x#7071#7115#7119#7413::Float64
  ######_var0#7116#7120#7414::Tuple{}
  ########types#7086#7117#7121#7415::Tuple{Type{Float64}}
  ##a1#7416::Float64
  ##a2#7417::Float64
  ##div_a#7418::Float64
  ####afactor#7151#7419::Float64
  ####bfactor#7152#7420::Float64
  ########a#7141#7145#7153#7421::Tuple{}
  ########b#7142#7146#7154#7422::Tuple{}
  ########afactor#7143#7147#7155#7423::Float64
  ########bfactor#7144#7148#7156#7424::Float64
  ######_var0#7149#7157#7425::Tuple{}
  ######types#7150#7158#7426::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7286#7378 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7286#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7282#7284#7381 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7282#7284#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7382 = GenSym(2)
      ##a2#7383 = GenSym(3)
      ##div_a#7384 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7382::Float64,##a2#7383::Float64))
      ####afactor#7151#7385 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7383::Float64))
      ####bfactor#7152#7386 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7382::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7383::Float64,##a2#7383::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7391 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7149#7157#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7384::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7160#7161#7393 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7160#7161#7393::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7394 = GenSym(5)
      ##a2#7395 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7173#7400 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7173#7400 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7394::Float64,##a2#7395::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7286#7402 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7286#7402 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7404 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7405 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7406 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7079#7407 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7411 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7083#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7414 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7116#7120#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7416 = GenSym(9)
      ##a2#7417 = GenSym(10)
      ##div_a#7418 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7416::Float64,##a2#7417::Float64))
      ####afactor#7151#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7417::Float64))
      ####bfactor#7152#7420 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7416::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7417::Float64,##a2#7417::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7425 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7149#7157#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7418::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7376::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7376 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7376::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7376::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Triweight{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7376::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Triweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      ####fx#4193#7376 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7376::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7376::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7376::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(1.09375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(top(getfield))(d::Distributions.Triweight{Float64},:σ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7277#7285#7377::Tuple{}
  ####_var0#7286#7378::Tuple{}
  ######types#7208#7287#7379::Tuple{Type{Int64}}
  ########tup#7277#7281#7283#7380::Tuple{}
  ######_var0#7282#7284#7381::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7382::Float64
  ##a2#7383::Float64
  ##div_a#7384::Float64
  ####afactor#7151#7385::Float64
  ####bfactor#7152#7386::Float64
  ########a#7141#7145#7153#7387::Tuple{}
  ########b#7142#7146#7154#7388::Tuple{}
  ########afactor#7143#7147#7155#7389::Float64
  ########bfactor#7144#7148#7156#7390::Float64
  ######_var0#7149#7157#7391::Tuple{}
  ######types#7150#7158#7392::Tuple{Type{Float64}}
  ######fx#7160#7161#7393::Float64
  ##a1#7394::Float64
  ##a2#7395::Float64
  ######a#7141#7169#7396::Tuple{}
  ######b#7142#7170#7397::Tuple{}
  ######afactor#7143#7171#7398::Float64
  ######bfactor#7144#7172#7399::Float64
  ####_var0#7173#7400::Tuple{}
  ######tup#7277#7285#7401::Tuple{}
  ####_var0#7286#7402::Tuple{}
  ######types#7208#7287#7403::Tuple{Type{Int64}}
  ##a#7404::Float64
  ##exp_a#7405::Float64
  ##deriv#7406::Float64
  ####G#7079#7407::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7408::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7409::Tuple{}
  ##########x#7071#7073#7077#7082#7410::Float64
  ########_var0#7074#7078#7083#7411::Tuple{}
  ########tup#7070#7114#7118#7412::Tuple{}
  ########x#7071#7115#7119#7413::Float64
  ######_var0#7116#7120#7414::Tuple{}
  ########types#7086#7117#7121#7415::Tuple{Type{Float64}}
  ##a1#7416::Float64
  ##a2#7417::Float64
  ##div_a#7418::Float64
  ####afactor#7151#7419::Float64
  ####bfactor#7152#7420::Float64
  ########a#7141#7145#7153#7421::Tuple{}
  ########b#7142#7146#7154#7422::Tuple{}
  ########afactor#7143#7147#7155#7423::Float64
  ########bfactor#7144#7148#7156#7424::Float64
  ######_var0#7149#7157#7425::Tuple{}
  ######types#7150#7158#7426::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7286#7378 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7286#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7282#7284#7381 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7282#7284#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7382 = GenSym(2)
      ##a2#7383 = GenSym(3)
      ##div_a#7384 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7382::Float64,##a2#7383::Float64))
      ####afactor#7151#7385 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7383::Float64))
      ####bfactor#7152#7386 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7382::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7383::Float64,##a2#7383::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7391 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7149#7157#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7384::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7160#7161#7393 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7160#7161#7393::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7394 = GenSym(5)
      ##a2#7395 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7173#7400 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7173#7400 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7394::Float64,##a2#7395::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7286#7402 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7286#7402 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7404 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7405 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7406 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7079#7407 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7411 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7083#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7414 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7116#7120#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7416 = GenSym(9)
      ##a2#7417 = GenSym(10)
      ##div_a#7418 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7416::Float64,##a2#7417::Float64))
      ####afactor#7151#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7417::Float64))
      ####bfactor#7152#7420 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7416::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7417::Float64,##a2#7417::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7425 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7149#7157#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7418::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7277#7285#7377::Tuple{}
  ####_var0#7286#7378::Tuple{}
  ######types#7208#7287#7379::Tuple{Type{Int64}}
  ########tup#7277#7281#7283#7380::Tuple{}
  ######_var0#7282#7284#7381::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7382::Float64
  ##a2#7383::Float64
  ##div_a#7384::Float64
  ####afactor#7151#7385::Float64
  ####bfactor#7152#7386::Float64
  ########a#7141#7145#7153#7387::Tuple{}
  ########b#7142#7146#7154#7388::Tuple{}
  ########afactor#7143#7147#7155#7389::Float64
  ########bfactor#7144#7148#7156#7390::Float64
  ######_var0#7149#7157#7391::Tuple{}
  ######types#7150#7158#7392::Tuple{Type{Float64}}
  ######fx#7160#7161#7393::Float64
  ##a1#7394::Float64
  ##a2#7395::Float64
  ######a#7141#7169#7396::Tuple{}
  ######b#7142#7170#7397::Tuple{}
  ######afactor#7143#7171#7398::Float64
  ######bfactor#7144#7172#7399::Float64
  ####_var0#7173#7400::Tuple{}
  ######tup#7277#7285#7401::Tuple{}
  ####_var0#7286#7402::Tuple{}
  ######types#7208#7287#7403::Tuple{Type{Int64}}
  ##a#7404::Float64
  ##exp_a#7405::Float64
  ##deriv#7406::Float64
  ####G#7079#7407::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7408::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7409::Tuple{}
  ##########x#7071#7073#7077#7082#7410::Float64
  ########_var0#7074#7078#7083#7411::Tuple{}
  ########tup#7070#7114#7118#7412::Tuple{}
  ########x#7071#7115#7119#7413::Float64
  ######_var0#7116#7120#7414::Tuple{}
  ########types#7086#7117#7121#7415::Tuple{Type{Float64}}
  ##a1#7416::Float64
  ##a2#7417::Float64
  ##div_a#7418::Float64
  ####afactor#7151#7419::Float64
  ####bfactor#7152#7420::Float64
  ########a#7141#7145#7153#7421::Tuple{}
  ########b#7142#7146#7154#7422::Tuple{}
  ########afactor#7143#7147#7155#7423::Float64
  ########bfactor#7144#7148#7156#7424::Float64
  ######_var0#7149#7157#7425::Tuple{}
  ######types#7150#7158#7426::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7286#7378 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7286#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7282#7284#7381 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7282#7284#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7382 = GenSym(2)
      ##a2#7383 = GenSym(3)
      ##div_a#7384 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7382::Float64,##a2#7383::Float64))
      ####afactor#7151#7385 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7383::Float64))
      ####bfactor#7152#7386 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7382::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7383::Float64,##a2#7383::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7391 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7149#7157#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7384::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7160#7161#7393 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7160#7161#7393::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7394 = GenSym(5)
      ##a2#7395 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7173#7400 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7173#7400 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7394::Float64,##a2#7395::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7286#7402 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7286#7402 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7404 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7405 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7406 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7079#7407 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7411 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7083#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7414 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7116#7120#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7416 = GenSym(9)
      ##a2#7417 = GenSym(10)
      ##div_a#7418 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7416::Float64,##a2#7417::Float64))
      ####afactor#7151#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7417::Float64))
      ####bfactor#7152#7420 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7416::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7417::Float64,##a2#7417::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7425 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7149#7157#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7418::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7277#7285#7377::Tuple{}
  ####_var0#7286#7378::Tuple{}
  ######types#7208#7287#7379::Tuple{Type{Int64}}
  ########tup#7277#7281#7283#7380::Tuple{}
  ######_var0#7282#7284#7381::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7382::Float64
  ##a2#7383::Float64
  ##div_a#7384::Float64
  ####afactor#7151#7385::Float64
  ####bfactor#7152#7386::Float64
  ########a#7141#7145#7153#7387::Tuple{}
  ########b#7142#7146#7154#7388::Tuple{}
  ########afactor#7143#7147#7155#7389::Float64
  ########bfactor#7144#7148#7156#7390::Float64
  ######_var0#7149#7157#7391::Tuple{}
  ######types#7150#7158#7392::Tuple{Type{Float64}}
  ######fx#7160#7161#7393::Float64
  ##a1#7394::Float64
  ##a2#7395::Float64
  ######a#7141#7169#7396::Tuple{}
  ######b#7142#7170#7397::Tuple{}
  ######afactor#7143#7171#7398::Float64
  ######bfactor#7144#7172#7399::Float64
  ####_var0#7173#7400::Tuple{}
  ######tup#7277#7285#7401::Tuple{}
  ####_var0#7286#7402::Tuple{}
  ######types#7208#7287#7403::Tuple{Type{Int64}}
  ##a#7404::Float64
  ##exp_a#7405::Float64
  ##deriv#7406::Float64
  ####G#7079#7407::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7408::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7409::Tuple{}
  ##########x#7071#7073#7077#7082#7410::Float64
  ########_var0#7074#7078#7083#7411::Tuple{}
  ########tup#7070#7114#7118#7412::Tuple{}
  ########x#7071#7115#7119#7413::Float64
  ######_var0#7116#7120#7414::Tuple{}
  ########types#7086#7117#7121#7415::Tuple{Type{Float64}}
  ##a1#7416::Float64
  ##a2#7417::Float64
  ##div_a#7418::Float64
  ####afactor#7151#7419::Float64
  ####bfactor#7152#7420::Float64
  ########a#7141#7145#7153#7421::Tuple{}
  ########b#7142#7146#7154#7422::Tuple{}
  ########afactor#7143#7147#7155#7423::Float64
  ########bfactor#7144#7148#7156#7424::Float64
  ######_var0#7149#7157#7425::Tuple{}
  ######types#7150#7158#7426::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7286#7378 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7286#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7282#7284#7381 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7282#7284#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7382 = GenSym(2)
      ##a2#7383 = GenSym(3)
      ##div_a#7384 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7382::Float64,##a2#7383::Float64))
      ####afactor#7151#7385 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7383::Float64))
      ####bfactor#7152#7386 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7382::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7383::Float64,##a2#7383::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7391 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7149#7157#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7384::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7160#7161#7393 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7160#7161#7393::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7394 = GenSym(5)
      ##a2#7395 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7173#7400 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7173#7400 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7394::Float64,##a2#7395::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7286#7402 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7286#7402 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7404 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7405 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7406 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7079#7407 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7411 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7083#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7414 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7116#7120#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7416 = GenSym(9)
      ##a2#7417 = GenSym(10)
      ##div_a#7418 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7416::Float64,##a2#7417::Float64))
      ####afactor#7151#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7417::Float64))
      ####bfactor#7152#7420 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7416::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7417::Float64,##a2#7417::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7425 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7149#7157#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7418::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7277#7285#7377::Tuple{}
  ####_var0#7286#7378::Tuple{}
  ######types#7208#7287#7379::Tuple{Type{Int64}}
  ########tup#7277#7281#7283#7380::Tuple{}
  ######_var0#7282#7284#7381::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7382::Float64
  ##a2#7383::Float64
  ##div_a#7384::Float64
  ####afactor#7151#7385::Float64
  ####bfactor#7152#7386::Float64
  ########a#7141#7145#7153#7387::Tuple{}
  ########b#7142#7146#7154#7388::Tuple{}
  ########afactor#7143#7147#7155#7389::Float64
  ########bfactor#7144#7148#7156#7390::Float64
  ######_var0#7149#7157#7391::Tuple{}
  ######types#7150#7158#7392::Tuple{Type{Float64}}
  ######fx#7160#7161#7393::Float64
  ##a1#7394::Float64
  ##a2#7395::Float64
  ######a#7141#7169#7396::Tuple{}
  ######b#7142#7170#7397::Tuple{}
  ######afactor#7143#7171#7398::Float64
  ######bfactor#7144#7172#7399::Float64
  ####_var0#7173#7400::Tuple{}
  ######tup#7277#7285#7401::Tuple{}
  ####_var0#7286#7402::Tuple{}
  ######types#7208#7287#7403::Tuple{Type{Int64}}
  ##a#7404::Float64
  ##exp_a#7405::Float64
  ##deriv#7406::Float64
  ####G#7079#7407::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7408::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7409::Tuple{}
  ##########x#7071#7073#7077#7082#7410::Float64
  ########_var0#7074#7078#7083#7411::Tuple{}
  ########tup#7070#7114#7118#7412::Tuple{}
  ########x#7071#7115#7119#7413::Float64
  ######_var0#7116#7120#7414::Tuple{}
  ########types#7086#7117#7121#7415::Tuple{Type{Float64}}
  ##a1#7416::Float64
  ##a2#7417::Float64
  ##div_a#7418::Float64
  ####afactor#7151#7419::Float64
  ####bfactor#7152#7420::Float64
  ########a#7141#7145#7153#7421::Tuple{}
  ########b#7142#7146#7154#7422::Tuple{}
  ########afactor#7143#7147#7155#7423::Float64
  ########bfactor#7144#7148#7156#7424::Float64
  ######_var0#7149#7157#7425::Tuple{}
  ######types#7150#7158#7426::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 39:
      $(Expr(:boundscheck, false))
      ####_var0#7286#7378 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7286#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7282#7284#7381 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7282#7284#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7382 = GenSym(2)
      ##a2#7383 = GenSym(3)
      ##div_a#7384 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7382::Float64,##a2#7383::Float64))
      ####afactor#7151#7385 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7383::Float64))
      ####bfactor#7152#7386 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7382::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7383::Float64,##a2#7383::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7391 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7149#7157#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7384::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triweight.jl, line 40:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7160#7161#7393 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7160#7161#7393::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7160#7161#7393::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7394 = GenSym(5)
      ##a2#7395 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7173#7400 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7173#7400 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7394::Float64,##a2#7395::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7286#7402 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7286#7402 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7404 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7405 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7406 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7404::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7079#7407 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7411 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7083#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7414 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7116#7120#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(8),:value)::Float64,1.09375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Triweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7416 = GenSym(9)
      ##a2#7417 = GenSym(10)
      ##div_a#7418 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7416::Float64,##a2#7417::Float64))
      ####afactor#7151#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7417::Float64))
      ####bfactor#7152#7420 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7416::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7417::Float64,##a2#7417::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7149#7157#7425 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7149#7157#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7418::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





