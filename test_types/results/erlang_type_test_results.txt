____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64,(top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64,(top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64)::Tuple{Int64,Float64}
  end::Tuple{Int64,Float64}

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 34:
      return (Base.box)(Int64,(Base.mul_int)((top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64,(top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64))
  end::Int64

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 34:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64)),(top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7064#7067#7071#7075::Tuple{}
  ########x#7065#7068#7072#7076::Int64
  ######_var0#7069#7073#7077::Tuple{}
  ########types#7066#7070#7074#7078::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 34:
      $(Expr(:boundscheck, false))
      ######_var0#7069#7073#7077 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7069#7073#7077 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 35:
      GenSym(0) = (Base.power_by_squaring)((top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64,2)::Int64
      return (Base.box)(Int64,(Base.mul_int)((top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64,GenSym(0)))
  end::Int64

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 35:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7099::Float64
  ##exp_a#7100::Float64
  ##deriv#7101::Float64
  ####G#7094#7102::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7084#7090#7095#7103::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7085#7087#7091#7096#7104::Tuple{}
  ##########x#7086#7088#7092#7097#7105::Float64
  ########_var0#7089#7093#7098#7106::Tuple{}
  ########tup#7064#7067#7071#7107::Tuple{}
  ########x#7065#7068#7072#7108::Int64
  ######_var0#7069#7073#7109::Tuple{}
  ########types#7066#7070#7074#7110::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 35:
      ##a#7099 = (top(getfield))((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7100 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7099::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7101 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7099::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7094#7102 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7089#7093#7098#7106 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7089#7093#7098#7106 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7100::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7069#7073#7109 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7069#7073#7109 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}
  α::Int64
  θ::Int64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 40:
      GenSym(3) = (top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 41:
      unless (Base.sle_int)(1,α::Int64)::Bool goto 0
      return (Base.box)(Int64,(Base.mul_int)(θ::Int64,(Base.box)(Int64,(Base.sub_int)(α::Int64,1))))
      0: 
      return (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"Erlang has no mode when α < 1.0")::ANY)::UNION{}
  end::Int64

----float----

Variables:
  d::Distributions.Erlang{Float64}
  α::Int64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 40:
      GenSym(3) = (top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 41:
      unless (Base.sle_int)(1,α::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(α::Int64,1))))))
      0: 
      return (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"Erlang has no mode when α < 1.0")::ANY)::UNION{}
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::Int64
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7064#7067#7118::Tuple{}
  ######x#7065#7068#7119::Int64
  ####_var0#7069#7120::Tuple{}
  ######types#7066#7070#7121::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 40:
      GenSym(3) = (top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 41:
      unless (Base.sle_int)(1,α::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7069#7120 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7069#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(α::Int64,1))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,"Erlang has no mode when α < 1.0")::ANY)::UNION{}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Erlang{Int64})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Erlang{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile)(d::Distributions.Erlang{Int64},0.5)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(29) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64))
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,GenSym(29),0,(top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return GenSym(33)
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.gammainvcdf)((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return GenSym(0)
  end::Float64




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)(2.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)(2.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)(2.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64))))::Float64))
  end::Float64




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 37:
      return (Base.box)(Base.Float64,(Base.div_float)(6.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64))))
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 37:
      return (Base.box)(Base.Float64,(Base.div_float)(6.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64))))
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 37:
      return (Base.box)(Base.Float64,(Base.div_float)(6.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64))))
  end::Float64




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}
  α::Int64
  θ::Int64
  #s25::Int64
  ##xs#7128::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 45:
      GenSym(10) = (top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64
      GenSym(11) = (top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 46:
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(6) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,θ::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),(Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))),GenSym(6))))),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}
  α::Int64
  θ::Float64
  #s25::Int64
  ##xs#7129::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 45:
      GenSym(9) = (top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64
      GenSym(10) = (top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 46:
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::Int64
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7141::Float64
  ####G#7130#7142::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7084#7090#7131#7143::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7085#7087#7091#7132#7144::Tuple{}
  ##########x#7086#7088#7092#7133#7145::Float64
  ########_var0#7089#7093#7134#7146::Tuple{}
  ##xs#7147::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##############types#7135#7136#7137#7138#7139#7140#7148::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 45:
      GenSym(11) = (top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64
      GenSym(12) = (top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 46:
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))::Float64
      ##a#7141 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7141::Float64,0)::Float64
      ####G#7130#7142 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7089#7093#7134#7146 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7089#7093#7134#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7141::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = GenSym(9)
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))),GenSym(5)))))))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 57:
      GenSym(48) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64))
      GenSym(49) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64))
      return (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(48),0,GenSym(49),0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 57:
      GenSym(48) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64))
      return (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(48),0,(top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64,0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 57:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64))
      GenSym(2) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,GenSym(2),0,GenSym(3),0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      GenSym(1) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),0,GenSym(1),0,(top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64,0,GenSym(3),0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.gammapdf)((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64,(top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::Float64
  end::Float64




____________________________
mgf
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 49:
      return (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,(top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64)))))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.neg_int)((top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64)))))::ANY)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Erlang{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 49:
      return (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.neg_int)((top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64)))))::ANY)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ########tup#7064#7067#7071#7155::Tuple{}
  ########x#7065#7068#7072#7156::Int64
  ######_var0#7069#7073#7157::Tuple{}
  ########types#7066#7070#7074#7158::Tuple{Type{Int64}}
  ######tup#7151#7152#7159::Tuple{}
  ####_var0#7153#7160::Tuple{}
  ######types#7135#7154#7161::Tuple{Type{Float64}}
  ##a#7162::Float64
  ##exp_a#7163::Float64
  ##deriv#7164::Float64
  ####G#7094#7165::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7084#7090#7095#7166::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7085#7087#7091#7096#7167::Tuple{}
  ##########x#7086#7088#7092#7097#7168::Float64
  ########_var0#7089#7093#7098#7169::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 49:
      $(Expr(:boundscheck, false))
      ######_var0#7069#7073#7157 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7069#7073#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      $(Expr(:boundscheck, false))
      ####_var0#7153#7160 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7153#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = (Base.box)(Int64,(Base.neg_int)((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64))
      ##a#7162 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7163 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7162::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,GenSym(0))))::ANY)::Float64
      ##deriv#7164 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7162::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(GenSym(0),1))))))::Float64))
      ####G#7094#7165 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7089#7093#7098#7169 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7089#7093#7098#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7163::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.Erlang{Int64}
  t::Int64
  ##xs#7170::Tuple{}
  ##re#7171::Float64
  _var0::Complex{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.Erlang{Int64},:θ)::Int64
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      GenSym(2) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.mul_int)(GenSym(0),(top(getfield))(GenSym(1),:re)::Int64))), :((Base.box)(Int64,(Base.mul_int)(GenSym(0),(top(getfield))(GenSym(1),:im)::Int64)))))
      ##re#7171 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(2),:re)::Int64))))
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(##re#7171::Float64), :((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(2),:im)::Int64)))))))
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)((top(getfield))(d::Distributions.Erlang{Int64},:α)::Int64))
      unless (Base.sle_int)(0,GenSym(3))::Bool goto 4
      _var0 = (Base.power_by_squaring)(GenSym(4),GenSym(3))::Complex{Float64}
      goto 5
      4: 
      _var0 = (Base.power_by_squaring)((Base.inv)(GenSym(4))::Complex{Float64},(Base.box)(Int64,(Base.neg_int)(GenSym(3))))::Complex{Float64}
      5: 
      return _var0::Complex{Float64}
  end::Complex{Float64}

----float----

Variables:
  d::Distributions.Erlang{Float64}
  t::Int64
  ##xs#7172::Tuple{}
  ##re#7173::Float64
  _var0::Complex{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.Erlang{Float64},:θ)::Float64
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      GenSym(2) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:im)::Int64)))))))
      ##re#7173 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(2),:re)::Float64))
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(##re#7173::Float64), :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(2),:im)::Float64)))))
      GenSym(3) = (Base.box)(Int64,(Base.neg_int)((top(getfield))(d::Distributions.Erlang{Float64},:α)::Int64))
      unless (Base.sle_int)(0,GenSym(3))::Bool goto 4
      _var0 = (Base.power_by_squaring)(GenSym(4),GenSym(3))::Complex{Float64}
      goto 5
      4: 
      _var0 = (Base.power_by_squaring)((Base.inv)(GenSym(4))::Complex{Float64},(Base.box)(Int64,(Base.neg_int)(GenSym(3))))::Complex{Float64}
      5: 
      return _var0::Complex{Float64}
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##xs#7425::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/erlang.jl, line 50:
      GenSym(0) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))) * (top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = 1.0 - GenSym(0)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(2) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((top(getfield))(d::Distributions.Erlang{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::Int64))), 0))
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(1),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(1),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(2),:re)::Int64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(2),:im)::Int64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




