____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64,(top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64,(top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64,(top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64,(top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7102::Float64
  ##div_a#7103::Float64
  ##deriv#7104::Float64
  ####G#7078#7105::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7106::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7107::Tuple{}
  ##########x#7070#7072#7076#7081#7108::Float64
  ########_var0#7073#7077#7082#7109::Tuple{}
  ########types#7083#7084#7085#7110::Tuple{Type{Float64}}
  ##a#7111::Float64
  ####G#7088#7112::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7113::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7114::Tuple{}
  ##########x#7070#7072#7076#7091#7115::Float64
  ########_var0#7073#7077#7092#7116::Tuple{}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ######a#7093#7097#7119::Tuple{}
  ######b#7094#7098#7120::Tuple{}
  ######afactor#7095#7099#7121::Float64
  ######bfactor#7096#7100#7122::Float64
  ####_var0#7101#7123::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      ##a#7102 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7103 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7102::Float64))
      ##deriv#7104 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7103::Float64,##a#7102::Float64))))
      ####G#7078#7105 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7109 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7109 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7103::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7111 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7111::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      ####G#7088#7112 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7116 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7092#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7111::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7117 = GenSym(7)
      ##a2#7118 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7123 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7101#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7117::Float64,##a2#7118::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7102::Float64
  ##div_a#7103::Float64
  ##deriv#7104::Float64
  ####G#7078#7105::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7106::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7107::Tuple{}
  ##########x#7070#7072#7076#7081#7108::Float64
  ########_var0#7073#7077#7082#7109::Tuple{}
  ########types#7083#7084#7085#7110::Tuple{Type{Float64}}
  ##a#7111::Float64
  ####G#7088#7112::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7113::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7114::Tuple{}
  ##########x#7070#7072#7076#7091#7115::Float64
  ########_var0#7073#7077#7092#7116::Tuple{}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ######a#7093#7097#7119::Tuple{}
  ######b#7094#7098#7120::Tuple{}
  ######afactor#7095#7099#7121::Float64
  ######bfactor#7096#7100#7122::Float64
  ####_var0#7101#7123::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      ##a#7102 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7103 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7102::Float64))
      ##deriv#7104 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7103::Float64,##a#7102::Float64))))
      ####G#7078#7105 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7109 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7109 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7103::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7111 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7111::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      ####G#7088#7112 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7116 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7092#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7111::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7117 = GenSym(7)
      ##a2#7118 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7123 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7101#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7117::Float64,##a2#7118::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7102::Float64
  ##div_a#7103::Float64
  ##deriv#7104::Float64
  ####G#7078#7105::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7106::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7107::Tuple{}
  ##########x#7070#7072#7076#7081#7108::Float64
  ########_var0#7073#7077#7082#7109::Tuple{}
  ########types#7083#7084#7085#7110::Tuple{Type{Float64}}
  ##a#7111::Float64
  ####G#7088#7112::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7113::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7114::Tuple{}
  ##########x#7070#7072#7076#7091#7115::Float64
  ########_var0#7073#7077#7092#7116::Tuple{}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ######a#7093#7097#7119::Tuple{}
  ######b#7094#7098#7120::Tuple{}
  ######afactor#7095#7099#7121::Float64
  ######bfactor#7096#7100#7122::Float64
  ####_var0#7101#7123::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      ##a#7102 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7103 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7102::Float64))
      ##deriv#7104 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7103::Float64,##a#7102::Float64))))
      ####G#7078#7105 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7109 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7109 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7103::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7111 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7111::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      ####G#7088#7112 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7116 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7092#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7111::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7117 = GenSym(7)
      ##a2#7118 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7123 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7101#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7117::Float64,##a2#7118::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7102::Float64
  ##div_a#7103::Float64
  ##deriv#7104::Float64
  ####G#7078#7105::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7106::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7107::Tuple{}
  ##########x#7070#7072#7076#7081#7108::Float64
  ########_var0#7073#7077#7082#7109::Tuple{}
  ########types#7083#7084#7085#7110::Tuple{Type{Float64}}
  ##a#7111::Float64
  ####G#7088#7112::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7113::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7114::Tuple{}
  ##########x#7070#7072#7076#7091#7115::Float64
  ########_var0#7073#7077#7092#7116::Tuple{}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ######a#7093#7097#7119::Tuple{}
  ######b#7094#7098#7120::Tuple{}
  ######afactor#7095#7099#7121::Float64
  ######bfactor#7096#7100#7122::Float64
  ####_var0#7101#7123::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      ##a#7102 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7103 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7102::Float64))
      ##deriv#7104 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7103::Float64,##a#7102::Float64))))
      ####G#7078#7105 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7109 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7109 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7103::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7111 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7111::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      ####G#7088#7112 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7116 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7092#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7111::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7117 = GenSym(7)
      ##a2#7118 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7123 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7101#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7117::Float64,##a2#7118::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7102::Float64
  ##div_a#7103::Float64
  ##deriv#7104::Float64
  ####G#7078#7105::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7106::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7107::Tuple{}
  ##########x#7070#7072#7076#7081#7108::Float64
  ########_var0#7073#7077#7082#7109::Tuple{}
  ########types#7083#7084#7085#7110::Tuple{Type{Float64}}
  ##a#7111::Float64
  ####G#7088#7112::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7113::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7114::Tuple{}
  ##########x#7070#7072#7076#7091#7115::Float64
  ########_var0#7073#7077#7092#7116::Tuple{}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ######a#7093#7097#7119::Tuple{}
  ######b#7094#7098#7120::Tuple{}
  ######afactor#7095#7099#7121::Float64
  ######bfactor#7096#7100#7122::Float64
  ####_var0#7101#7123::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 57:
      ##a#7102 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7103 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7102::Float64))
      ##deriv#7104 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7103::Float64,##a#7102::Float64))))
      ####G#7078#7105 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7109 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7109 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7103::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7111 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7111::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7111::Float64,0)::Float64
      ####G#7088#7112 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7116 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7092#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7111::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7117 = GenSym(7)
      ##a2#7118 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7123 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7101#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7117::Float64,##a2#7118::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7130#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7145::Tuple{}
  ##########x#7070#7072#7076#7133#7146::Float64
  ########_var0#7073#7077#7134#7147::Tuple{}
  ##a#7148::Float64
  ##div_a#7149::Float64
  ##deriv#7150::Float64
  ####G#7078#7151::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7152::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7153::Tuple{}
  ##########x#7070#7072#7076#7081#7154::Float64
  ########_var0#7073#7077#7082#7155::Tuple{}
  ########types#7083#7084#7085#7156::Tuple{Type{Float64}}
  ##a#7157::Float64
  ####G#7088#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7160::Tuple{}
  ##########x#7070#7072#7076#7091#7161::Float64
  ########_var0#7073#7077#7092#7162::Tuple{}
  ##a#7163::Float64
  ##exp_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7130#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7168::Tuple{}
  ##########x#7070#7072#7076#7133#7169::Float64
  ########_var0#7073#7077#7134#7170::Tuple{}
  ##a1#7171::Float64
  ##a2#7172::Float64
  ######a#7093#7097#7173::Tuple{}
  ######b#7094#7098#7174::Tuple{}
  ######afactor#7095#7099#7175::Float64
  ######bfactor#7096#7100#7176::Float64
  ####_var0#7101#7177::Tuple{}
  ######a#7135#7137#7178::Tuple{}
  ######b#7136#7138#7179::Tuple{}
  ####_var0#7139#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7164 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7170 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7134#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7148 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7149 = (Base.box)(Base.Float64,(Base.div_float)(2.0,##a#7148::Float64))
      ##deriv#7150 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7149::Float64,##a#7148::Float64))))
      ####G#7078#7151 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7155 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7082#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7149::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7157 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(1),:value)::Float64,1.0))), :((top(getfield))(GenSym(1),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      GenSym(4) = (ForwardDiff.digamma)(##a#7157::Float64)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      ####G#7088#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7162 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7073#7077#7092#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(6),##a#7157::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7171 = GenSym(9)
      ##a2#7172 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7177 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7101#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7171::Float64,##a2#7172::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7140 = (top(getfield))(GenSym(0),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7147 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7134#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7180 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7139#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7130#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7145::Tuple{}
  ##########x#7070#7072#7076#7133#7146::Float64
  ########_var0#7073#7077#7134#7147::Tuple{}
  ##a#7148::Float64
  ##div_a#7149::Float64
  ##deriv#7150::Float64
  ####G#7078#7151::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7152::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7153::Tuple{}
  ##########x#7070#7072#7076#7081#7154::Float64
  ########_var0#7073#7077#7082#7155::Tuple{}
  ########types#7083#7084#7085#7156::Tuple{Type{Float64}}
  ##a#7157::Float64
  ####G#7088#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7160::Tuple{}
  ##########x#7070#7072#7076#7091#7161::Float64
  ########_var0#7073#7077#7092#7162::Tuple{}
  ##a#7163::Float64
  ##exp_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7130#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7168::Tuple{}
  ##########x#7070#7072#7076#7133#7169::Float64
  ########_var0#7073#7077#7134#7170::Tuple{}
  ##a1#7171::Float64
  ##a2#7172::Float64
  ######a#7093#7097#7173::Tuple{}
  ######b#7094#7098#7174::Tuple{}
  ######afactor#7095#7099#7175::Float64
  ######bfactor#7096#7100#7176::Float64
  ####_var0#7101#7177::Tuple{}
  ######a#7135#7137#7178::Tuple{}
  ######b#7136#7138#7179::Tuple{}
  ####_var0#7139#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7164 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7170 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7134#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7148 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7149 = (Base.box)(Base.Float64,(Base.div_float)(2.0,##a#7148::Float64))
      ##deriv#7150 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7149::Float64,##a#7148::Float64))))
      ####G#7078#7151 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7155 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7082#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7149::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7157 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(1),:value)::Float64,1.0))), :((top(getfield))(GenSym(1),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      GenSym(4) = (ForwardDiff.digamma)(##a#7157::Float64)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      ####G#7088#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7162 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7073#7077#7092#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(6),##a#7157::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7171 = GenSym(9)
      ##a2#7172 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7177 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7101#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7171::Float64,##a2#7172::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7140 = (top(getfield))(GenSym(0),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7147 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7134#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7180 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7139#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7130#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7145::Tuple{}
  ##########x#7070#7072#7076#7133#7146::Float64
  ########_var0#7073#7077#7134#7147::Tuple{}
  ##a#7148::Float64
  ##div_a#7149::Float64
  ##deriv#7150::Float64
  ####G#7078#7151::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7152::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7153::Tuple{}
  ##########x#7070#7072#7076#7081#7154::Float64
  ########_var0#7073#7077#7082#7155::Tuple{}
  ########types#7083#7084#7085#7156::Tuple{Type{Float64}}
  ##a#7157::Float64
  ####G#7088#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7160::Tuple{}
  ##########x#7070#7072#7076#7091#7161::Float64
  ########_var0#7073#7077#7092#7162::Tuple{}
  ##a#7163::Float64
  ##exp_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7130#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7168::Tuple{}
  ##########x#7070#7072#7076#7133#7169::Float64
  ########_var0#7073#7077#7134#7170::Tuple{}
  ##a1#7171::Float64
  ##a2#7172::Float64
  ######a#7093#7097#7173::Tuple{}
  ######b#7094#7098#7174::Tuple{}
  ######afactor#7095#7099#7175::Float64
  ######bfactor#7096#7100#7176::Float64
  ####_var0#7101#7177::Tuple{}
  ######a#7135#7137#7178::Tuple{}
  ######b#7136#7138#7179::Tuple{}
  ####_var0#7139#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7164 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7170 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7134#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7148 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7149 = (Base.box)(Base.Float64,(Base.div_float)(2.0,##a#7148::Float64))
      ##deriv#7150 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7149::Float64,##a#7148::Float64))))
      ####G#7078#7151 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7155 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7082#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7149::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7157 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(1),:value)::Float64,1.0))), :((top(getfield))(GenSym(1),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      GenSym(4) = (ForwardDiff.digamma)(##a#7157::Float64)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      ####G#7088#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7162 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7073#7077#7092#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(6),##a#7157::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7171 = GenSym(9)
      ##a2#7172 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7177 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7101#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7171::Float64,##a2#7172::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7140 = (top(getfield))(GenSym(0),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7147 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7134#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7180 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7139#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7130#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7145::Tuple{}
  ##########x#7070#7072#7076#7133#7146::Float64
  ########_var0#7073#7077#7134#7147::Tuple{}
  ##a#7148::Float64
  ##div_a#7149::Float64
  ##deriv#7150::Float64
  ####G#7078#7151::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7152::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7153::Tuple{}
  ##########x#7070#7072#7076#7081#7154::Float64
  ########_var0#7073#7077#7082#7155::Tuple{}
  ########types#7083#7084#7085#7156::Tuple{Type{Float64}}
  ##a#7157::Float64
  ####G#7088#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7160::Tuple{}
  ##########x#7070#7072#7076#7091#7161::Float64
  ########_var0#7073#7077#7092#7162::Tuple{}
  ##a#7163::Float64
  ##exp_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7130#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7168::Tuple{}
  ##########x#7070#7072#7076#7133#7169::Float64
  ########_var0#7073#7077#7134#7170::Tuple{}
  ##a1#7171::Float64
  ##a2#7172::Float64
  ######a#7093#7097#7173::Tuple{}
  ######b#7094#7098#7174::Tuple{}
  ######afactor#7095#7099#7175::Float64
  ######bfactor#7096#7100#7176::Float64
  ####_var0#7101#7177::Tuple{}
  ######a#7135#7137#7178::Tuple{}
  ######b#7136#7138#7179::Tuple{}
  ####_var0#7139#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7164 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7170 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7134#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7148 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7149 = (Base.box)(Base.Float64,(Base.div_float)(2.0,##a#7148::Float64))
      ##deriv#7150 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7149::Float64,##a#7148::Float64))))
      ####G#7078#7151 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7155 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7082#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7149::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7157 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(1),:value)::Float64,1.0))), :((top(getfield))(GenSym(1),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      GenSym(4) = (ForwardDiff.digamma)(##a#7157::Float64)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      ####G#7088#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7162 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7073#7077#7092#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(6),##a#7157::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7171 = GenSym(9)
      ##a2#7172 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7177 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7101#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7171::Float64,##a2#7172::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7140 = (top(getfield))(GenSym(0),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7147 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7134#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7180 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7139#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7130#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7145::Tuple{}
  ##########x#7070#7072#7076#7133#7146::Float64
  ########_var0#7073#7077#7134#7147::Tuple{}
  ##a#7148::Float64
  ##div_a#7149::Float64
  ##deriv#7150::Float64
  ####G#7078#7151::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7152::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7153::Tuple{}
  ##########x#7070#7072#7076#7081#7154::Float64
  ########_var0#7073#7077#7082#7155::Tuple{}
  ########types#7083#7084#7085#7156::Tuple{Type{Float64}}
  ##a#7157::Float64
  ####G#7088#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7160::Tuple{}
  ##########x#7070#7072#7076#7091#7161::Float64
  ########_var0#7073#7077#7092#7162::Tuple{}
  ##a#7163::Float64
  ##exp_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7130#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7168::Tuple{}
  ##########x#7070#7072#7076#7133#7169::Float64
  ########_var0#7073#7077#7134#7170::Tuple{}
  ##a1#7171::Float64
  ##a2#7172::Float64
  ######a#7093#7097#7173::Tuple{}
  ######b#7094#7098#7174::Tuple{}
  ######afactor#7095#7099#7175::Float64
  ######bfactor#7096#7100#7176::Float64
  ####_var0#7101#7177::Tuple{}
  ######a#7135#7137#7178::Tuple{}
  ######b#7136#7138#7179::Tuple{}
  ####_var0#7139#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 61:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7164 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7163::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7170 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7134#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7148 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7149 = (Base.box)(Base.Float64,(Base.div_float)(2.0,##a#7148::Float64))
      ##deriv#7150 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7149::Float64,##a#7148::Float64))))
      ####G#7078#7151 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7155 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7082#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7149::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7157 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(1),:value)::Float64,1.0))), :((top(getfield))(GenSym(1),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      GenSym(4) = (ForwardDiff.digamma)(##a#7157::Float64)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7157::Float64,0)::Float64
      ####G#7088#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7162 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7073#7077#7092#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(6),##a#7157::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7171 = GenSym(9)
      ##a2#7172 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7177 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7101#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7171::Float64,##a2#7172::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7140 = (top(getfield))(GenSym(0),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7147 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7134#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7180 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7139#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64)::Bool goto 0
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
      goto 1
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64)::Bool goto 0
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
      goto 1
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7211::Float64
  ##div_a#7212::Float64
  ##deriv#7213::Float64
  ####G#7078#7214::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7215::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7216::Tuple{}
  ##########x#7070#7072#7076#7081#7217::Float64
  ########_var0#7073#7077#7082#7218::Tuple{}
  ######tup#7187#7188#7219::Tuple{}
  ####_var0#7189#7220::Tuple{}
  ######types#7083#7190#7221::Tuple{Type{Float64}}
  ##a1#7222::Float64
  ##a2#7223::Float64
  ##exp_a#7224::Float64
  ##powval#7225::Float64
  ##logval#7226::Float64
  ##new_bs#7227::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7228::Float64
  ####exp_a#7198#7229::Float64
  ####deriv#7199#7230::Float64
  ######G#7191#7200#7231::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7232::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7233::Tuple{}
  ############x#7070#7072#7076#7194#7203#7234::Float64
  ##########_var0#7073#7077#7195#7204#7235::Tuple{}
  ######a#7093#7205#7236::Tuple{}
  ######b#7094#7206#7237::Tuple{}
  ######afactor#7095#7207#7238::Float64
  ######bfactor#7096#7208#7239::Float64
  ####_var0#7209#7240::Tuple{}
  ######types#7196#7210#7241::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7242::Float64
  ##a2#7243::Float64
  ######a#7093#7097#7244::Tuple{}
  ######b#7094#7098#7245::Tuple{}
  ######afactor#7095#7099#7246::Float64
  ######bfactor#7096#7100#7247::Float64
  ####_var0#7101#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7211 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7212 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7211::Float64))
      ##deriv#7213 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7212::Float64,##a#7211::Float64))))
      ####G#7078#7214 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7218 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7082#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7212::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7220 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7189#7220 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7222"))
      NewvarNode(symbol("##a2#7223"))
      NewvarNode(symbol("##exp_a#7224"))
      NewvarNode(symbol("##powval#7225"))
      NewvarNode(symbol("##logval#7226"))
      NewvarNode(symbol("##new_bs#7227"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 9
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7228 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7198#7229 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(7),0)::Float64
      ####deriv#7199#7230 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(7))))::Float64))
      ######G#7191#7200#7231 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7235 = (top(tuple))()::Tuple{}
      goto 8
      ##########_var0#7073#7077#7195#7204#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      9: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7222 = GenSym(1)
      ##a2#7223 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,##a2#7223::Float64,0)::Float64
      ##exp_a#7224 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,##a2#7223::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7223::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,GenSym(14),0)::Float64
      ##powval#7225 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7223::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0)::Float64
      ##logval#7226 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7224::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7222::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7240 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7209#7240 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##new_bs#7227 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7224::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      11: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7242 = GenSym(21)
      ##a2#7243 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7248 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7101#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7242::Float64,##a2#7243::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64)::Bool goto 0
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
      goto 1
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64)::Bool goto 0
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
      goto 1
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7211::Float64
  ##div_a#7212::Float64
  ##deriv#7213::Float64
  ####G#7078#7214::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7215::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7216::Tuple{}
  ##########x#7070#7072#7076#7081#7217::Float64
  ########_var0#7073#7077#7082#7218::Tuple{}
  ######tup#7187#7188#7219::Tuple{}
  ####_var0#7189#7220::Tuple{}
  ######types#7083#7190#7221::Tuple{Type{Float64}}
  ##a1#7222::Float64
  ##a2#7223::Float64
  ##exp_a#7224::Float64
  ##powval#7225::Float64
  ##logval#7226::Float64
  ##new_bs#7227::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7228::Float64
  ####exp_a#7198#7229::Float64
  ####deriv#7199#7230::Float64
  ######G#7191#7200#7231::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7232::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7233::Tuple{}
  ############x#7070#7072#7076#7194#7203#7234::Float64
  ##########_var0#7073#7077#7195#7204#7235::Tuple{}
  ######a#7093#7205#7236::Tuple{}
  ######b#7094#7206#7237::Tuple{}
  ######afactor#7095#7207#7238::Float64
  ######bfactor#7096#7208#7239::Float64
  ####_var0#7209#7240::Tuple{}
  ######types#7196#7210#7241::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7242::Float64
  ##a2#7243::Float64
  ######a#7093#7097#7244::Tuple{}
  ######b#7094#7098#7245::Tuple{}
  ######afactor#7095#7099#7246::Float64
  ######bfactor#7096#7100#7247::Float64
  ####_var0#7101#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7211 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7212 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7211::Float64))
      ##deriv#7213 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7212::Float64,##a#7211::Float64))))
      ####G#7078#7214 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7218 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7082#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7212::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7220 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7189#7220 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7222"))
      NewvarNode(symbol("##a2#7223"))
      NewvarNode(symbol("##exp_a#7224"))
      NewvarNode(symbol("##powval#7225"))
      NewvarNode(symbol("##logval#7226"))
      NewvarNode(symbol("##new_bs#7227"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 9
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7228 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7198#7229 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(7),0)::Float64
      ####deriv#7199#7230 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(7))))::Float64))
      ######G#7191#7200#7231 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7235 = (top(tuple))()::Tuple{}
      goto 8
      ##########_var0#7073#7077#7195#7204#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      9: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7222 = GenSym(1)
      ##a2#7223 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,##a2#7223::Float64,0)::Float64
      ##exp_a#7224 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,##a2#7223::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7223::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,GenSym(14),0)::Float64
      ##powval#7225 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7223::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0)::Float64
      ##logval#7226 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7224::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7222::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7240 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7209#7240 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##new_bs#7227 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7224::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      11: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7242 = GenSym(21)
      ##a2#7243 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7248 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7101#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7242::Float64,##a2#7243::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7211::Float64
  ##div_a#7212::Float64
  ##deriv#7213::Float64
  ####G#7078#7214::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7215::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7216::Tuple{}
  ##########x#7070#7072#7076#7081#7217::Float64
  ########_var0#7073#7077#7082#7218::Tuple{}
  ######tup#7187#7188#7219::Tuple{}
  ####_var0#7189#7220::Tuple{}
  ######types#7083#7190#7221::Tuple{Type{Float64}}
  ##a1#7222::Float64
  ##a2#7223::Float64
  ##exp_a#7224::Float64
  ##powval#7225::Float64
  ##logval#7226::Float64
  ##new_bs#7227::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7228::Float64
  ####exp_a#7198#7229::Float64
  ####deriv#7199#7230::Float64
  ######G#7191#7200#7231::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7232::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7233::Tuple{}
  ############x#7070#7072#7076#7194#7203#7234::Float64
  ##########_var0#7073#7077#7195#7204#7235::Tuple{}
  ######a#7093#7205#7236::Tuple{}
  ######b#7094#7206#7237::Tuple{}
  ######afactor#7095#7207#7238::Float64
  ######bfactor#7096#7208#7239::Float64
  ####_var0#7209#7240::Tuple{}
  ######types#7196#7210#7241::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7242::Float64
  ##a2#7243::Float64
  ######a#7093#7097#7244::Tuple{}
  ######b#7094#7098#7245::Tuple{}
  ######afactor#7095#7099#7246::Float64
  ######bfactor#7096#7100#7247::Float64
  ####_var0#7101#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7211 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7212 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7211::Float64))
      ##deriv#7213 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7212::Float64,##a#7211::Float64))))
      ####G#7078#7214 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7218 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7082#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7212::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7220 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7189#7220 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7222"))
      NewvarNode(symbol("##a2#7223"))
      NewvarNode(symbol("##exp_a#7224"))
      NewvarNode(symbol("##powval#7225"))
      NewvarNode(symbol("##logval#7226"))
      NewvarNode(symbol("##new_bs#7227"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 9
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7228 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7198#7229 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(7),0)::Float64
      ####deriv#7199#7230 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(7))))::Float64))
      ######G#7191#7200#7231 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7235 = (top(tuple))()::Tuple{}
      goto 8
      ##########_var0#7073#7077#7195#7204#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      9: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7222 = GenSym(1)
      ##a2#7223 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,##a2#7223::Float64,0)::Float64
      ##exp_a#7224 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,##a2#7223::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7223::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,GenSym(14),0)::Float64
      ##powval#7225 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7223::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0)::Float64
      ##logval#7226 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7224::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7222::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7240 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7209#7240 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##new_bs#7227 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7224::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      11: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7242 = GenSym(21)
      ##a2#7243 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7248 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7101#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7242::Float64,##a2#7243::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7211::Float64
  ##div_a#7212::Float64
  ##deriv#7213::Float64
  ####G#7078#7214::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7215::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7216::Tuple{}
  ##########x#7070#7072#7076#7081#7217::Float64
  ########_var0#7073#7077#7082#7218::Tuple{}
  ######tup#7187#7188#7219::Tuple{}
  ####_var0#7189#7220::Tuple{}
  ######types#7083#7190#7221::Tuple{Type{Float64}}
  ##a1#7222::Float64
  ##a2#7223::Float64
  ##exp_a#7224::Float64
  ##powval#7225::Float64
  ##logval#7226::Float64
  ##new_bs#7227::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7228::Float64
  ####exp_a#7198#7229::Float64
  ####deriv#7199#7230::Float64
  ######G#7191#7200#7231::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7232::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7233::Tuple{}
  ############x#7070#7072#7076#7194#7203#7234::Float64
  ##########_var0#7073#7077#7195#7204#7235::Tuple{}
  ######a#7093#7205#7236::Tuple{}
  ######b#7094#7206#7237::Tuple{}
  ######afactor#7095#7207#7238::Float64
  ######bfactor#7096#7208#7239::Float64
  ####_var0#7209#7240::Tuple{}
  ######types#7196#7210#7241::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7242::Float64
  ##a2#7243::Float64
  ######a#7093#7097#7244::Tuple{}
  ######b#7094#7098#7245::Tuple{}
  ######afactor#7095#7099#7246::Float64
  ######bfactor#7096#7100#7247::Float64
  ####_var0#7101#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7211 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7212 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7211::Float64))
      ##deriv#7213 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7212::Float64,##a#7211::Float64))))
      ####G#7078#7214 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7218 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7082#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7212::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7220 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7189#7220 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7222"))
      NewvarNode(symbol("##a2#7223"))
      NewvarNode(symbol("##exp_a#7224"))
      NewvarNode(symbol("##powval#7225"))
      NewvarNode(symbol("##logval#7226"))
      NewvarNode(symbol("##new_bs#7227"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 9
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7228 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7198#7229 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(7),0)::Float64
      ####deriv#7199#7230 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(7))))::Float64))
      ######G#7191#7200#7231 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7235 = (top(tuple))()::Tuple{}
      goto 8
      ##########_var0#7073#7077#7195#7204#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      9: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7222 = GenSym(1)
      ##a2#7223 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,##a2#7223::Float64,0)::Float64
      ##exp_a#7224 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,##a2#7223::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7223::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,GenSym(14),0)::Float64
      ##powval#7225 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7223::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0)::Float64
      ##logval#7226 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7224::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7222::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7240 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7209#7240 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##new_bs#7227 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7224::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      11: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7242 = GenSym(21)
      ##a2#7243 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7248 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7101#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7242::Float64,##a2#7243::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7211::Float64
  ##div_a#7212::Float64
  ##deriv#7213::Float64
  ####G#7078#7214::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7215::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7216::Tuple{}
  ##########x#7070#7072#7076#7081#7217::Float64
  ########_var0#7073#7077#7082#7218::Tuple{}
  ######tup#7187#7188#7219::Tuple{}
  ####_var0#7189#7220::Tuple{}
  ######types#7083#7190#7221::Tuple{Type{Float64}}
  ##a1#7222::Float64
  ##a2#7223::Float64
  ##exp_a#7224::Float64
  ##powval#7225::Float64
  ##logval#7226::Float64
  ##new_bs#7227::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7228::Float64
  ####exp_a#7198#7229::Float64
  ####deriv#7199#7230::Float64
  ######G#7191#7200#7231::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7232::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7233::Tuple{}
  ############x#7070#7072#7076#7194#7203#7234::Float64
  ##########_var0#7073#7077#7195#7204#7235::Tuple{}
  ######a#7093#7205#7236::Tuple{}
  ######b#7094#7206#7237::Tuple{}
  ######afactor#7095#7207#7238::Float64
  ######bfactor#7096#7208#7239::Float64
  ####_var0#7209#7240::Tuple{}
  ######types#7196#7210#7241::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7242::Float64
  ##a2#7243::Float64
  ######a#7093#7097#7244::Tuple{}
  ######b#7094#7098#7245::Tuple{}
  ######afactor#7095#7099#7246::Float64
  ######bfactor#7096#7100#7247::Float64
  ####_var0#7101#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 59:
      NewvarNode(:iα)
      unless (Base.lt_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7211 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7212 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7211::Float64))
      ##deriv#7213 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7212::Float64,##a#7211::Float64))))
      ####G#7078#7214 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7218 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7073#7077#7082#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7212::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7220 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7189#7220 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7222"))
      NewvarNode(symbol("##a2#7223"))
      NewvarNode(symbol("##exp_a#7224"))
      NewvarNode(symbol("##powval#7225"))
      NewvarNode(symbol("##logval#7226"))
      NewvarNode(symbol("##new_bs#7227"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 9
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7228 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7198#7229 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7228::Float64,0,GenSym(7),0)::Float64
      ####deriv#7199#7230 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7228::Float64,GenSym(7))))::Float64))
      ######G#7191#7200#7231 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7235 = (top(tuple))()::Tuple{}
      goto 8
      ##########_var0#7073#7077#7195#7204#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      9: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7222 = GenSym(1)
      ##a2#7223 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,##a2#7223::Float64,0)::Float64
      ##exp_a#7224 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,##a2#7223::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7223::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0,GenSym(14),0)::Float64
      ##powval#7225 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7223::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7222::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7222::Float64,0)::Float64
      ##logval#7226 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7224::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7222::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7240 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7209#7240 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##new_bs#7227 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7224::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      11: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7242 = GenSym(21)
      ##a2#7243 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7248 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7101#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7242::Float64,##a2#7243::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7256::Float64
  ##div_a#7257::Float64
  ##deriv#7258::Float64
  ####G#7078#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7260::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7261::Tuple{}
  ##########x#7070#7072#7076#7081#7262::Float64
  ########_var0#7073#7077#7082#7263::Tuple{}
  ##a#7264::Float64
  ##exp_a#7265::Float64
  ##deriv#7266::Float64
  ####G#7251#7267::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7252#7268::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7253#7269::Tuple{}
  ##########x#7070#7072#7076#7254#7270::Float64
  ########_var0#7073#7077#7255#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ######a#7093#7097#7274::Tuple{}
  ######b#7094#7098#7275::Tuple{}
  ######afactor#7095#7099#7276::Float64
  ######bfactor#7096#7100#7277::Float64
  ####_var0#7101#7278::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      ##a#7256 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7257 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7256::Float64))
      ##deriv#7258 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7257::Float64,##a#7256::Float64))))
      ####G#7078#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7263 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7264 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7264::Float64,0)::Float64
      ##exp_a#7265 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7264::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7266 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7265::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7251#7267 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7255#7271 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7255#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7265::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7272 = GenSym(7)
      ##a2#7273 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7278 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7101#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7272::Float64,##a2#7273::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7256::Float64
  ##div_a#7257::Float64
  ##deriv#7258::Float64
  ####G#7078#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7260::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7261::Tuple{}
  ##########x#7070#7072#7076#7081#7262::Float64
  ########_var0#7073#7077#7082#7263::Tuple{}
  ##a#7264::Float64
  ##exp_a#7265::Float64
  ##deriv#7266::Float64
  ####G#7251#7267::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7252#7268::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7253#7269::Tuple{}
  ##########x#7070#7072#7076#7254#7270::Float64
  ########_var0#7073#7077#7255#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ######a#7093#7097#7274::Tuple{}
  ######b#7094#7098#7275::Tuple{}
  ######afactor#7095#7099#7276::Float64
  ######bfactor#7096#7100#7277::Float64
  ####_var0#7101#7278::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      ##a#7256 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7257 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7256::Float64))
      ##deriv#7258 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7257::Float64,##a#7256::Float64))))
      ####G#7078#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7263 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7264 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7264::Float64,0)::Float64
      ##exp_a#7265 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7264::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7266 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7265::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7251#7267 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7255#7271 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7255#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7265::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7272 = GenSym(7)
      ##a2#7273 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7278 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7101#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7272::Float64,##a2#7273::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7256::Float64
  ##div_a#7257::Float64
  ##deriv#7258::Float64
  ####G#7078#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7260::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7261::Tuple{}
  ##########x#7070#7072#7076#7081#7262::Float64
  ########_var0#7073#7077#7082#7263::Tuple{}
  ##a#7264::Float64
  ##exp_a#7265::Float64
  ##deriv#7266::Float64
  ####G#7251#7267::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7252#7268::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7253#7269::Tuple{}
  ##########x#7070#7072#7076#7254#7270::Float64
  ########_var0#7073#7077#7255#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ######a#7093#7097#7274::Tuple{}
  ######b#7094#7098#7275::Tuple{}
  ######afactor#7095#7099#7276::Float64
  ######bfactor#7096#7100#7277::Float64
  ####_var0#7101#7278::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      ##a#7256 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7257 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7256::Float64))
      ##deriv#7258 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7257::Float64,##a#7256::Float64))))
      ####G#7078#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7263 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7264 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7264::Float64,0)::Float64
      ##exp_a#7265 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7264::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7266 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7265::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7251#7267 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7255#7271 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7255#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7265::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7272 = GenSym(7)
      ##a2#7273 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7278 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7101#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7272::Float64,##a2#7273::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7256::Float64
  ##div_a#7257::Float64
  ##deriv#7258::Float64
  ####G#7078#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7260::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7261::Tuple{}
  ##########x#7070#7072#7076#7081#7262::Float64
  ########_var0#7073#7077#7082#7263::Tuple{}
  ##a#7264::Float64
  ##exp_a#7265::Float64
  ##deriv#7266::Float64
  ####G#7251#7267::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7252#7268::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7253#7269::Tuple{}
  ##########x#7070#7072#7076#7254#7270::Float64
  ########_var0#7073#7077#7255#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ######a#7093#7097#7274::Tuple{}
  ######b#7094#7098#7275::Tuple{}
  ######afactor#7095#7099#7276::Float64
  ######bfactor#7096#7100#7277::Float64
  ####_var0#7101#7278::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      ##a#7256 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7257 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7256::Float64))
      ##deriv#7258 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7257::Float64,##a#7256::Float64))))
      ####G#7078#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7263 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7264 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7264::Float64,0)::Float64
      ##exp_a#7265 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7264::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7266 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7265::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7251#7267 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7255#7271 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7255#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7265::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7272 = GenSym(7)
      ##a2#7273 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7278 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7101#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7272::Float64,##a2#7273::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7256::Float64
  ##div_a#7257::Float64
  ##deriv#7258::Float64
  ####G#7078#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7260::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7261::Tuple{}
  ##########x#7070#7072#7076#7081#7262::Float64
  ########_var0#7073#7077#7082#7263::Tuple{}
  ##a#7264::Float64
  ##exp_a#7265::Float64
  ##deriv#7266::Float64
  ####G#7251#7267::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7252#7268::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7253#7269::Tuple{}
  ##########x#7070#7072#7076#7254#7270::Float64
  ########_var0#7073#7077#7255#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ######a#7093#7097#7274::Tuple{}
  ######b#7094#7098#7275::Tuple{}
  ######afactor#7095#7099#7276::Float64
  ######bfactor#7096#7100#7277::Float64
  ####_var0#7101#7278::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 58:
      ##a#7256 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7257 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7256::Float64))
      ##deriv#7258 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7257::Float64,##a#7256::Float64))))
      ####G#7078#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7263 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7264 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7264::Float64,0)::Float64
      ##exp_a#7265 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7264::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7266 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7265::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7251#7267 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7255#7271 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7255#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7265::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7272 = GenSym(7)
      ##a2#7273 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7278 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7101#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7272::Float64,##a2#7273::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  μ::Float64
  σ2::Float64
  σ::Float64
  r::Float64
  ##xs#7279::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ2::Float64)::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(3.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(3.0,r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)),r::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}
  μ::Float64
  σ2::Float64
  σ::Float64
  r::Float64
  ##xs#7279::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ2::Float64)::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(3.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(3.0,r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)),r::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##sqrt_a#7306::Float64
  ##deriv#7307::Float64
  ####G#7280#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7281#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7282#7310::Tuple{}
  ##########x#7070#7072#7076#7283#7311::Float64
  ########_var0#7073#7077#7284#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ##div_a#7315::Float64
  ####afactor#7290#7316::Float64
  ####bfactor#7291#7317::Float64
  ########a#7093#7285#7292#7318::Tuple{}
  ########b#7094#7286#7293#7319::Tuple{}
  ########afactor#7095#7287#7294#7320::Float64
  ########bfactor#7096#7288#7295#7321::Float64
  ######_var0#7289#7296#7322::Tuple{}
  ######types#7196#7297#7323::Tuple{Type{Float64}}
  ##a#7324::Float64
  ##exp_a#7325::Float64
  ##deriv#7326::Float64
  ####G#7130#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7328::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7329::Tuple{}
  ##########x#7070#7072#7076#7133#7330::Float64
  ########_var0#7073#7077#7134#7331::Tuple{}
  ########tup#7069#7298#7302#7332::Tuple{}
  ########x#7070#7299#7303#7333::Float64
  ######_var0#7300#7304#7334::Tuple{}
  ########types#7083#7301#7305#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ##div_a#7338::Float64
  ####afactor#7290#7339::Float64
  ####bfactor#7291#7340::Float64
  ########a#7093#7285#7292#7341::Tuple{}
  ########b#7094#7286#7293#7342::Tuple{}
  ########afactor#7095#7287#7294#7343::Float64
  ########bfactor#7096#7288#7295#7344::Float64
  ######_var0#7289#7296#7345::Tuple{}
  ######types#7196#7297#7346::Tuple{Type{Float64}}
  ##a#7347::Float64
  ##exp_a#7348::Float64
  ##deriv#7349::Float64
  ####G#7130#7350::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7351::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7352::Tuple{}
  ##########x#7070#7072#7076#7133#7353::Float64
  ########_var0#7073#7077#7134#7354::Tuple{}
  ##a#7355::Float64
  ##div_a#7356::Float64
  ##deriv#7357::Float64
  ####G#7078#7358::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7359::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7360::Tuple{}
  ##########x#7070#7072#7076#7081#7361::Float64
  ########_var0#7073#7077#7082#7362::Tuple{}
  ########types#7083#7084#7085#7363::Tuple{Type{Float64}}
  ##a#7364::Float64
  ####G#7088#7365::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7366::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7367::Tuple{}
  ##########x#7070#7072#7076#7091#7368::Float64
  ########_var0#7073#7077#7092#7369::Tuple{}
  ##a1#7370::Float64
  ##a2#7371::Float64
  ######a#7093#7097#7372::Tuple{}
  ######b#7094#7098#7373::Tuple{}
  ######afactor#7095#7099#7374::Float64
  ######bfactor#7096#7100#7375::Float64
  ####_var0#7101#7376::Tuple{}
  ######a#7135#7137#7377::Tuple{}
  ######b#7136#7138#7378::Tuple{}
  ####_var0#7139#7379::Tuple{}
  ######a#7135#7137#7380::Tuple{}
  ######b#7136#7138#7381::Tuple{}
  ####_var0#7139#7382::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      σ2 = (Distributions.var)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      ##sqrt_a#7306 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7307 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7306::Float64))
      ####G#7280#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7284#7312 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7284#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      σ = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      GenSym(0) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7313 = GenSym(0)
      ##a2#7314 = GenSym(1)
      ##div_a#7315 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7313::Float64,##a2#7314::Float64))
      ####afactor#7290#7316 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7314::Float64))
      ####bfactor#7291#7317 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7313::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7314::Float64,##a2#7314::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7322 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7289#7296#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7315::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      ##a#7355 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7356 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7355::Float64))
      ##deriv#7357 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7356::Float64,##a#7355::Float64))))
      ####G#7078#7358 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7362 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7082#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7356::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7364 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7364::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      ####G#7088#7365 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7369 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7092#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7364::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7336 = GenSym(2)
      ##a2#7337 = GenSym(3)
      ##div_a#7338 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7336::Float64,##a2#7337::Float64))
      ####afactor#7290#7339 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7337::Float64))
      ####bfactor#7291#7340 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7336::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7337::Float64,##a2#7337::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7345 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7289#7296#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7338::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7347 = (top(getfield))(GenSym(4),:value)::Float64
      ##exp_a#7348 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7349 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7350 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7354 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7134#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7348::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ##a1#7370 = GenSym(13)
      ##a2#7371 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7376 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7101#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7370::Float64,##a2#7371::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7334 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7300#7304#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7379 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7139#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7324 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7325 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7326 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7331 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7073#7077#7134#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7382 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7139#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  μ::Float64
  σ2::Float64
  σ::Float64
  r::Float64
  ##xs#7279::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ2::Float64)::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(3.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(3.0,r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)),r::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}
  μ::Float64
  σ2::Float64
  σ::Float64
  r::Float64
  ##xs#7279::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ2::Float64)::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(3.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(3.0,r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)),r::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##sqrt_a#7306::Float64
  ##deriv#7307::Float64
  ####G#7280#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7281#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7282#7310::Tuple{}
  ##########x#7070#7072#7076#7283#7311::Float64
  ########_var0#7073#7077#7284#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ##div_a#7315::Float64
  ####afactor#7290#7316::Float64
  ####bfactor#7291#7317::Float64
  ########a#7093#7285#7292#7318::Tuple{}
  ########b#7094#7286#7293#7319::Tuple{}
  ########afactor#7095#7287#7294#7320::Float64
  ########bfactor#7096#7288#7295#7321::Float64
  ######_var0#7289#7296#7322::Tuple{}
  ######types#7196#7297#7323::Tuple{Type{Float64}}
  ##a#7324::Float64
  ##exp_a#7325::Float64
  ##deriv#7326::Float64
  ####G#7130#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7328::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7329::Tuple{}
  ##########x#7070#7072#7076#7133#7330::Float64
  ########_var0#7073#7077#7134#7331::Tuple{}
  ########tup#7069#7298#7302#7332::Tuple{}
  ########x#7070#7299#7303#7333::Float64
  ######_var0#7300#7304#7334::Tuple{}
  ########types#7083#7301#7305#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ##div_a#7338::Float64
  ####afactor#7290#7339::Float64
  ####bfactor#7291#7340::Float64
  ########a#7093#7285#7292#7341::Tuple{}
  ########b#7094#7286#7293#7342::Tuple{}
  ########afactor#7095#7287#7294#7343::Float64
  ########bfactor#7096#7288#7295#7344::Float64
  ######_var0#7289#7296#7345::Tuple{}
  ######types#7196#7297#7346::Tuple{Type{Float64}}
  ##a#7347::Float64
  ##exp_a#7348::Float64
  ##deriv#7349::Float64
  ####G#7130#7350::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7351::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7352::Tuple{}
  ##########x#7070#7072#7076#7133#7353::Float64
  ########_var0#7073#7077#7134#7354::Tuple{}
  ##a#7355::Float64
  ##div_a#7356::Float64
  ##deriv#7357::Float64
  ####G#7078#7358::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7359::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7360::Tuple{}
  ##########x#7070#7072#7076#7081#7361::Float64
  ########_var0#7073#7077#7082#7362::Tuple{}
  ########types#7083#7084#7085#7363::Tuple{Type{Float64}}
  ##a#7364::Float64
  ####G#7088#7365::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7366::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7367::Tuple{}
  ##########x#7070#7072#7076#7091#7368::Float64
  ########_var0#7073#7077#7092#7369::Tuple{}
  ##a1#7370::Float64
  ##a2#7371::Float64
  ######a#7093#7097#7372::Tuple{}
  ######b#7094#7098#7373::Tuple{}
  ######afactor#7095#7099#7374::Float64
  ######bfactor#7096#7100#7375::Float64
  ####_var0#7101#7376::Tuple{}
  ######a#7135#7137#7377::Tuple{}
  ######b#7136#7138#7378::Tuple{}
  ####_var0#7139#7379::Tuple{}
  ######a#7135#7137#7380::Tuple{}
  ######b#7136#7138#7381::Tuple{}
  ####_var0#7139#7382::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      σ2 = (Distributions.var)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      ##sqrt_a#7306 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7307 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7306::Float64))
      ####G#7280#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7284#7312 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7284#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      σ = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      GenSym(0) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7313 = GenSym(0)
      ##a2#7314 = GenSym(1)
      ##div_a#7315 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7313::Float64,##a2#7314::Float64))
      ####afactor#7290#7316 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7314::Float64))
      ####bfactor#7291#7317 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7313::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7314::Float64,##a2#7314::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7322 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7289#7296#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7315::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      ##a#7355 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7356 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7355::Float64))
      ##deriv#7357 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7356::Float64,##a#7355::Float64))))
      ####G#7078#7358 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7362 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7082#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7356::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7364 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7364::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      ####G#7088#7365 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7369 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7092#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7364::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7336 = GenSym(2)
      ##a2#7337 = GenSym(3)
      ##div_a#7338 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7336::Float64,##a2#7337::Float64))
      ####afactor#7290#7339 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7337::Float64))
      ####bfactor#7291#7340 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7336::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7337::Float64,##a2#7337::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7345 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7289#7296#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7338::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7347 = (top(getfield))(GenSym(4),:value)::Float64
      ##exp_a#7348 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7349 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7350 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7354 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7134#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7348::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ##a1#7370 = GenSym(13)
      ##a2#7371 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7376 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7101#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7370::Float64,##a2#7371::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7334 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7300#7304#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7379 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7139#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7324 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7325 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7326 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7331 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7073#7077#7134#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7382 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7139#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##sqrt_a#7306::Float64
  ##deriv#7307::Float64
  ####G#7280#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7281#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7282#7310::Tuple{}
  ##########x#7070#7072#7076#7283#7311::Float64
  ########_var0#7073#7077#7284#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ##div_a#7315::Float64
  ####afactor#7290#7316::Float64
  ####bfactor#7291#7317::Float64
  ########a#7093#7285#7292#7318::Tuple{}
  ########b#7094#7286#7293#7319::Tuple{}
  ########afactor#7095#7287#7294#7320::Float64
  ########bfactor#7096#7288#7295#7321::Float64
  ######_var0#7289#7296#7322::Tuple{}
  ######types#7196#7297#7323::Tuple{Type{Float64}}
  ##a#7324::Float64
  ##exp_a#7325::Float64
  ##deriv#7326::Float64
  ####G#7130#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7328::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7329::Tuple{}
  ##########x#7070#7072#7076#7133#7330::Float64
  ########_var0#7073#7077#7134#7331::Tuple{}
  ########tup#7069#7298#7302#7332::Tuple{}
  ########x#7070#7299#7303#7333::Float64
  ######_var0#7300#7304#7334::Tuple{}
  ########types#7083#7301#7305#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ##div_a#7338::Float64
  ####afactor#7290#7339::Float64
  ####bfactor#7291#7340::Float64
  ########a#7093#7285#7292#7341::Tuple{}
  ########b#7094#7286#7293#7342::Tuple{}
  ########afactor#7095#7287#7294#7343::Float64
  ########bfactor#7096#7288#7295#7344::Float64
  ######_var0#7289#7296#7345::Tuple{}
  ######types#7196#7297#7346::Tuple{Type{Float64}}
  ##a#7347::Float64
  ##exp_a#7348::Float64
  ##deriv#7349::Float64
  ####G#7130#7350::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7351::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7352::Tuple{}
  ##########x#7070#7072#7076#7133#7353::Float64
  ########_var0#7073#7077#7134#7354::Tuple{}
  ##a#7355::Float64
  ##div_a#7356::Float64
  ##deriv#7357::Float64
  ####G#7078#7358::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7359::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7360::Tuple{}
  ##########x#7070#7072#7076#7081#7361::Float64
  ########_var0#7073#7077#7082#7362::Tuple{}
  ########types#7083#7084#7085#7363::Tuple{Type{Float64}}
  ##a#7364::Float64
  ####G#7088#7365::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7366::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7367::Tuple{}
  ##########x#7070#7072#7076#7091#7368::Float64
  ########_var0#7073#7077#7092#7369::Tuple{}
  ##a1#7370::Float64
  ##a2#7371::Float64
  ######a#7093#7097#7372::Tuple{}
  ######b#7094#7098#7373::Tuple{}
  ######afactor#7095#7099#7374::Float64
  ######bfactor#7096#7100#7375::Float64
  ####_var0#7101#7376::Tuple{}
  ######a#7135#7137#7377::Tuple{}
  ######b#7136#7138#7378::Tuple{}
  ####_var0#7139#7379::Tuple{}
  ######a#7135#7137#7380::Tuple{}
  ######b#7136#7138#7381::Tuple{}
  ####_var0#7139#7382::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      σ2 = (Distributions.var)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      ##sqrt_a#7306 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7307 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7306::Float64))
      ####G#7280#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7284#7312 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7284#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      σ = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      GenSym(0) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7313 = GenSym(0)
      ##a2#7314 = GenSym(1)
      ##div_a#7315 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7313::Float64,##a2#7314::Float64))
      ####afactor#7290#7316 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7314::Float64))
      ####bfactor#7291#7317 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7313::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7314::Float64,##a2#7314::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7322 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7289#7296#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7315::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      ##a#7355 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7356 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7355::Float64))
      ##deriv#7357 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7356::Float64,##a#7355::Float64))))
      ####G#7078#7358 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7362 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7082#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7356::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7364 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7364::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      ####G#7088#7365 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7369 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7092#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7364::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7336 = GenSym(2)
      ##a2#7337 = GenSym(3)
      ##div_a#7338 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7336::Float64,##a2#7337::Float64))
      ####afactor#7290#7339 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7337::Float64))
      ####bfactor#7291#7340 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7336::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7337::Float64,##a2#7337::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7345 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7289#7296#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7338::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7347 = (top(getfield))(GenSym(4),:value)::Float64
      ##exp_a#7348 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7349 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7350 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7354 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7134#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7348::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ##a1#7370 = GenSym(13)
      ##a2#7371 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7376 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7101#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7370::Float64,##a2#7371::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7334 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7300#7304#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7379 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7139#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7324 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7325 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7326 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7331 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7073#7077#7134#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7382 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7139#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##sqrt_a#7306::Float64
  ##deriv#7307::Float64
  ####G#7280#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7281#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7282#7310::Tuple{}
  ##########x#7070#7072#7076#7283#7311::Float64
  ########_var0#7073#7077#7284#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ##div_a#7315::Float64
  ####afactor#7290#7316::Float64
  ####bfactor#7291#7317::Float64
  ########a#7093#7285#7292#7318::Tuple{}
  ########b#7094#7286#7293#7319::Tuple{}
  ########afactor#7095#7287#7294#7320::Float64
  ########bfactor#7096#7288#7295#7321::Float64
  ######_var0#7289#7296#7322::Tuple{}
  ######types#7196#7297#7323::Tuple{Type{Float64}}
  ##a#7324::Float64
  ##exp_a#7325::Float64
  ##deriv#7326::Float64
  ####G#7130#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7328::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7329::Tuple{}
  ##########x#7070#7072#7076#7133#7330::Float64
  ########_var0#7073#7077#7134#7331::Tuple{}
  ########tup#7069#7298#7302#7332::Tuple{}
  ########x#7070#7299#7303#7333::Float64
  ######_var0#7300#7304#7334::Tuple{}
  ########types#7083#7301#7305#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ##div_a#7338::Float64
  ####afactor#7290#7339::Float64
  ####bfactor#7291#7340::Float64
  ########a#7093#7285#7292#7341::Tuple{}
  ########b#7094#7286#7293#7342::Tuple{}
  ########afactor#7095#7287#7294#7343::Float64
  ########bfactor#7096#7288#7295#7344::Float64
  ######_var0#7289#7296#7345::Tuple{}
  ######types#7196#7297#7346::Tuple{Type{Float64}}
  ##a#7347::Float64
  ##exp_a#7348::Float64
  ##deriv#7349::Float64
  ####G#7130#7350::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7351::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7352::Tuple{}
  ##########x#7070#7072#7076#7133#7353::Float64
  ########_var0#7073#7077#7134#7354::Tuple{}
  ##a#7355::Float64
  ##div_a#7356::Float64
  ##deriv#7357::Float64
  ####G#7078#7358::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7359::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7360::Tuple{}
  ##########x#7070#7072#7076#7081#7361::Float64
  ########_var0#7073#7077#7082#7362::Tuple{}
  ########types#7083#7084#7085#7363::Tuple{Type{Float64}}
  ##a#7364::Float64
  ####G#7088#7365::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7366::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7367::Tuple{}
  ##########x#7070#7072#7076#7091#7368::Float64
  ########_var0#7073#7077#7092#7369::Tuple{}
  ##a1#7370::Float64
  ##a2#7371::Float64
  ######a#7093#7097#7372::Tuple{}
  ######b#7094#7098#7373::Tuple{}
  ######afactor#7095#7099#7374::Float64
  ######bfactor#7096#7100#7375::Float64
  ####_var0#7101#7376::Tuple{}
  ######a#7135#7137#7377::Tuple{}
  ######b#7136#7138#7378::Tuple{}
  ####_var0#7139#7379::Tuple{}
  ######a#7135#7137#7380::Tuple{}
  ######b#7136#7138#7381::Tuple{}
  ####_var0#7139#7382::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      σ2 = (Distributions.var)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      ##sqrt_a#7306 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7307 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7306::Float64))
      ####G#7280#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7284#7312 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7284#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      σ = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      GenSym(0) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7313 = GenSym(0)
      ##a2#7314 = GenSym(1)
      ##div_a#7315 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7313::Float64,##a2#7314::Float64))
      ####afactor#7290#7316 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7314::Float64))
      ####bfactor#7291#7317 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7313::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7314::Float64,##a2#7314::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7322 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7289#7296#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7315::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      ##a#7355 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7356 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7355::Float64))
      ##deriv#7357 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7356::Float64,##a#7355::Float64))))
      ####G#7078#7358 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7362 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7082#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7356::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7364 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7364::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      ####G#7088#7365 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7369 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7092#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7364::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7336 = GenSym(2)
      ##a2#7337 = GenSym(3)
      ##div_a#7338 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7336::Float64,##a2#7337::Float64))
      ####afactor#7290#7339 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7337::Float64))
      ####bfactor#7291#7340 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7336::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7337::Float64,##a2#7337::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7345 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7289#7296#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7338::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7347 = (top(getfield))(GenSym(4),:value)::Float64
      ##exp_a#7348 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7349 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7350 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7354 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7134#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7348::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ##a1#7370 = GenSym(13)
      ##a2#7371 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7376 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7101#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7370::Float64,##a2#7371::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7334 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7300#7304#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7379 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7139#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7324 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7325 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7326 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7331 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7073#7077#7134#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7382 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7139#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##sqrt_a#7306::Float64
  ##deriv#7307::Float64
  ####G#7280#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7281#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7282#7310::Tuple{}
  ##########x#7070#7072#7076#7283#7311::Float64
  ########_var0#7073#7077#7284#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ##div_a#7315::Float64
  ####afactor#7290#7316::Float64
  ####bfactor#7291#7317::Float64
  ########a#7093#7285#7292#7318::Tuple{}
  ########b#7094#7286#7293#7319::Tuple{}
  ########afactor#7095#7287#7294#7320::Float64
  ########bfactor#7096#7288#7295#7321::Float64
  ######_var0#7289#7296#7322::Tuple{}
  ######types#7196#7297#7323::Tuple{Type{Float64}}
  ##a#7324::Float64
  ##exp_a#7325::Float64
  ##deriv#7326::Float64
  ####G#7130#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7328::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7329::Tuple{}
  ##########x#7070#7072#7076#7133#7330::Float64
  ########_var0#7073#7077#7134#7331::Tuple{}
  ########tup#7069#7298#7302#7332::Tuple{}
  ########x#7070#7299#7303#7333::Float64
  ######_var0#7300#7304#7334::Tuple{}
  ########types#7083#7301#7305#7335::Tuple{Type{Float64}}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ##div_a#7338::Float64
  ####afactor#7290#7339::Float64
  ####bfactor#7291#7340::Float64
  ########a#7093#7285#7292#7341::Tuple{}
  ########b#7094#7286#7293#7342::Tuple{}
  ########afactor#7095#7287#7294#7343::Float64
  ########bfactor#7096#7288#7295#7344::Float64
  ######_var0#7289#7296#7345::Tuple{}
  ######types#7196#7297#7346::Tuple{Type{Float64}}
  ##a#7347::Float64
  ##exp_a#7348::Float64
  ##deriv#7349::Float64
  ####G#7130#7350::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7351::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7352::Tuple{}
  ##########x#7070#7072#7076#7133#7353::Float64
  ########_var0#7073#7077#7134#7354::Tuple{}
  ##a#7355::Float64
  ##div_a#7356::Float64
  ##deriv#7357::Float64
  ####G#7078#7358::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7359::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7360::Tuple{}
  ##########x#7070#7072#7076#7081#7361::Float64
  ########_var0#7073#7077#7082#7362::Tuple{}
  ########types#7083#7084#7085#7363::Tuple{Type{Float64}}
  ##a#7364::Float64
  ####G#7088#7365::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7366::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7367::Tuple{}
  ##########x#7070#7072#7076#7091#7368::Float64
  ########_var0#7073#7077#7092#7369::Tuple{}
  ##a1#7370::Float64
  ##a2#7371::Float64
  ######a#7093#7097#7372::Tuple{}
  ######b#7094#7098#7373::Tuple{}
  ######afactor#7095#7099#7374::Float64
  ######bfactor#7096#7100#7375::Float64
  ####_var0#7101#7376::Tuple{}
  ######a#7135#7137#7377::Tuple{}
  ######b#7136#7138#7378::Tuple{}
  ####_var0#7139#7379::Tuple{}
  ######a#7135#7137#7380::Tuple{}
  ######b#7136#7138#7381::Tuple{}
  ####_var0#7139#7382::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 64:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 65:
      σ2 = (Distributions.var)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 66:
      ##sqrt_a#7306 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7307 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7306::Float64))
      ####G#7280#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7284#7312 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7284#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      σ = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 67:
      GenSym(0) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7313 = GenSym(0)
      ##a2#7314 = GenSym(1)
      ##div_a#7315 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7313::Float64,##a2#7314::Float64))
      ####afactor#7290#7316 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7314::Float64))
      ####bfactor#7291#7317 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7313::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7314::Float64,##a2#7314::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7322 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7289#7296#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7315::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 68:
      ##a#7355 = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7356 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7355::Float64))
      ##deriv#7357 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7356::Float64,##a#7355::Float64))))
      ####G#7078#7358 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7362 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7082#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7356::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7364 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7364::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7364::Float64,0)::Float64
      ####G#7088#7365 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7369 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7092#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7364::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7336 = GenSym(2)
      ##a2#7337 = GenSym(3)
      ##div_a#7338 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7336::Float64,##a2#7337::Float64))
      ####afactor#7290#7339 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7337::Float64))
      ####bfactor#7291#7340 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7336::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7337::Float64,##a2#7337::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7345 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7289#7296#7345 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7338::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7347 = (top(getfield))(GenSym(4),:value)::Float64
      ##exp_a#7348 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7349 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7347::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7350 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7354 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7134#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7348::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ##a1#7370 = GenSym(13)
      ##a2#7371 = GenSym(14)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7376 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7101#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7370::Float64,##a2#7371::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7334 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7300#7304#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7379 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7139#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7324 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7325 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7326 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7324::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7130#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7331 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7073#7077#7134#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7382 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7139#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(15),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(16),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  μ::Float64
  σ::Float64
  γ::Float64
  r::Float64
  r2::Float64
  r4::Float64
  ##xs#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(15) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{Float64})::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      r2 = (Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      r4 = (Base.box)(Base.Float64,(Base.mul_float)(r2::Float64,r2::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(12) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(4.0,α::Float64))))
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(θ::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4))))::Float64,(Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,γ::Float64)),r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,r2::Float64)))),r4::Float64)),3.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  μ::Float64
  σ::Float64
  γ::Float64
  r::Float64
  r2::Float64
  r4::Float64
  ##xs#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(15) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{Float64})::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      r2 = (Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      r4 = (Base.box)(Base.Float64,(Base.mul_float)(r2::Float64,r2::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(12) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(4.0,α::Float64))))
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(θ::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4))))::Float64,(Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,γ::Float64)),r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,r2::Float64)))),r4::Float64)),3.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7403::Float64
  ##a2#7404::Float64
  ##div_a#7405::Float64
  ####afactor#7290#7406::Float64
  ####bfactor#7291#7407::Float64
  ########a#7093#7285#7292#7408::Tuple{}
  ########b#7094#7286#7293#7409::Tuple{}
  ########afactor#7095#7287#7294#7410::Float64
  ########bfactor#7096#7288#7295#7411::Float64
  ######_var0#7289#7296#7412::Tuple{}
  ######types#7196#7297#7413::Tuple{Type{Float64}}
  ##a#7414::Float64
  ##exp_a#7415::Float64
  ##deriv#7416::Float64
  ####G#7130#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7419::Tuple{}
  ##########x#7070#7072#7076#7133#7420::Float64
  ########_var0#7073#7077#7134#7421::Tuple{}
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7130#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7427::Tuple{}
  ##########x#7070#7072#7076#7133#7428::Float64
  ########_var0#7073#7077#7134#7429::Tuple{}
  ########tup#7069#7298#7302#7430::Tuple{}
  ########x#7070#7299#7303#7431::Float64
  ######_var0#7300#7304#7432::Tuple{}
  ########types#7083#7301#7305#7433::Tuple{Type{Float64}}
  ##xs#7434::Tuple{}
  ##########tup#7069#7298#7302#7391#7435::Tuple{}
  ##########x#7070#7299#7303#7392#7436::Float64
  ########_var0#7300#7304#7393#7437::Tuple{}
  ##########types#7083#7301#7305#7394#7438::Tuple{Type{Float64}}
  ####a1#7395#7439::Float64
  ####a2#7396#7440::Float64
  ########a#7093#7097#7397#7441::Tuple{}
  ########b#7094#7098#7398#7442::Tuple{}
  ########afactor#7095#7099#7399#7443::Float64
  ########bfactor#7096#7100#7400#7444::Float64
  ######_var0#7101#7401#7445::Tuple{}
  ##a#7446::Float64
  ##div_a#7447::Float64
  ##deriv#7448::Float64
  ####G#7078#7449::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7450::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7451::Tuple{}
  ##########x#7070#7072#7076#7081#7452::Float64
  ########_var0#7073#7077#7082#7453::Tuple{}
  ########types#7083#7084#7085#7454::Tuple{Type{Float64}}
  ##a#7455::Float64
  ####G#7088#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7458::Tuple{}
  ##########x#7070#7072#7076#7091#7459::Float64
  ########_var0#7073#7077#7092#7460::Tuple{}
  ##a1#7461::Float64
  ##a2#7462::Float64
  ##div_a#7463::Float64
  ####afactor#7290#7464::Float64
  ####bfactor#7291#7465::Float64
  ########a#7093#7285#7292#7466::Tuple{}
  ########b#7094#7286#7293#7467::Tuple{}
  ########afactor#7095#7287#7294#7468::Float64
  ########bfactor#7096#7288#7295#7469::Float64
  ######_var0#7289#7296#7470::Tuple{}
  ######types#7196#7297#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ##exp_a#7473::Float64
  ##deriv#7474::Float64
  ####G#7130#7475::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7476::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7477::Tuple{}
  ##########x#7070#7072#7076#7133#7478::Float64
  ########_var0#7073#7077#7134#7479::Tuple{}
  ##a1#7480::Float64
  ##a2#7481::Float64
  ######a#7093#7097#7482::Tuple{}
  ######b#7094#7098#7483::Tuple{}
  ######afactor#7095#7099#7484::Float64
  ######bfactor#7096#7100#7485::Float64
  ####_var0#7101#7486::Tuple{}
  ######a#7135#7137#7487::Tuple{}
  ######b#7136#7138#7488::Tuple{}
  ####_var0#7139#7489::Tuple{}
  ######a#7135#7137#7490::Tuple{}
  ######b#7136#7138#7491::Tuple{}
  ####_var0#7139#7492::Tuple{}
  ######a#7135#7137#7493::Tuple{}
  ######b#7136#7138#7494::Tuple{}
  ####_var0#7139#7495::Tuple{}
  ######types#7083#7402#7496::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(23) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      σ = (Distributions.std)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7403 = GenSym(3)
      ##a2#7404 = GenSym(4)
      ##div_a#7405 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7403::Float64,##a2#7404::Float64))
      ####afactor#7290#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7404::Float64))
      ####bfactor#7291#7407 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7403::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7404::Float64,##a2#7404::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7412 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      ##a#7414 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7415 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7134#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      r2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7415::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      ##a#7422 = (top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7429 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7134#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      r4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(13) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(14) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7461 = GenSym(13)
      ##a2#7462 = GenSym(14)
      ##div_a#7463 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7461::Float64,##a2#7462::Float64))
      ####afactor#7290#7464 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7462::Float64))
      ####bfactor#7291#7465 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7461::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7462::Float64,##a2#7462::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7470 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7289#7296#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7463::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7472 = (top(getfield))(GenSym(15),:value)::Float64
      ##exp_a#7473 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4)))::ANY)::Float64
      ##deriv#7474 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(4,1))))))::Float64))
      ####G#7130#7475 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7479 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7134#7479 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7473::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7447 = (Base.box)(Base.Float64,(Base.div_float)(4.0,##a#7446::Float64))
      ##deriv#7448 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7447::Float64,##a#7446::Float64))))
      ####G#7078#7449 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7453 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7082#7453 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7447::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7455 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      GenSym(10) = (ForwardDiff.digamma)(##a#7455::Float64)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      ####G#7088#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7460 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7092#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(12),##a#7455::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7480 = GenSym(18)
      ##a2#7481 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7486 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7101#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7480::Float64,##a2#7481::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7300#7304#7393#7437 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7300#7304#7393#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7395#7439 = GenSym(5)
      ####a2#7396#7440 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7401#7445 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7101#7401#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7395#7439::Float64,####a2#7396#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7489 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7139#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7432 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7300#7304#7432 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7492 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7139#7492 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7495 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7139#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(20),:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(22),:value)::Float64,3.0))), :((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  μ::Float64
  σ::Float64
  γ::Float64
  r::Float64
  r2::Float64
  r4::Float64
  ##xs#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(15) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{Float64})::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      r2 = (Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      r4 = (Base.box)(Base.Float64,(Base.mul_float)(r2::Float64,r2::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(12) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(4.0,α::Float64))))
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(θ::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4))))::Float64,(Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,γ::Float64)),r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,r2::Float64)))),r4::Float64)),3.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  μ::Float64
  σ::Float64
  γ::Float64
  r::Float64
  r2::Float64
  r4::Float64
  ##xs#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(15) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      μ = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      GenSym(9) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(2.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      σ = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{Float64})::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      r2 = (Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      r4 = (Base.box)(Base.Float64,(Base.mul_float)(r2::Float64,r2::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(12) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(4.0,α::Float64))))
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(θ::Float64,σ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4))))::Float64,(Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,γ::Float64)),r::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,r2::Float64)))),r4::Float64)),3.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7403::Float64
  ##a2#7404::Float64
  ##div_a#7405::Float64
  ####afactor#7290#7406::Float64
  ####bfactor#7291#7407::Float64
  ########a#7093#7285#7292#7408::Tuple{}
  ########b#7094#7286#7293#7409::Tuple{}
  ########afactor#7095#7287#7294#7410::Float64
  ########bfactor#7096#7288#7295#7411::Float64
  ######_var0#7289#7296#7412::Tuple{}
  ######types#7196#7297#7413::Tuple{Type{Float64}}
  ##a#7414::Float64
  ##exp_a#7415::Float64
  ##deriv#7416::Float64
  ####G#7130#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7419::Tuple{}
  ##########x#7070#7072#7076#7133#7420::Float64
  ########_var0#7073#7077#7134#7421::Tuple{}
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7130#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7427::Tuple{}
  ##########x#7070#7072#7076#7133#7428::Float64
  ########_var0#7073#7077#7134#7429::Tuple{}
  ########tup#7069#7298#7302#7430::Tuple{}
  ########x#7070#7299#7303#7431::Float64
  ######_var0#7300#7304#7432::Tuple{}
  ########types#7083#7301#7305#7433::Tuple{Type{Float64}}
  ##xs#7434::Tuple{}
  ##########tup#7069#7298#7302#7391#7435::Tuple{}
  ##########x#7070#7299#7303#7392#7436::Float64
  ########_var0#7300#7304#7393#7437::Tuple{}
  ##########types#7083#7301#7305#7394#7438::Tuple{Type{Float64}}
  ####a1#7395#7439::Float64
  ####a2#7396#7440::Float64
  ########a#7093#7097#7397#7441::Tuple{}
  ########b#7094#7098#7398#7442::Tuple{}
  ########afactor#7095#7099#7399#7443::Float64
  ########bfactor#7096#7100#7400#7444::Float64
  ######_var0#7101#7401#7445::Tuple{}
  ##a#7446::Float64
  ##div_a#7447::Float64
  ##deriv#7448::Float64
  ####G#7078#7449::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7450::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7451::Tuple{}
  ##########x#7070#7072#7076#7081#7452::Float64
  ########_var0#7073#7077#7082#7453::Tuple{}
  ########types#7083#7084#7085#7454::Tuple{Type{Float64}}
  ##a#7455::Float64
  ####G#7088#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7458::Tuple{}
  ##########x#7070#7072#7076#7091#7459::Float64
  ########_var0#7073#7077#7092#7460::Tuple{}
  ##a1#7461::Float64
  ##a2#7462::Float64
  ##div_a#7463::Float64
  ####afactor#7290#7464::Float64
  ####bfactor#7291#7465::Float64
  ########a#7093#7285#7292#7466::Tuple{}
  ########b#7094#7286#7293#7467::Tuple{}
  ########afactor#7095#7287#7294#7468::Float64
  ########bfactor#7096#7288#7295#7469::Float64
  ######_var0#7289#7296#7470::Tuple{}
  ######types#7196#7297#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ##exp_a#7473::Float64
  ##deriv#7474::Float64
  ####G#7130#7475::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7476::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7477::Tuple{}
  ##########x#7070#7072#7076#7133#7478::Float64
  ########_var0#7073#7077#7134#7479::Tuple{}
  ##a1#7480::Float64
  ##a2#7481::Float64
  ######a#7093#7097#7482::Tuple{}
  ######b#7094#7098#7483::Tuple{}
  ######afactor#7095#7099#7484::Float64
  ######bfactor#7096#7100#7485::Float64
  ####_var0#7101#7486::Tuple{}
  ######a#7135#7137#7487::Tuple{}
  ######b#7136#7138#7488::Tuple{}
  ####_var0#7139#7489::Tuple{}
  ######a#7135#7137#7490::Tuple{}
  ######b#7136#7138#7491::Tuple{}
  ####_var0#7139#7492::Tuple{}
  ######a#7135#7137#7493::Tuple{}
  ######b#7136#7138#7494::Tuple{}
  ####_var0#7139#7495::Tuple{}
  ######types#7083#7402#7496::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(23) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      σ = (Distributions.std)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7403 = GenSym(3)
      ##a2#7404 = GenSym(4)
      ##div_a#7405 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7403::Float64,##a2#7404::Float64))
      ####afactor#7290#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7404::Float64))
      ####bfactor#7291#7407 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7403::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7404::Float64,##a2#7404::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7412 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      ##a#7414 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7415 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7134#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      r2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7415::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      ##a#7422 = (top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7429 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7134#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      r4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(13) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(14) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7461 = GenSym(13)
      ##a2#7462 = GenSym(14)
      ##div_a#7463 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7461::Float64,##a2#7462::Float64))
      ####afactor#7290#7464 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7462::Float64))
      ####bfactor#7291#7465 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7461::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7462::Float64,##a2#7462::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7470 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7289#7296#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7463::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7472 = (top(getfield))(GenSym(15),:value)::Float64
      ##exp_a#7473 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4)))::ANY)::Float64
      ##deriv#7474 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(4,1))))))::Float64))
      ####G#7130#7475 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7479 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7134#7479 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7473::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7447 = (Base.box)(Base.Float64,(Base.div_float)(4.0,##a#7446::Float64))
      ##deriv#7448 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7447::Float64,##a#7446::Float64))))
      ####G#7078#7449 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7453 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7082#7453 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7447::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7455 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      GenSym(10) = (ForwardDiff.digamma)(##a#7455::Float64)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      ####G#7088#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7460 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7092#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(12),##a#7455::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7480 = GenSym(18)
      ##a2#7481 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7486 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7101#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7480::Float64,##a2#7481::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7300#7304#7393#7437 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7300#7304#7393#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7395#7439 = GenSym(5)
      ####a2#7396#7440 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7401#7445 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7101#7401#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7395#7439::Float64,####a2#7396#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7489 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7139#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7432 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7300#7304#7432 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7492 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7139#7492 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7495 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7139#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(20),:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(22),:value)::Float64,3.0))), :((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7403::Float64
  ##a2#7404::Float64
  ##div_a#7405::Float64
  ####afactor#7290#7406::Float64
  ####bfactor#7291#7407::Float64
  ########a#7093#7285#7292#7408::Tuple{}
  ########b#7094#7286#7293#7409::Tuple{}
  ########afactor#7095#7287#7294#7410::Float64
  ########bfactor#7096#7288#7295#7411::Float64
  ######_var0#7289#7296#7412::Tuple{}
  ######types#7196#7297#7413::Tuple{Type{Float64}}
  ##a#7414::Float64
  ##exp_a#7415::Float64
  ##deriv#7416::Float64
  ####G#7130#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7419::Tuple{}
  ##########x#7070#7072#7076#7133#7420::Float64
  ########_var0#7073#7077#7134#7421::Tuple{}
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7130#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7427::Tuple{}
  ##########x#7070#7072#7076#7133#7428::Float64
  ########_var0#7073#7077#7134#7429::Tuple{}
  ########tup#7069#7298#7302#7430::Tuple{}
  ########x#7070#7299#7303#7431::Float64
  ######_var0#7300#7304#7432::Tuple{}
  ########types#7083#7301#7305#7433::Tuple{Type{Float64}}
  ##xs#7434::Tuple{}
  ##########tup#7069#7298#7302#7391#7435::Tuple{}
  ##########x#7070#7299#7303#7392#7436::Float64
  ########_var0#7300#7304#7393#7437::Tuple{}
  ##########types#7083#7301#7305#7394#7438::Tuple{Type{Float64}}
  ####a1#7395#7439::Float64
  ####a2#7396#7440::Float64
  ########a#7093#7097#7397#7441::Tuple{}
  ########b#7094#7098#7398#7442::Tuple{}
  ########afactor#7095#7099#7399#7443::Float64
  ########bfactor#7096#7100#7400#7444::Float64
  ######_var0#7101#7401#7445::Tuple{}
  ##a#7446::Float64
  ##div_a#7447::Float64
  ##deriv#7448::Float64
  ####G#7078#7449::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7450::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7451::Tuple{}
  ##########x#7070#7072#7076#7081#7452::Float64
  ########_var0#7073#7077#7082#7453::Tuple{}
  ########types#7083#7084#7085#7454::Tuple{Type{Float64}}
  ##a#7455::Float64
  ####G#7088#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7458::Tuple{}
  ##########x#7070#7072#7076#7091#7459::Float64
  ########_var0#7073#7077#7092#7460::Tuple{}
  ##a1#7461::Float64
  ##a2#7462::Float64
  ##div_a#7463::Float64
  ####afactor#7290#7464::Float64
  ####bfactor#7291#7465::Float64
  ########a#7093#7285#7292#7466::Tuple{}
  ########b#7094#7286#7293#7467::Tuple{}
  ########afactor#7095#7287#7294#7468::Float64
  ########bfactor#7096#7288#7295#7469::Float64
  ######_var0#7289#7296#7470::Tuple{}
  ######types#7196#7297#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ##exp_a#7473::Float64
  ##deriv#7474::Float64
  ####G#7130#7475::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7476::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7477::Tuple{}
  ##########x#7070#7072#7076#7133#7478::Float64
  ########_var0#7073#7077#7134#7479::Tuple{}
  ##a1#7480::Float64
  ##a2#7481::Float64
  ######a#7093#7097#7482::Tuple{}
  ######b#7094#7098#7483::Tuple{}
  ######afactor#7095#7099#7484::Float64
  ######bfactor#7096#7100#7485::Float64
  ####_var0#7101#7486::Tuple{}
  ######a#7135#7137#7487::Tuple{}
  ######b#7136#7138#7488::Tuple{}
  ####_var0#7139#7489::Tuple{}
  ######a#7135#7137#7490::Tuple{}
  ######b#7136#7138#7491::Tuple{}
  ####_var0#7139#7492::Tuple{}
  ######a#7135#7137#7493::Tuple{}
  ######b#7136#7138#7494::Tuple{}
  ####_var0#7139#7495::Tuple{}
  ######types#7083#7402#7496::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(23) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      σ = (Distributions.std)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7403 = GenSym(3)
      ##a2#7404 = GenSym(4)
      ##div_a#7405 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7403::Float64,##a2#7404::Float64))
      ####afactor#7290#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7404::Float64))
      ####bfactor#7291#7407 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7403::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7404::Float64,##a2#7404::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7412 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      ##a#7414 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7415 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7134#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      r2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7415::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      ##a#7422 = (top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7429 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7134#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      r4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(13) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(14) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7461 = GenSym(13)
      ##a2#7462 = GenSym(14)
      ##div_a#7463 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7461::Float64,##a2#7462::Float64))
      ####afactor#7290#7464 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7462::Float64))
      ####bfactor#7291#7465 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7461::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7462::Float64,##a2#7462::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7470 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7289#7296#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7463::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7472 = (top(getfield))(GenSym(15),:value)::Float64
      ##exp_a#7473 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4)))::ANY)::Float64
      ##deriv#7474 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(4,1))))))::Float64))
      ####G#7130#7475 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7479 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7134#7479 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7473::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7447 = (Base.box)(Base.Float64,(Base.div_float)(4.0,##a#7446::Float64))
      ##deriv#7448 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7447::Float64,##a#7446::Float64))))
      ####G#7078#7449 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7453 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7082#7453 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7447::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7455 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      GenSym(10) = (ForwardDiff.digamma)(##a#7455::Float64)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      ####G#7088#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7460 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7092#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(12),##a#7455::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7480 = GenSym(18)
      ##a2#7481 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7486 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7101#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7480::Float64,##a2#7481::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7300#7304#7393#7437 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7300#7304#7393#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7395#7439 = GenSym(5)
      ####a2#7396#7440 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7401#7445 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7101#7401#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7395#7439::Float64,####a2#7396#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7489 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7139#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7432 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7300#7304#7432 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7492 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7139#7492 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7495 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7139#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(20),:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(22),:value)::Float64,3.0))), :((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7403::Float64
  ##a2#7404::Float64
  ##div_a#7405::Float64
  ####afactor#7290#7406::Float64
  ####bfactor#7291#7407::Float64
  ########a#7093#7285#7292#7408::Tuple{}
  ########b#7094#7286#7293#7409::Tuple{}
  ########afactor#7095#7287#7294#7410::Float64
  ########bfactor#7096#7288#7295#7411::Float64
  ######_var0#7289#7296#7412::Tuple{}
  ######types#7196#7297#7413::Tuple{Type{Float64}}
  ##a#7414::Float64
  ##exp_a#7415::Float64
  ##deriv#7416::Float64
  ####G#7130#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7419::Tuple{}
  ##########x#7070#7072#7076#7133#7420::Float64
  ########_var0#7073#7077#7134#7421::Tuple{}
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7130#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7427::Tuple{}
  ##########x#7070#7072#7076#7133#7428::Float64
  ########_var0#7073#7077#7134#7429::Tuple{}
  ########tup#7069#7298#7302#7430::Tuple{}
  ########x#7070#7299#7303#7431::Float64
  ######_var0#7300#7304#7432::Tuple{}
  ########types#7083#7301#7305#7433::Tuple{Type{Float64}}
  ##xs#7434::Tuple{}
  ##########tup#7069#7298#7302#7391#7435::Tuple{}
  ##########x#7070#7299#7303#7392#7436::Float64
  ########_var0#7300#7304#7393#7437::Tuple{}
  ##########types#7083#7301#7305#7394#7438::Tuple{Type{Float64}}
  ####a1#7395#7439::Float64
  ####a2#7396#7440::Float64
  ########a#7093#7097#7397#7441::Tuple{}
  ########b#7094#7098#7398#7442::Tuple{}
  ########afactor#7095#7099#7399#7443::Float64
  ########bfactor#7096#7100#7400#7444::Float64
  ######_var0#7101#7401#7445::Tuple{}
  ##a#7446::Float64
  ##div_a#7447::Float64
  ##deriv#7448::Float64
  ####G#7078#7449::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7450::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7451::Tuple{}
  ##########x#7070#7072#7076#7081#7452::Float64
  ########_var0#7073#7077#7082#7453::Tuple{}
  ########types#7083#7084#7085#7454::Tuple{Type{Float64}}
  ##a#7455::Float64
  ####G#7088#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7458::Tuple{}
  ##########x#7070#7072#7076#7091#7459::Float64
  ########_var0#7073#7077#7092#7460::Tuple{}
  ##a1#7461::Float64
  ##a2#7462::Float64
  ##div_a#7463::Float64
  ####afactor#7290#7464::Float64
  ####bfactor#7291#7465::Float64
  ########a#7093#7285#7292#7466::Tuple{}
  ########b#7094#7286#7293#7467::Tuple{}
  ########afactor#7095#7287#7294#7468::Float64
  ########bfactor#7096#7288#7295#7469::Float64
  ######_var0#7289#7296#7470::Tuple{}
  ######types#7196#7297#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ##exp_a#7473::Float64
  ##deriv#7474::Float64
  ####G#7130#7475::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7476::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7477::Tuple{}
  ##########x#7070#7072#7076#7133#7478::Float64
  ########_var0#7073#7077#7134#7479::Tuple{}
  ##a1#7480::Float64
  ##a2#7481::Float64
  ######a#7093#7097#7482::Tuple{}
  ######b#7094#7098#7483::Tuple{}
  ######afactor#7095#7099#7484::Float64
  ######bfactor#7096#7100#7485::Float64
  ####_var0#7101#7486::Tuple{}
  ######a#7135#7137#7487::Tuple{}
  ######b#7136#7138#7488::Tuple{}
  ####_var0#7139#7489::Tuple{}
  ######a#7135#7137#7490::Tuple{}
  ######b#7136#7138#7491::Tuple{}
  ####_var0#7139#7492::Tuple{}
  ######a#7135#7137#7493::Tuple{}
  ######b#7136#7138#7494::Tuple{}
  ####_var0#7139#7495::Tuple{}
  ######types#7083#7402#7496::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(23) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      σ = (Distributions.std)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7403 = GenSym(3)
      ##a2#7404 = GenSym(4)
      ##div_a#7405 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7403::Float64,##a2#7404::Float64))
      ####afactor#7290#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7404::Float64))
      ####bfactor#7291#7407 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7403::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7404::Float64,##a2#7404::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7412 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      ##a#7414 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7415 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7134#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      r2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7415::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      ##a#7422 = (top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7429 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7134#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      r4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(13) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(14) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7461 = GenSym(13)
      ##a2#7462 = GenSym(14)
      ##div_a#7463 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7461::Float64,##a2#7462::Float64))
      ####afactor#7290#7464 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7462::Float64))
      ####bfactor#7291#7465 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7461::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7462::Float64,##a2#7462::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7470 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7289#7296#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7463::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7472 = (top(getfield))(GenSym(15),:value)::Float64
      ##exp_a#7473 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4)))::ANY)::Float64
      ##deriv#7474 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(4,1))))))::Float64))
      ####G#7130#7475 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7479 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7134#7479 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7473::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7447 = (Base.box)(Base.Float64,(Base.div_float)(4.0,##a#7446::Float64))
      ##deriv#7448 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7447::Float64,##a#7446::Float64))))
      ####G#7078#7449 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7453 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7082#7453 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7447::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7455 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      GenSym(10) = (ForwardDiff.digamma)(##a#7455::Float64)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      ####G#7088#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7460 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7092#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(12),##a#7455::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7480 = GenSym(18)
      ##a2#7481 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7486 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7101#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7480::Float64,##a2#7481::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7300#7304#7393#7437 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7300#7304#7393#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7395#7439 = GenSym(5)
      ####a2#7396#7440 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7401#7445 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7101#7401#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7395#7439::Float64,####a2#7396#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7489 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7139#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7432 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7300#7304#7432 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7492 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7139#7492 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7495 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7139#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(20),:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(22),:value)::Float64,3.0))), :((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7403::Float64
  ##a2#7404::Float64
  ##div_a#7405::Float64
  ####afactor#7290#7406::Float64
  ####bfactor#7291#7407::Float64
  ########a#7093#7285#7292#7408::Tuple{}
  ########b#7094#7286#7293#7409::Tuple{}
  ########afactor#7095#7287#7294#7410::Float64
  ########bfactor#7096#7288#7295#7411::Float64
  ######_var0#7289#7296#7412::Tuple{}
  ######types#7196#7297#7413::Tuple{Type{Float64}}
  ##a#7414::Float64
  ##exp_a#7415::Float64
  ##deriv#7416::Float64
  ####G#7130#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7419::Tuple{}
  ##########x#7070#7072#7076#7133#7420::Float64
  ########_var0#7073#7077#7134#7421::Tuple{}
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7130#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7427::Tuple{}
  ##########x#7070#7072#7076#7133#7428::Float64
  ########_var0#7073#7077#7134#7429::Tuple{}
  ########tup#7069#7298#7302#7430::Tuple{}
  ########x#7070#7299#7303#7431::Float64
  ######_var0#7300#7304#7432::Tuple{}
  ########types#7083#7301#7305#7433::Tuple{Type{Float64}}
  ##xs#7434::Tuple{}
  ##########tup#7069#7298#7302#7391#7435::Tuple{}
  ##########x#7070#7299#7303#7392#7436::Float64
  ########_var0#7300#7304#7393#7437::Tuple{}
  ##########types#7083#7301#7305#7394#7438::Tuple{Type{Float64}}
  ####a1#7395#7439::Float64
  ####a2#7396#7440::Float64
  ########a#7093#7097#7397#7441::Tuple{}
  ########b#7094#7098#7398#7442::Tuple{}
  ########afactor#7095#7099#7399#7443::Float64
  ########bfactor#7096#7100#7400#7444::Float64
  ######_var0#7101#7401#7445::Tuple{}
  ##a#7446::Float64
  ##div_a#7447::Float64
  ##deriv#7448::Float64
  ####G#7078#7449::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7450::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7451::Tuple{}
  ##########x#7070#7072#7076#7081#7452::Float64
  ########_var0#7073#7077#7082#7453::Tuple{}
  ########types#7083#7084#7085#7454::Tuple{Type{Float64}}
  ##a#7455::Float64
  ####G#7088#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7089#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7090#7458::Tuple{}
  ##########x#7070#7072#7076#7091#7459::Float64
  ########_var0#7073#7077#7092#7460::Tuple{}
  ##a1#7461::Float64
  ##a2#7462::Float64
  ##div_a#7463::Float64
  ####afactor#7290#7464::Float64
  ####bfactor#7291#7465::Float64
  ########a#7093#7285#7292#7466::Tuple{}
  ########b#7094#7286#7293#7467::Tuple{}
  ########afactor#7095#7287#7294#7468::Float64
  ########bfactor#7096#7288#7295#7469::Float64
  ######_var0#7289#7296#7470::Tuple{}
  ######types#7196#7297#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ##exp_a#7473::Float64
  ##deriv#7474::Float64
  ####G#7130#7475::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7131#7476::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7132#7477::Tuple{}
  ##########x#7070#7072#7076#7133#7478::Float64
  ########_var0#7073#7077#7134#7479::Tuple{}
  ##a1#7480::Float64
  ##a2#7481::Float64
  ######a#7093#7097#7482::Tuple{}
  ######b#7094#7098#7483::Tuple{}
  ######afactor#7095#7099#7484::Float64
  ######bfactor#7096#7100#7485::Float64
  ####_var0#7101#7486::Tuple{}
  ######a#7135#7137#7487::Tuple{}
  ######b#7136#7138#7488::Tuple{}
  ####_var0#7139#7489::Tuple{}
  ######a#7135#7137#7490::Tuple{}
  ######b#7136#7138#7491::Tuple{}
  ####_var0#7139#7492::Tuple{}
  ######a#7135#7137#7493::Tuple{}
  ######b#7136#7138#7494::Tuple{}
  ####_var0#7139#7495::Tuple{}
  ######types#7083#7402#7496::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 72:
      GenSym(23) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 73:
      μ = (Distributions.mean)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 74:
      σ = (Distributions.std)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 75:
      γ = (Distributions.skewness)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 76:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7403 = GenSym(3)
      ##a2#7404 = GenSym(4)
      ##div_a#7405 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7403::Float64,##a2#7404::Float64))
      ####afactor#7290#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7404::Float64))
      ####bfactor#7291#7407 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7403::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7404::Float64,##a2#7404::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7412 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7412 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7405::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 77:
      ##a#7414 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7415 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7414::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7421 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7134#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      r2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7415::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 78:
      ##a#7422 = (top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7130#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7429 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7134#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      r4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 79:
      GenSym(13) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(14) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7461 = GenSym(13)
      ##a2#7462 = GenSym(14)
      ##div_a#7463 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7461::Float64,##a2#7462::Float64))
      ####afactor#7290#7464 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7462::Float64))
      ####bfactor#7291#7465 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7461::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7462::Float64,##a2#7462::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7470 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7289#7296#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7463::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7472 = (top(getfield))(GenSym(15),:value)::Float64
      ##exp_a#7473 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,4)))::ANY)::Float64
      ##deriv#7474 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7472::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(4,1))))))::Float64))
      ####G#7130#7475 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7134#7479 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7134#7479 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7473::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7446 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7447 = (Base.box)(Base.Float64,(Base.div_float)(4.0,##a#7446::Float64))
      ##deriv#7448 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7447::Float64,##a#7446::Float64))))
      ####G#7078#7449 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7453 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7082#7453 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7447::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7455 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      GenSym(10) = (ForwardDiff.digamma)(##a#7455::Float64)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7455::Float64,0)::Float64
      ####G#7088#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7092#7460 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7092#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(12),##a#7455::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      GenSym(19) = (top(getfield))(GenSym(17),:value)::Float64
      ##a1#7480 = GenSym(18)
      ##a2#7481 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7101#7486 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7101#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7480::Float64,##a2#7481::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7300#7304#7393#7437 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7300#7304#7393#7437 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(γ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7395#7439 = GenSym(5)
      ####a2#7396#7440 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7401#7445 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7101#7401#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7395#7439::Float64,####a2#7396#7440::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7489 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7139#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7432 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7300#7304#7432 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7492 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7139#7492 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7139#7495 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7139#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(20),:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(r4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(22),:value)::Float64,3.0))), :((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7497::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(6) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))))),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),1.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7497::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(6) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))))),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),1.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a1#7512::Float64
  ##a2#7513::Float64
  ##div_a#7514::Float64
  ####afactor#7290#7515::Float64
  ####bfactor#7291#7516::Float64
  ########a#7093#7285#7292#7517::Tuple{}
  ########b#7094#7286#7293#7518::Tuple{}
  ########afactor#7095#7287#7294#7519::Float64
  ########bfactor#7096#7288#7295#7520::Float64
  ######_var0#7289#7296#7521::Tuple{}
  ######types#7196#7297#7522::Tuple{Type{Float64}}
  ##a#7523::Float64
  ####G#7498#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7499#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7500#7526::Tuple{}
  ##########x#7070#7072#7076#7501#7527::Float64
  ########_var0#7073#7077#7502#7528::Tuple{}
  ##a#7529::Float64
  ##div_a#7530::Float64
  ##deriv#7531::Float64
  ####G#7078#7532::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7533::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7534::Tuple{}
  ##########x#7070#7072#7076#7081#7535::Float64
  ########_var0#7073#7077#7082#7536::Tuple{}
  ######tup#7187#7188#7537::Tuple{}
  ####_var0#7189#7538::Tuple{}
  ######types#7083#7190#7539::Tuple{Type{Float64}}
  ########tup#7069#7298#7302#7540::Tuple{}
  ########x#7070#7299#7303#7541::Float64
  ######_var0#7300#7304#7542::Tuple{}
  ########types#7083#7301#7305#7543::Tuple{Type{Float64}}
  ##xs#7544::Tuple{}
  ########a#7503#7505#7508#7545::Tuple{}
  ########b#7504#7506#7509#7546::Tuple{}
  ######_var0#7507#7510#7547::Tuple{}
  ########types#7083#7084#7511#7548::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(11) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      ##a#7529 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7530 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7529::Float64))
      ##deriv#7531 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7530::Float64,##a#7529::Float64))))
      ####G#7078#7532 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7536 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7530::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7538 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7189#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7542 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7300#7304#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7512 = GenSym(3)
      ##a2#7513 = GenSym(4)
      ##div_a#7514 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7512::Float64,##a2#7513::Float64))
      ####afactor#7290#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7513::Float64))
      ####bfactor#7291#7516 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7512::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7513::Float64,##a2#7513::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7521 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7521 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7514::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7498#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7502#7528 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7502#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7523::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7507#7510#7547 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7507#7510#7547 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7497::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(6) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))))),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),1.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7497::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(6) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))))),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)),1.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a1#7512::Float64
  ##a2#7513::Float64
  ##div_a#7514::Float64
  ####afactor#7290#7515::Float64
  ####bfactor#7291#7516::Float64
  ########a#7093#7285#7292#7517::Tuple{}
  ########b#7094#7286#7293#7518::Tuple{}
  ########afactor#7095#7287#7294#7519::Float64
  ########bfactor#7096#7288#7295#7520::Float64
  ######_var0#7289#7296#7521::Tuple{}
  ######types#7196#7297#7522::Tuple{Type{Float64}}
  ##a#7523::Float64
  ####G#7498#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7499#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7500#7526::Tuple{}
  ##########x#7070#7072#7076#7501#7527::Float64
  ########_var0#7073#7077#7502#7528::Tuple{}
  ##a#7529::Float64
  ##div_a#7530::Float64
  ##deriv#7531::Float64
  ####G#7078#7532::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7533::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7534::Tuple{}
  ##########x#7070#7072#7076#7081#7535::Float64
  ########_var0#7073#7077#7082#7536::Tuple{}
  ######tup#7187#7188#7537::Tuple{}
  ####_var0#7189#7538::Tuple{}
  ######types#7083#7190#7539::Tuple{Type{Float64}}
  ########tup#7069#7298#7302#7540::Tuple{}
  ########x#7070#7299#7303#7541::Float64
  ######_var0#7300#7304#7542::Tuple{}
  ########types#7083#7301#7305#7543::Tuple{Type{Float64}}
  ##xs#7544::Tuple{}
  ########a#7503#7505#7508#7545::Tuple{}
  ########b#7504#7506#7509#7546::Tuple{}
  ######_var0#7507#7510#7547::Tuple{}
  ########types#7083#7084#7511#7548::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(11) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      ##a#7529 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7530 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7529::Float64))
      ##deriv#7531 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7530::Float64,##a#7529::Float64))))
      ####G#7078#7532 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7536 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7530::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7538 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7189#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7542 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7300#7304#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7512 = GenSym(3)
      ##a2#7513 = GenSym(4)
      ##div_a#7514 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7512::Float64,##a2#7513::Float64))
      ####afactor#7290#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7513::Float64))
      ####bfactor#7291#7516 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7512::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7513::Float64,##a2#7513::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7521 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7521 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7514::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7498#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7502#7528 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7502#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7523::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7507#7510#7547 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7507#7510#7547 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a1#7512::Float64
  ##a2#7513::Float64
  ##div_a#7514::Float64
  ####afactor#7290#7515::Float64
  ####bfactor#7291#7516::Float64
  ########a#7093#7285#7292#7517::Tuple{}
  ########b#7094#7286#7293#7518::Tuple{}
  ########afactor#7095#7287#7294#7519::Float64
  ########bfactor#7096#7288#7295#7520::Float64
  ######_var0#7289#7296#7521::Tuple{}
  ######types#7196#7297#7522::Tuple{Type{Float64}}
  ##a#7523::Float64
  ####G#7498#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7499#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7500#7526::Tuple{}
  ##########x#7070#7072#7076#7501#7527::Float64
  ########_var0#7073#7077#7502#7528::Tuple{}
  ##a#7529::Float64
  ##div_a#7530::Float64
  ##deriv#7531::Float64
  ####G#7078#7532::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7533::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7534::Tuple{}
  ##########x#7070#7072#7076#7081#7535::Float64
  ########_var0#7073#7077#7082#7536::Tuple{}
  ######tup#7187#7188#7537::Tuple{}
  ####_var0#7189#7538::Tuple{}
  ######types#7083#7190#7539::Tuple{Type{Float64}}
  ########tup#7069#7298#7302#7540::Tuple{}
  ########x#7070#7299#7303#7541::Float64
  ######_var0#7300#7304#7542::Tuple{}
  ########types#7083#7301#7305#7543::Tuple{Type{Float64}}
  ##xs#7544::Tuple{}
  ########a#7503#7505#7508#7545::Tuple{}
  ########b#7504#7506#7509#7546::Tuple{}
  ######_var0#7507#7510#7547::Tuple{}
  ########types#7083#7084#7511#7548::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(11) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      ##a#7529 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7530 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7529::Float64))
      ##deriv#7531 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7530::Float64,##a#7529::Float64))))
      ####G#7078#7532 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7536 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7530::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7538 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7189#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7542 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7300#7304#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7512 = GenSym(3)
      ##a2#7513 = GenSym(4)
      ##div_a#7514 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7512::Float64,##a2#7513::Float64))
      ####afactor#7290#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7513::Float64))
      ####bfactor#7291#7516 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7512::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7513::Float64,##a2#7513::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7521 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7521 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7514::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7498#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7502#7528 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7502#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7523::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7507#7510#7547 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7507#7510#7547 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a1#7512::Float64
  ##a2#7513::Float64
  ##div_a#7514::Float64
  ####afactor#7290#7515::Float64
  ####bfactor#7291#7516::Float64
  ########a#7093#7285#7292#7517::Tuple{}
  ########b#7094#7286#7293#7518::Tuple{}
  ########afactor#7095#7287#7294#7519::Float64
  ########bfactor#7096#7288#7295#7520::Float64
  ######_var0#7289#7296#7521::Tuple{}
  ######types#7196#7297#7522::Tuple{Type{Float64}}
  ##a#7523::Float64
  ####G#7498#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7499#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7500#7526::Tuple{}
  ##########x#7070#7072#7076#7501#7527::Float64
  ########_var0#7073#7077#7502#7528::Tuple{}
  ##a#7529::Float64
  ##div_a#7530::Float64
  ##deriv#7531::Float64
  ####G#7078#7532::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7533::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7534::Tuple{}
  ##########x#7070#7072#7076#7081#7535::Float64
  ########_var0#7073#7077#7082#7536::Tuple{}
  ######tup#7187#7188#7537::Tuple{}
  ####_var0#7189#7538::Tuple{}
  ######types#7083#7190#7539::Tuple{Type{Float64}}
  ########tup#7069#7298#7302#7540::Tuple{}
  ########x#7070#7299#7303#7541::Float64
  ######_var0#7300#7304#7542::Tuple{}
  ########types#7083#7301#7305#7543::Tuple{Type{Float64}}
  ##xs#7544::Tuple{}
  ########a#7503#7505#7508#7545::Tuple{}
  ########b#7504#7506#7509#7546::Tuple{}
  ######_var0#7507#7510#7547::Tuple{}
  ########types#7083#7084#7511#7548::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(11) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      ##a#7529 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7530 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7529::Float64))
      ##deriv#7531 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7530::Float64,##a#7529::Float64))))
      ####G#7078#7532 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7536 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7530::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7538 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7189#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7542 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7300#7304#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7512 = GenSym(3)
      ##a2#7513 = GenSym(4)
      ##div_a#7514 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7512::Float64,##a2#7513::Float64))
      ####afactor#7290#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7513::Float64))
      ####bfactor#7291#7516 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7512::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7513::Float64,##a2#7513::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7521 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7521 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7514::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7498#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7502#7528 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7502#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7523::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7507#7510#7547 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7507#7510#7547 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a1#7512::Float64
  ##a2#7513::Float64
  ##div_a#7514::Float64
  ####afactor#7290#7515::Float64
  ####bfactor#7291#7516::Float64
  ########a#7093#7285#7292#7517::Tuple{}
  ########b#7094#7286#7293#7518::Tuple{}
  ########afactor#7095#7287#7294#7519::Float64
  ########bfactor#7096#7288#7295#7520::Float64
  ######_var0#7289#7296#7521::Tuple{}
  ######types#7196#7297#7522::Tuple{Type{Float64}}
  ##a#7523::Float64
  ####G#7498#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7499#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7500#7526::Tuple{}
  ##########x#7070#7072#7076#7501#7527::Float64
  ########_var0#7073#7077#7502#7528::Tuple{}
  ##a#7529::Float64
  ##div_a#7530::Float64
  ##deriv#7531::Float64
  ####G#7078#7532::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7533::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7534::Tuple{}
  ##########x#7070#7072#7076#7081#7535::Float64
  ########_var0#7073#7077#7082#7536::Tuple{}
  ######tup#7187#7188#7537::Tuple{}
  ####_var0#7189#7538::Tuple{}
  ######types#7083#7190#7539::Tuple{Type{Float64}}
  ########tup#7069#7298#7302#7540::Tuple{}
  ########x#7070#7299#7303#7541::Float64
  ######_var0#7300#7304#7542::Tuple{}
  ########types#7083#7301#7305#7543::Tuple{Type{Float64}}
  ##xs#7544::Tuple{}
  ########a#7503#7505#7508#7545::Tuple{}
  ########b#7504#7506#7509#7546::Tuple{}
  ######_var0#7507#7510#7547::Tuple{}
  ########types#7083#7084#7511#7548::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 83:
      GenSym(11) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 84:
      ##a#7529 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7530 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7529::Float64))
      ##deriv#7531 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7530::Float64,##a#7529::Float64))))
      ####G#7078#7532 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7536 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7530::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7189#7538 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7189#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7300#7304#7542 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7300#7304#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7512 = GenSym(3)
      ##a2#7513 = GenSym(4)
      ##div_a#7514 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7512::Float64,##a2#7513::Float64))
      ####afactor#7290#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7513::Float64))
      ####bfactor#7291#7516 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7512::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7513::Float64,##a2#7513::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7521 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7289#7296#7521 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7514::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7498#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7502#7528 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7502#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7523::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7507#7510#7547 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7507#7510#7547 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  ####ri#7559#7564::UInt64
  ####idx#7560#7565::UInt64
  ####x#7561#7566::Float64
  ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7568::Float64
  ##_var0#7569::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7567 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7567 = false
      2: 
      ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7568 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7564 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7568::Float64),0x000fffffffffffff))
      ####idx#7560#7565 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7564::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7566 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7564::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7564::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7569 = ####x#7561#7566::Float64
      goto 5
      4: 
      ##_var0#7569 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7565::UInt64,####x#7561#7566::Float64)::Float64
      goto 5
      ##_var0#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7569::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),GenSym(3))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}
  ####ri#7559#7564::UInt64
  ####idx#7560#7565::UInt64
  ####x#7561#7566::Float64
  ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7568::Float64
  ##_var0#7569::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7567 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7567 = false
      2: 
      ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7568 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7564 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7568::Float64),0x000fffffffffffff))
      ####idx#7560#7565 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7564::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7566 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7564::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7564::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7569 = ####x#7561#7566::Float64
      goto 5
      4: 
      ##_var0#7569 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7565::UInt64,####x#7561#7566::Float64)::Float64
      goto 5
      ##_var0#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7569::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),GenSym(3))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7559#7599::UInt64
  ####idx#7560#7600::UInt64
  ####x#7561#7601::Float64
  ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7603::Float64
  ##_var0#7604::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7602 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7602 = false
      2: 
      ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7603 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7603 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7599 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7603::Float64),0x000fffffffffffff))
      ####idx#7560#7600 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7599::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7601 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7599::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7599::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7604 = ####x#7561#7601::Float64
      goto 5
      4: 
      ##_var0#7604 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7600::UInt64,####x#7561#7601::Float64)::Float64
      goto 5
      ##_var0#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.xv)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},##_var0#7604::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  ####ri#7559#7564::UInt64
  ####idx#7560#7565::UInt64
  ####x#7561#7566::Float64
  ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7568::Float64
  ##_var0#7569::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7567 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7567 = false
      2: 
      ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7568 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7564 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7568::Float64),0x000fffffffffffff))
      ####idx#7560#7565 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7564::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7566 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7564::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7564::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7569 = ####x#7561#7566::Float64
      goto 5
      4: 
      ##_var0#7569 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7565::UInt64,####x#7561#7566::Float64)::Float64
      goto 5
      ##_var0#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7569::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),GenSym(3))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}
  ####ri#7559#7564::UInt64
  ####idx#7560#7565::UInt64
  ####x#7561#7566::Float64
  ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7568::Float64
  ##_var0#7569::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7567 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7567 = false
      2: 
      ########_var0#7551#7557#7562#7567::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7568 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7564 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7568::Float64),0x000fffffffffffff))
      ####idx#7560#7565 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7564::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7566 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7564::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7564::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7565::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7569 = ####x#7561#7566::Float64
      goto 5
      4: 
      ##_var0#7569 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7565::UInt64,####x#7561#7566::Float64)::Float64
      goto 5
      ##_var0#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7569::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),GenSym(3))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7559#7599::UInt64
  ####idx#7560#7600::UInt64
  ####x#7561#7601::Float64
  ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7603::Float64
  ##_var0#7604::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7602 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7602 = false
      2: 
      ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7603 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7603 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7599 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7603::Float64),0x000fffffffffffff))
      ####idx#7560#7600 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7599::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7601 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7599::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7599::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7604 = ####x#7561#7601::Float64
      goto 5
      4: 
      ##_var0#7604 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7600::UInt64,####x#7561#7601::Float64)::Float64
      goto 5
      ##_var0#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.xv)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},##_var0#7604::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7559#7599::UInt64
  ####idx#7560#7600::UInt64
  ####x#7561#7601::Float64
  ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7603::Float64
  ##_var0#7604::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7602 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7602 = false
      2: 
      ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7603 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7603 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7599 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7603::Float64),0x000fffffffffffff))
      ####idx#7560#7600 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7599::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7601 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7599::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7599::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7604 = ####x#7561#7601::Float64
      goto 5
      4: 
      ##_var0#7604 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7600::UInt64,####x#7561#7601::Float64)::Float64
      goto 5
      ##_var0#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.xv)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},##_var0#7604::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7559#7599::UInt64
  ####idx#7560#7600::UInt64
  ####x#7561#7601::Float64
  ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7603::Float64
  ##_var0#7604::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7602 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7602 = false
      2: 
      ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7603 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7603 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7599 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7603::Float64),0x000fffffffffffff))
      ####idx#7560#7600 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7599::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7601 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7599::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7599::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7604 = ####x#7561#7601::Float64
      goto 5
      4: 
      ##_var0#7604 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7600::UInt64,####x#7561#7601::Float64)::Float64
      goto 5
      ##_var0#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.xv)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},##_var0#7604::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7559#7599::UInt64
  ####idx#7560#7600::UInt64
  ####x#7561#7601::Float64
  ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
  ############_var0#7549#7550#7552#7558#7563#7603::Float64
  ##_var0#7604::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 135:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7551#7557#7562#7602 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7551#7557#7562#7602 = false
      2: 
      ########_var0#7551#7557#7562#7602::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7549#7550#7552#7558#7563#7603 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7549#7550#7552#7558#7563#7603 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7559#7599 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7549#7550#7552#7558#7563#7603::Float64),0x000fffffffffffff))
      ####idx#7560#7600 = (Base.box)(UInt64,(Base.and_int)(####ri#7559#7599::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7561#7601 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7559#7599::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7559#7599::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7560#7600::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7604 = ####x#7561#7601::Float64
      goto 5
      4: 
      ##_var0#7604 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7560#7600::UInt64,####x#7561#7601::Float64)::Float64
      goto 5
      ##_var0#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.xv)(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},##_var0#7604::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  z::Float64
  ####fy#7605#7606::Float64
  ##xs#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7606 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.lt_float)(####fy#7605#7606::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7606::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(13) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),θ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,GenSym(7),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,α::Float64,0)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,α::Float64)))::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(α::Float64,θ::Float64)),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,GenSym(7))))::Float64)),GenSym(11)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Weibull{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  z::Float64
  ####fy#7605#7606::Float64
  ##xs#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7606 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.lt_float)(####fy#7605#7606::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7606::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(13) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),θ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,GenSym(7),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,α::Float64,0)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,α::Float64)))::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(α::Float64,θ::Float64)),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,GenSym(7))))::Float64)),GenSym(11)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#7605#7634::Float64
  ##a#7635::Float64
  ##div_a#7636::Float64
  ##deriv#7637::Float64
  ####G#7608#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7609#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7610#7640::Tuple{}
  ##########x#7070#7072#7076#7611#7641::Float64
  ########_var0#7073#7077#7612#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##exp_a#7645::Float64
  ##powval#7646::Float64
  ##logval#7647::Float64
  ##new_bs#7648::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7649::Float64
  ####exp_a#7198#7650::Float64
  ####deriv#7199#7651::Float64
  ######G#7191#7200#7652::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7653::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7654::Tuple{}
  ############x#7070#7072#7076#7194#7203#7655::Float64
  ##########_var0#7073#7077#7195#7204#7656::Tuple{}
  ######a#7093#7205#7657::Tuple{}
  ######b#7094#7206#7658::Tuple{}
  ######afactor#7095#7207#7659::Float64
  ######bfactor#7096#7208#7660::Float64
  ####_var0#7209#7661::Tuple{}
  ######types#7196#7210#7662::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7187#7613#7663::Tuple{}
  ####_var0#7614#7664::Tuple{}
  ##exp_a#7665::Float64
  ####G#7615#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7616#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7617#7668::Tuple{}
  ##########x#7070#7072#7076#7618#7669::Float64
  ########_var0#7073#7077#7619#7670::Tuple{}
  ######types#7083#7402#7671::Tuple{Type{Float64}}
  ##a1#7672::Float64
  ##a2#7673::Float64
  ##exp_a#7674::Float64
  ##powval#7675::Float64
  ##logval#7676::Float64
  ##new_bs#7677::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7678::Float64
  ####exp_a#7198#7679::Float64
  ####deriv#7199#7680::Float64
  ######G#7191#7200#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7682::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7683::Tuple{}
  ############x#7070#7072#7076#7194#7203#7684::Float64
  ##########_var0#7073#7077#7195#7204#7685::Tuple{}
  ######a#7093#7205#7686::Tuple{}
  ######b#7094#7206#7687::Tuple{}
  ######afactor#7095#7207#7688::Float64
  ######bfactor#7096#7208#7689::Float64
  ####_var0#7209#7690::Tuple{}
  ######types#7196#7210#7691::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7692::Float64
  ##a2#7693::Float64
  ##div_a#7694::Float64
  ####afactor#7290#7695::Float64
  ####bfactor#7291#7696::Float64
  ########a#7093#7285#7292#7697::Tuple{}
  ########b#7094#7286#7293#7698::Tuple{}
  ########afactor#7095#7287#7294#7699::Float64
  ########bfactor#7096#7288#7295#7700::Float64
  ######_var0#7289#7296#7701::Tuple{}
  ######types#7196#7297#7702::Tuple{Type{Float64}}
  ##xs#7703::Tuple{}
  ####a1#7620#7704::Float64
  ####a2#7621#7705::Float64
  ########a#7093#7097#7622#7706::Tuple{}
  ########b#7094#7098#7623#7707::Tuple{}
  ########afactor#7095#7099#7624#7708::Float64
  ########bfactor#7096#7100#7625#7709::Float64
  ######_var0#7101#7626#7710::Tuple{}
  ####a1#7627#7711::Float64
  ####a2#7628#7712::Float64
  ########a#7093#7097#7629#7713::Tuple{}
  ########b#7094#7098#7630#7714::Tuple{}
  ########afactor#7095#7099#7631#7715::Float64
  ########bfactor#7096#7100#7632#7716::Float64
  ######_var0#7101#7633#7717::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7634 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.lt_float)(####fy#7605#7634::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7634::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(54) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(55) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(56) = GenSym(54)
      GenSym(57) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(56)
      #s25 = GenSym(57)
      GenSym(58) = GenSym(55)
      GenSym(59) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(58)
      #s25 = GenSym(59) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      ##a#7635 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),##a#7635::Float64))
      ##deriv#7637 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7636::Float64,##a#7635::Float64))))
      ####G#7608#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7612#7642 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7612#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7636::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(45) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7692 = GenSym(45)
      ##a2#7693 = GenSym(46)
      ##div_a#7694 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7692::Float64,##a2#7693::Float64))
      ####afactor#7290#7695 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7693::Float64))
      ####bfactor#7291#7696 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7692::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7693::Float64,##a2#7693::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7701 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7289#7296#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(47) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7694::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7672"))
      NewvarNode(symbol("##a2#7673"))
      NewvarNode(symbol("##exp_a#7674"))
      NewvarNode(symbol("##powval#7675"))
      NewvarNode(symbol("##logval#7676"))
      NewvarNode(symbol("##new_bs#7677"))
      unless (top(getfield))((top(getfield))(GenSym(24),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(27) = (top(getfield))(GenSym(24),:value)::Float64
      ####a#7197#7678 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(27),0)::Float64
      ####exp_a#7198#7679 = (Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(27))))::Float64
      GenSym(31) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(27),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(31),0)::Float64
      ####deriv#7199#7680 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(27),(Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(31))))::Float64))
      ######G#7191#7200#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7685 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7073#7077#7195#7204#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(25) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ##a1#7672 = GenSym(25)
      ##a2#7673 = GenSym(26)
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,##a2#7673::Float64,0)::Float64
      ##exp_a#7674 = (Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,##a2#7673::Float64)))::Float64
      GenSym(38) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7673::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(41) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,GenSym(38),0)::Float64
      ##powval#7675 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7673::Float64,(Base.Math.nan_dom_err)(GenSym(41),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,GenSym(38))))::Float64))
      GenSym(43) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0)::Float64
      ##logval#7676 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7674::Float64,(Base.Math.nan_dom_err)(GenSym(43),##a1#7672::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7690 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7209#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7677 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7674::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(44) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      NewvarNode(symbol("##a1#7643"))
      NewvarNode(symbol("##a2#7644"))
      NewvarNode(symbol("##exp_a#7645"))
      NewvarNode(symbol("##powval#7646"))
      NewvarNode(symbol("##logval#7647"))
      NewvarNode(symbol("##new_bs#7648"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(5) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7649 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(5),0)::Float64
      ####exp_a#7198#7650 = (Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(5))))::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(9),0)::Float64
      ####deriv#7199#7651 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(5),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(9))))::Float64))
      ######G#7191#7200#7652 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7656 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7073#7077#7195#7204#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7650::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(3) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(3)
      ##a2#7644 = GenSym(4)
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,##a2#7644::Float64,0)::Float64
      ##exp_a#7645 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,##a2#7644::Float64)))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7644::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,GenSym(16),0)::Float64
      ##powval#7646 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,GenSym(16))))::Float64))
      GenSym(21) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0)::Float64
      ##logval#7647 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7645::Float64,(Base.Math.nan_dom_err)(GenSym(21),##a1#7643::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7661 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7209#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7648 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(22) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7614#7664 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7614#7664 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##exp_a#7665 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(22),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7615#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7619#7670 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7619#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(48) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7665::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(44),:value)::Float64
      ####a1#7620#7704 = GenSym(49)
      ####a2#7621#7705 = GenSym(50)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7626#7710 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7101#7626#7710 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(51) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7620#7704::Float64,####a2#7621#7705::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(52) = (top(getfield))(GenSym(51),:value)::Float64
      GenSym(53) = (top(getfield))(GenSym(48),:value)::Float64
      ####a1#7627#7711 = GenSym(52)
      ####a2#7628#7712 = GenSym(53)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7633#7717 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7101#7633#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7627#7711::Float64,####a2#7628#7712::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Weibull{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  z::Float64
  ####fy#7605#7606::Float64
  ##xs#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7606 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.lt_float)(####fy#7605#7606::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7606::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(13) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),θ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,GenSym(7),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,α::Float64,0)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,α::Float64)))::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(α::Float64,θ::Float64)),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,GenSym(7))))::Float64)),GenSym(11)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Weibull{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  z::Float64
  ####fy#7605#7606::Float64
  ##xs#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7606 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7606::Float64)::Bool,(Base.lt_float)(####fy#7605#7606::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7606::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(12) = (top(getfield))(d::Distributions.Weibull{Float64},:α)::Float64
      GenSym(13) = (top(getfield))(d::Distributions.Weibull{Float64},:θ)::Float64
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),θ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,GenSym(7),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,α::Float64,0)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,α::Float64)))::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(α::Float64,θ::Float64)),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,GenSym(7))))::Float64)),GenSym(11)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#7605#7634::Float64
  ##a#7635::Float64
  ##div_a#7636::Float64
  ##deriv#7637::Float64
  ####G#7608#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7609#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7610#7640::Tuple{}
  ##########x#7070#7072#7076#7611#7641::Float64
  ########_var0#7073#7077#7612#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##exp_a#7645::Float64
  ##powval#7646::Float64
  ##logval#7647::Float64
  ##new_bs#7648::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7649::Float64
  ####exp_a#7198#7650::Float64
  ####deriv#7199#7651::Float64
  ######G#7191#7200#7652::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7653::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7654::Tuple{}
  ############x#7070#7072#7076#7194#7203#7655::Float64
  ##########_var0#7073#7077#7195#7204#7656::Tuple{}
  ######a#7093#7205#7657::Tuple{}
  ######b#7094#7206#7658::Tuple{}
  ######afactor#7095#7207#7659::Float64
  ######bfactor#7096#7208#7660::Float64
  ####_var0#7209#7661::Tuple{}
  ######types#7196#7210#7662::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7187#7613#7663::Tuple{}
  ####_var0#7614#7664::Tuple{}
  ##exp_a#7665::Float64
  ####G#7615#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7616#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7617#7668::Tuple{}
  ##########x#7070#7072#7076#7618#7669::Float64
  ########_var0#7073#7077#7619#7670::Tuple{}
  ######types#7083#7402#7671::Tuple{Type{Float64}}
  ##a1#7672::Float64
  ##a2#7673::Float64
  ##exp_a#7674::Float64
  ##powval#7675::Float64
  ##logval#7676::Float64
  ##new_bs#7677::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7678::Float64
  ####exp_a#7198#7679::Float64
  ####deriv#7199#7680::Float64
  ######G#7191#7200#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7682::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7683::Tuple{}
  ############x#7070#7072#7076#7194#7203#7684::Float64
  ##########_var0#7073#7077#7195#7204#7685::Tuple{}
  ######a#7093#7205#7686::Tuple{}
  ######b#7094#7206#7687::Tuple{}
  ######afactor#7095#7207#7688::Float64
  ######bfactor#7096#7208#7689::Float64
  ####_var0#7209#7690::Tuple{}
  ######types#7196#7210#7691::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7692::Float64
  ##a2#7693::Float64
  ##div_a#7694::Float64
  ####afactor#7290#7695::Float64
  ####bfactor#7291#7696::Float64
  ########a#7093#7285#7292#7697::Tuple{}
  ########b#7094#7286#7293#7698::Tuple{}
  ########afactor#7095#7287#7294#7699::Float64
  ########bfactor#7096#7288#7295#7700::Float64
  ######_var0#7289#7296#7701::Tuple{}
  ######types#7196#7297#7702::Tuple{Type{Float64}}
  ##xs#7703::Tuple{}
  ####a1#7620#7704::Float64
  ####a2#7621#7705::Float64
  ########a#7093#7097#7622#7706::Tuple{}
  ########b#7094#7098#7623#7707::Tuple{}
  ########afactor#7095#7099#7624#7708::Float64
  ########bfactor#7096#7100#7625#7709::Float64
  ######_var0#7101#7626#7710::Tuple{}
  ####a1#7627#7711::Float64
  ####a2#7628#7712::Float64
  ########a#7093#7097#7629#7713::Tuple{}
  ########b#7094#7098#7630#7714::Tuple{}
  ########afactor#7095#7099#7631#7715::Float64
  ########bfactor#7096#7100#7632#7716::Float64
  ######_var0#7101#7633#7717::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7634 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.lt_float)(####fy#7605#7634::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7634::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(54) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(55) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(56) = GenSym(54)
      GenSym(57) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(56)
      #s25 = GenSym(57)
      GenSym(58) = GenSym(55)
      GenSym(59) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(58)
      #s25 = GenSym(59) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      ##a#7635 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),##a#7635::Float64))
      ##deriv#7637 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7636::Float64,##a#7635::Float64))))
      ####G#7608#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7612#7642 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7612#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7636::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(45) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7692 = GenSym(45)
      ##a2#7693 = GenSym(46)
      ##div_a#7694 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7692::Float64,##a2#7693::Float64))
      ####afactor#7290#7695 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7693::Float64))
      ####bfactor#7291#7696 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7692::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7693::Float64,##a2#7693::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7701 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7289#7296#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(47) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7694::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7672"))
      NewvarNode(symbol("##a2#7673"))
      NewvarNode(symbol("##exp_a#7674"))
      NewvarNode(symbol("##powval#7675"))
      NewvarNode(symbol("##logval#7676"))
      NewvarNode(symbol("##new_bs#7677"))
      unless (top(getfield))((top(getfield))(GenSym(24),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(27) = (top(getfield))(GenSym(24),:value)::Float64
      ####a#7197#7678 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(27),0)::Float64
      ####exp_a#7198#7679 = (Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(27))))::Float64
      GenSym(31) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(27),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(31),0)::Float64
      ####deriv#7199#7680 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(27),(Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(31))))::Float64))
      ######G#7191#7200#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7685 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7073#7077#7195#7204#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(25) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ##a1#7672 = GenSym(25)
      ##a2#7673 = GenSym(26)
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,##a2#7673::Float64,0)::Float64
      ##exp_a#7674 = (Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,##a2#7673::Float64)))::Float64
      GenSym(38) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7673::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(41) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,GenSym(38),0)::Float64
      ##powval#7675 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7673::Float64,(Base.Math.nan_dom_err)(GenSym(41),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,GenSym(38))))::Float64))
      GenSym(43) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0)::Float64
      ##logval#7676 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7674::Float64,(Base.Math.nan_dom_err)(GenSym(43),##a1#7672::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7690 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7209#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7677 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7674::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(44) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      NewvarNode(symbol("##a1#7643"))
      NewvarNode(symbol("##a2#7644"))
      NewvarNode(symbol("##exp_a#7645"))
      NewvarNode(symbol("##powval#7646"))
      NewvarNode(symbol("##logval#7647"))
      NewvarNode(symbol("##new_bs#7648"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(5) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7649 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(5),0)::Float64
      ####exp_a#7198#7650 = (Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(5))))::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(9),0)::Float64
      ####deriv#7199#7651 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(5),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(9))))::Float64))
      ######G#7191#7200#7652 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7656 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7073#7077#7195#7204#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7650::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(3) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(3)
      ##a2#7644 = GenSym(4)
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,##a2#7644::Float64,0)::Float64
      ##exp_a#7645 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,##a2#7644::Float64)))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7644::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,GenSym(16),0)::Float64
      ##powval#7646 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,GenSym(16))))::Float64))
      GenSym(21) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0)::Float64
      ##logval#7647 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7645::Float64,(Base.Math.nan_dom_err)(GenSym(21),##a1#7643::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7661 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7209#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7648 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(22) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7614#7664 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7614#7664 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##exp_a#7665 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(22),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7615#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7619#7670 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7619#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(48) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7665::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(44),:value)::Float64
      ####a1#7620#7704 = GenSym(49)
      ####a2#7621#7705 = GenSym(50)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7626#7710 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7101#7626#7710 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(51) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7620#7704::Float64,####a2#7621#7705::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(52) = (top(getfield))(GenSym(51),:value)::Float64
      GenSym(53) = (top(getfield))(GenSym(48),:value)::Float64
      ####a1#7627#7711 = GenSym(52)
      ####a2#7628#7712 = GenSym(53)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7633#7717 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7101#7633#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7627#7711::Float64,####a2#7628#7712::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#7605#7634::Float64
  ##a#7635::Float64
  ##div_a#7636::Float64
  ##deriv#7637::Float64
  ####G#7608#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7609#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7610#7640::Tuple{}
  ##########x#7070#7072#7076#7611#7641::Float64
  ########_var0#7073#7077#7612#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##exp_a#7645::Float64
  ##powval#7646::Float64
  ##logval#7647::Float64
  ##new_bs#7648::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7649::Float64
  ####exp_a#7198#7650::Float64
  ####deriv#7199#7651::Float64
  ######G#7191#7200#7652::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7653::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7654::Tuple{}
  ############x#7070#7072#7076#7194#7203#7655::Float64
  ##########_var0#7073#7077#7195#7204#7656::Tuple{}
  ######a#7093#7205#7657::Tuple{}
  ######b#7094#7206#7658::Tuple{}
  ######afactor#7095#7207#7659::Float64
  ######bfactor#7096#7208#7660::Float64
  ####_var0#7209#7661::Tuple{}
  ######types#7196#7210#7662::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7187#7613#7663::Tuple{}
  ####_var0#7614#7664::Tuple{}
  ##exp_a#7665::Float64
  ####G#7615#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7616#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7617#7668::Tuple{}
  ##########x#7070#7072#7076#7618#7669::Float64
  ########_var0#7073#7077#7619#7670::Tuple{}
  ######types#7083#7402#7671::Tuple{Type{Float64}}
  ##a1#7672::Float64
  ##a2#7673::Float64
  ##exp_a#7674::Float64
  ##powval#7675::Float64
  ##logval#7676::Float64
  ##new_bs#7677::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7678::Float64
  ####exp_a#7198#7679::Float64
  ####deriv#7199#7680::Float64
  ######G#7191#7200#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7682::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7683::Tuple{}
  ############x#7070#7072#7076#7194#7203#7684::Float64
  ##########_var0#7073#7077#7195#7204#7685::Tuple{}
  ######a#7093#7205#7686::Tuple{}
  ######b#7094#7206#7687::Tuple{}
  ######afactor#7095#7207#7688::Float64
  ######bfactor#7096#7208#7689::Float64
  ####_var0#7209#7690::Tuple{}
  ######types#7196#7210#7691::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7692::Float64
  ##a2#7693::Float64
  ##div_a#7694::Float64
  ####afactor#7290#7695::Float64
  ####bfactor#7291#7696::Float64
  ########a#7093#7285#7292#7697::Tuple{}
  ########b#7094#7286#7293#7698::Tuple{}
  ########afactor#7095#7287#7294#7699::Float64
  ########bfactor#7096#7288#7295#7700::Float64
  ######_var0#7289#7296#7701::Tuple{}
  ######types#7196#7297#7702::Tuple{Type{Float64}}
  ##xs#7703::Tuple{}
  ####a1#7620#7704::Float64
  ####a2#7621#7705::Float64
  ########a#7093#7097#7622#7706::Tuple{}
  ########b#7094#7098#7623#7707::Tuple{}
  ########afactor#7095#7099#7624#7708::Float64
  ########bfactor#7096#7100#7625#7709::Float64
  ######_var0#7101#7626#7710::Tuple{}
  ####a1#7627#7711::Float64
  ####a2#7628#7712::Float64
  ########a#7093#7097#7629#7713::Tuple{}
  ########b#7094#7098#7630#7714::Tuple{}
  ########afactor#7095#7099#7631#7715::Float64
  ########bfactor#7096#7100#7632#7716::Float64
  ######_var0#7101#7633#7717::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7634 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.lt_float)(####fy#7605#7634::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7634::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(54) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(55) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(56) = GenSym(54)
      GenSym(57) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(56)
      #s25 = GenSym(57)
      GenSym(58) = GenSym(55)
      GenSym(59) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(58)
      #s25 = GenSym(59) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      ##a#7635 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),##a#7635::Float64))
      ##deriv#7637 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7636::Float64,##a#7635::Float64))))
      ####G#7608#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7612#7642 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7612#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7636::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(45) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7692 = GenSym(45)
      ##a2#7693 = GenSym(46)
      ##div_a#7694 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7692::Float64,##a2#7693::Float64))
      ####afactor#7290#7695 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7693::Float64))
      ####bfactor#7291#7696 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7692::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7693::Float64,##a2#7693::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7701 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7289#7296#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(47) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7694::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7672"))
      NewvarNode(symbol("##a2#7673"))
      NewvarNode(symbol("##exp_a#7674"))
      NewvarNode(symbol("##powval#7675"))
      NewvarNode(symbol("##logval#7676"))
      NewvarNode(symbol("##new_bs#7677"))
      unless (top(getfield))((top(getfield))(GenSym(24),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(27) = (top(getfield))(GenSym(24),:value)::Float64
      ####a#7197#7678 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(27),0)::Float64
      ####exp_a#7198#7679 = (Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(27))))::Float64
      GenSym(31) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(27),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(31),0)::Float64
      ####deriv#7199#7680 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(27),(Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(31))))::Float64))
      ######G#7191#7200#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7685 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7073#7077#7195#7204#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(25) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ##a1#7672 = GenSym(25)
      ##a2#7673 = GenSym(26)
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,##a2#7673::Float64,0)::Float64
      ##exp_a#7674 = (Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,##a2#7673::Float64)))::Float64
      GenSym(38) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7673::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(41) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,GenSym(38),0)::Float64
      ##powval#7675 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7673::Float64,(Base.Math.nan_dom_err)(GenSym(41),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,GenSym(38))))::Float64))
      GenSym(43) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0)::Float64
      ##logval#7676 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7674::Float64,(Base.Math.nan_dom_err)(GenSym(43),##a1#7672::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7690 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7209#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7677 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7674::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(44) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      NewvarNode(symbol("##a1#7643"))
      NewvarNode(symbol("##a2#7644"))
      NewvarNode(symbol("##exp_a#7645"))
      NewvarNode(symbol("##powval#7646"))
      NewvarNode(symbol("##logval#7647"))
      NewvarNode(symbol("##new_bs#7648"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(5) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7649 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(5),0)::Float64
      ####exp_a#7198#7650 = (Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(5))))::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(9),0)::Float64
      ####deriv#7199#7651 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(5),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(9))))::Float64))
      ######G#7191#7200#7652 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7656 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7073#7077#7195#7204#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7650::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(3) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(3)
      ##a2#7644 = GenSym(4)
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,##a2#7644::Float64,0)::Float64
      ##exp_a#7645 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,##a2#7644::Float64)))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7644::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,GenSym(16),0)::Float64
      ##powval#7646 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,GenSym(16))))::Float64))
      GenSym(21) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0)::Float64
      ##logval#7647 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7645::Float64,(Base.Math.nan_dom_err)(GenSym(21),##a1#7643::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7661 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7209#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7648 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(22) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7614#7664 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7614#7664 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##exp_a#7665 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(22),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7615#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7619#7670 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7619#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(48) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7665::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(44),:value)::Float64
      ####a1#7620#7704 = GenSym(49)
      ####a2#7621#7705 = GenSym(50)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7626#7710 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7101#7626#7710 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(51) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7620#7704::Float64,####a2#7621#7705::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(52) = (top(getfield))(GenSym(51),:value)::Float64
      GenSym(53) = (top(getfield))(GenSym(48),:value)::Float64
      ####a1#7627#7711 = GenSym(52)
      ####a2#7628#7712 = GenSym(53)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7633#7717 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7101#7633#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7627#7711::Float64,####a2#7628#7712::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#7605#7634::Float64
  ##a#7635::Float64
  ##div_a#7636::Float64
  ##deriv#7637::Float64
  ####G#7608#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7609#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7610#7640::Tuple{}
  ##########x#7070#7072#7076#7611#7641::Float64
  ########_var0#7073#7077#7612#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##exp_a#7645::Float64
  ##powval#7646::Float64
  ##logval#7647::Float64
  ##new_bs#7648::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7649::Float64
  ####exp_a#7198#7650::Float64
  ####deriv#7199#7651::Float64
  ######G#7191#7200#7652::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7653::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7654::Tuple{}
  ############x#7070#7072#7076#7194#7203#7655::Float64
  ##########_var0#7073#7077#7195#7204#7656::Tuple{}
  ######a#7093#7205#7657::Tuple{}
  ######b#7094#7206#7658::Tuple{}
  ######afactor#7095#7207#7659::Float64
  ######bfactor#7096#7208#7660::Float64
  ####_var0#7209#7661::Tuple{}
  ######types#7196#7210#7662::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7187#7613#7663::Tuple{}
  ####_var0#7614#7664::Tuple{}
  ##exp_a#7665::Float64
  ####G#7615#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7616#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7617#7668::Tuple{}
  ##########x#7070#7072#7076#7618#7669::Float64
  ########_var0#7073#7077#7619#7670::Tuple{}
  ######types#7083#7402#7671::Tuple{Type{Float64}}
  ##a1#7672::Float64
  ##a2#7673::Float64
  ##exp_a#7674::Float64
  ##powval#7675::Float64
  ##logval#7676::Float64
  ##new_bs#7677::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7678::Float64
  ####exp_a#7198#7679::Float64
  ####deriv#7199#7680::Float64
  ######G#7191#7200#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7682::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7683::Tuple{}
  ############x#7070#7072#7076#7194#7203#7684::Float64
  ##########_var0#7073#7077#7195#7204#7685::Tuple{}
  ######a#7093#7205#7686::Tuple{}
  ######b#7094#7206#7687::Tuple{}
  ######afactor#7095#7207#7688::Float64
  ######bfactor#7096#7208#7689::Float64
  ####_var0#7209#7690::Tuple{}
  ######types#7196#7210#7691::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7692::Float64
  ##a2#7693::Float64
  ##div_a#7694::Float64
  ####afactor#7290#7695::Float64
  ####bfactor#7291#7696::Float64
  ########a#7093#7285#7292#7697::Tuple{}
  ########b#7094#7286#7293#7698::Tuple{}
  ########afactor#7095#7287#7294#7699::Float64
  ########bfactor#7096#7288#7295#7700::Float64
  ######_var0#7289#7296#7701::Tuple{}
  ######types#7196#7297#7702::Tuple{Type{Float64}}
  ##xs#7703::Tuple{}
  ####a1#7620#7704::Float64
  ####a2#7621#7705::Float64
  ########a#7093#7097#7622#7706::Tuple{}
  ########b#7094#7098#7623#7707::Tuple{}
  ########afactor#7095#7099#7624#7708::Float64
  ########bfactor#7096#7100#7625#7709::Float64
  ######_var0#7101#7626#7710::Tuple{}
  ####a1#7627#7711::Float64
  ####a2#7628#7712::Float64
  ########a#7093#7097#7629#7713::Tuple{}
  ########b#7094#7098#7630#7714::Tuple{}
  ########afactor#7095#7099#7631#7715::Float64
  ########bfactor#7096#7100#7632#7716::Float64
  ######_var0#7101#7633#7717::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7634 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.lt_float)(####fy#7605#7634::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7634::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(54) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(55) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(56) = GenSym(54)
      GenSym(57) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(56)
      #s25 = GenSym(57)
      GenSym(58) = GenSym(55)
      GenSym(59) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(58)
      #s25 = GenSym(59) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      ##a#7635 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),##a#7635::Float64))
      ##deriv#7637 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7636::Float64,##a#7635::Float64))))
      ####G#7608#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7612#7642 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7612#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7636::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(45) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7692 = GenSym(45)
      ##a2#7693 = GenSym(46)
      ##div_a#7694 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7692::Float64,##a2#7693::Float64))
      ####afactor#7290#7695 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7693::Float64))
      ####bfactor#7291#7696 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7692::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7693::Float64,##a2#7693::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7701 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7289#7296#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(47) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7694::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7672"))
      NewvarNode(symbol("##a2#7673"))
      NewvarNode(symbol("##exp_a#7674"))
      NewvarNode(symbol("##powval#7675"))
      NewvarNode(symbol("##logval#7676"))
      NewvarNode(symbol("##new_bs#7677"))
      unless (top(getfield))((top(getfield))(GenSym(24),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(27) = (top(getfield))(GenSym(24),:value)::Float64
      ####a#7197#7678 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(27),0)::Float64
      ####exp_a#7198#7679 = (Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(27))))::Float64
      GenSym(31) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(27),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(31),0)::Float64
      ####deriv#7199#7680 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(27),(Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(31))))::Float64))
      ######G#7191#7200#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7685 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7073#7077#7195#7204#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(25) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ##a1#7672 = GenSym(25)
      ##a2#7673 = GenSym(26)
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,##a2#7673::Float64,0)::Float64
      ##exp_a#7674 = (Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,##a2#7673::Float64)))::Float64
      GenSym(38) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7673::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(41) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,GenSym(38),0)::Float64
      ##powval#7675 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7673::Float64,(Base.Math.nan_dom_err)(GenSym(41),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,GenSym(38))))::Float64))
      GenSym(43) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0)::Float64
      ##logval#7676 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7674::Float64,(Base.Math.nan_dom_err)(GenSym(43),##a1#7672::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7690 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7209#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7677 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7674::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(44) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      NewvarNode(symbol("##a1#7643"))
      NewvarNode(symbol("##a2#7644"))
      NewvarNode(symbol("##exp_a#7645"))
      NewvarNode(symbol("##powval#7646"))
      NewvarNode(symbol("##logval#7647"))
      NewvarNode(symbol("##new_bs#7648"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(5) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7649 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(5),0)::Float64
      ####exp_a#7198#7650 = (Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(5))))::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(9),0)::Float64
      ####deriv#7199#7651 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(5),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(9))))::Float64))
      ######G#7191#7200#7652 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7656 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7073#7077#7195#7204#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7650::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(3) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(3)
      ##a2#7644 = GenSym(4)
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,##a2#7644::Float64,0)::Float64
      ##exp_a#7645 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,##a2#7644::Float64)))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7644::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,GenSym(16),0)::Float64
      ##powval#7646 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,GenSym(16))))::Float64))
      GenSym(21) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0)::Float64
      ##logval#7647 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7645::Float64,(Base.Math.nan_dom_err)(GenSym(21),##a1#7643::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7661 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7209#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7648 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(22) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7614#7664 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7614#7664 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##exp_a#7665 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(22),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7615#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7619#7670 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7619#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(48) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7665::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(44),:value)::Float64
      ####a1#7620#7704 = GenSym(49)
      ####a2#7621#7705 = GenSym(50)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7626#7710 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7101#7626#7710 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(51) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7620#7704::Float64,####a2#7621#7705::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(52) = (top(getfield))(GenSym(51),:value)::Float64
      GenSym(53) = (top(getfield))(GenSym(48),:value)::Float64
      ####a1#7627#7711 = GenSym(52)
      ####a2#7628#7712 = GenSym(53)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7633#7717 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7101#7633#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7627#7711::Float64,####a2#7628#7712::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#7605#7634::Float64
  ##a#7635::Float64
  ##div_a#7636::Float64
  ##deriv#7637::Float64
  ####G#7608#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7609#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7610#7640::Tuple{}
  ##########x#7070#7072#7076#7611#7641::Float64
  ########_var0#7073#7077#7612#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##exp_a#7645::Float64
  ##powval#7646::Float64
  ##logval#7647::Float64
  ##new_bs#7648::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7649::Float64
  ####exp_a#7198#7650::Float64
  ####deriv#7199#7651::Float64
  ######G#7191#7200#7652::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7653::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7654::Tuple{}
  ############x#7070#7072#7076#7194#7203#7655::Float64
  ##########_var0#7073#7077#7195#7204#7656::Tuple{}
  ######a#7093#7205#7657::Tuple{}
  ######b#7094#7206#7658::Tuple{}
  ######afactor#7095#7207#7659::Float64
  ######bfactor#7096#7208#7660::Float64
  ####_var0#7209#7661::Tuple{}
  ######types#7196#7210#7662::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7187#7613#7663::Tuple{}
  ####_var0#7614#7664::Tuple{}
  ##exp_a#7665::Float64
  ####G#7615#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7616#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7617#7668::Tuple{}
  ##########x#7070#7072#7076#7618#7669::Float64
  ########_var0#7073#7077#7619#7670::Tuple{}
  ######types#7083#7402#7671::Tuple{Type{Float64}}
  ##a1#7672::Float64
  ##a2#7673::Float64
  ##exp_a#7674::Float64
  ##powval#7675::Float64
  ##logval#7676::Float64
  ##new_bs#7677::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7197#7678::Float64
  ####exp_a#7198#7679::Float64
  ####deriv#7199#7680::Float64
  ######G#7191#7200#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7068#7074#7192#7201#7682::Tuple{Type{Float64},Type{Float64}}
  ############tup#7069#7071#7075#7193#7202#7683::Tuple{}
  ############x#7070#7072#7076#7194#7203#7684::Float64
  ##########_var0#7073#7077#7195#7204#7685::Tuple{}
  ######a#7093#7205#7686::Tuple{}
  ######b#7094#7206#7687::Tuple{}
  ######afactor#7095#7207#7688::Float64
  ######bfactor#7096#7208#7689::Float64
  ####_var0#7209#7690::Tuple{}
  ######types#7196#7210#7691::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7692::Float64
  ##a2#7693::Float64
  ##div_a#7694::Float64
  ####afactor#7290#7695::Float64
  ####bfactor#7291#7696::Float64
  ########a#7093#7285#7292#7697::Tuple{}
  ########b#7094#7286#7293#7698::Tuple{}
  ########afactor#7095#7287#7294#7699::Float64
  ########bfactor#7096#7288#7295#7700::Float64
  ######_var0#7289#7296#7701::Tuple{}
  ######types#7196#7297#7702::Tuple{Type{Float64}}
  ##xs#7703::Tuple{}
  ####a1#7620#7704::Float64
  ####a2#7621#7705::Float64
  ########a#7093#7097#7622#7706::Tuple{}
  ########b#7094#7098#7623#7707::Tuple{}
  ########afactor#7095#7099#7624#7708::Float64
  ########bfactor#7096#7100#7625#7709::Float64
  ######_var0#7101#7626#7710::Tuple{}
  ####a1#7627#7711::Float64
  ####a2#7628#7712::Float64
  ########a#7093#7097#7629#7713::Tuple{}
  ########b#7094#7098#7630#7714::Tuple{}
  ########afactor#7095#7099#7631#7715::Float64
  ########bfactor#7096#7100#7632#7716::Float64
  ######_var0#7101#7633#7717::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 91:
      NewvarNode(:α)
      NewvarNode(:θ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      ####fy#7605#7634 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7605#7634::Float64)::Bool,(Base.lt_float)(####fy#7605#7634::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7605#7634::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 92:
      GenSym(54) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(55) = (top(getfield))(d::Distributions.Weibull{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(56) = GenSym(54)
      GenSym(57) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(56)
      #s25 = GenSym(57)
      GenSym(58) = GenSym(55)
      GenSym(59) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(58)
      #s25 = GenSym(59) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 93:
      ##a#7635 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),##a#7635::Float64))
      ##deriv#7637 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7636::Float64,##a#7635::Float64))))
      ####G#7608#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7612#7642 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7612#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7636::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 94:
      GenSym(45) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7692 = GenSym(45)
      ##a2#7693 = GenSym(46)
      ##div_a#7694 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7692::Float64,##a2#7693::Float64))
      ####afactor#7290#7695 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7693::Float64))
      ####bfactor#7291#7696 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7692::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7693::Float64,##a2#7693::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7289#7296#7701 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7289#7296#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(47) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7694::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7672"))
      NewvarNode(symbol("##a2#7673"))
      NewvarNode(symbol("##exp_a#7674"))
      NewvarNode(symbol("##powval#7675"))
      NewvarNode(symbol("##logval#7676"))
      NewvarNode(symbol("##new_bs#7677"))
      unless (top(getfield))((top(getfield))(GenSym(24),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(27) = (top(getfield))(GenSym(24),:value)::Float64
      ####a#7197#7678 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(27),0)::Float64
      ####exp_a#7198#7679 = (Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(27))))::Float64
      GenSym(31) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(27),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7678::Float64,0,GenSym(31),0)::Float64
      ####deriv#7199#7680 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(27),(Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7678::Float64,GenSym(31))))::Float64))
      ######G#7191#7200#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7685 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7073#7077#7195#7204#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(25) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ##a1#7672 = GenSym(25)
      ##a2#7673 = GenSym(26)
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,##a2#7673::Float64,0)::Float64
      ##exp_a#7674 = (Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,##a2#7673::Float64)))::Float64
      GenSym(38) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7673::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(41) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0,GenSym(38),0)::Float64
      ##powval#7675 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7673::Float64,(Base.Math.nan_dom_err)(GenSym(41),(Base.box)(Base.Float64,(Base.add_float)(##a1#7672::Float64,GenSym(38))))::Float64))
      GenSym(43) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7672::Float64,0)::Float64
      ##logval#7676 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7674::Float64,(Base.Math.nan_dom_err)(GenSym(43),##a1#7672::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7690 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7209#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7677 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7674::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(44) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      NewvarNode(symbol("##a1#7643"))
      NewvarNode(symbol("##a2#7644"))
      NewvarNode(symbol("##exp_a#7645"))
      NewvarNode(symbol("##powval#7646"))
      NewvarNode(symbol("##logval#7647"))
      NewvarNode(symbol("##new_bs#7648"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(5) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7197#7649 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(5),0)::Float64
      ####exp_a#7198#7650 = (Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(5))))::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7197#7649::Float64,0,GenSym(9),0)::Float64
      ####deriv#7199#7651 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(5),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(####a#7197#7649::Float64,GenSym(9))))::Float64))
      ######G#7191#7200#7652 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7073#7077#7195#7204#7656 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7073#7077#7195#7204#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7198#7650::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(3) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(3)
      ##a2#7644 = GenSym(4)
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,##a2#7644::Float64,0)::Float64
      ##exp_a#7645 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,##a2#7644::Float64)))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7644::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0,GenSym(16),0)::Float64
      ##powval#7646 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a1#7643::Float64,GenSym(16))))::Float64))
      GenSym(21) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7643::Float64,0)::Float64
      ##logval#7647 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7645::Float64,(Base.Math.nan_dom_err)(GenSym(21),##a1#7643::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7661 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7209#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7648 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(22) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7614#7664 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7614#7664 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##exp_a#7665 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(22),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7615#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7619#7670 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7073#7077#7619#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(48) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7665::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(44),:value)::Float64
      ####a1#7620#7704 = GenSym(49)
      ####a2#7621#7705 = GenSym(50)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7626#7710 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7101#7626#7710 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(51) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7620#7704::Float64,####a2#7621#7705::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(52) = (top(getfield))(GenSym(51),:value)::Float64
      GenSym(53) = (top(getfield))(GenSym(48),:value)::Float64
      ####a1#7627#7711 = GenSym(52)
      ####a2#7628#7712 = GenSym(53)
      $(Expr(:boundscheck, false))
      ######_var0#7101#7633#7717 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7101#7633#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7627#7711::Float64,####a2#7628#7712::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/weibull.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





