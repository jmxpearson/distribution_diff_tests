____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{Int64},:μ)::Int64,(top(getfield))(d::Distributions.Cauchy{Int64},:σ)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 36:
      return Distributions.NaN
  end::Float64




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 40:
      return Distributions.NaN
  end::Float64




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{Int64},:μ)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 38:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{Int64},:μ)::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{Int64},:μ)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 37:
      return (top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 41:
      return Distributions.NaN
  end::Float64




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 42:
      return Distributions.NaN
  end::Float64




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Cauchy{Int64},:σ)::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(2.5310242469692907,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      GenSym(0) = (top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(2.5310242469692907,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7093::Float64
  ####G#7085#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7096::Tuple{}
  ##########x#7077#7079#7083#7088#7097::Float64
  ########_var0#7080#7084#7089#7098::Tuple{}
  ########types#7090#7091#7092#7099::Tuple{Type{Irrational{:log4π}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      ##a#7093 = (top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7093::Float64,0)::Float64
      ####G#7085#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7093::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,2.5310242469692907))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      GenSym(0) = (top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(2.5310242469692907,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      GenSym(0) = (top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(2.5310242469692907,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7093::Float64
  ####G#7085#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7096::Tuple{}
  ##########x#7077#7079#7083#7088#7097::Float64
  ########_var0#7080#7084#7089#7098::Tuple{}
  ########types#7090#7091#7092#7099::Tuple{Type{Irrational{:log4π}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      ##a#7093 = (top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7093::Float64,0)::Float64
      ####G#7085#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7093::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,2.5310242469692907))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7093::Float64
  ####G#7085#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7096::Tuple{}
  ##########x#7077#7079#7083#7088#7097::Float64
  ########_var0#7080#7084#7089#7098::Tuple{}
  ########types#7090#7091#7092#7099::Tuple{Type{Irrational{:log4π}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      ##a#7093 = (top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7093::Float64,0)::Float64
      ####G#7085#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7093::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,2.5310242469692907))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7093::Float64
  ####G#7085#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7096::Tuple{}
  ##########x#7077#7079#7083#7088#7097::Float64
  ########_var0#7080#7084#7089#7098::Tuple{}
  ########types#7090#7091#7092#7099::Tuple{Type{Irrational{:log4π}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      ##a#7093 = (top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7093::Float64,0)::Float64
      ####G#7085#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7093::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,2.5310242469692907))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7093::Float64
  ####G#7085#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7096::Tuple{}
  ##########x#7077#7079#7083#7088#7097::Float64
  ########_var0#7080#7084#7089#7098::Tuple{}
  ########types#7090#7091#7092#7099::Tuple{Type{Irrational{:log4π}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 44:
      ##a#7093 = (top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7093::Float64,0)::Float64
      ####G#7085#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7093::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,2.5310242469692907))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}
  ####_var0#7103#7105::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7106::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7105 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7105 = false
      2: 
      ####_var0#7103#7105::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7106 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7106 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{Int64},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7106::Float64,1.0)))::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  ####_var0#7103#7110::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7111::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7110 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7110 = false
      2: 
      ####_var0#7103#7110::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7111 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7111 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{Float64},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7111::Float64,1.0)))::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7103#7129::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7130::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7129 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7129 = false
      2: 
      ####_var0#7103#7129::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7130 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7130::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}
  ####_var0#7103#7110::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7111::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7110 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7110 = false
      2: 
      ####_var0#7103#7110::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7111 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7111 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{Float64},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7111::Float64,1.0)))::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  ####_var0#7103#7110::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7111::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7110 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7110 = false
      2: 
      ####_var0#7103#7110::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7111 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7111 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{Float64},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7111::Float64,1.0)))::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7103#7129::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7130::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7129 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7129 = false
      2: 
      ####_var0#7103#7129::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7130 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7130::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7103#7129::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7130::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7129 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7129 = false
      2: 
      ####_var0#7103#7129::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7130 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7130::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7103#7129::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7130::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7129 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7129 = false
      2: 
      ####_var0#7103#7129::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7130 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7130::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7103#7129::UNION{BOOL,INT64}
  ########_var0#7101#7102#7104#7130::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7103#7129 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7103#7129 = false
      2: 
      ####_var0#7103#7129::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7101#7102#7104#7130 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7101#7102#7104#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.quantile)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7101#7102#7104#7130::Float64,1.0)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}
  x::Int64
  ####xs#7131#7132::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Cauchy{Int64},:σ)::Int64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Cauchy{Int64},:μ)::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Cauchy{Int64},:σ)::Int64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  x::Int64
  ####xs#7133#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}
  x::Int64
  ####xs#7133#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  x::Int64
  ####xs#7133#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.141592653589793,(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 75:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      return Distributions.NaN
  end::Float64




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cauchy{Int64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      GenSym(0) = (Base.box)(Int64,(Base.mul_int)(t::Int64,(top(getfield))(d::Distributions.Cauchy{Int64},:μ)::Int64))
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(GenSym(0),0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(GenSym(0),0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      return (Distributions.exp)($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.sub_int)((top(getfield))(GenSym(1),:re)::Int64,(Base.box)(Int64,(Base.mul_int)((top(getfield))(d::Distributions.Cauchy{Int64},:σ)::Int64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :((top(getfield))(GenSym(1),:im)::Int64))))::UNION{COMPLEX{FLOAT64},COMPLEX{INT64}}
  end::UNION{COMPLEX{FLOAT64},COMPLEX{INT64}}

---- integer, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(1),:re)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))))), :((top(getfield))(GenSym(1),:im)::Float64))))::Complex{Float64}
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ######tup#7244#7247#7337::Tuple{}
  ######x#7245#7248#7338::Int64
  ####_var0#7249#7339::Tuple{}
  ######types#7246#7250#7340::Tuple{Type{Int64}}
  ########tup#7244#7247#7251#7341::Tuple{}
  ########x#7245#7248#7252#7342::Int64
  ######_var0#7249#7253#7343::Tuple{}
  ########types#7246#7250#7254#7344::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7249#7253#7343 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7249#7253#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = Distributions.im * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7249#7339 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7249#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return (Distributions.exp)(GenSym(0) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Cauchy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(1),:re)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))))), :((top(getfield))(GenSym(1),:im)::Float64))))::Complex{Float64}
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Cauchy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Cauchy{Float64},:μ)::Float64))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(1),:re)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Cauchy{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))))), :((top(getfield))(GenSym(1),:im)::Float64))))::Complex{Float64}
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ######tup#7244#7247#7337::Tuple{}
  ######x#7245#7248#7338::Int64
  ####_var0#7249#7339::Tuple{}
  ######types#7246#7250#7340::Tuple{Type{Int64}}
  ########tup#7244#7247#7251#7341::Tuple{}
  ########x#7245#7248#7252#7342::Int64
  ######_var0#7249#7253#7343::Tuple{}
  ########types#7246#7250#7254#7344::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7249#7253#7343 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7249#7253#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = Distributions.im * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7249#7339 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7249#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return (Distributions.exp)(GenSym(0) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ######tup#7244#7247#7337::Tuple{}
  ######x#7245#7248#7338::Int64
  ####_var0#7249#7339::Tuple{}
  ######types#7246#7250#7340::Tuple{Type{Int64}}
  ########tup#7244#7247#7251#7341::Tuple{}
  ########x#7245#7248#7252#7342::Int64
  ######_var0#7249#7253#7343::Tuple{}
  ########types#7246#7250#7254#7344::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7249#7253#7343 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7249#7253#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = Distributions.im * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7249#7339 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7249#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return (Distributions.exp)(GenSym(0) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ######tup#7244#7247#7337::Tuple{}
  ######x#7245#7248#7338::Int64
  ####_var0#7249#7339::Tuple{}
  ######types#7246#7250#7340::Tuple{Type{Int64}}
  ########tup#7244#7247#7251#7341::Tuple{}
  ########x#7245#7248#7252#7342::Int64
  ######_var0#7249#7253#7343::Tuple{}
  ########types#7246#7250#7254#7344::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7249#7253#7343 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7249#7253#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = Distributions.im * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7249#7339 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7249#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return (Distributions.exp)(GenSym(0) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ######tup#7244#7247#7337::Tuple{}
  ######x#7245#7248#7338::Int64
  ####_var0#7249#7339::Tuple{}
  ######types#7246#7250#7340::Tuple{Type{Int64}}
  ########tup#7244#7247#7251#7341::Tuple{}
  ########x#7245#7248#7252#7342::Int64
  ######_var0#7249#7253#7343::Tuple{}
  ########types#7246#7250#7254#7344::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cauchy.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7249#7253#7343 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7249#7253#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = Distributions.im * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7249#7339 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7249#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return (Distributions.exp)(GenSym(0) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cauchy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




