____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 49:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 50:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7078::Float64
  ######tup#7066#7069#7079::Tuple{}
  ######x#7067#7070#7080::Float64
  ####_var0#7071#7081::Tuple{}
  ######types#7068#7072#7082::Tuple{Type{Float64}}
  ######a#7073#7075#7083::Tuple{}
  ######b#7074#7076#7084::Tuple{}
  ####_var0#7077#7085::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      ##div_a#7078 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7081 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7081 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7078::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7085 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7085 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7078::Float64
  ######tup#7066#7069#7079::Tuple{}
  ######x#7067#7070#7080::Float64
  ####_var0#7071#7081::Tuple{}
  ######types#7068#7072#7082::Tuple{Type{Float64}}
  ######a#7073#7075#7083::Tuple{}
  ######b#7074#7076#7084::Tuple{}
  ####_var0#7077#7085::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      ##div_a#7078 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7081 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7081 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7078::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7085 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7085 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7078::Float64
  ######tup#7066#7069#7079::Tuple{}
  ######x#7067#7070#7080::Float64
  ####_var0#7071#7081::Tuple{}
  ######types#7068#7072#7082::Tuple{Type{Float64}}
  ######a#7073#7075#7083::Tuple{}
  ######b#7074#7076#7084::Tuple{}
  ####_var0#7077#7085::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      ##div_a#7078 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7081 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7081 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7078::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7085 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7085 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7078::Float64
  ######tup#7066#7069#7079::Tuple{}
  ######x#7067#7070#7080::Float64
  ####_var0#7071#7081::Tuple{}
  ######types#7068#7072#7082::Tuple{Type{Float64}}
  ######a#7073#7075#7083::Tuple{}
  ######b#7074#7076#7084::Tuple{}
  ####_var0#7077#7085::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      ##div_a#7078 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7081 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7081 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7078::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7085 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7085 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7078::Float64
  ######tup#7066#7069#7079::Tuple{}
  ######x#7067#7070#7080::Float64
  ####_var0#7071#7081::Tuple{}
  ######types#7068#7072#7082::Tuple{Type{Float64}}
  ######a#7073#7075#7083::Tuple{}
  ######b#7074#7076#7084::Tuple{}
  ####_var0#7077#7085::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 54:
      ##div_a#7078 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7081 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7081 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7078::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7085 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7085 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,3.0)),(top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,0.4549364231195728))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,0.4549364231195728))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7092::Float64
  ######tup#7066#7069#7093::Tuple{}
  ######x#7067#7070#7094::Float64
  ####_var0#7071#7095::Tuple{}
  ######types#7068#7072#7096::Tuple{Type{Float64}}
  ######a#7073#7075#7097::Tuple{}
  ######b#7074#7076#7098::Tuple{}
  ####_var0#7077#7099::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      ##div_a#7092 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.4549364231195728))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7095 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7095 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,0.4549364231195728))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,0.4549364231195728))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7092::Float64
  ######tup#7066#7069#7093::Tuple{}
  ######x#7067#7070#7094::Float64
  ####_var0#7071#7095::Tuple{}
  ######types#7068#7072#7096::Tuple{Type{Float64}}
  ######a#7073#7075#7097::Tuple{}
  ######b#7074#7076#7098::Tuple{}
  ####_var0#7077#7099::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      ##div_a#7092 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.4549364231195728))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7095 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7095 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7092::Float64
  ######tup#7066#7069#7093::Tuple{}
  ######x#7067#7070#7094::Float64
  ####_var0#7071#7095::Tuple{}
  ######types#7068#7072#7096::Tuple{Type{Float64}}
  ######a#7073#7075#7097::Tuple{}
  ######b#7074#7076#7098::Tuple{}
  ####_var0#7077#7099::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      ##div_a#7092 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.4549364231195728))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7095 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7095 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7092::Float64
  ######tup#7066#7069#7093::Tuple{}
  ######x#7067#7070#7094::Float64
  ####_var0#7071#7095::Tuple{}
  ######types#7068#7072#7096::Tuple{Type{Float64}}
  ######a#7073#7075#7097::Tuple{}
  ######b#7074#7076#7098::Tuple{}
  ####_var0#7077#7099::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      ##div_a#7092 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.4549364231195728))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7095 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7095 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##div_a#7092::Float64
  ######tup#7066#7069#7093::Tuple{}
  ######x#7067#7070#7094::Float64
  ####_var0#7071#7095::Tuple{}
  ######types#7068#7072#7096::Tuple{Type{Float64}}
  ######a#7073#7075#7097::Tuple{}
  ######b#7074#7076#7098::Tuple{}
  ####_var0#7077#7099::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 58:
      ##div_a#7092 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.4549364231195728))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7095 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7071#7095 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7077#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 51:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 52:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3))))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),2.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3))))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),2.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7137::Float64
  ##exp_a#7138::Float64
  ##deriv#7139::Float64
  ####G#7117#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7142::Tuple{}
  ##########x#7109#7111#7115#7120#7143::Float64
  ########_var0#7112#7116#7121#7144::Tuple{}
  ########tup#7108#7122#7126#7145::Tuple{}
  ########x#7109#7123#7127#7146::Float64
  ######_var0#7124#7128#7147::Tuple{}
  ########types#7068#7125#7129#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ####G#7130#7150::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7131#7151::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7132#7152::Tuple{}
  ##########x#7109#7111#7115#7133#7153::Float64
  ########_var0#7112#7116#7134#7154::Tuple{}
  ########types#7068#7135#7136#7155::Tuple{Type{Float64}}
  ##div_a#7156::Float64
  ######tup#7066#7069#7157::Tuple{}
  ######x#7067#7070#7158::Float64
  ####_var0#7071#7159::Tuple{}
  ######types#7068#7072#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      ##a#7137 = (top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7138 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7139 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7117#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7144 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7138::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7147 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7124#7128#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7149::Float64,0)::Float64
      ####G#7130#7150 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7134#7154 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7112#7116#7134#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7149::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3)))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7159 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7071#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3))))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),2.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3))))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)),2.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7137::Float64
  ##exp_a#7138::Float64
  ##deriv#7139::Float64
  ####G#7117#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7142::Tuple{}
  ##########x#7109#7111#7115#7120#7143::Float64
  ########_var0#7112#7116#7121#7144::Tuple{}
  ########tup#7108#7122#7126#7145::Tuple{}
  ########x#7109#7123#7127#7146::Float64
  ######_var0#7124#7128#7147::Tuple{}
  ########types#7068#7125#7129#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ####G#7130#7150::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7131#7151::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7132#7152::Tuple{}
  ##########x#7109#7111#7115#7133#7153::Float64
  ########_var0#7112#7116#7134#7154::Tuple{}
  ########types#7068#7135#7136#7155::Tuple{Type{Float64}}
  ##div_a#7156::Float64
  ######tup#7066#7069#7157::Tuple{}
  ######x#7067#7070#7158::Float64
  ####_var0#7071#7159::Tuple{}
  ######types#7068#7072#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      ##a#7137 = (top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7138 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7139 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7117#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7144 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7138::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7147 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7124#7128#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7149::Float64,0)::Float64
      ####G#7130#7150 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7134#7154 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7112#7116#7134#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7149::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3)))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7159 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7071#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7137::Float64
  ##exp_a#7138::Float64
  ##deriv#7139::Float64
  ####G#7117#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7142::Tuple{}
  ##########x#7109#7111#7115#7120#7143::Float64
  ########_var0#7112#7116#7121#7144::Tuple{}
  ########tup#7108#7122#7126#7145::Tuple{}
  ########x#7109#7123#7127#7146::Float64
  ######_var0#7124#7128#7147::Tuple{}
  ########types#7068#7125#7129#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ####G#7130#7150::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7131#7151::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7132#7152::Tuple{}
  ##########x#7109#7111#7115#7133#7153::Float64
  ########_var0#7112#7116#7134#7154::Tuple{}
  ########types#7068#7135#7136#7155::Tuple{Type{Float64}}
  ##div_a#7156::Float64
  ######tup#7066#7069#7157::Tuple{}
  ######x#7067#7070#7158::Float64
  ####_var0#7071#7159::Tuple{}
  ######types#7068#7072#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      ##a#7137 = (top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7138 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7139 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7117#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7144 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7138::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7147 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7124#7128#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7149::Float64,0)::Float64
      ####G#7130#7150 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7134#7154 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7112#7116#7134#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7149::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3)))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7159 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7071#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7137::Float64
  ##exp_a#7138::Float64
  ##deriv#7139::Float64
  ####G#7117#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7142::Tuple{}
  ##########x#7109#7111#7115#7120#7143::Float64
  ########_var0#7112#7116#7121#7144::Tuple{}
  ########tup#7108#7122#7126#7145::Tuple{}
  ########x#7109#7123#7127#7146::Float64
  ######_var0#7124#7128#7147::Tuple{}
  ########types#7068#7125#7129#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ####G#7130#7150::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7131#7151::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7132#7152::Tuple{}
  ##########x#7109#7111#7115#7133#7153::Float64
  ########_var0#7112#7116#7134#7154::Tuple{}
  ########types#7068#7135#7136#7155::Tuple{Type{Float64}}
  ##div_a#7156::Float64
  ######tup#7066#7069#7157::Tuple{}
  ######x#7067#7070#7158::Float64
  ####_var0#7071#7159::Tuple{}
  ######types#7068#7072#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      ##a#7137 = (top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7138 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7139 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7117#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7144 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7138::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7147 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7124#7128#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7149::Float64,0)::Float64
      ####G#7130#7150 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7134#7154 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7112#7116#7134#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7149::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3)))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7159 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7071#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7137::Float64
  ##exp_a#7138::Float64
  ##deriv#7139::Float64
  ####G#7117#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7142::Tuple{}
  ##########x#7109#7111#7115#7120#7143::Float64
  ########_var0#7112#7116#7121#7144::Tuple{}
  ########tup#7108#7122#7126#7145::Tuple{}
  ########x#7109#7123#7127#7146::Float64
  ######_var0#7124#7128#7147::Tuple{}
  ########types#7068#7125#7129#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ####G#7130#7150::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7131#7151::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7132#7152::Tuple{}
  ##########x#7109#7111#7115#7133#7153::Float64
  ########_var0#7112#7116#7134#7154::Tuple{}
  ########types#7068#7135#7136#7155::Tuple{Type{Float64}}
  ##div_a#7156::Float64
  ######tup#7066#7069#7157::Tuple{}
  ######x#7067#7070#7158::Float64
  ####_var0#7071#7159::Tuple{}
  ######types#7068#7072#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 56:
      GenSym(3) = (Distributions.digamma)(1.0)::Float64
      ##a#7137 = (top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7138 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7139 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7137::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7117#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7144 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7138::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7147 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7124#7128#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,16)),3.141592653589793))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7149::Float64,0)::Float64
      ####G#7130#7150 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7134#7154 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7112#7116#7134#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7149::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(3)))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7159 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7071#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}
  ####r#7174#7180::UInt64
  ####rabs#7175#7181::Int64
  ####idx#7176#7182::Int64
  ####x#7177#7183::Float64
  ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7185::Float64
  ##_var0#7186::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7184 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7184 = false
      2: 
      ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7185 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7180 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7185::Float64),0x000fffffffffffff))
      ####rabs#7175#7181 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7180::UInt64,1))))
      ####idx#7176#7182 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7181::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7183 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7180::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7181::Int64)),####rabs#7175#7181::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7181::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7181::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7186 = ####x#7177#7183::Float64
      goto 5
      4: 
      ##_var0#7186 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7182::Int64,####rabs#7175#7181::Int64,####x#7177#7183::Float64)::Float64
      goto 5
      ##_var0#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(##_var0#7186::Float64,##_var0#7186::Float64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}
  ####r#7174#7180::UInt64
  ####rabs#7175#7181::Int64
  ####idx#7176#7182::Int64
  ####x#7177#7183::Float64
  ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7185::Float64
  ##_var0#7186::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7184 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7184 = false
      2: 
      ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7185 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7180 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7185::Float64),0x000fffffffffffff))
      ####rabs#7175#7181 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7180::UInt64,1))))
      ####idx#7176#7182 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7181::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7183 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7180::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7181::Int64)),####rabs#7175#7181::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7181::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7181::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7186 = ####x#7177#7183::Float64
      goto 5
      4: 
      ##_var0#7186 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7182::Int64,####rabs#7175#7181::Int64,####x#7177#7183::Float64)::Float64
      goto 5
      ##_var0#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(##_var0#7186::Float64,##_var0#7186::Float64))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7174#7189::UInt64
  ####rabs#7175#7190::Int64
  ####idx#7176#7191::Int64
  ####x#7177#7192::Float64
  ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7194::Float64
  ##_var0#7195::Float64
  ##div_a#7196::Float64
  ######tup#7066#7069#7197::Tuple{}
  ######x#7067#7070#7198::Float64
  ####_var0#7071#7199::Tuple{}
  ######types#7068#7072#7200::Tuple{Type{Float64}}
  ######a#7073#7075#7201::Tuple{}
  ######b#7074#7076#7202::Tuple{}
  ####_var0#7077#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7193 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7193 = false
      2: 
      ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7194 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7189 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7194::Float64),0x000fffffffffffff))
      ####rabs#7175#7190 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7189::UInt64,1))))
      ####idx#7176#7191 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7190::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7189::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7190::Int64)),####rabs#7175#7190::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7190::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7190::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7195 = ####x#7177#7192::Float64
      goto 5
      4: 
      ##_var0#7195 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7191::Int64,####rabs#7175#7190::Int64,####x#7177#7192::Float64)::Float64
      goto 5
      ##_var0#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(##_var0#7195::Float64,##_var0#7195::Float64))
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7199 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7071#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7203 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7077#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}
  ####r#7174#7180::UInt64
  ####rabs#7175#7181::Int64
  ####idx#7176#7182::Int64
  ####x#7177#7183::Float64
  ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7185::Float64
  ##_var0#7186::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7184 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7184 = false
      2: 
      ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7185 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7180 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7185::Float64),0x000fffffffffffff))
      ####rabs#7175#7181 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7180::UInt64,1))))
      ####idx#7176#7182 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7181::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7183 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7180::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7181::Int64)),####rabs#7175#7181::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7181::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7181::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7186 = ####x#7177#7183::Float64
      goto 5
      4: 
      ##_var0#7186 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7182::Int64,####rabs#7175#7181::Int64,####x#7177#7183::Float64)::Float64
      goto 5
      ##_var0#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(##_var0#7186::Float64,##_var0#7186::Float64))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}
  ####r#7174#7180::UInt64
  ####rabs#7175#7181::Int64
  ####idx#7176#7182::Int64
  ####x#7177#7183::Float64
  ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7185::Float64
  ##_var0#7186::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7184 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7184 = false
      2: 
      ########_var0#7166#7172#7178#7184::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7185 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7180 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7185::Float64),0x000fffffffffffff))
      ####rabs#7175#7181 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7180::UInt64,1))))
      ####idx#7176#7182 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7181::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7183 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7180::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7181::Int64)),####rabs#7175#7181::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7181::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7181::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7182::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7186 = ####x#7177#7183::Float64
      goto 5
      4: 
      ##_var0#7186 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7182::Int64,####rabs#7175#7181::Int64,####x#7177#7183::Float64)::Float64
      goto 5
      ##_var0#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(##_var0#7186::Float64,##_var0#7186::Float64))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7174#7189::UInt64
  ####rabs#7175#7190::Int64
  ####idx#7176#7191::Int64
  ####x#7177#7192::Float64
  ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7194::Float64
  ##_var0#7195::Float64
  ##div_a#7196::Float64
  ######tup#7066#7069#7197::Tuple{}
  ######x#7067#7070#7198::Float64
  ####_var0#7071#7199::Tuple{}
  ######types#7068#7072#7200::Tuple{Type{Float64}}
  ######a#7073#7075#7201::Tuple{}
  ######b#7074#7076#7202::Tuple{}
  ####_var0#7077#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7193 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7193 = false
      2: 
      ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7194 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7189 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7194::Float64),0x000fffffffffffff))
      ####rabs#7175#7190 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7189::UInt64,1))))
      ####idx#7176#7191 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7190::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7189::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7190::Int64)),####rabs#7175#7190::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7190::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7190::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7195 = ####x#7177#7192::Float64
      goto 5
      4: 
      ##_var0#7195 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7191::Int64,####rabs#7175#7190::Int64,####x#7177#7192::Float64)::Float64
      goto 5
      ##_var0#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(##_var0#7195::Float64,##_var0#7195::Float64))
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7199 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7071#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7203 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7077#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7174#7189::UInt64
  ####rabs#7175#7190::Int64
  ####idx#7176#7191::Int64
  ####x#7177#7192::Float64
  ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7194::Float64
  ##_var0#7195::Float64
  ##div_a#7196::Float64
  ######tup#7066#7069#7197::Tuple{}
  ######x#7067#7070#7198::Float64
  ####_var0#7071#7199::Tuple{}
  ######types#7068#7072#7200::Tuple{Type{Float64}}
  ######a#7073#7075#7201::Tuple{}
  ######b#7074#7076#7202::Tuple{}
  ####_var0#7077#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7193 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7193 = false
      2: 
      ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7194 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7189 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7194::Float64),0x000fffffffffffff))
      ####rabs#7175#7190 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7189::UInt64,1))))
      ####idx#7176#7191 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7190::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7189::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7190::Int64)),####rabs#7175#7190::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7190::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7190::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7195 = ####x#7177#7192::Float64
      goto 5
      4: 
      ##_var0#7195 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7191::Int64,####rabs#7175#7190::Int64,####x#7177#7192::Float64)::Float64
      goto 5
      ##_var0#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(##_var0#7195::Float64,##_var0#7195::Float64))
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7199 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7071#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7203 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7077#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7174#7189::UInt64
  ####rabs#7175#7190::Int64
  ####idx#7176#7191::Int64
  ####x#7177#7192::Float64
  ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7194::Float64
  ##_var0#7195::Float64
  ##div_a#7196::Float64
  ######tup#7066#7069#7197::Tuple{}
  ######x#7067#7070#7198::Float64
  ####_var0#7071#7199::Tuple{}
  ######types#7068#7072#7200::Tuple{Type{Float64}}
  ######a#7073#7075#7201::Tuple{}
  ######b#7074#7076#7202::Tuple{}
  ####_var0#7077#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7193 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7193 = false
      2: 
      ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7194 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7189 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7194::Float64),0x000fffffffffffff))
      ####rabs#7175#7190 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7189::UInt64,1))))
      ####idx#7176#7191 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7190::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7189::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7190::Int64)),####rabs#7175#7190::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7190::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7190::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7195 = ####x#7177#7192::Float64
      goto 5
      4: 
      ##_var0#7195 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7191::Int64,####rabs#7175#7190::Int64,####x#7177#7192::Float64)::Float64
      goto 5
      ##_var0#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(##_var0#7195::Float64,##_var0#7195::Float64))
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7199 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7071#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7203 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7077#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7174#7189::UInt64
  ####rabs#7175#7190::Int64
  ####idx#7176#7191::Int64
  ####x#7177#7192::Float64
  ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
  ############_var0#7164#7165#7167#7173#7179#7194::Float64
  ##_var0#7195::Float64
  ##div_a#7196::Float64
  ######tup#7066#7069#7197::Tuple{}
  ######x#7067#7070#7198::Float64
  ####_var0#7071#7199::Tuple{}
  ######types#7068#7072#7200::Tuple{Type{Float64}}
  ######a#7073#7075#7201::Tuple{}
  ######b#7074#7076#7202::Tuple{}
  ####_var0#7077#7203::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 91:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7166#7172#7178#7193 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7166#7172#7178#7193 = false
      2: 
      ########_var0#7166#7172#7178#7193::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7164#7165#7167#7173#7179#7194 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7164#7165#7167#7173#7179#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7174#7189 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7164#7165#7167#7173#7179#7194::Float64),0x000fffffffffffff))
      ####rabs#7175#7190 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7174#7189::UInt64,1))))
      ####idx#7176#7191 = (Base.box)(Int64,(Base.and_int)(####rabs#7175#7190::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7177#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7174#7189::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7175#7190::Int64)),####rabs#7175#7190::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7175#7190::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7175#7190::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7176#7191::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7195 = ####x#7177#7192::Float64
      goto 5
      4: 
      ##_var0#7195 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7176#7191::Int64,####rabs#7175#7190::Int64,####x#7177#7192::Float64)::Float64
      goto 5
      ##_var0#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(##_var0#7195::Float64,##_var0#7195::Float64))
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))
      $(Expr(:boundscheck, false))
      ####_var0#7071#7199 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7071#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7077#7203 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7077#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}
  x::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(8) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      z = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(σ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,z::Float64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ::Float64))::Float64,2.5066282746310007)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,1.5)))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}
  x::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(8) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      z = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(σ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,z::Float64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ::Float64))::Float64,2.5066282746310007)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,1.5)))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7204#7206#7255::Tuple{}
  ####_var0#7207#7256::Tuple{}
  ######types#7205#7208#7257::Tuple{Type{Int64}}
  ##a#7258::Float64
  ##exp_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7250#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7251#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7252#7263::Tuple{}
  ##########x#7109#7111#7115#7253#7264::Float64
  ########_var0#7112#7116#7254#7265::Tuple{}
  ########tup#7108#7122#7126#7266::Tuple{}
  ########x#7109#7123#7127#7267::Float64
  ######_var0#7124#7128#7268::Tuple{}
  ########types#7068#7125#7129#7269::Tuple{Type{Float64}}
  ######tup#7204#7220#7270::Tuple{}
  ####_var0#7221#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ##div_a#7274::Float64
  ####afactor#7232#7275::Float64
  ####bfactor#7233#7276::Float64
  ########a#7222#7226#7234#7277::Tuple{}
  ########b#7223#7227#7235#7278::Tuple{}
  ########afactor#7224#7228#7236#7279::Float64
  ########bfactor#7225#7229#7237#7280::Float64
  ######_var0#7230#7238#7281::Tuple{}
  ######types#7231#7239#7282::Tuple{Type{Float64}}
  ##exp_a#7283::Float64
  ####G#7240#7284::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7241#7285::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7242#7286::Tuple{}
  ##########x#7109#7111#7115#7243#7287::Float64
  ########_var0#7112#7116#7244#7288::Tuple{}
  ##sqrt_a#7289::Float64
  ##deriv#7290::Float64
  ####G#7209#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7210#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7211#7293::Tuple{}
  ##########x#7109#7111#7115#7212#7294::Float64
  ########_var0#7112#7116#7213#7295::Tuple{}
  ##div_a#7296::Float64
  ######tup#7214#7216#7297::Tuple{}
  ######x#7215#7217#7298::Irrational{:sqrt2π}
  ####_var0#7218#7299::Tuple{}
  ######types#7068#7219#7300::Tuple{Type{Float64}}
  ##a1#7301::Float64
  ##a2#7302::Float64
  ######a#7222#7245#7303::Tuple{}
  ######b#7223#7246#7304::Tuple{}
  ######afactor#7224#7247#7305::Float64
  ######bfactor#7225#7248#7306::Float64
  ####_var0#7249#7307::Tuple{}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ##div_a#7310::Float64
  ####afactor#7232#7311::Float64
  ####bfactor#7233#7312::Float64
  ########a#7222#7226#7234#7313::Tuple{}
  ########b#7223#7227#7235#7314::Tuple{}
  ########afactor#7224#7228#7236#7315::Float64
  ########bfactor#7225#7229#7237#7316::Float64
  ######_var0#7230#7238#7317::Tuple{}
  ######types#7231#7239#7318::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(23) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7207#7256 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7207#7256 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      ##sqrt_a#7289 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7290 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7289::Float64))
      ####G#7209#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7213#7295 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7112#7116#7213#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7289::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(14),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7218#7299 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7218#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7221#7271 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7221#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7268 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7124#7128#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7272 = GenSym(10)
      ##a2#7273 = GenSym(11)
      ##div_a#7274 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7272::Float64,##a2#7273::Float64))
      ####afactor#7232#7275 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7273::Float64))
      ####bfactor#7233#7276 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7272::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7273::Float64,##a2#7273::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7281 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7230#7238#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7274::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7283 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(12),:value)::Float64,0)::Float64
      ####G#7240#7284 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7244#7288 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7112#7116#7244#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      ##a1#7301 = GenSym(17)
      ##a2#7302 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7249#7307 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7249#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7301::Float64,##a2#7302::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7258 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,1.5,0)::Float64
      ##exp_a#7259 = (Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,1.5)))::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,GenSym(6),0)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,GenSym(6))))::Float64))
      ####G#7250#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7254#7265 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7254#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7308 = GenSym(21)
      ##a2#7309 = GenSym(22)
      ##div_a#7310 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7308::Float64,##a2#7309::Float64))
      ####afactor#7232#7311 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7309::Float64))
      ####bfactor#7233#7312 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7308::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7309::Float64,##a2#7309::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7317 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7230#7238#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}
  x::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(8) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      z = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(σ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,z::Float64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ::Float64))::Float64,2.5066282746310007)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,1.5)))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}
  x::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(8) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      z = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(σ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,z::Float64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,z::Float64,0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(σ::Float64))::Float64,2.5066282746310007)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(z::Float64,1.5)))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7204#7206#7255::Tuple{}
  ####_var0#7207#7256::Tuple{}
  ######types#7205#7208#7257::Tuple{Type{Int64}}
  ##a#7258::Float64
  ##exp_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7250#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7251#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7252#7263::Tuple{}
  ##########x#7109#7111#7115#7253#7264::Float64
  ########_var0#7112#7116#7254#7265::Tuple{}
  ########tup#7108#7122#7126#7266::Tuple{}
  ########x#7109#7123#7127#7267::Float64
  ######_var0#7124#7128#7268::Tuple{}
  ########types#7068#7125#7129#7269::Tuple{Type{Float64}}
  ######tup#7204#7220#7270::Tuple{}
  ####_var0#7221#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ##div_a#7274::Float64
  ####afactor#7232#7275::Float64
  ####bfactor#7233#7276::Float64
  ########a#7222#7226#7234#7277::Tuple{}
  ########b#7223#7227#7235#7278::Tuple{}
  ########afactor#7224#7228#7236#7279::Float64
  ########bfactor#7225#7229#7237#7280::Float64
  ######_var0#7230#7238#7281::Tuple{}
  ######types#7231#7239#7282::Tuple{Type{Float64}}
  ##exp_a#7283::Float64
  ####G#7240#7284::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7241#7285::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7242#7286::Tuple{}
  ##########x#7109#7111#7115#7243#7287::Float64
  ########_var0#7112#7116#7244#7288::Tuple{}
  ##sqrt_a#7289::Float64
  ##deriv#7290::Float64
  ####G#7209#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7210#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7211#7293::Tuple{}
  ##########x#7109#7111#7115#7212#7294::Float64
  ########_var0#7112#7116#7213#7295::Tuple{}
  ##div_a#7296::Float64
  ######tup#7214#7216#7297::Tuple{}
  ######x#7215#7217#7298::Irrational{:sqrt2π}
  ####_var0#7218#7299::Tuple{}
  ######types#7068#7219#7300::Tuple{Type{Float64}}
  ##a1#7301::Float64
  ##a2#7302::Float64
  ######a#7222#7245#7303::Tuple{}
  ######b#7223#7246#7304::Tuple{}
  ######afactor#7224#7247#7305::Float64
  ######bfactor#7225#7248#7306::Float64
  ####_var0#7249#7307::Tuple{}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ##div_a#7310::Float64
  ####afactor#7232#7311::Float64
  ####bfactor#7233#7312::Float64
  ########a#7222#7226#7234#7313::Tuple{}
  ########b#7223#7227#7235#7314::Tuple{}
  ########afactor#7224#7228#7236#7315::Float64
  ########bfactor#7225#7229#7237#7316::Float64
  ######_var0#7230#7238#7317::Tuple{}
  ######types#7231#7239#7318::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(23) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7207#7256 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7207#7256 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      ##sqrt_a#7289 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7290 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7289::Float64))
      ####G#7209#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7213#7295 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7112#7116#7213#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7289::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(14),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7218#7299 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7218#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7221#7271 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7221#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7268 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7124#7128#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7272 = GenSym(10)
      ##a2#7273 = GenSym(11)
      ##div_a#7274 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7272::Float64,##a2#7273::Float64))
      ####afactor#7232#7275 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7273::Float64))
      ####bfactor#7233#7276 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7272::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7273::Float64,##a2#7273::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7281 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7230#7238#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7274::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7283 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(12),:value)::Float64,0)::Float64
      ####G#7240#7284 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7244#7288 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7112#7116#7244#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      ##a1#7301 = GenSym(17)
      ##a2#7302 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7249#7307 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7249#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7301::Float64,##a2#7302::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7258 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,1.5,0)::Float64
      ##exp_a#7259 = (Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,1.5)))::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,GenSym(6),0)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,GenSym(6))))::Float64))
      ####G#7250#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7254#7265 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7254#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7308 = GenSym(21)
      ##a2#7309 = GenSym(22)
      ##div_a#7310 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7308::Float64,##a2#7309::Float64))
      ####afactor#7232#7311 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7309::Float64))
      ####bfactor#7233#7312 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7308::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7309::Float64,##a2#7309::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7317 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7230#7238#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7204#7206#7255::Tuple{}
  ####_var0#7207#7256::Tuple{}
  ######types#7205#7208#7257::Tuple{Type{Int64}}
  ##a#7258::Float64
  ##exp_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7250#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7251#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7252#7263::Tuple{}
  ##########x#7109#7111#7115#7253#7264::Float64
  ########_var0#7112#7116#7254#7265::Tuple{}
  ########tup#7108#7122#7126#7266::Tuple{}
  ########x#7109#7123#7127#7267::Float64
  ######_var0#7124#7128#7268::Tuple{}
  ########types#7068#7125#7129#7269::Tuple{Type{Float64}}
  ######tup#7204#7220#7270::Tuple{}
  ####_var0#7221#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ##div_a#7274::Float64
  ####afactor#7232#7275::Float64
  ####bfactor#7233#7276::Float64
  ########a#7222#7226#7234#7277::Tuple{}
  ########b#7223#7227#7235#7278::Tuple{}
  ########afactor#7224#7228#7236#7279::Float64
  ########bfactor#7225#7229#7237#7280::Float64
  ######_var0#7230#7238#7281::Tuple{}
  ######types#7231#7239#7282::Tuple{Type{Float64}}
  ##exp_a#7283::Float64
  ####G#7240#7284::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7241#7285::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7242#7286::Tuple{}
  ##########x#7109#7111#7115#7243#7287::Float64
  ########_var0#7112#7116#7244#7288::Tuple{}
  ##sqrt_a#7289::Float64
  ##deriv#7290::Float64
  ####G#7209#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7210#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7211#7293::Tuple{}
  ##########x#7109#7111#7115#7212#7294::Float64
  ########_var0#7112#7116#7213#7295::Tuple{}
  ##div_a#7296::Float64
  ######tup#7214#7216#7297::Tuple{}
  ######x#7215#7217#7298::Irrational{:sqrt2π}
  ####_var0#7218#7299::Tuple{}
  ######types#7068#7219#7300::Tuple{Type{Float64}}
  ##a1#7301::Float64
  ##a2#7302::Float64
  ######a#7222#7245#7303::Tuple{}
  ######b#7223#7246#7304::Tuple{}
  ######afactor#7224#7247#7305::Float64
  ######bfactor#7225#7248#7306::Float64
  ####_var0#7249#7307::Tuple{}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ##div_a#7310::Float64
  ####afactor#7232#7311::Float64
  ####bfactor#7233#7312::Float64
  ########a#7222#7226#7234#7313::Tuple{}
  ########b#7223#7227#7235#7314::Tuple{}
  ########afactor#7224#7228#7236#7315::Float64
  ########bfactor#7225#7229#7237#7316::Float64
  ######_var0#7230#7238#7317::Tuple{}
  ######types#7231#7239#7318::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(23) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7207#7256 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7207#7256 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      ##sqrt_a#7289 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7290 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7289::Float64))
      ####G#7209#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7213#7295 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7112#7116#7213#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7289::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(14),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7218#7299 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7218#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7221#7271 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7221#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7268 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7124#7128#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7272 = GenSym(10)
      ##a2#7273 = GenSym(11)
      ##div_a#7274 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7272::Float64,##a2#7273::Float64))
      ####afactor#7232#7275 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7273::Float64))
      ####bfactor#7233#7276 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7272::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7273::Float64,##a2#7273::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7281 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7230#7238#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7274::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7283 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(12),:value)::Float64,0)::Float64
      ####G#7240#7284 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7244#7288 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7112#7116#7244#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      ##a1#7301 = GenSym(17)
      ##a2#7302 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7249#7307 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7249#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7301::Float64,##a2#7302::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7258 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,1.5,0)::Float64
      ##exp_a#7259 = (Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,1.5)))::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,GenSym(6),0)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,GenSym(6))))::Float64))
      ####G#7250#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7254#7265 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7254#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7308 = GenSym(21)
      ##a2#7309 = GenSym(22)
      ##div_a#7310 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7308::Float64,##a2#7309::Float64))
      ####afactor#7232#7311 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7309::Float64))
      ####bfactor#7233#7312 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7308::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7309::Float64,##a2#7309::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7317 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7230#7238#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7204#7206#7255::Tuple{}
  ####_var0#7207#7256::Tuple{}
  ######types#7205#7208#7257::Tuple{Type{Int64}}
  ##a#7258::Float64
  ##exp_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7250#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7251#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7252#7263::Tuple{}
  ##########x#7109#7111#7115#7253#7264::Float64
  ########_var0#7112#7116#7254#7265::Tuple{}
  ########tup#7108#7122#7126#7266::Tuple{}
  ########x#7109#7123#7127#7267::Float64
  ######_var0#7124#7128#7268::Tuple{}
  ########types#7068#7125#7129#7269::Tuple{Type{Float64}}
  ######tup#7204#7220#7270::Tuple{}
  ####_var0#7221#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ##div_a#7274::Float64
  ####afactor#7232#7275::Float64
  ####bfactor#7233#7276::Float64
  ########a#7222#7226#7234#7277::Tuple{}
  ########b#7223#7227#7235#7278::Tuple{}
  ########afactor#7224#7228#7236#7279::Float64
  ########bfactor#7225#7229#7237#7280::Float64
  ######_var0#7230#7238#7281::Tuple{}
  ######types#7231#7239#7282::Tuple{Type{Float64}}
  ##exp_a#7283::Float64
  ####G#7240#7284::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7241#7285::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7242#7286::Tuple{}
  ##########x#7109#7111#7115#7243#7287::Float64
  ########_var0#7112#7116#7244#7288::Tuple{}
  ##sqrt_a#7289::Float64
  ##deriv#7290::Float64
  ####G#7209#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7210#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7211#7293::Tuple{}
  ##########x#7109#7111#7115#7212#7294::Float64
  ########_var0#7112#7116#7213#7295::Tuple{}
  ##div_a#7296::Float64
  ######tup#7214#7216#7297::Tuple{}
  ######x#7215#7217#7298::Irrational{:sqrt2π}
  ####_var0#7218#7299::Tuple{}
  ######types#7068#7219#7300::Tuple{Type{Float64}}
  ##a1#7301::Float64
  ##a2#7302::Float64
  ######a#7222#7245#7303::Tuple{}
  ######b#7223#7246#7304::Tuple{}
  ######afactor#7224#7247#7305::Float64
  ######bfactor#7225#7248#7306::Float64
  ####_var0#7249#7307::Tuple{}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ##div_a#7310::Float64
  ####afactor#7232#7311::Float64
  ####bfactor#7233#7312::Float64
  ########a#7222#7226#7234#7313::Tuple{}
  ########b#7223#7227#7235#7314::Tuple{}
  ########afactor#7224#7228#7236#7315::Float64
  ########bfactor#7225#7229#7237#7316::Float64
  ######_var0#7230#7238#7317::Tuple{}
  ######types#7231#7239#7318::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(23) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7207#7256 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7207#7256 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      ##sqrt_a#7289 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7290 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7289::Float64))
      ####G#7209#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7213#7295 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7112#7116#7213#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7289::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(14),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7218#7299 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7218#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7221#7271 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7221#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7268 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7124#7128#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7272 = GenSym(10)
      ##a2#7273 = GenSym(11)
      ##div_a#7274 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7272::Float64,##a2#7273::Float64))
      ####afactor#7232#7275 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7273::Float64))
      ####bfactor#7233#7276 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7272::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7273::Float64,##a2#7273::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7281 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7230#7238#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7274::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7283 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(12),:value)::Float64,0)::Float64
      ####G#7240#7284 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7244#7288 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7112#7116#7244#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      ##a1#7301 = GenSym(17)
      ##a2#7302 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7249#7307 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7249#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7301::Float64,##a2#7302::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7258 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,1.5,0)::Float64
      ##exp_a#7259 = (Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,1.5)))::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,GenSym(6),0)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,GenSym(6))))::Float64))
      ####G#7250#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7254#7265 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7254#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7308 = GenSym(21)
      ##a2#7309 = GenSym(22)
      ##div_a#7310 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7308::Float64,##a2#7309::Float64))
      ####afactor#7232#7311 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7309::Float64))
      ####bfactor#7233#7312 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7308::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7309::Float64,##a2#7309::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7317 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7230#7238#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7204#7206#7255::Tuple{}
  ####_var0#7207#7256::Tuple{}
  ######types#7205#7208#7257::Tuple{Type{Int64}}
  ##a#7258::Float64
  ##exp_a#7259::Float64
  ##deriv#7260::Float64
  ####G#7250#7261::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7251#7262::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7252#7263::Tuple{}
  ##########x#7109#7111#7115#7253#7264::Float64
  ########_var0#7112#7116#7254#7265::Tuple{}
  ########tup#7108#7122#7126#7266::Tuple{}
  ########x#7109#7123#7127#7267::Float64
  ######_var0#7124#7128#7268::Tuple{}
  ########types#7068#7125#7129#7269::Tuple{Type{Float64}}
  ######tup#7204#7220#7270::Tuple{}
  ####_var0#7221#7271::Tuple{}
  ##a1#7272::Float64
  ##a2#7273::Float64
  ##div_a#7274::Float64
  ####afactor#7232#7275::Float64
  ####bfactor#7233#7276::Float64
  ########a#7222#7226#7234#7277::Tuple{}
  ########b#7223#7227#7235#7278::Tuple{}
  ########afactor#7224#7228#7236#7279::Float64
  ########bfactor#7225#7229#7237#7280::Float64
  ######_var0#7230#7238#7281::Tuple{}
  ######types#7231#7239#7282::Tuple{Type{Float64}}
  ##exp_a#7283::Float64
  ####G#7240#7284::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7241#7285::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7242#7286::Tuple{}
  ##########x#7109#7111#7115#7243#7287::Float64
  ########_var0#7112#7116#7244#7288::Tuple{}
  ##sqrt_a#7289::Float64
  ##deriv#7290::Float64
  ####G#7209#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7210#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7211#7293::Tuple{}
  ##########x#7109#7111#7115#7212#7294::Float64
  ########_var0#7112#7116#7213#7295::Tuple{}
  ##div_a#7296::Float64
  ######tup#7214#7216#7297::Tuple{}
  ######x#7215#7217#7298::Irrational{:sqrt2π}
  ####_var0#7218#7299::Tuple{}
  ######types#7068#7219#7300::Tuple{Type{Float64}}
  ##a1#7301::Float64
  ##a2#7302::Float64
  ######a#7222#7245#7303::Tuple{}
  ######b#7223#7246#7304::Tuple{}
  ######afactor#7224#7247#7305::Float64
  ######bfactor#7225#7248#7306::Float64
  ####_var0#7249#7307::Tuple{}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ##div_a#7310::Float64
  ####afactor#7232#7311::Float64
  ####bfactor#7233#7312::Float64
  ########a#7222#7226#7234#7313::Tuple{}
  ########b#7223#7227#7235#7314::Tuple{}
  ########afactor#7224#7228#7236#7315::Float64
  ########bfactor#7225#7229#7237#7316::Float64
  ######_var0#7230#7238#7317::Tuple{}
  ######types#7231#7239#7318::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 64:
      GenSym(23) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(23)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7207#7256 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7207#7256 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 66:
      ##sqrt_a#7289 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7290 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7289::Float64))
      ####G#7209#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7213#7295 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7112#7116#7213#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7289::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(14),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7218#7299 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7218#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7221#7271 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7221#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7124#7128#7268 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7124#7128#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7272 = GenSym(10)
      ##a2#7273 = GenSym(11)
      ##div_a#7274 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7272::Float64,##a2#7273::Float64))
      ####afactor#7232#7275 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7273::Float64))
      ####bfactor#7233#7276 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7272::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7273::Float64,##a2#7273::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7281 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7230#7238#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7274::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7283 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(12),:value)::Float64,0)::Float64
      ####G#7240#7284 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7244#7288 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7112#7116#7244#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7283::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(18) = (top(getfield))(GenSym(16),:value)::Float64
      ##a1#7301 = GenSym(17)
      ##a2#7302 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7249#7307 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7249#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7301::Float64,##a2#7302::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7258 = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,1.5,0)::Float64
      ##exp_a#7259 = (Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,1.5)))::Float64
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7258::Float64,0,GenSym(6),0)::Float64
      ##deriv#7260 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7258::Float64,GenSym(6))))::Float64))
      ####G#7250#7261 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7254#7265 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7254#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7308 = GenSym(21)
      ##a2#7309 = GenSym(22)
      ##div_a#7310 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7308::Float64,##a2#7309::Float64))
      ####afactor#7232#7311 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7309::Float64))
      ####bfactor#7233#7312 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7308::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7309::Float64,##a2#7309::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7230#7238#7317 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7230#7238#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 81:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  ##xs#7336::Tuple{Int64}
  ##xs#7337::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(6) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(5) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:im)::Float64)))))
      GenSym(8) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:im)::Float64))))))::Complex{Float64}
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:re)::Float64,(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:im)::Float64,(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  ##xs#7336::Tuple{Int64}
  ##xs#7337::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(6) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(5) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:im)::Float64)))))
      GenSym(8) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:im)::Float64))))))::Complex{Float64}
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:re)::Float64,(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:im)::Float64,(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7378::Tuple{Int64}
  ######T#7374#7376#7379::Type{Float64}
  ######T#7375#7377#7380::Type{Float64}
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(6) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(5) = (Distributions.im * μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7375#7377#7380 = Float64
      ######T#7374#7376#7379 = Float64
      return (Distributions.exp)(GenSym(5) - (Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{}::UNION{})::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  ##xs#7336::Tuple{Int64}
  ##xs#7337::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(6) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(5) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:im)::Float64)))))
      GenSym(8) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:im)::Float64))))))::Complex{Float64}
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:re)::Float64,(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:im)::Float64,(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Levy{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  ##xs#7336::Tuple{Int64}
  ##xs#7337::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(9) = (top(getfield))(d::Distributions.Levy{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.Levy{Float64},:σ)::Float64
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(6) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,μ::Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,μ::Float64),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(5) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(top(getfield))(GenSym(3),:im)::Float64)))))
      GenSym(8) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(5),:im)::Float64))))))::Complex{Float64}
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:re)::Float64,(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(8),:im)::Float64,(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7378::Tuple{Int64}
  ######T#7374#7376#7379::Type{Float64}
  ######T#7375#7377#7380::Type{Float64}
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(6) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(5) = (Distributions.im * μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7375#7377#7380 = Float64
      ######T#7374#7376#7379 = Float64
      return (Distributions.exp)(GenSym(5) - (Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{}::UNION{})::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7378::Tuple{Int64}
  ######T#7374#7376#7379::Type{Float64}
  ######T#7375#7377#7380::Type{Float64}
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(6) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(5) = (Distributions.im * μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7375#7377#7380 = Float64
      ######T#7374#7376#7379 = Float64
      return (Distributions.exp)(GenSym(5) - (Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{}::UNION{})::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7378::Tuple{Int64}
  ######T#7374#7376#7379::Type{Float64}
  ######T#7375#7377#7380::Type{Float64}
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(6) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(5) = (Distributions.im * μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7375#7377#7380 = Float64
      ######T#7374#7376#7379 = Float64
      return (Distributions.exp)(GenSym(5) - (Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{}::UNION{})::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7378::Tuple{Int64}
  ######T#7374#7376#7379::Type{Float64}
  ######T#7375#7377#7380::Type{Float64}
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 84:
      GenSym(6) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.Levy{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/levy.jl, line 85:
      GenSym(5) = (Distributions.im * μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-2.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-2.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7375#7377#7380 = Float64
      ######T#7374#7376#7379 = Float64
      return (Distributions.exp)(GenSym(5) - (Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{}::UNION{})::UNION{}
  end::UNION{}




