____________________________
ntrials
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64




____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7127::Tuple{}
  ##xs#7128::Tuple{Float64}
  ##xs#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7127::Tuple{}
  ##xs#7128::Tuple{Float64}
  ##xs#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7180::Tuple{}
  ########a#7079#7081#7132#7181::Tuple{}
  ########b#7080#7082#7133#7182::Tuple{}
  ######_var0#7083#7134#7183::Tuple{}
  ########types#7070#7131#7135#7184::Tuple{Type{Int64}}
  ##xs#7185::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7186::Tuple{}
  ##########x#7069#7072#7076#7149#7187::Int64
  ########_var0#7073#7077#7150#7188::Tuple{}
  ##########types#7070#7074#7078#7151#7189::Tuple{Type{Int64}}
  ####a1#7152#7190::Float64
  ####a2#7153#7191::Float64
  ########a#7084#7136#7154#7192::Tuple{}
  ########b#7085#7137#7155#7193::Tuple{}
  ########afactor#7086#7138#7156#7194::Float64
  ########bfactor#7087#7139#7157#7195::Float64
  ######_var0#7140#7158#7196::Tuple{}
  ##xs#7197::Tuple{}
  ########a#7079#7081#7176#7198::Tuple{}
  ########b#7080#7082#7177#7199::Tuple{}
  ######_var0#7083#7178#7200::Tuple{}
  ########types#7174#7175#7179#7201::Tuple{Type{Float64}}
  ######a#7079#7081#7202::Tuple{}
  ######b#7080#7082#7203::Tuple{}
  ####_var0#7083#7204::Tuple{}
  ##a#7205::Float64
  ##exp_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7169#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7170#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7171#7210::Tuple{}
  ##########x#7161#7163#7167#7172#7211::Float64
  ########_var0#7164#7168#7173#7212::Tuple{}
  ##a1#7213::Float64
  ##a2#7214::Float64
  ######a#7084#7136#7215::Tuple{}
  ######b#7085#7137#7216::Tuple{}
  ######afactor#7086#7138#7217::Float64
  ######bfactor#7087#7139#7218::Float64
  ####_var0#7140#7219::Tuple{}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7094#7223::Float64
  ####bfactor#7095#7224::Float64
  ########a#7084#7088#7096#7225::Tuple{}
  ########b#7085#7089#7097#7226::Tuple{}
  ########afactor#7086#7090#7098#7227::Float64
  ########bfactor#7087#7091#7099#7228::Float64
  ######_var0#7092#7100#7229::Tuple{}
  ######types#7093#7101#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7183 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7188 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7150#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7190 = GenSym(4)
      ####a2#7153#7191 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7196 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7140#7158#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7190::Float64,####a2#7153#7191::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7204 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,2.0,0)::Float64
      ##exp_a#7206 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,GenSym(11),0)::Float64
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,GenSym(11))))::Float64))
      ####G#7169#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7173#7212 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7164#7168#7173#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7178#7200 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7178#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7213 = GenSym(16)
      ##a2#7214 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7219 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7140#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7213::Float64,##a2#7214::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7220 = GenSym(18)
      ##a2#7221 = GenSym(19)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7094#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7095#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7229 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7127::Tuple{}
  ##xs#7128::Tuple{Float64}
  ##xs#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7127::Tuple{}
  ##xs#7128::Tuple{Float64}
  ##xs#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7180::Tuple{}
  ########a#7079#7081#7132#7181::Tuple{}
  ########b#7080#7082#7133#7182::Tuple{}
  ######_var0#7083#7134#7183::Tuple{}
  ########types#7070#7131#7135#7184::Tuple{Type{Int64}}
  ##xs#7185::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7186::Tuple{}
  ##########x#7069#7072#7076#7149#7187::Int64
  ########_var0#7073#7077#7150#7188::Tuple{}
  ##########types#7070#7074#7078#7151#7189::Tuple{Type{Int64}}
  ####a1#7152#7190::Float64
  ####a2#7153#7191::Float64
  ########a#7084#7136#7154#7192::Tuple{}
  ########b#7085#7137#7155#7193::Tuple{}
  ########afactor#7086#7138#7156#7194::Float64
  ########bfactor#7087#7139#7157#7195::Float64
  ######_var0#7140#7158#7196::Tuple{}
  ##xs#7197::Tuple{}
  ########a#7079#7081#7176#7198::Tuple{}
  ########b#7080#7082#7177#7199::Tuple{}
  ######_var0#7083#7178#7200::Tuple{}
  ########types#7174#7175#7179#7201::Tuple{Type{Float64}}
  ######a#7079#7081#7202::Tuple{}
  ######b#7080#7082#7203::Tuple{}
  ####_var0#7083#7204::Tuple{}
  ##a#7205::Float64
  ##exp_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7169#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7170#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7171#7210::Tuple{}
  ##########x#7161#7163#7167#7172#7211::Float64
  ########_var0#7164#7168#7173#7212::Tuple{}
  ##a1#7213::Float64
  ##a2#7214::Float64
  ######a#7084#7136#7215::Tuple{}
  ######b#7085#7137#7216::Tuple{}
  ######afactor#7086#7138#7217::Float64
  ######bfactor#7087#7139#7218::Float64
  ####_var0#7140#7219::Tuple{}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7094#7223::Float64
  ####bfactor#7095#7224::Float64
  ########a#7084#7088#7096#7225::Tuple{}
  ########b#7085#7089#7097#7226::Tuple{}
  ########afactor#7086#7090#7098#7227::Float64
  ########bfactor#7087#7091#7099#7228::Float64
  ######_var0#7092#7100#7229::Tuple{}
  ######types#7093#7101#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7183 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7188 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7150#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7190 = GenSym(4)
      ####a2#7153#7191 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7196 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7140#7158#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7190::Float64,####a2#7153#7191::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7204 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,2.0,0)::Float64
      ##exp_a#7206 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,GenSym(11),0)::Float64
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,GenSym(11))))::Float64))
      ####G#7169#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7173#7212 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7164#7168#7173#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7178#7200 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7178#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7213 = GenSym(16)
      ##a2#7214 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7219 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7140#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7213::Float64,##a2#7214::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7220 = GenSym(18)
      ##a2#7221 = GenSym(19)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7094#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7095#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7229 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7180::Tuple{}
  ########a#7079#7081#7132#7181::Tuple{}
  ########b#7080#7082#7133#7182::Tuple{}
  ######_var0#7083#7134#7183::Tuple{}
  ########types#7070#7131#7135#7184::Tuple{Type{Int64}}
  ##xs#7185::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7186::Tuple{}
  ##########x#7069#7072#7076#7149#7187::Int64
  ########_var0#7073#7077#7150#7188::Tuple{}
  ##########types#7070#7074#7078#7151#7189::Tuple{Type{Int64}}
  ####a1#7152#7190::Float64
  ####a2#7153#7191::Float64
  ########a#7084#7136#7154#7192::Tuple{}
  ########b#7085#7137#7155#7193::Tuple{}
  ########afactor#7086#7138#7156#7194::Float64
  ########bfactor#7087#7139#7157#7195::Float64
  ######_var0#7140#7158#7196::Tuple{}
  ##xs#7197::Tuple{}
  ########a#7079#7081#7176#7198::Tuple{}
  ########b#7080#7082#7177#7199::Tuple{}
  ######_var0#7083#7178#7200::Tuple{}
  ########types#7174#7175#7179#7201::Tuple{Type{Float64}}
  ######a#7079#7081#7202::Tuple{}
  ######b#7080#7082#7203::Tuple{}
  ####_var0#7083#7204::Tuple{}
  ##a#7205::Float64
  ##exp_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7169#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7170#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7171#7210::Tuple{}
  ##########x#7161#7163#7167#7172#7211::Float64
  ########_var0#7164#7168#7173#7212::Tuple{}
  ##a1#7213::Float64
  ##a2#7214::Float64
  ######a#7084#7136#7215::Tuple{}
  ######b#7085#7137#7216::Tuple{}
  ######afactor#7086#7138#7217::Float64
  ######bfactor#7087#7139#7218::Float64
  ####_var0#7140#7219::Tuple{}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7094#7223::Float64
  ####bfactor#7095#7224::Float64
  ########a#7084#7088#7096#7225::Tuple{}
  ########b#7085#7089#7097#7226::Tuple{}
  ########afactor#7086#7090#7098#7227::Float64
  ########bfactor#7087#7091#7099#7228::Float64
  ######_var0#7092#7100#7229::Tuple{}
  ######types#7093#7101#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7183 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7188 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7150#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7190 = GenSym(4)
      ####a2#7153#7191 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7196 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7140#7158#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7190::Float64,####a2#7153#7191::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7204 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,2.0,0)::Float64
      ##exp_a#7206 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,GenSym(11),0)::Float64
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,GenSym(11))))::Float64))
      ####G#7169#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7173#7212 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7164#7168#7173#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7178#7200 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7178#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7213 = GenSym(16)
      ##a2#7214 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7219 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7140#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7213::Float64,##a2#7214::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7220 = GenSym(18)
      ##a2#7221 = GenSym(19)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7094#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7095#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7229 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7180::Tuple{}
  ########a#7079#7081#7132#7181::Tuple{}
  ########b#7080#7082#7133#7182::Tuple{}
  ######_var0#7083#7134#7183::Tuple{}
  ########types#7070#7131#7135#7184::Tuple{Type{Int64}}
  ##xs#7185::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7186::Tuple{}
  ##########x#7069#7072#7076#7149#7187::Int64
  ########_var0#7073#7077#7150#7188::Tuple{}
  ##########types#7070#7074#7078#7151#7189::Tuple{Type{Int64}}
  ####a1#7152#7190::Float64
  ####a2#7153#7191::Float64
  ########a#7084#7136#7154#7192::Tuple{}
  ########b#7085#7137#7155#7193::Tuple{}
  ########afactor#7086#7138#7156#7194::Float64
  ########bfactor#7087#7139#7157#7195::Float64
  ######_var0#7140#7158#7196::Tuple{}
  ##xs#7197::Tuple{}
  ########a#7079#7081#7176#7198::Tuple{}
  ########b#7080#7082#7177#7199::Tuple{}
  ######_var0#7083#7178#7200::Tuple{}
  ########types#7174#7175#7179#7201::Tuple{Type{Float64}}
  ######a#7079#7081#7202::Tuple{}
  ######b#7080#7082#7203::Tuple{}
  ####_var0#7083#7204::Tuple{}
  ##a#7205::Float64
  ##exp_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7169#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7170#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7171#7210::Tuple{}
  ##########x#7161#7163#7167#7172#7211::Float64
  ########_var0#7164#7168#7173#7212::Tuple{}
  ##a1#7213::Float64
  ##a2#7214::Float64
  ######a#7084#7136#7215::Tuple{}
  ######b#7085#7137#7216::Tuple{}
  ######afactor#7086#7138#7217::Float64
  ######bfactor#7087#7139#7218::Float64
  ####_var0#7140#7219::Tuple{}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7094#7223::Float64
  ####bfactor#7095#7224::Float64
  ########a#7084#7088#7096#7225::Tuple{}
  ########b#7085#7089#7097#7226::Tuple{}
  ########afactor#7086#7090#7098#7227::Float64
  ########bfactor#7087#7091#7099#7228::Float64
  ######_var0#7092#7100#7229::Tuple{}
  ######types#7093#7101#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7183 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7188 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7150#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7190 = GenSym(4)
      ####a2#7153#7191 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7196 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7140#7158#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7190::Float64,####a2#7153#7191::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7204 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,2.0,0)::Float64
      ##exp_a#7206 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,GenSym(11),0)::Float64
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,GenSym(11))))::Float64))
      ####G#7169#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7173#7212 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7164#7168#7173#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7178#7200 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7178#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7213 = GenSym(16)
      ##a2#7214 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7219 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7140#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7213::Float64,##a2#7214::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7220 = GenSym(18)
      ##a2#7221 = GenSym(19)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7094#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7095#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7229 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7180::Tuple{}
  ########a#7079#7081#7132#7181::Tuple{}
  ########b#7080#7082#7133#7182::Tuple{}
  ######_var0#7083#7134#7183::Tuple{}
  ########types#7070#7131#7135#7184::Tuple{Type{Int64}}
  ##xs#7185::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7186::Tuple{}
  ##########x#7069#7072#7076#7149#7187::Int64
  ########_var0#7073#7077#7150#7188::Tuple{}
  ##########types#7070#7074#7078#7151#7189::Tuple{Type{Int64}}
  ####a1#7152#7190::Float64
  ####a2#7153#7191::Float64
  ########a#7084#7136#7154#7192::Tuple{}
  ########b#7085#7137#7155#7193::Tuple{}
  ########afactor#7086#7138#7156#7194::Float64
  ########bfactor#7087#7139#7157#7195::Float64
  ######_var0#7140#7158#7196::Tuple{}
  ##xs#7197::Tuple{}
  ########a#7079#7081#7176#7198::Tuple{}
  ########b#7080#7082#7177#7199::Tuple{}
  ######_var0#7083#7178#7200::Tuple{}
  ########types#7174#7175#7179#7201::Tuple{Type{Float64}}
  ######a#7079#7081#7202::Tuple{}
  ######b#7080#7082#7203::Tuple{}
  ####_var0#7083#7204::Tuple{}
  ##a#7205::Float64
  ##exp_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7169#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7170#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7171#7210::Tuple{}
  ##########x#7161#7163#7167#7172#7211::Float64
  ########_var0#7164#7168#7173#7212::Tuple{}
  ##a1#7213::Float64
  ##a2#7214::Float64
  ######a#7084#7136#7215::Tuple{}
  ######b#7085#7137#7216::Tuple{}
  ######afactor#7086#7138#7217::Float64
  ######bfactor#7087#7139#7218::Float64
  ####_var0#7140#7219::Tuple{}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7094#7223::Float64
  ####bfactor#7095#7224::Float64
  ########a#7084#7088#7096#7225::Tuple{}
  ########b#7085#7089#7097#7226::Tuple{}
  ########afactor#7086#7090#7098#7227::Float64
  ########bfactor#7087#7091#7099#7228::Float64
  ######_var0#7092#7100#7229::Tuple{}
  ######types#7093#7101#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7183 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7188 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7150#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7190 = GenSym(4)
      ####a2#7153#7191 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7196 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7140#7158#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7190::Float64,####a2#7153#7191::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7204 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,2.0,0)::Float64
      ##exp_a#7206 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7205::Float64,0,GenSym(11),0)::Float64
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7205::Float64,GenSym(11))))::Float64))
      ####G#7169#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7173#7212 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7164#7168#7173#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7178#7200 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7178#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7213 = GenSym(16)
      ##a2#7214 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7219 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7140#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7213::Float64,##a2#7214::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7220 = GenSym(18)
      ##a2#7221 = GenSym(19)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7094#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7095#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7229 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{}
  ##xs#7479::Tuple{Float64}
  ##xs#7480::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{}
  ##xs#7479::Tuple{Float64}
  ##xs#7480::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7491::Tuple{}
  ########a#7079#7081#7132#7492::Tuple{}
  ########b#7080#7082#7133#7493::Tuple{}
  ######_var0#7083#7134#7494::Tuple{}
  ########types#7070#7131#7135#7495::Tuple{Type{Int64}}
  ######a#7339#7341#7496::Tuple{}
  ######b#7340#7342#7497::Tuple{}
  ####_var0#7343#7498::Tuple{}
  ##xs#7499::Tuple{}
  ########a#7079#7081#7132#7500::Tuple{}
  ########b#7080#7082#7133#7501::Tuple{}
  ######_var0#7083#7134#7502::Tuple{}
  ########types#7070#7131#7135#7503::Tuple{Type{Int64}}
  ##a1#7504::Float64
  ##a2#7505::Float64
  ######a#7084#7136#7506::Tuple{}
  ######b#7085#7137#7507::Tuple{}
  ######afactor#7086#7138#7508::Float64
  ######bfactor#7087#7139#7509::Float64
  ####_var0#7140#7510::Tuple{}
  ##a1#7511::Float64
  ##a2#7512::Float64
  ##div_a#7513::Float64
  ####afactor#7094#7514::Float64
  ####bfactor#7095#7515::Float64
  ########a#7084#7088#7096#7516::Tuple{}
  ########b#7085#7089#7097#7517::Tuple{}
  ########afactor#7086#7090#7098#7518::Float64
  ########bfactor#7087#7091#7099#7519::Float64
  ######_var0#7092#7100#7520::Tuple{}
  ######types#7093#7101#7521::Tuple{Type{Float64}}
  ##xs#7522::Tuple{}
  ##########types#7070#7131#7481#7482#7523::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7524::Tuple{}
  ########b#7080#7082#7484#7525::Tuple{}
  ######_var0#7083#7485#7526::Tuple{}
  ##xs#7527::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7528::Tuple{}
  ##########x#7069#7072#7076#7149#7529::Int64
  ########_var0#7073#7077#7150#7530::Tuple{}
  ##########types#7070#7074#7078#7151#7531::Tuple{Type{Int64}}
  ####a1#7152#7532::Float64
  ####a2#7153#7533::Float64
  ########a#7084#7136#7154#7534::Tuple{}
  ########b#7085#7137#7155#7535::Tuple{}
  ########afactor#7086#7138#7156#7536::Float64
  ########bfactor#7087#7139#7157#7537::Float64
  ######_var0#7140#7158#7538::Tuple{}
  ##xs#7539::Tuple{}
  ##########types#7070#7131#7481#7482#7540::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7541::Tuple{}
  ########b#7080#7082#7484#7542::Tuple{}
  ######_var0#7083#7485#7543::Tuple{}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ##div_a#7546::Float64
  ####afactor#7094#7547::Float64
  ####bfactor#7095#7548::Float64
  ########a#7084#7088#7096#7549::Tuple{}
  ########b#7085#7089#7097#7550::Tuple{}
  ########afactor#7086#7090#7098#7551::Float64
  ########bfactor#7087#7091#7099#7552::Float64
  ######_var0#7092#7100#7553::Tuple{}
  ######types#7093#7101#7554::Tuple{Type{Float64}}
  ##sqrt_a#7555::Float64
  ##deriv#7556::Float64
  ####G#7486#7557::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7487#7558::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7488#7559::Tuple{}
  ##########x#7161#7163#7167#7489#7560::Float64
  ########_var0#7164#7168#7490#7561::Tuple{}
  ##a1#7562::Float64
  ##a2#7563::Float64
  ######a#7084#7136#7564::Tuple{}
  ######b#7085#7137#7565::Tuple{}
  ######afactor#7086#7138#7566::Float64
  ######bfactor#7087#7139#7567::Float64
  ####_var0#7140#7568::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7502 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7134#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7498 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7343#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7504 = GenSym(5)
      ##a2#7505 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7510 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7504::Float64,##a2#7505::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7494 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7511 = GenSym(8)
      ##a2#7512 = GenSym(9)
      ##div_a#7513 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7511::Float64,##a2#7512::Float64))
      ####afactor#7094#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7512::Float64))
      ####bfactor#7095#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7511::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7512::Float64,##a2#7512::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7520 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7513::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7543 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7485#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7526 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7485#7526 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7530 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7150#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7532 = GenSym(10)
      ####a2#7153#7533 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7538 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7158#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7532::Float64,####a2#7153#7533::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7544 = GenSym(14)
      ##a2#7545 = GenSym(15)
      ##div_a#7546 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7544::Float64,##a2#7545::Float64))
      ####afactor#7094#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7545::Float64))
      ####bfactor#7095#7548 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7544::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7545::Float64,##a2#7545::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7553 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7546::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7555 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7556 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7555::Float64))
      ####G#7486#7557 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7490#7561 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7164#7168#7490#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7555::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7562 = GenSym(17)
      ##a2#7563 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7568 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7140#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7562::Float64,##a2#7563::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{}
  ##xs#7479::Tuple{Float64}
  ##xs#7480::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{}
  ##xs#7479::Tuple{Float64}
  ##xs#7480::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7491::Tuple{}
  ########a#7079#7081#7132#7492::Tuple{}
  ########b#7080#7082#7133#7493::Tuple{}
  ######_var0#7083#7134#7494::Tuple{}
  ########types#7070#7131#7135#7495::Tuple{Type{Int64}}
  ######a#7339#7341#7496::Tuple{}
  ######b#7340#7342#7497::Tuple{}
  ####_var0#7343#7498::Tuple{}
  ##xs#7499::Tuple{}
  ########a#7079#7081#7132#7500::Tuple{}
  ########b#7080#7082#7133#7501::Tuple{}
  ######_var0#7083#7134#7502::Tuple{}
  ########types#7070#7131#7135#7503::Tuple{Type{Int64}}
  ##a1#7504::Float64
  ##a2#7505::Float64
  ######a#7084#7136#7506::Tuple{}
  ######b#7085#7137#7507::Tuple{}
  ######afactor#7086#7138#7508::Float64
  ######bfactor#7087#7139#7509::Float64
  ####_var0#7140#7510::Tuple{}
  ##a1#7511::Float64
  ##a2#7512::Float64
  ##div_a#7513::Float64
  ####afactor#7094#7514::Float64
  ####bfactor#7095#7515::Float64
  ########a#7084#7088#7096#7516::Tuple{}
  ########b#7085#7089#7097#7517::Tuple{}
  ########afactor#7086#7090#7098#7518::Float64
  ########bfactor#7087#7091#7099#7519::Float64
  ######_var0#7092#7100#7520::Tuple{}
  ######types#7093#7101#7521::Tuple{Type{Float64}}
  ##xs#7522::Tuple{}
  ##########types#7070#7131#7481#7482#7523::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7524::Tuple{}
  ########b#7080#7082#7484#7525::Tuple{}
  ######_var0#7083#7485#7526::Tuple{}
  ##xs#7527::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7528::Tuple{}
  ##########x#7069#7072#7076#7149#7529::Int64
  ########_var0#7073#7077#7150#7530::Tuple{}
  ##########types#7070#7074#7078#7151#7531::Tuple{Type{Int64}}
  ####a1#7152#7532::Float64
  ####a2#7153#7533::Float64
  ########a#7084#7136#7154#7534::Tuple{}
  ########b#7085#7137#7155#7535::Tuple{}
  ########afactor#7086#7138#7156#7536::Float64
  ########bfactor#7087#7139#7157#7537::Float64
  ######_var0#7140#7158#7538::Tuple{}
  ##xs#7539::Tuple{}
  ##########types#7070#7131#7481#7482#7540::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7541::Tuple{}
  ########b#7080#7082#7484#7542::Tuple{}
  ######_var0#7083#7485#7543::Tuple{}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ##div_a#7546::Float64
  ####afactor#7094#7547::Float64
  ####bfactor#7095#7548::Float64
  ########a#7084#7088#7096#7549::Tuple{}
  ########b#7085#7089#7097#7550::Tuple{}
  ########afactor#7086#7090#7098#7551::Float64
  ########bfactor#7087#7091#7099#7552::Float64
  ######_var0#7092#7100#7553::Tuple{}
  ######types#7093#7101#7554::Tuple{Type{Float64}}
  ##sqrt_a#7555::Float64
  ##deriv#7556::Float64
  ####G#7486#7557::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7487#7558::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7488#7559::Tuple{}
  ##########x#7161#7163#7167#7489#7560::Float64
  ########_var0#7164#7168#7490#7561::Tuple{}
  ##a1#7562::Float64
  ##a2#7563::Float64
  ######a#7084#7136#7564::Tuple{}
  ######b#7085#7137#7565::Tuple{}
  ######afactor#7086#7138#7566::Float64
  ######bfactor#7087#7139#7567::Float64
  ####_var0#7140#7568::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7502 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7134#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7498 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7343#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7504 = GenSym(5)
      ##a2#7505 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7510 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7504::Float64,##a2#7505::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7494 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7511 = GenSym(8)
      ##a2#7512 = GenSym(9)
      ##div_a#7513 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7511::Float64,##a2#7512::Float64))
      ####afactor#7094#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7512::Float64))
      ####bfactor#7095#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7511::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7512::Float64,##a2#7512::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7520 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7513::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7543 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7485#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7526 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7485#7526 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7530 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7150#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7532 = GenSym(10)
      ####a2#7153#7533 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7538 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7158#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7532::Float64,####a2#7153#7533::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7544 = GenSym(14)
      ##a2#7545 = GenSym(15)
      ##div_a#7546 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7544::Float64,##a2#7545::Float64))
      ####afactor#7094#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7545::Float64))
      ####bfactor#7095#7548 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7544::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7545::Float64,##a2#7545::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7553 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7546::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7555 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7556 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7555::Float64))
      ####G#7486#7557 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7490#7561 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7164#7168#7490#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7555::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7562 = GenSym(17)
      ##a2#7563 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7568 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7140#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7562::Float64,##a2#7563::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7491::Tuple{}
  ########a#7079#7081#7132#7492::Tuple{}
  ########b#7080#7082#7133#7493::Tuple{}
  ######_var0#7083#7134#7494::Tuple{}
  ########types#7070#7131#7135#7495::Tuple{Type{Int64}}
  ######a#7339#7341#7496::Tuple{}
  ######b#7340#7342#7497::Tuple{}
  ####_var0#7343#7498::Tuple{}
  ##xs#7499::Tuple{}
  ########a#7079#7081#7132#7500::Tuple{}
  ########b#7080#7082#7133#7501::Tuple{}
  ######_var0#7083#7134#7502::Tuple{}
  ########types#7070#7131#7135#7503::Tuple{Type{Int64}}
  ##a1#7504::Float64
  ##a2#7505::Float64
  ######a#7084#7136#7506::Tuple{}
  ######b#7085#7137#7507::Tuple{}
  ######afactor#7086#7138#7508::Float64
  ######bfactor#7087#7139#7509::Float64
  ####_var0#7140#7510::Tuple{}
  ##a1#7511::Float64
  ##a2#7512::Float64
  ##div_a#7513::Float64
  ####afactor#7094#7514::Float64
  ####bfactor#7095#7515::Float64
  ########a#7084#7088#7096#7516::Tuple{}
  ########b#7085#7089#7097#7517::Tuple{}
  ########afactor#7086#7090#7098#7518::Float64
  ########bfactor#7087#7091#7099#7519::Float64
  ######_var0#7092#7100#7520::Tuple{}
  ######types#7093#7101#7521::Tuple{Type{Float64}}
  ##xs#7522::Tuple{}
  ##########types#7070#7131#7481#7482#7523::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7524::Tuple{}
  ########b#7080#7082#7484#7525::Tuple{}
  ######_var0#7083#7485#7526::Tuple{}
  ##xs#7527::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7528::Tuple{}
  ##########x#7069#7072#7076#7149#7529::Int64
  ########_var0#7073#7077#7150#7530::Tuple{}
  ##########types#7070#7074#7078#7151#7531::Tuple{Type{Int64}}
  ####a1#7152#7532::Float64
  ####a2#7153#7533::Float64
  ########a#7084#7136#7154#7534::Tuple{}
  ########b#7085#7137#7155#7535::Tuple{}
  ########afactor#7086#7138#7156#7536::Float64
  ########bfactor#7087#7139#7157#7537::Float64
  ######_var0#7140#7158#7538::Tuple{}
  ##xs#7539::Tuple{}
  ##########types#7070#7131#7481#7482#7540::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7541::Tuple{}
  ########b#7080#7082#7484#7542::Tuple{}
  ######_var0#7083#7485#7543::Tuple{}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ##div_a#7546::Float64
  ####afactor#7094#7547::Float64
  ####bfactor#7095#7548::Float64
  ########a#7084#7088#7096#7549::Tuple{}
  ########b#7085#7089#7097#7550::Tuple{}
  ########afactor#7086#7090#7098#7551::Float64
  ########bfactor#7087#7091#7099#7552::Float64
  ######_var0#7092#7100#7553::Tuple{}
  ######types#7093#7101#7554::Tuple{Type{Float64}}
  ##sqrt_a#7555::Float64
  ##deriv#7556::Float64
  ####G#7486#7557::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7487#7558::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7488#7559::Tuple{}
  ##########x#7161#7163#7167#7489#7560::Float64
  ########_var0#7164#7168#7490#7561::Tuple{}
  ##a1#7562::Float64
  ##a2#7563::Float64
  ######a#7084#7136#7564::Tuple{}
  ######b#7085#7137#7565::Tuple{}
  ######afactor#7086#7138#7566::Float64
  ######bfactor#7087#7139#7567::Float64
  ####_var0#7140#7568::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7502 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7134#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7498 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7343#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7504 = GenSym(5)
      ##a2#7505 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7510 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7504::Float64,##a2#7505::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7494 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7511 = GenSym(8)
      ##a2#7512 = GenSym(9)
      ##div_a#7513 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7511::Float64,##a2#7512::Float64))
      ####afactor#7094#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7512::Float64))
      ####bfactor#7095#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7511::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7512::Float64,##a2#7512::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7520 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7513::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7543 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7485#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7526 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7485#7526 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7530 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7150#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7532 = GenSym(10)
      ####a2#7153#7533 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7538 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7158#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7532::Float64,####a2#7153#7533::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7544 = GenSym(14)
      ##a2#7545 = GenSym(15)
      ##div_a#7546 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7544::Float64,##a2#7545::Float64))
      ####afactor#7094#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7545::Float64))
      ####bfactor#7095#7548 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7544::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7545::Float64,##a2#7545::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7553 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7546::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7555 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7556 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7555::Float64))
      ####G#7486#7557 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7490#7561 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7164#7168#7490#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7555::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7562 = GenSym(17)
      ##a2#7563 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7568 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7140#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7562::Float64,##a2#7563::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7491::Tuple{}
  ########a#7079#7081#7132#7492::Tuple{}
  ########b#7080#7082#7133#7493::Tuple{}
  ######_var0#7083#7134#7494::Tuple{}
  ########types#7070#7131#7135#7495::Tuple{Type{Int64}}
  ######a#7339#7341#7496::Tuple{}
  ######b#7340#7342#7497::Tuple{}
  ####_var0#7343#7498::Tuple{}
  ##xs#7499::Tuple{}
  ########a#7079#7081#7132#7500::Tuple{}
  ########b#7080#7082#7133#7501::Tuple{}
  ######_var0#7083#7134#7502::Tuple{}
  ########types#7070#7131#7135#7503::Tuple{Type{Int64}}
  ##a1#7504::Float64
  ##a2#7505::Float64
  ######a#7084#7136#7506::Tuple{}
  ######b#7085#7137#7507::Tuple{}
  ######afactor#7086#7138#7508::Float64
  ######bfactor#7087#7139#7509::Float64
  ####_var0#7140#7510::Tuple{}
  ##a1#7511::Float64
  ##a2#7512::Float64
  ##div_a#7513::Float64
  ####afactor#7094#7514::Float64
  ####bfactor#7095#7515::Float64
  ########a#7084#7088#7096#7516::Tuple{}
  ########b#7085#7089#7097#7517::Tuple{}
  ########afactor#7086#7090#7098#7518::Float64
  ########bfactor#7087#7091#7099#7519::Float64
  ######_var0#7092#7100#7520::Tuple{}
  ######types#7093#7101#7521::Tuple{Type{Float64}}
  ##xs#7522::Tuple{}
  ##########types#7070#7131#7481#7482#7523::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7524::Tuple{}
  ########b#7080#7082#7484#7525::Tuple{}
  ######_var0#7083#7485#7526::Tuple{}
  ##xs#7527::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7528::Tuple{}
  ##########x#7069#7072#7076#7149#7529::Int64
  ########_var0#7073#7077#7150#7530::Tuple{}
  ##########types#7070#7074#7078#7151#7531::Tuple{Type{Int64}}
  ####a1#7152#7532::Float64
  ####a2#7153#7533::Float64
  ########a#7084#7136#7154#7534::Tuple{}
  ########b#7085#7137#7155#7535::Tuple{}
  ########afactor#7086#7138#7156#7536::Float64
  ########bfactor#7087#7139#7157#7537::Float64
  ######_var0#7140#7158#7538::Tuple{}
  ##xs#7539::Tuple{}
  ##########types#7070#7131#7481#7482#7540::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7541::Tuple{}
  ########b#7080#7082#7484#7542::Tuple{}
  ######_var0#7083#7485#7543::Tuple{}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ##div_a#7546::Float64
  ####afactor#7094#7547::Float64
  ####bfactor#7095#7548::Float64
  ########a#7084#7088#7096#7549::Tuple{}
  ########b#7085#7089#7097#7550::Tuple{}
  ########afactor#7086#7090#7098#7551::Float64
  ########bfactor#7087#7091#7099#7552::Float64
  ######_var0#7092#7100#7553::Tuple{}
  ######types#7093#7101#7554::Tuple{Type{Float64}}
  ##sqrt_a#7555::Float64
  ##deriv#7556::Float64
  ####G#7486#7557::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7487#7558::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7488#7559::Tuple{}
  ##########x#7161#7163#7167#7489#7560::Float64
  ########_var0#7164#7168#7490#7561::Tuple{}
  ##a1#7562::Float64
  ##a2#7563::Float64
  ######a#7084#7136#7564::Tuple{}
  ######b#7085#7137#7565::Tuple{}
  ######afactor#7086#7138#7566::Float64
  ######bfactor#7087#7139#7567::Float64
  ####_var0#7140#7568::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7502 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7134#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7498 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7343#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7504 = GenSym(5)
      ##a2#7505 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7510 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7504::Float64,##a2#7505::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7494 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7511 = GenSym(8)
      ##a2#7512 = GenSym(9)
      ##div_a#7513 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7511::Float64,##a2#7512::Float64))
      ####afactor#7094#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7512::Float64))
      ####bfactor#7095#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7511::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7512::Float64,##a2#7512::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7520 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7513::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7543 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7485#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7526 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7485#7526 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7530 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7150#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7532 = GenSym(10)
      ####a2#7153#7533 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7538 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7158#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7532::Float64,####a2#7153#7533::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7544 = GenSym(14)
      ##a2#7545 = GenSym(15)
      ##div_a#7546 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7544::Float64,##a2#7545::Float64))
      ####afactor#7094#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7545::Float64))
      ####bfactor#7095#7548 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7544::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7545::Float64,##a2#7545::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7553 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7546::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7555 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7556 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7555::Float64))
      ####G#7486#7557 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7490#7561 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7164#7168#7490#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7555::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7562 = GenSym(17)
      ##a2#7563 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7568 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7140#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7562::Float64,##a2#7563::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7491::Tuple{}
  ########a#7079#7081#7132#7492::Tuple{}
  ########b#7080#7082#7133#7493::Tuple{}
  ######_var0#7083#7134#7494::Tuple{}
  ########types#7070#7131#7135#7495::Tuple{Type{Int64}}
  ######a#7339#7341#7496::Tuple{}
  ######b#7340#7342#7497::Tuple{}
  ####_var0#7343#7498::Tuple{}
  ##xs#7499::Tuple{}
  ########a#7079#7081#7132#7500::Tuple{}
  ########b#7080#7082#7133#7501::Tuple{}
  ######_var0#7083#7134#7502::Tuple{}
  ########types#7070#7131#7135#7503::Tuple{Type{Int64}}
  ##a1#7504::Float64
  ##a2#7505::Float64
  ######a#7084#7136#7506::Tuple{}
  ######b#7085#7137#7507::Tuple{}
  ######afactor#7086#7138#7508::Float64
  ######bfactor#7087#7139#7509::Float64
  ####_var0#7140#7510::Tuple{}
  ##a1#7511::Float64
  ##a2#7512::Float64
  ##div_a#7513::Float64
  ####afactor#7094#7514::Float64
  ####bfactor#7095#7515::Float64
  ########a#7084#7088#7096#7516::Tuple{}
  ########b#7085#7089#7097#7517::Tuple{}
  ########afactor#7086#7090#7098#7518::Float64
  ########bfactor#7087#7091#7099#7519::Float64
  ######_var0#7092#7100#7520::Tuple{}
  ######types#7093#7101#7521::Tuple{Type{Float64}}
  ##xs#7522::Tuple{}
  ##########types#7070#7131#7481#7482#7523::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7524::Tuple{}
  ########b#7080#7082#7484#7525::Tuple{}
  ######_var0#7083#7485#7526::Tuple{}
  ##xs#7527::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7148#7528::Tuple{}
  ##########x#7069#7072#7076#7149#7529::Int64
  ########_var0#7073#7077#7150#7530::Tuple{}
  ##########types#7070#7074#7078#7151#7531::Tuple{Type{Int64}}
  ####a1#7152#7532::Float64
  ####a2#7153#7533::Float64
  ########a#7084#7136#7154#7534::Tuple{}
  ########b#7085#7137#7155#7535::Tuple{}
  ########afactor#7086#7138#7156#7536::Float64
  ########bfactor#7087#7139#7157#7537::Float64
  ######_var0#7140#7158#7538::Tuple{}
  ##xs#7539::Tuple{}
  ##########types#7070#7131#7481#7482#7540::Tuple{Type{Int64}}
  ########a#7079#7081#7483#7541::Tuple{}
  ########b#7080#7082#7484#7542::Tuple{}
  ######_var0#7083#7485#7543::Tuple{}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ##div_a#7546::Float64
  ####afactor#7094#7547::Float64
  ####bfactor#7095#7548::Float64
  ########a#7084#7088#7096#7549::Tuple{}
  ########b#7085#7089#7097#7550::Tuple{}
  ########afactor#7086#7090#7098#7551::Float64
  ########bfactor#7087#7091#7099#7552::Float64
  ######_var0#7092#7100#7553::Tuple{}
  ######types#7093#7101#7554::Tuple{Type{Float64}}
  ##sqrt_a#7555::Float64
  ##deriv#7556::Float64
  ####G#7486#7557::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7487#7558::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7488#7559::Tuple{}
  ##########x#7161#7163#7167#7489#7560::Float64
  ########_var0#7164#7168#7490#7561::Tuple{}
  ##a1#7562::Float64
  ##a2#7563::Float64
  ######a#7084#7136#7564::Tuple{}
  ######b#7085#7137#7565::Tuple{}
  ######afactor#7086#7138#7566::Float64
  ######bfactor#7087#7139#7567::Float64
  ####_var0#7140#7568::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7502 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7134#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7498 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7343#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7504 = GenSym(5)
      ##a2#7505 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7510 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7504::Float64,##a2#7505::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7494 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7134#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7511 = GenSym(8)
      ##a2#7512 = GenSym(9)
      ##div_a#7513 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7511::Float64,##a2#7512::Float64))
      ####afactor#7094#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7512::Float64))
      ####bfactor#7095#7515 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7511::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7512::Float64,##a2#7512::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7520 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7513::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7543 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7485#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7485#7526 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7485#7526 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7150#7530 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7150#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7152#7532 = GenSym(10)
      ####a2#7153#7533 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7158#7538 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7158#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7152#7532::Float64,####a2#7153#7533::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7544 = GenSym(14)
      ##a2#7545 = GenSym(15)
      ##div_a#7546 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7544::Float64,##a2#7545::Float64))
      ####afactor#7094#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7545::Float64))
      ####bfactor#7095#7548 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7544::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7545::Float64,##a2#7545::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7553 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7546::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7555 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7556 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7555::Float64))
      ####G#7486#7557 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7490#7561 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7164#7168#7490#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7555::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7562 = GenSym(17)
      ##a2#7563 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7568 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7140#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7562::Float64,##a2#7563::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7569::Tuple{Float64}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{}
  ##xs#7572::Tuple{Int64}
  ##xs#7573::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7569::Tuple{Float64}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{}
  ##xs#7572::Tuple{Int64}
  ##xs#7573::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7613::Tuple{}
  ######b#7080#7082#7614::Tuple{}
  ####_var0#7083#7615::Tuple{}
  ##a1#7616::Float64
  ##a2#7617::Float64
  ######a#7084#7136#7618::Tuple{}
  ######b#7085#7137#7619::Tuple{}
  ######afactor#7086#7138#7620::Float64
  ######bfactor#7087#7139#7621::Float64
  ####_var0#7140#7622::Tuple{}
  ########types#7070#7131#7481#7623::Tuple{Type{Int64}}
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7574#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7629::Tuple{}
  ##########x#7161#7163#7167#7577#7630::Float64
  ########_var0#7164#7168#7578#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ######a#7084#7136#7634::Tuple{}
  ######b#7085#7137#7635::Tuple{}
  ######afactor#7086#7138#7636::Float64
  ######bfactor#7087#7139#7637::Float64
  ####_var0#7140#7638::Tuple{}
  ######types#7070#7131#7639::Tuple{Type{Int64}}
  ######types#7070#7131#7640::Tuple{Type{Int64}}
  ######types#7070#7131#7641::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7642::Tuple{}
  ########x#7069#7072#7076#7643::Int64
  ######_var0#7073#7077#7644::Tuple{}
  ########types#7070#7074#7078#7645::Tuple{Type{Int64}}
  ##xs#7646::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7579#7647::Float64
  ####a2#7580#7648::Float64
  ########a#7084#7136#7581#7649::Tuple{}
  ########b#7085#7137#7582#7650::Tuple{}
  ########afactor#7086#7138#7583#7651::Float64
  ########bfactor#7087#7139#7584#7652::Float64
  ######_var0#7140#7585#7653::Tuple{}
  ####a1#7586#7654::Float64
  ####a2#7587#7655::Float64
  ########a#7084#7136#7588#7656::Tuple{}
  ########b#7085#7137#7589#7657::Tuple{}
  ########afactor#7086#7138#7590#7658::Float64
  ########bfactor#7087#7139#7591#7659::Float64
  ######_var0#7140#7592#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ##div_a#7663::Float64
  ####afactor#7094#7664::Float64
  ####bfactor#7095#7665::Float64
  ########a#7084#7088#7096#7666::Tuple{}
  ########b#7085#7089#7097#7667::Tuple{}
  ########afactor#7086#7090#7098#7668::Float64
  ########bfactor#7087#7091#7099#7669::Float64
  ######_var0#7092#7100#7670::Tuple{}
  ######types#7093#7101#7671::Tuple{Type{Float64}}
  ##xs#7672::Tuple{}
  ##########tup#7068#7071#7075#7593#7673::Tuple{}
  ##########x#7069#7072#7076#7594#7674::Int64
  ########_var0#7073#7077#7595#7675::Tuple{}
  ##########types#7070#7074#7078#7596#7676::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7677::Tuple{}
  ########x#7069#7072#7598#7678::Int64
  ######_var0#7073#7599#7679::Tuple{}
  ########types#7070#7074#7600#7680::Tuple{Type{Int64}}
  ######types#7070#7338#7681::Tuple{Type{Int64}}
  ######types#7070#7131#7682::Tuple{Type{Int64}}
  ##a1#7683::Float64
  ##a2#7684::Float64
  ######a#7084#7136#7685::Tuple{}
  ######b#7085#7137#7686::Tuple{}
  ######afactor#7086#7138#7687::Float64
  ######bfactor#7087#7139#7688::Float64
  ####_var0#7140#7689::Tuple{}
  ##xs#7690::Tuple{}
  ########a#7079#7081#7132#7691::Tuple{}
  ########b#7080#7082#7133#7692::Tuple{}
  ######_var0#7083#7134#7693::Tuple{}
  ########types#7070#7131#7135#7694::Tuple{Type{Int64}}
  ##xs#7695::Tuple{Int64}
  ##########tup#7068#7071#7075#7605#7696::Tuple{}
  ##########x#7069#7072#7076#7606#7697::Int64
  ########_var0#7073#7077#7607#7698::Tuple{}
  ##########types#7070#7074#7078#7608#7699::Tuple{Type{Int64}}
  ########tup#7068#7071#7609#7700::Tuple{}
  ########x#7069#7072#7610#7701::Int64
  ######_var0#7073#7611#7702::Tuple{}
  ########types#7070#7074#7612#7703::Tuple{Type{Int64}}
  ##a1#7704::Float64
  ##a2#7705::Float64
  ##div_a#7706::Float64
  ####afactor#7094#7707::Float64
  ####bfactor#7095#7708::Float64
  ########a#7084#7088#7096#7709::Tuple{}
  ########b#7085#7089#7097#7710::Tuple{}
  ########afactor#7086#7090#7098#7711::Float64
  ########bfactor#7087#7091#7099#7712::Float64
  ######_var0#7092#7100#7713::Tuple{}
  ######types#7093#7101#7714::Tuple{Type{Float64}}
  ######a#7339#7341#7715::Tuple{}
  ######b#7340#7342#7716::Tuple{}
  ####_var0#7343#7717::Tuple{}
  ##a#7718::Float64
  ##exp_a#7719::Float64
  ##deriv#7720::Float64
  ####G#7574#7721::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7722::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7723::Tuple{}
  ##########x#7161#7163#7167#7577#7724::Float64
  ########_var0#7164#7168#7578#7725::Tuple{}
  ##xs#7726::Tuple{}
  ##########tup#7068#7071#7075#7593#7727::Tuple{}
  ##########x#7069#7072#7076#7594#7728::Int64
  ########_var0#7073#7077#7595#7729::Tuple{}
  ##########types#7070#7074#7078#7596#7730::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7731::Tuple{}
  ########x#7069#7072#7598#7732::Int64
  ######_var0#7073#7599#7733::Tuple{}
  ########types#7070#7074#7600#7734::Tuple{Type{Int64}}
  ##a1#7735::Float64
  ##a2#7736::Float64
  ##div_a#7737::Float64
  ####afactor#7094#7738::Float64
  ####bfactor#7095#7739::Float64
  ########a#7084#7088#7096#7740::Tuple{}
  ########b#7085#7089#7097#7741::Tuple{}
  ########afactor#7086#7090#7098#7742::Float64
  ########bfactor#7087#7091#7099#7743::Float64
  ######_var0#7092#7100#7744::Tuple{}
  ######types#7093#7101#7745::Tuple{Type{Float64}}
  ######a#7339#7341#7746::Tuple{}
  ######b#7340#7342#7747::Tuple{}
  ####_var0#7343#7748::Tuple{}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ######a#7084#7136#7751::Tuple{}
  ######b#7085#7137#7752::Tuple{}
  ######afactor#7086#7138#7753::Float64
  ######bfactor#7087#7139#7754::Float64
  ####_var0#7140#7755::Tuple{}
  ######types#7070#7338#7756::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7615 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7615 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7616 = GenSym(3)
      ##a2#7617 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7622 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7140#7622 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7616::Float64,##a2#7617::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7624 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7631 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7164#7168#7578#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7632 = GenSym(6)
      ##a2#7633 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7638 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7632::Float64,##a2#7633::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7644 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7579#7647 = GenSym(8)
      ####a2#7580#7648 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7585#7653 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7585#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7579#7647::Float64,####a2#7580#7648::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7586#7654 = GenSym(11)
      ####a2#7587#7655 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7592#7660 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7140#7592#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7586#7654::Float64,####a2#7587#7655::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(14)
      ##a2#7662 = GenSym(15)
      ##div_a#7663 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7661::Float64,##a2#7662::Float64))
      ####afactor#7094#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7662::Float64))
      ####bfactor#7095#7665 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7661::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7662::Float64,##a2#7662::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7670 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7663::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7683 = GenSym(17)
      ##a2#7684 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7689 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7140#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7683::Float64,##a2#7684::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7675 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7595#7675 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7679 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7599#7679 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7693 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7134#7693 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7607#7698 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7607#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7611#7702 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7611#7702 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7704 = GenSym(22)
      ##a2#7705 = GenSym(23)
      ##div_a#7706 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7704::Float64,##a2#7705::Float64))
      ####afactor#7094#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7705::Float64))
      ####bfactor#7095#7708 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7704::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7705::Float64,##a2#7705::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7713 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7706::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7717 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7343#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7729 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7595#7729 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7733 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7599#7733 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7718 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7719 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7720 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7721 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7725 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7164#7168#7578#7725 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7719::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7735 = GenSym(26)
      ##a2#7736 = GenSym(27)
      ##div_a#7737 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7735::Float64,##a2#7736::Float64))
      ####afactor#7094#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7736::Float64))
      ####bfactor#7095#7739 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7735::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7736::Float64,##a2#7736::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7744 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7744 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7748 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7343#7748 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(29)
      ##a2#7750 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7755 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7140#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7749::Float64,##a2#7750::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7569::Tuple{Float64}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{}
  ##xs#7572::Tuple{Int64}
  ##xs#7573::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7569::Tuple{Float64}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{}
  ##xs#7572::Tuple{Int64}
  ##xs#7573::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7613::Tuple{}
  ######b#7080#7082#7614::Tuple{}
  ####_var0#7083#7615::Tuple{}
  ##a1#7616::Float64
  ##a2#7617::Float64
  ######a#7084#7136#7618::Tuple{}
  ######b#7085#7137#7619::Tuple{}
  ######afactor#7086#7138#7620::Float64
  ######bfactor#7087#7139#7621::Float64
  ####_var0#7140#7622::Tuple{}
  ########types#7070#7131#7481#7623::Tuple{Type{Int64}}
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7574#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7629::Tuple{}
  ##########x#7161#7163#7167#7577#7630::Float64
  ########_var0#7164#7168#7578#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ######a#7084#7136#7634::Tuple{}
  ######b#7085#7137#7635::Tuple{}
  ######afactor#7086#7138#7636::Float64
  ######bfactor#7087#7139#7637::Float64
  ####_var0#7140#7638::Tuple{}
  ######types#7070#7131#7639::Tuple{Type{Int64}}
  ######types#7070#7131#7640::Tuple{Type{Int64}}
  ######types#7070#7131#7641::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7642::Tuple{}
  ########x#7069#7072#7076#7643::Int64
  ######_var0#7073#7077#7644::Tuple{}
  ########types#7070#7074#7078#7645::Tuple{Type{Int64}}
  ##xs#7646::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7579#7647::Float64
  ####a2#7580#7648::Float64
  ########a#7084#7136#7581#7649::Tuple{}
  ########b#7085#7137#7582#7650::Tuple{}
  ########afactor#7086#7138#7583#7651::Float64
  ########bfactor#7087#7139#7584#7652::Float64
  ######_var0#7140#7585#7653::Tuple{}
  ####a1#7586#7654::Float64
  ####a2#7587#7655::Float64
  ########a#7084#7136#7588#7656::Tuple{}
  ########b#7085#7137#7589#7657::Tuple{}
  ########afactor#7086#7138#7590#7658::Float64
  ########bfactor#7087#7139#7591#7659::Float64
  ######_var0#7140#7592#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ##div_a#7663::Float64
  ####afactor#7094#7664::Float64
  ####bfactor#7095#7665::Float64
  ########a#7084#7088#7096#7666::Tuple{}
  ########b#7085#7089#7097#7667::Tuple{}
  ########afactor#7086#7090#7098#7668::Float64
  ########bfactor#7087#7091#7099#7669::Float64
  ######_var0#7092#7100#7670::Tuple{}
  ######types#7093#7101#7671::Tuple{Type{Float64}}
  ##xs#7672::Tuple{}
  ##########tup#7068#7071#7075#7593#7673::Tuple{}
  ##########x#7069#7072#7076#7594#7674::Int64
  ########_var0#7073#7077#7595#7675::Tuple{}
  ##########types#7070#7074#7078#7596#7676::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7677::Tuple{}
  ########x#7069#7072#7598#7678::Int64
  ######_var0#7073#7599#7679::Tuple{}
  ########types#7070#7074#7600#7680::Tuple{Type{Int64}}
  ######types#7070#7338#7681::Tuple{Type{Int64}}
  ######types#7070#7131#7682::Tuple{Type{Int64}}
  ##a1#7683::Float64
  ##a2#7684::Float64
  ######a#7084#7136#7685::Tuple{}
  ######b#7085#7137#7686::Tuple{}
  ######afactor#7086#7138#7687::Float64
  ######bfactor#7087#7139#7688::Float64
  ####_var0#7140#7689::Tuple{}
  ##xs#7690::Tuple{}
  ########a#7079#7081#7132#7691::Tuple{}
  ########b#7080#7082#7133#7692::Tuple{}
  ######_var0#7083#7134#7693::Tuple{}
  ########types#7070#7131#7135#7694::Tuple{Type{Int64}}
  ##xs#7695::Tuple{Int64}
  ##########tup#7068#7071#7075#7605#7696::Tuple{}
  ##########x#7069#7072#7076#7606#7697::Int64
  ########_var0#7073#7077#7607#7698::Tuple{}
  ##########types#7070#7074#7078#7608#7699::Tuple{Type{Int64}}
  ########tup#7068#7071#7609#7700::Tuple{}
  ########x#7069#7072#7610#7701::Int64
  ######_var0#7073#7611#7702::Tuple{}
  ########types#7070#7074#7612#7703::Tuple{Type{Int64}}
  ##a1#7704::Float64
  ##a2#7705::Float64
  ##div_a#7706::Float64
  ####afactor#7094#7707::Float64
  ####bfactor#7095#7708::Float64
  ########a#7084#7088#7096#7709::Tuple{}
  ########b#7085#7089#7097#7710::Tuple{}
  ########afactor#7086#7090#7098#7711::Float64
  ########bfactor#7087#7091#7099#7712::Float64
  ######_var0#7092#7100#7713::Tuple{}
  ######types#7093#7101#7714::Tuple{Type{Float64}}
  ######a#7339#7341#7715::Tuple{}
  ######b#7340#7342#7716::Tuple{}
  ####_var0#7343#7717::Tuple{}
  ##a#7718::Float64
  ##exp_a#7719::Float64
  ##deriv#7720::Float64
  ####G#7574#7721::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7722::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7723::Tuple{}
  ##########x#7161#7163#7167#7577#7724::Float64
  ########_var0#7164#7168#7578#7725::Tuple{}
  ##xs#7726::Tuple{}
  ##########tup#7068#7071#7075#7593#7727::Tuple{}
  ##########x#7069#7072#7076#7594#7728::Int64
  ########_var0#7073#7077#7595#7729::Tuple{}
  ##########types#7070#7074#7078#7596#7730::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7731::Tuple{}
  ########x#7069#7072#7598#7732::Int64
  ######_var0#7073#7599#7733::Tuple{}
  ########types#7070#7074#7600#7734::Tuple{Type{Int64}}
  ##a1#7735::Float64
  ##a2#7736::Float64
  ##div_a#7737::Float64
  ####afactor#7094#7738::Float64
  ####bfactor#7095#7739::Float64
  ########a#7084#7088#7096#7740::Tuple{}
  ########b#7085#7089#7097#7741::Tuple{}
  ########afactor#7086#7090#7098#7742::Float64
  ########bfactor#7087#7091#7099#7743::Float64
  ######_var0#7092#7100#7744::Tuple{}
  ######types#7093#7101#7745::Tuple{Type{Float64}}
  ######a#7339#7341#7746::Tuple{}
  ######b#7340#7342#7747::Tuple{}
  ####_var0#7343#7748::Tuple{}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ######a#7084#7136#7751::Tuple{}
  ######b#7085#7137#7752::Tuple{}
  ######afactor#7086#7138#7753::Float64
  ######bfactor#7087#7139#7754::Float64
  ####_var0#7140#7755::Tuple{}
  ######types#7070#7338#7756::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7615 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7615 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7616 = GenSym(3)
      ##a2#7617 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7622 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7140#7622 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7616::Float64,##a2#7617::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7624 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7631 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7164#7168#7578#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7632 = GenSym(6)
      ##a2#7633 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7638 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7632::Float64,##a2#7633::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7644 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7579#7647 = GenSym(8)
      ####a2#7580#7648 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7585#7653 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7585#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7579#7647::Float64,####a2#7580#7648::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7586#7654 = GenSym(11)
      ####a2#7587#7655 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7592#7660 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7140#7592#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7586#7654::Float64,####a2#7587#7655::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(14)
      ##a2#7662 = GenSym(15)
      ##div_a#7663 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7661::Float64,##a2#7662::Float64))
      ####afactor#7094#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7662::Float64))
      ####bfactor#7095#7665 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7661::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7662::Float64,##a2#7662::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7670 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7663::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7683 = GenSym(17)
      ##a2#7684 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7689 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7140#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7683::Float64,##a2#7684::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7675 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7595#7675 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7679 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7599#7679 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7693 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7134#7693 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7607#7698 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7607#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7611#7702 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7611#7702 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7704 = GenSym(22)
      ##a2#7705 = GenSym(23)
      ##div_a#7706 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7704::Float64,##a2#7705::Float64))
      ####afactor#7094#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7705::Float64))
      ####bfactor#7095#7708 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7704::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7705::Float64,##a2#7705::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7713 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7706::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7717 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7343#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7729 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7595#7729 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7733 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7599#7733 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7718 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7719 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7720 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7721 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7725 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7164#7168#7578#7725 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7719::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7735 = GenSym(26)
      ##a2#7736 = GenSym(27)
      ##div_a#7737 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7735::Float64,##a2#7736::Float64))
      ####afactor#7094#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7736::Float64))
      ####bfactor#7095#7739 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7735::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7736::Float64,##a2#7736::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7744 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7744 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7748 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7343#7748 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(29)
      ##a2#7750 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7755 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7140#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7749::Float64,##a2#7750::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7613::Tuple{}
  ######b#7080#7082#7614::Tuple{}
  ####_var0#7083#7615::Tuple{}
  ##a1#7616::Float64
  ##a2#7617::Float64
  ######a#7084#7136#7618::Tuple{}
  ######b#7085#7137#7619::Tuple{}
  ######afactor#7086#7138#7620::Float64
  ######bfactor#7087#7139#7621::Float64
  ####_var0#7140#7622::Tuple{}
  ########types#7070#7131#7481#7623::Tuple{Type{Int64}}
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7574#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7629::Tuple{}
  ##########x#7161#7163#7167#7577#7630::Float64
  ########_var0#7164#7168#7578#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ######a#7084#7136#7634::Tuple{}
  ######b#7085#7137#7635::Tuple{}
  ######afactor#7086#7138#7636::Float64
  ######bfactor#7087#7139#7637::Float64
  ####_var0#7140#7638::Tuple{}
  ######types#7070#7131#7639::Tuple{Type{Int64}}
  ######types#7070#7131#7640::Tuple{Type{Int64}}
  ######types#7070#7131#7641::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7642::Tuple{}
  ########x#7069#7072#7076#7643::Int64
  ######_var0#7073#7077#7644::Tuple{}
  ########types#7070#7074#7078#7645::Tuple{Type{Int64}}
  ##xs#7646::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7579#7647::Float64
  ####a2#7580#7648::Float64
  ########a#7084#7136#7581#7649::Tuple{}
  ########b#7085#7137#7582#7650::Tuple{}
  ########afactor#7086#7138#7583#7651::Float64
  ########bfactor#7087#7139#7584#7652::Float64
  ######_var0#7140#7585#7653::Tuple{}
  ####a1#7586#7654::Float64
  ####a2#7587#7655::Float64
  ########a#7084#7136#7588#7656::Tuple{}
  ########b#7085#7137#7589#7657::Tuple{}
  ########afactor#7086#7138#7590#7658::Float64
  ########bfactor#7087#7139#7591#7659::Float64
  ######_var0#7140#7592#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ##div_a#7663::Float64
  ####afactor#7094#7664::Float64
  ####bfactor#7095#7665::Float64
  ########a#7084#7088#7096#7666::Tuple{}
  ########b#7085#7089#7097#7667::Tuple{}
  ########afactor#7086#7090#7098#7668::Float64
  ########bfactor#7087#7091#7099#7669::Float64
  ######_var0#7092#7100#7670::Tuple{}
  ######types#7093#7101#7671::Tuple{Type{Float64}}
  ##xs#7672::Tuple{}
  ##########tup#7068#7071#7075#7593#7673::Tuple{}
  ##########x#7069#7072#7076#7594#7674::Int64
  ########_var0#7073#7077#7595#7675::Tuple{}
  ##########types#7070#7074#7078#7596#7676::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7677::Tuple{}
  ########x#7069#7072#7598#7678::Int64
  ######_var0#7073#7599#7679::Tuple{}
  ########types#7070#7074#7600#7680::Tuple{Type{Int64}}
  ######types#7070#7338#7681::Tuple{Type{Int64}}
  ######types#7070#7131#7682::Tuple{Type{Int64}}
  ##a1#7683::Float64
  ##a2#7684::Float64
  ######a#7084#7136#7685::Tuple{}
  ######b#7085#7137#7686::Tuple{}
  ######afactor#7086#7138#7687::Float64
  ######bfactor#7087#7139#7688::Float64
  ####_var0#7140#7689::Tuple{}
  ##xs#7690::Tuple{}
  ########a#7079#7081#7132#7691::Tuple{}
  ########b#7080#7082#7133#7692::Tuple{}
  ######_var0#7083#7134#7693::Tuple{}
  ########types#7070#7131#7135#7694::Tuple{Type{Int64}}
  ##xs#7695::Tuple{Int64}
  ##########tup#7068#7071#7075#7605#7696::Tuple{}
  ##########x#7069#7072#7076#7606#7697::Int64
  ########_var0#7073#7077#7607#7698::Tuple{}
  ##########types#7070#7074#7078#7608#7699::Tuple{Type{Int64}}
  ########tup#7068#7071#7609#7700::Tuple{}
  ########x#7069#7072#7610#7701::Int64
  ######_var0#7073#7611#7702::Tuple{}
  ########types#7070#7074#7612#7703::Tuple{Type{Int64}}
  ##a1#7704::Float64
  ##a2#7705::Float64
  ##div_a#7706::Float64
  ####afactor#7094#7707::Float64
  ####bfactor#7095#7708::Float64
  ########a#7084#7088#7096#7709::Tuple{}
  ########b#7085#7089#7097#7710::Tuple{}
  ########afactor#7086#7090#7098#7711::Float64
  ########bfactor#7087#7091#7099#7712::Float64
  ######_var0#7092#7100#7713::Tuple{}
  ######types#7093#7101#7714::Tuple{Type{Float64}}
  ######a#7339#7341#7715::Tuple{}
  ######b#7340#7342#7716::Tuple{}
  ####_var0#7343#7717::Tuple{}
  ##a#7718::Float64
  ##exp_a#7719::Float64
  ##deriv#7720::Float64
  ####G#7574#7721::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7722::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7723::Tuple{}
  ##########x#7161#7163#7167#7577#7724::Float64
  ########_var0#7164#7168#7578#7725::Tuple{}
  ##xs#7726::Tuple{}
  ##########tup#7068#7071#7075#7593#7727::Tuple{}
  ##########x#7069#7072#7076#7594#7728::Int64
  ########_var0#7073#7077#7595#7729::Tuple{}
  ##########types#7070#7074#7078#7596#7730::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7731::Tuple{}
  ########x#7069#7072#7598#7732::Int64
  ######_var0#7073#7599#7733::Tuple{}
  ########types#7070#7074#7600#7734::Tuple{Type{Int64}}
  ##a1#7735::Float64
  ##a2#7736::Float64
  ##div_a#7737::Float64
  ####afactor#7094#7738::Float64
  ####bfactor#7095#7739::Float64
  ########a#7084#7088#7096#7740::Tuple{}
  ########b#7085#7089#7097#7741::Tuple{}
  ########afactor#7086#7090#7098#7742::Float64
  ########bfactor#7087#7091#7099#7743::Float64
  ######_var0#7092#7100#7744::Tuple{}
  ######types#7093#7101#7745::Tuple{Type{Float64}}
  ######a#7339#7341#7746::Tuple{}
  ######b#7340#7342#7747::Tuple{}
  ####_var0#7343#7748::Tuple{}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ######a#7084#7136#7751::Tuple{}
  ######b#7085#7137#7752::Tuple{}
  ######afactor#7086#7138#7753::Float64
  ######bfactor#7087#7139#7754::Float64
  ####_var0#7140#7755::Tuple{}
  ######types#7070#7338#7756::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7615 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7615 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7616 = GenSym(3)
      ##a2#7617 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7622 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7140#7622 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7616::Float64,##a2#7617::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7624 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7631 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7164#7168#7578#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7632 = GenSym(6)
      ##a2#7633 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7638 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7632::Float64,##a2#7633::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7644 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7579#7647 = GenSym(8)
      ####a2#7580#7648 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7585#7653 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7585#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7579#7647::Float64,####a2#7580#7648::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7586#7654 = GenSym(11)
      ####a2#7587#7655 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7592#7660 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7140#7592#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7586#7654::Float64,####a2#7587#7655::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(14)
      ##a2#7662 = GenSym(15)
      ##div_a#7663 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7661::Float64,##a2#7662::Float64))
      ####afactor#7094#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7662::Float64))
      ####bfactor#7095#7665 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7661::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7662::Float64,##a2#7662::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7670 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7663::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7683 = GenSym(17)
      ##a2#7684 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7689 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7140#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7683::Float64,##a2#7684::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7675 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7595#7675 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7679 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7599#7679 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7693 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7134#7693 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7607#7698 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7607#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7611#7702 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7611#7702 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7704 = GenSym(22)
      ##a2#7705 = GenSym(23)
      ##div_a#7706 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7704::Float64,##a2#7705::Float64))
      ####afactor#7094#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7705::Float64))
      ####bfactor#7095#7708 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7704::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7705::Float64,##a2#7705::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7713 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7706::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7717 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7343#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7729 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7595#7729 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7733 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7599#7733 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7718 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7719 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7720 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7721 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7725 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7164#7168#7578#7725 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7719::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7735 = GenSym(26)
      ##a2#7736 = GenSym(27)
      ##div_a#7737 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7735::Float64,##a2#7736::Float64))
      ####afactor#7094#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7736::Float64))
      ####bfactor#7095#7739 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7735::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7736::Float64,##a2#7736::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7744 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7744 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7748 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7343#7748 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(29)
      ##a2#7750 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7755 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7140#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7749::Float64,##a2#7750::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7613::Tuple{}
  ######b#7080#7082#7614::Tuple{}
  ####_var0#7083#7615::Tuple{}
  ##a1#7616::Float64
  ##a2#7617::Float64
  ######a#7084#7136#7618::Tuple{}
  ######b#7085#7137#7619::Tuple{}
  ######afactor#7086#7138#7620::Float64
  ######bfactor#7087#7139#7621::Float64
  ####_var0#7140#7622::Tuple{}
  ########types#7070#7131#7481#7623::Tuple{Type{Int64}}
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7574#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7629::Tuple{}
  ##########x#7161#7163#7167#7577#7630::Float64
  ########_var0#7164#7168#7578#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ######a#7084#7136#7634::Tuple{}
  ######b#7085#7137#7635::Tuple{}
  ######afactor#7086#7138#7636::Float64
  ######bfactor#7087#7139#7637::Float64
  ####_var0#7140#7638::Tuple{}
  ######types#7070#7131#7639::Tuple{Type{Int64}}
  ######types#7070#7131#7640::Tuple{Type{Int64}}
  ######types#7070#7131#7641::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7642::Tuple{}
  ########x#7069#7072#7076#7643::Int64
  ######_var0#7073#7077#7644::Tuple{}
  ########types#7070#7074#7078#7645::Tuple{Type{Int64}}
  ##xs#7646::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7579#7647::Float64
  ####a2#7580#7648::Float64
  ########a#7084#7136#7581#7649::Tuple{}
  ########b#7085#7137#7582#7650::Tuple{}
  ########afactor#7086#7138#7583#7651::Float64
  ########bfactor#7087#7139#7584#7652::Float64
  ######_var0#7140#7585#7653::Tuple{}
  ####a1#7586#7654::Float64
  ####a2#7587#7655::Float64
  ########a#7084#7136#7588#7656::Tuple{}
  ########b#7085#7137#7589#7657::Tuple{}
  ########afactor#7086#7138#7590#7658::Float64
  ########bfactor#7087#7139#7591#7659::Float64
  ######_var0#7140#7592#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ##div_a#7663::Float64
  ####afactor#7094#7664::Float64
  ####bfactor#7095#7665::Float64
  ########a#7084#7088#7096#7666::Tuple{}
  ########b#7085#7089#7097#7667::Tuple{}
  ########afactor#7086#7090#7098#7668::Float64
  ########bfactor#7087#7091#7099#7669::Float64
  ######_var0#7092#7100#7670::Tuple{}
  ######types#7093#7101#7671::Tuple{Type{Float64}}
  ##xs#7672::Tuple{}
  ##########tup#7068#7071#7075#7593#7673::Tuple{}
  ##########x#7069#7072#7076#7594#7674::Int64
  ########_var0#7073#7077#7595#7675::Tuple{}
  ##########types#7070#7074#7078#7596#7676::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7677::Tuple{}
  ########x#7069#7072#7598#7678::Int64
  ######_var0#7073#7599#7679::Tuple{}
  ########types#7070#7074#7600#7680::Tuple{Type{Int64}}
  ######types#7070#7338#7681::Tuple{Type{Int64}}
  ######types#7070#7131#7682::Tuple{Type{Int64}}
  ##a1#7683::Float64
  ##a2#7684::Float64
  ######a#7084#7136#7685::Tuple{}
  ######b#7085#7137#7686::Tuple{}
  ######afactor#7086#7138#7687::Float64
  ######bfactor#7087#7139#7688::Float64
  ####_var0#7140#7689::Tuple{}
  ##xs#7690::Tuple{}
  ########a#7079#7081#7132#7691::Tuple{}
  ########b#7080#7082#7133#7692::Tuple{}
  ######_var0#7083#7134#7693::Tuple{}
  ########types#7070#7131#7135#7694::Tuple{Type{Int64}}
  ##xs#7695::Tuple{Int64}
  ##########tup#7068#7071#7075#7605#7696::Tuple{}
  ##########x#7069#7072#7076#7606#7697::Int64
  ########_var0#7073#7077#7607#7698::Tuple{}
  ##########types#7070#7074#7078#7608#7699::Tuple{Type{Int64}}
  ########tup#7068#7071#7609#7700::Tuple{}
  ########x#7069#7072#7610#7701::Int64
  ######_var0#7073#7611#7702::Tuple{}
  ########types#7070#7074#7612#7703::Tuple{Type{Int64}}
  ##a1#7704::Float64
  ##a2#7705::Float64
  ##div_a#7706::Float64
  ####afactor#7094#7707::Float64
  ####bfactor#7095#7708::Float64
  ########a#7084#7088#7096#7709::Tuple{}
  ########b#7085#7089#7097#7710::Tuple{}
  ########afactor#7086#7090#7098#7711::Float64
  ########bfactor#7087#7091#7099#7712::Float64
  ######_var0#7092#7100#7713::Tuple{}
  ######types#7093#7101#7714::Tuple{Type{Float64}}
  ######a#7339#7341#7715::Tuple{}
  ######b#7340#7342#7716::Tuple{}
  ####_var0#7343#7717::Tuple{}
  ##a#7718::Float64
  ##exp_a#7719::Float64
  ##deriv#7720::Float64
  ####G#7574#7721::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7722::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7723::Tuple{}
  ##########x#7161#7163#7167#7577#7724::Float64
  ########_var0#7164#7168#7578#7725::Tuple{}
  ##xs#7726::Tuple{}
  ##########tup#7068#7071#7075#7593#7727::Tuple{}
  ##########x#7069#7072#7076#7594#7728::Int64
  ########_var0#7073#7077#7595#7729::Tuple{}
  ##########types#7070#7074#7078#7596#7730::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7731::Tuple{}
  ########x#7069#7072#7598#7732::Int64
  ######_var0#7073#7599#7733::Tuple{}
  ########types#7070#7074#7600#7734::Tuple{Type{Int64}}
  ##a1#7735::Float64
  ##a2#7736::Float64
  ##div_a#7737::Float64
  ####afactor#7094#7738::Float64
  ####bfactor#7095#7739::Float64
  ########a#7084#7088#7096#7740::Tuple{}
  ########b#7085#7089#7097#7741::Tuple{}
  ########afactor#7086#7090#7098#7742::Float64
  ########bfactor#7087#7091#7099#7743::Float64
  ######_var0#7092#7100#7744::Tuple{}
  ######types#7093#7101#7745::Tuple{Type{Float64}}
  ######a#7339#7341#7746::Tuple{}
  ######b#7340#7342#7747::Tuple{}
  ####_var0#7343#7748::Tuple{}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ######a#7084#7136#7751::Tuple{}
  ######b#7085#7137#7752::Tuple{}
  ######afactor#7086#7138#7753::Float64
  ######bfactor#7087#7139#7754::Float64
  ####_var0#7140#7755::Tuple{}
  ######types#7070#7338#7756::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7615 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7615 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7616 = GenSym(3)
      ##a2#7617 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7622 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7140#7622 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7616::Float64,##a2#7617::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7624 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7631 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7164#7168#7578#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7632 = GenSym(6)
      ##a2#7633 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7638 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7632::Float64,##a2#7633::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7644 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7579#7647 = GenSym(8)
      ####a2#7580#7648 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7585#7653 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7585#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7579#7647::Float64,####a2#7580#7648::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7586#7654 = GenSym(11)
      ####a2#7587#7655 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7592#7660 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7140#7592#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7586#7654::Float64,####a2#7587#7655::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(14)
      ##a2#7662 = GenSym(15)
      ##div_a#7663 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7661::Float64,##a2#7662::Float64))
      ####afactor#7094#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7662::Float64))
      ####bfactor#7095#7665 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7661::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7662::Float64,##a2#7662::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7670 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7663::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7683 = GenSym(17)
      ##a2#7684 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7689 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7140#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7683::Float64,##a2#7684::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7675 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7595#7675 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7679 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7599#7679 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7693 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7134#7693 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7607#7698 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7607#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7611#7702 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7611#7702 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7704 = GenSym(22)
      ##a2#7705 = GenSym(23)
      ##div_a#7706 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7704::Float64,##a2#7705::Float64))
      ####afactor#7094#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7705::Float64))
      ####bfactor#7095#7708 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7704::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7705::Float64,##a2#7705::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7713 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7706::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7717 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7343#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7729 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7595#7729 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7733 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7599#7733 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7718 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7719 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7720 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7721 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7725 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7164#7168#7578#7725 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7719::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7735 = GenSym(26)
      ##a2#7736 = GenSym(27)
      ##div_a#7737 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7735::Float64,##a2#7736::Float64))
      ####afactor#7094#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7736::Float64))
      ####bfactor#7095#7739 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7735::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7736::Float64,##a2#7736::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7744 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7744 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7748 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7343#7748 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(29)
      ##a2#7750 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7755 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7140#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7749::Float64,##a2#7750::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7613::Tuple{}
  ######b#7080#7082#7614::Tuple{}
  ####_var0#7083#7615::Tuple{}
  ##a1#7616::Float64
  ##a2#7617::Float64
  ######a#7084#7136#7618::Tuple{}
  ######b#7085#7137#7619::Tuple{}
  ######afactor#7086#7138#7620::Float64
  ######bfactor#7087#7139#7621::Float64
  ####_var0#7140#7622::Tuple{}
  ########types#7070#7131#7481#7623::Tuple{Type{Int64}}
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7574#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7629::Tuple{}
  ##########x#7161#7163#7167#7577#7630::Float64
  ########_var0#7164#7168#7578#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ######a#7084#7136#7634::Tuple{}
  ######b#7085#7137#7635::Tuple{}
  ######afactor#7086#7138#7636::Float64
  ######bfactor#7087#7139#7637::Float64
  ####_var0#7140#7638::Tuple{}
  ######types#7070#7131#7639::Tuple{Type{Int64}}
  ######types#7070#7131#7640::Tuple{Type{Int64}}
  ######types#7070#7131#7641::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7642::Tuple{}
  ########x#7069#7072#7076#7643::Int64
  ######_var0#7073#7077#7644::Tuple{}
  ########types#7070#7074#7078#7645::Tuple{Type{Int64}}
  ##xs#7646::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7579#7647::Float64
  ####a2#7580#7648::Float64
  ########a#7084#7136#7581#7649::Tuple{}
  ########b#7085#7137#7582#7650::Tuple{}
  ########afactor#7086#7138#7583#7651::Float64
  ########bfactor#7087#7139#7584#7652::Float64
  ######_var0#7140#7585#7653::Tuple{}
  ####a1#7586#7654::Float64
  ####a2#7587#7655::Float64
  ########a#7084#7136#7588#7656::Tuple{}
  ########b#7085#7137#7589#7657::Tuple{}
  ########afactor#7086#7138#7590#7658::Float64
  ########bfactor#7087#7139#7591#7659::Float64
  ######_var0#7140#7592#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ##div_a#7663::Float64
  ####afactor#7094#7664::Float64
  ####bfactor#7095#7665::Float64
  ########a#7084#7088#7096#7666::Tuple{}
  ########b#7085#7089#7097#7667::Tuple{}
  ########afactor#7086#7090#7098#7668::Float64
  ########bfactor#7087#7091#7099#7669::Float64
  ######_var0#7092#7100#7670::Tuple{}
  ######types#7093#7101#7671::Tuple{Type{Float64}}
  ##xs#7672::Tuple{}
  ##########tup#7068#7071#7075#7593#7673::Tuple{}
  ##########x#7069#7072#7076#7594#7674::Int64
  ########_var0#7073#7077#7595#7675::Tuple{}
  ##########types#7070#7074#7078#7596#7676::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7677::Tuple{}
  ########x#7069#7072#7598#7678::Int64
  ######_var0#7073#7599#7679::Tuple{}
  ########types#7070#7074#7600#7680::Tuple{Type{Int64}}
  ######types#7070#7338#7681::Tuple{Type{Int64}}
  ######types#7070#7131#7682::Tuple{Type{Int64}}
  ##a1#7683::Float64
  ##a2#7684::Float64
  ######a#7084#7136#7685::Tuple{}
  ######b#7085#7137#7686::Tuple{}
  ######afactor#7086#7138#7687::Float64
  ######bfactor#7087#7139#7688::Float64
  ####_var0#7140#7689::Tuple{}
  ##xs#7690::Tuple{}
  ########a#7079#7081#7132#7691::Tuple{}
  ########b#7080#7082#7133#7692::Tuple{}
  ######_var0#7083#7134#7693::Tuple{}
  ########types#7070#7131#7135#7694::Tuple{Type{Int64}}
  ##xs#7695::Tuple{Int64}
  ##########tup#7068#7071#7075#7605#7696::Tuple{}
  ##########x#7069#7072#7076#7606#7697::Int64
  ########_var0#7073#7077#7607#7698::Tuple{}
  ##########types#7070#7074#7078#7608#7699::Tuple{Type{Int64}}
  ########tup#7068#7071#7609#7700::Tuple{}
  ########x#7069#7072#7610#7701::Int64
  ######_var0#7073#7611#7702::Tuple{}
  ########types#7070#7074#7612#7703::Tuple{Type{Int64}}
  ##a1#7704::Float64
  ##a2#7705::Float64
  ##div_a#7706::Float64
  ####afactor#7094#7707::Float64
  ####bfactor#7095#7708::Float64
  ########a#7084#7088#7096#7709::Tuple{}
  ########b#7085#7089#7097#7710::Tuple{}
  ########afactor#7086#7090#7098#7711::Float64
  ########bfactor#7087#7091#7099#7712::Float64
  ######_var0#7092#7100#7713::Tuple{}
  ######types#7093#7101#7714::Tuple{Type{Float64}}
  ######a#7339#7341#7715::Tuple{}
  ######b#7340#7342#7716::Tuple{}
  ####_var0#7343#7717::Tuple{}
  ##a#7718::Float64
  ##exp_a#7719::Float64
  ##deriv#7720::Float64
  ####G#7574#7721::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7159#7165#7575#7722::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7160#7162#7166#7576#7723::Tuple{}
  ##########x#7161#7163#7167#7577#7724::Float64
  ########_var0#7164#7168#7578#7725::Tuple{}
  ##xs#7726::Tuple{}
  ##########tup#7068#7071#7075#7593#7727::Tuple{}
  ##########x#7069#7072#7076#7594#7728::Int64
  ########_var0#7073#7077#7595#7729::Tuple{}
  ##########types#7070#7074#7078#7596#7730::Tuple{Type{Int64}}
  ########tup#7068#7071#7597#7731::Tuple{}
  ########x#7069#7072#7598#7732::Int64
  ######_var0#7073#7599#7733::Tuple{}
  ########types#7070#7074#7600#7734::Tuple{Type{Int64}}
  ##a1#7735::Float64
  ##a2#7736::Float64
  ##div_a#7737::Float64
  ####afactor#7094#7738::Float64
  ####bfactor#7095#7739::Float64
  ########a#7084#7088#7096#7740::Tuple{}
  ########b#7085#7089#7097#7741::Tuple{}
  ########afactor#7086#7090#7098#7742::Float64
  ########bfactor#7087#7091#7099#7743::Float64
  ######_var0#7092#7100#7744::Tuple{}
  ######types#7093#7101#7745::Tuple{Type{Float64}}
  ######a#7339#7341#7746::Tuple{}
  ######b#7340#7342#7747::Tuple{}
  ####_var0#7343#7748::Tuple{}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ######a#7084#7136#7751::Tuple{}
  ######b#7085#7137#7752::Tuple{}
  ######afactor#7086#7138#7753::Float64
  ######bfactor#7087#7139#7754::Float64
  ####_var0#7140#7755::Tuple{}
  ######types#7070#7338#7756::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7615 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7615 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7616 = GenSym(3)
      ##a2#7617 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7622 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7140#7622 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7616::Float64,##a2#7617::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7624 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7631 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7164#7168#7578#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7632 = GenSym(6)
      ##a2#7633 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7638 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7140#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7632::Float64,##a2#7633::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7644 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7579#7647 = GenSym(8)
      ####a2#7580#7648 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7585#7653 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7140#7585#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7579#7647::Float64,####a2#7580#7648::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7586#7654 = GenSym(11)
      ####a2#7587#7655 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7140#7592#7660 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7140#7592#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7586#7654::Float64,####a2#7587#7655::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(14)
      ##a2#7662 = GenSym(15)
      ##div_a#7663 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7661::Float64,##a2#7662::Float64))
      ####afactor#7094#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7662::Float64))
      ####bfactor#7095#7665 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7661::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7662::Float64,##a2#7662::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7670 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7663::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7683 = GenSym(17)
      ##a2#7684 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7689 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7140#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7683::Float64,##a2#7684::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7675 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7595#7675 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7679 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7599#7679 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7134#7693 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7134#7693 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7607#7698 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7607#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7611#7702 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7611#7702 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7704 = GenSym(22)
      ##a2#7705 = GenSym(23)
      ##div_a#7706 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7704::Float64,##a2#7705::Float64))
      ####afactor#7094#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7705::Float64))
      ####bfactor#7095#7708 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7704::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7705::Float64,##a2#7705::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7713 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7706::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7717 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7343#7717 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7595#7729 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7595#7729 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7599#7733 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7599#7733 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7718 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7719 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7720 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7718::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7574#7721 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7164#7168#7578#7725 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7164#7168#7578#7725 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7719::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7735 = GenSym(26)
      ##a2#7736 = GenSym(27)
      ##div_a#7737 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7735::Float64,##a2#7736::Float64))
      ####afactor#7094#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7736::Float64))
      ####bfactor#7095#7739 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7735::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7736::Float64,##a2#7736::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7744 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7744 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7343#7748 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7343#7748 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(29)
      ##a2#7750 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7140#7755 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7140#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7749::Float64,##a2#7750::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7759#7761::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7762::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7761 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7761 = false
      2: 
      ####_var0#7759#7761::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7762 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7762::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7759#7761::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7762::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7761 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7761 = false
      2: 
      ####_var0#7759#7761::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7762 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7762::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7759#7763::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7764::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7763 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7763 = false
      2: 
      ####_var0#7759#7763::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7764 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7764::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7759#7761::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7762::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7761 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7761 = false
      2: 
      ####_var0#7759#7761::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7762 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7762::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7759#7761::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7762::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7761 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7761 = false
      2: 
      ####_var0#7759#7761::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7762 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7762::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7759#7763::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7764::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7763 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7763 = false
      2: 
      ####_var0#7759#7763::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7764 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7764::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7759#7763::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7764::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7763 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7763 = false
      2: 
      ####_var0#7759#7763::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7764 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7764::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7759#7763::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7764::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7763 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7763 = false
      2: 
      ####_var0#7759#7763::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7764 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7764::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7759#7763::UNION{BOOL,INT64}
  ########_var0#7757#7758#7760#7764::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7759#7763 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7759#7763 = false
      2: 
      ####_var0#7759#7763::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7757#7758#7760#7764 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7757#7758#7760#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7757#7758#7760#7764::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7131#7481#7765::Tuple{Type{Int64}}
  ########types#7070#7131#7481#7766::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7131#7481#7765::Tuple{Type{Int64}}
  ########types#7070#7131#7481#7766::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7131#7481#7765::Tuple{Type{Int64}}
  ########types#7070#7131#7481#7766::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7131#7481#7765::Tuple{Type{Int64}}
  ########types#7070#7131#7481#7766::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7131#7481#7765::Tuple{Type{Int64}}
  ########types#7070#7131#7481#7766::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





