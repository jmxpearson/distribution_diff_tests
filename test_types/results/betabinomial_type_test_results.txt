____________________________
ntrials
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 28:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64




____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Int64},:β)::Int64)::Tuple{Int64,Int64,Int64}
  end::Tuple{Int64,Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 30:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Int64},:β)::Int64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7079#7081#7102::Tuple{}
  ######b#7080#7082#7103::Tuple{}
  ####_var0#7083#7104::Tuple{}
  ########tup#7068#7071#7075#7105::Tuple{}
  ########x#7069#7072#7076#7106::Int64
  ######_var0#7073#7077#7107::Tuple{}
  ########types#7070#7074#7078#7108::Tuple{Type{Int64}}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7094#7112::Float64
  ####bfactor#7095#7113::Float64
  ########a#7084#7088#7096#7114::Tuple{}
  ########b#7085#7089#7097#7115::Tuple{}
  ########afactor#7086#7090#7098#7116::Float64
  ########bfactor#7087#7091#7099#7117::Float64
  ######_var0#7092#7100#7118::Tuple{}
  ######types#7093#7101#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 34:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7107 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7073#7077#7107 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7083#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7109 = GenSym(0)
      ##a2#7110 = GenSym(1)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7094#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7095#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7118 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7092#7100#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}
  n::Int64
  α::Int64
  β::Int64
  numerator::Int64
  denominator::Float64
  ##xs#7127::Tuple{}
  ##xs#7128::Tuple{Int64}
  ##xs#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:β)::Int64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      numerator = (Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(n::Int64,α::Int64)),β::Int64)),(Base.box)(Base.Int,(Base.add_int)((Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)),n::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)))),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,numerator::Int64)),denominator::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7131::Tuple{}
  ##xs#7132::Tuple{Float64}
  ##xs#7133::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7183::Tuple{}
  ########a#7079#7081#7135#7184::Tuple{}
  ########b#7080#7082#7136#7185::Tuple{}
  ######_var0#7083#7137#7186::Tuple{}
  ########types#7070#7134#7138#7187::Tuple{Type{Int64}}
  ##xs#7188::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7189::Tuple{}
  ##########x#7069#7072#7076#7152#7190::Int64
  ########_var0#7073#7077#7153#7191::Tuple{}
  ##########types#7070#7074#7078#7154#7192::Tuple{Type{Int64}}
  ####a1#7155#7193::Float64
  ####a2#7156#7194::Float64
  ########a#7084#7139#7157#7195::Tuple{}
  ########b#7085#7140#7158#7196::Tuple{}
  ########afactor#7086#7141#7159#7197::Float64
  ########bfactor#7087#7142#7160#7198::Float64
  ######_var0#7143#7161#7199::Tuple{}
  ##xs#7200::Tuple{}
  ########a#7079#7081#7179#7201::Tuple{}
  ########b#7080#7082#7180#7202::Tuple{}
  ######_var0#7083#7181#7203::Tuple{}
  ########types#7177#7178#7182#7204::Tuple{Type{Float64}}
  ######a#7079#7081#7205::Tuple{}
  ######b#7080#7082#7206::Tuple{}
  ####_var0#7083#7207::Tuple{}
  ##a#7208::Float64
  ##exp_a#7209::Float64
  ##deriv#7210::Float64
  ####G#7172#7211::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7173#7212::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7174#7213::Tuple{}
  ##########x#7164#7166#7170#7175#7214::Float64
  ########_var0#7167#7171#7176#7215::Tuple{}
  ##a1#7216::Float64
  ##a2#7217::Float64
  ######a#7084#7139#7218::Tuple{}
  ######b#7085#7140#7219::Tuple{}
  ######afactor#7086#7141#7220::Float64
  ######bfactor#7087#7142#7221::Float64
  ####_var0#7143#7222::Tuple{}
  ##a1#7223::Float64
  ##a2#7224::Float64
  ##div_a#7225::Float64
  ####afactor#7094#7226::Float64
  ####bfactor#7095#7227::Float64
  ########a#7084#7088#7096#7228::Tuple{}
  ########b#7085#7089#7097#7229::Tuple{}
  ########afactor#7086#7090#7098#7230::Float64
  ########bfactor#7087#7091#7099#7231::Float64
  ######_var0#7092#7100#7232::Tuple{}
  ######types#7093#7101#7233::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7186 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7191 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7153#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7193 = GenSym(4)
      ####a2#7156#7194 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7199 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7143#7161#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7193::Float64,####a2#7156#7194::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7207 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7207 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7208 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,2.0,0)::Float64
      ##exp_a#7209 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,GenSym(11),0)::Float64
      ##deriv#7210 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,GenSym(11))))::Float64))
      ####G#7172#7211 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7215 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7167#7171#7176#7215 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7209::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7181#7203 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7181#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7216 = GenSym(16)
      ##a2#7217 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7222 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7143#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7216::Float64,##a2#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7223 = GenSym(18)
      ##a2#7224 = GenSym(19)
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7223::Float64,##a2#7224::Float64))
      ####afactor#7094#7226 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7224::Float64))
      ####bfactor#7095#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7223::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7224::Float64,##a2#7224::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7232 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7131::Tuple{}
  ##xs#7132::Tuple{Float64}
  ##xs#7133::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7131::Tuple{}
  ##xs#7132::Tuple{Float64}
  ##xs#7133::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7183::Tuple{}
  ########a#7079#7081#7135#7184::Tuple{}
  ########b#7080#7082#7136#7185::Tuple{}
  ######_var0#7083#7137#7186::Tuple{}
  ########types#7070#7134#7138#7187::Tuple{Type{Int64}}
  ##xs#7188::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7189::Tuple{}
  ##########x#7069#7072#7076#7152#7190::Int64
  ########_var0#7073#7077#7153#7191::Tuple{}
  ##########types#7070#7074#7078#7154#7192::Tuple{Type{Int64}}
  ####a1#7155#7193::Float64
  ####a2#7156#7194::Float64
  ########a#7084#7139#7157#7195::Tuple{}
  ########b#7085#7140#7158#7196::Tuple{}
  ########afactor#7086#7141#7159#7197::Float64
  ########bfactor#7087#7142#7160#7198::Float64
  ######_var0#7143#7161#7199::Tuple{}
  ##xs#7200::Tuple{}
  ########a#7079#7081#7179#7201::Tuple{}
  ########b#7080#7082#7180#7202::Tuple{}
  ######_var0#7083#7181#7203::Tuple{}
  ########types#7177#7178#7182#7204::Tuple{Type{Float64}}
  ######a#7079#7081#7205::Tuple{}
  ######b#7080#7082#7206::Tuple{}
  ####_var0#7083#7207::Tuple{}
  ##a#7208::Float64
  ##exp_a#7209::Float64
  ##deriv#7210::Float64
  ####G#7172#7211::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7173#7212::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7174#7213::Tuple{}
  ##########x#7164#7166#7170#7175#7214::Float64
  ########_var0#7167#7171#7176#7215::Tuple{}
  ##a1#7216::Float64
  ##a2#7217::Float64
  ######a#7084#7139#7218::Tuple{}
  ######b#7085#7140#7219::Tuple{}
  ######afactor#7086#7141#7220::Float64
  ######bfactor#7087#7142#7221::Float64
  ####_var0#7143#7222::Tuple{}
  ##a1#7223::Float64
  ##a2#7224::Float64
  ##div_a#7225::Float64
  ####afactor#7094#7226::Float64
  ####bfactor#7095#7227::Float64
  ########a#7084#7088#7096#7228::Tuple{}
  ########b#7085#7089#7097#7229::Tuple{}
  ########afactor#7086#7090#7098#7230::Float64
  ########bfactor#7087#7091#7099#7231::Float64
  ######_var0#7092#7100#7232::Tuple{}
  ######types#7093#7101#7233::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7186 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7191 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7153#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7193 = GenSym(4)
      ####a2#7156#7194 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7199 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7143#7161#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7193::Float64,####a2#7156#7194::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7207 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7207 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7208 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,2.0,0)::Float64
      ##exp_a#7209 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,GenSym(11),0)::Float64
      ##deriv#7210 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,GenSym(11))))::Float64))
      ####G#7172#7211 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7215 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7167#7171#7176#7215 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7209::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7181#7203 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7181#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7216 = GenSym(16)
      ##a2#7217 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7222 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7143#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7216::Float64,##a2#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7223 = GenSym(18)
      ##a2#7224 = GenSym(19)
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7223::Float64,##a2#7224::Float64))
      ####afactor#7094#7226 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7224::Float64))
      ####bfactor#7095#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7223::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7224::Float64,##a2#7224::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7232 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7183::Tuple{}
  ########a#7079#7081#7135#7184::Tuple{}
  ########b#7080#7082#7136#7185::Tuple{}
  ######_var0#7083#7137#7186::Tuple{}
  ########types#7070#7134#7138#7187::Tuple{Type{Int64}}
  ##xs#7188::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7189::Tuple{}
  ##########x#7069#7072#7076#7152#7190::Int64
  ########_var0#7073#7077#7153#7191::Tuple{}
  ##########types#7070#7074#7078#7154#7192::Tuple{Type{Int64}}
  ####a1#7155#7193::Float64
  ####a2#7156#7194::Float64
  ########a#7084#7139#7157#7195::Tuple{}
  ########b#7085#7140#7158#7196::Tuple{}
  ########afactor#7086#7141#7159#7197::Float64
  ########bfactor#7087#7142#7160#7198::Float64
  ######_var0#7143#7161#7199::Tuple{}
  ##xs#7200::Tuple{}
  ########a#7079#7081#7179#7201::Tuple{}
  ########b#7080#7082#7180#7202::Tuple{}
  ######_var0#7083#7181#7203::Tuple{}
  ########types#7177#7178#7182#7204::Tuple{Type{Float64}}
  ######a#7079#7081#7205::Tuple{}
  ######b#7080#7082#7206::Tuple{}
  ####_var0#7083#7207::Tuple{}
  ##a#7208::Float64
  ##exp_a#7209::Float64
  ##deriv#7210::Float64
  ####G#7172#7211::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7173#7212::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7174#7213::Tuple{}
  ##########x#7164#7166#7170#7175#7214::Float64
  ########_var0#7167#7171#7176#7215::Tuple{}
  ##a1#7216::Float64
  ##a2#7217::Float64
  ######a#7084#7139#7218::Tuple{}
  ######b#7085#7140#7219::Tuple{}
  ######afactor#7086#7141#7220::Float64
  ######bfactor#7087#7142#7221::Float64
  ####_var0#7143#7222::Tuple{}
  ##a1#7223::Float64
  ##a2#7224::Float64
  ##div_a#7225::Float64
  ####afactor#7094#7226::Float64
  ####bfactor#7095#7227::Float64
  ########a#7084#7088#7096#7228::Tuple{}
  ########b#7085#7089#7097#7229::Tuple{}
  ########afactor#7086#7090#7098#7230::Float64
  ########bfactor#7087#7091#7099#7231::Float64
  ######_var0#7092#7100#7232::Tuple{}
  ######types#7093#7101#7233::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7186 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7191 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7153#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7193 = GenSym(4)
      ####a2#7156#7194 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7199 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7143#7161#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7193::Float64,####a2#7156#7194::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7207 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7207 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7208 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,2.0,0)::Float64
      ##exp_a#7209 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,GenSym(11),0)::Float64
      ##deriv#7210 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,GenSym(11))))::Float64))
      ####G#7172#7211 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7215 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7167#7171#7176#7215 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7209::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7181#7203 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7181#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7216 = GenSym(16)
      ##a2#7217 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7222 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7143#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7216::Float64,##a2#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7223 = GenSym(18)
      ##a2#7224 = GenSym(19)
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7223::Float64,##a2#7224::Float64))
      ####afactor#7094#7226 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7224::Float64))
      ####bfactor#7095#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7223::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7224::Float64,##a2#7224::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7232 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7183::Tuple{}
  ########a#7079#7081#7135#7184::Tuple{}
  ########b#7080#7082#7136#7185::Tuple{}
  ######_var0#7083#7137#7186::Tuple{}
  ########types#7070#7134#7138#7187::Tuple{Type{Int64}}
  ##xs#7188::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7189::Tuple{}
  ##########x#7069#7072#7076#7152#7190::Int64
  ########_var0#7073#7077#7153#7191::Tuple{}
  ##########types#7070#7074#7078#7154#7192::Tuple{Type{Int64}}
  ####a1#7155#7193::Float64
  ####a2#7156#7194::Float64
  ########a#7084#7139#7157#7195::Tuple{}
  ########b#7085#7140#7158#7196::Tuple{}
  ########afactor#7086#7141#7159#7197::Float64
  ########bfactor#7087#7142#7160#7198::Float64
  ######_var0#7143#7161#7199::Tuple{}
  ##xs#7200::Tuple{}
  ########a#7079#7081#7179#7201::Tuple{}
  ########b#7080#7082#7180#7202::Tuple{}
  ######_var0#7083#7181#7203::Tuple{}
  ########types#7177#7178#7182#7204::Tuple{Type{Float64}}
  ######a#7079#7081#7205::Tuple{}
  ######b#7080#7082#7206::Tuple{}
  ####_var0#7083#7207::Tuple{}
  ##a#7208::Float64
  ##exp_a#7209::Float64
  ##deriv#7210::Float64
  ####G#7172#7211::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7173#7212::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7174#7213::Tuple{}
  ##########x#7164#7166#7170#7175#7214::Float64
  ########_var0#7167#7171#7176#7215::Tuple{}
  ##a1#7216::Float64
  ##a2#7217::Float64
  ######a#7084#7139#7218::Tuple{}
  ######b#7085#7140#7219::Tuple{}
  ######afactor#7086#7141#7220::Float64
  ######bfactor#7087#7142#7221::Float64
  ####_var0#7143#7222::Tuple{}
  ##a1#7223::Float64
  ##a2#7224::Float64
  ##div_a#7225::Float64
  ####afactor#7094#7226::Float64
  ####bfactor#7095#7227::Float64
  ########a#7084#7088#7096#7228::Tuple{}
  ########b#7085#7089#7097#7229::Tuple{}
  ########afactor#7086#7090#7098#7230::Float64
  ########bfactor#7087#7091#7099#7231::Float64
  ######_var0#7092#7100#7232::Tuple{}
  ######types#7093#7101#7233::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7186 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7191 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7153#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7193 = GenSym(4)
      ####a2#7156#7194 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7199 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7143#7161#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7193::Float64,####a2#7156#7194::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7207 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7207 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7208 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,2.0,0)::Float64
      ##exp_a#7209 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,GenSym(11),0)::Float64
      ##deriv#7210 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,GenSym(11))))::Float64))
      ####G#7172#7211 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7215 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7167#7171#7176#7215 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7209::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7181#7203 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7181#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7216 = GenSym(16)
      ##a2#7217 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7222 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7143#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7216::Float64,##a2#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7223 = GenSym(18)
      ##a2#7224 = GenSym(19)
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7223::Float64,##a2#7224::Float64))
      ####afactor#7094#7226 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7224::Float64))
      ####bfactor#7095#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7223::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7224::Float64,##a2#7224::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7232 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7183::Tuple{}
  ########a#7079#7081#7135#7184::Tuple{}
  ########b#7080#7082#7136#7185::Tuple{}
  ######_var0#7083#7137#7186::Tuple{}
  ########types#7070#7134#7138#7187::Tuple{Type{Int64}}
  ##xs#7188::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7189::Tuple{}
  ##########x#7069#7072#7076#7152#7190::Int64
  ########_var0#7073#7077#7153#7191::Tuple{}
  ##########types#7070#7074#7078#7154#7192::Tuple{Type{Int64}}
  ####a1#7155#7193::Float64
  ####a2#7156#7194::Float64
  ########a#7084#7139#7157#7195::Tuple{}
  ########b#7085#7140#7158#7196::Tuple{}
  ########afactor#7086#7141#7159#7197::Float64
  ########bfactor#7087#7142#7160#7198::Float64
  ######_var0#7143#7161#7199::Tuple{}
  ##xs#7200::Tuple{}
  ########a#7079#7081#7179#7201::Tuple{}
  ########b#7080#7082#7180#7202::Tuple{}
  ######_var0#7083#7181#7203::Tuple{}
  ########types#7177#7178#7182#7204::Tuple{Type{Float64}}
  ######a#7079#7081#7205::Tuple{}
  ######b#7080#7082#7206::Tuple{}
  ####_var0#7083#7207::Tuple{}
  ##a#7208::Float64
  ##exp_a#7209::Float64
  ##deriv#7210::Float64
  ####G#7172#7211::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7173#7212::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7174#7213::Tuple{}
  ##########x#7164#7166#7170#7175#7214::Float64
  ########_var0#7167#7171#7176#7215::Tuple{}
  ##a1#7216::Float64
  ##a2#7217::Float64
  ######a#7084#7139#7218::Tuple{}
  ######b#7085#7140#7219::Tuple{}
  ######afactor#7086#7141#7220::Float64
  ######bfactor#7087#7142#7221::Float64
  ####_var0#7143#7222::Tuple{}
  ##a1#7223::Float64
  ##a2#7224::Float64
  ##div_a#7225::Float64
  ####afactor#7094#7226::Float64
  ####bfactor#7095#7227::Float64
  ########a#7084#7088#7096#7228::Tuple{}
  ########b#7085#7089#7097#7229::Tuple{}
  ########afactor#7086#7090#7098#7230::Float64
  ########bfactor#7087#7091#7099#7231::Float64
  ######_var0#7092#7100#7232::Tuple{}
  ######types#7093#7101#7233::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 37:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7186 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7191 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7153#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7193 = GenSym(4)
      ####a2#7156#7194 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7199 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7143#7161#7199 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7193::Float64,####a2#7156#7194::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 38:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7207 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7083#7207 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7208 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,2.0,0)::Float64
      ##exp_a#7209 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7208::Float64,0,GenSym(11),0)::Float64
      ##deriv#7210 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7208::Float64,GenSym(11))))::Float64))
      ####G#7172#7211 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7215 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7167#7171#7176#7215 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7209::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7181#7203 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7181#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7216 = GenSym(16)
      ##a2#7217 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7222 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7143#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7216::Float64,##a2#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 39:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7223 = GenSym(18)
      ##a2#7224 = GenSym(19)
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7223::Float64,##a2#7224::Float64))
      ####afactor#7094#7226 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7224::Float64))
      ####bfactor#7095#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7223::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7224::Float64,##a2#7224::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7232 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7092#7100#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Int64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Int64,(Base.sub_int)((Base.getfield)(GenSym(1),2)::Int64,1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Int64})::Array{Float64,1})::Distributions.Categorical)::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(9) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(11)
      #s3 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(13)
      #s3 = GenSym(14)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical)::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(9) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(11)
      #s3 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(13)
      #s3 = GenSym(14)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical)::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(9) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(11)
      #s3 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(13)
      #s3 = GenSym(14)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical)::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(9) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(11)
      #s3 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(13)
      #s3 = GenSym(14)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(0) = (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Int64})::Array{Float64,1})::Distributions.Categorical)::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(0),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(0) = (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical)::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(0),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(0) = (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical)::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(0),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(0) = (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical)::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(0),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}
  n::Int64
  α::Int64
  β::Int64
  t1::Float64
  t2::Float64
  ##xs#7511::Tuple{}
  ##xs#7512::Tuple{}
  ##xs#7513::Tuple{}
  ##xs#7514::Tuple{Int64}
  ##xs#7515::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:β)::Int64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Base.Int,(Base.add_int)((Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)),(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))),(Base.box)(Int64,(Base.sub_int)(β::Int64,α::Int64)))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)((Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)),2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Base.Int,(Base.add_int)((Base.box)(Base.Int,(Base.add_int)(1,α::Int64)),β::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(n::Int64,α::Int64)),β::Int64)),(Base.box)(Base.Int,(Base.add_int)((Base.box)(Base.Int,(Base.add_int)(n::Int64,α::Int64)),β::Int64)))))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{}
  ##xs#7519::Tuple{Float64}
  ##xs#7520::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7531::Tuple{}
  ########a#7079#7081#7135#7532::Tuple{}
  ########b#7080#7082#7136#7533::Tuple{}
  ######_var0#7083#7137#7534::Tuple{}
  ########types#7070#7134#7138#7535::Tuple{Type{Int64}}
  ######a#7374#7376#7536::Tuple{}
  ######b#7375#7377#7537::Tuple{}
  ####_var0#7378#7538::Tuple{}
  ##xs#7539::Tuple{}
  ########a#7079#7081#7135#7540::Tuple{}
  ########b#7080#7082#7136#7541::Tuple{}
  ######_var0#7083#7137#7542::Tuple{}
  ########types#7070#7134#7138#7543::Tuple{Type{Int64}}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ######a#7084#7139#7546::Tuple{}
  ######b#7085#7140#7547::Tuple{}
  ######afactor#7086#7141#7548::Float64
  ######bfactor#7087#7142#7549::Float64
  ####_var0#7143#7550::Tuple{}
  ##a1#7551::Float64
  ##a2#7552::Float64
  ##div_a#7553::Float64
  ####afactor#7094#7554::Float64
  ####bfactor#7095#7555::Float64
  ########a#7084#7088#7096#7556::Tuple{}
  ########b#7085#7089#7097#7557::Tuple{}
  ########afactor#7086#7090#7098#7558::Float64
  ########bfactor#7087#7091#7099#7559::Float64
  ######_var0#7092#7100#7560::Tuple{}
  ######types#7093#7101#7561::Tuple{Type{Float64}}
  ##xs#7562::Tuple{}
  ##########types#7070#7134#7521#7522#7563::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7564::Tuple{}
  ########b#7080#7082#7524#7565::Tuple{}
  ######_var0#7083#7525#7566::Tuple{}
  ##xs#7567::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7568::Tuple{}
  ##########x#7069#7072#7076#7152#7569::Int64
  ########_var0#7073#7077#7153#7570::Tuple{}
  ##########types#7070#7074#7078#7154#7571::Tuple{Type{Int64}}
  ####a1#7155#7572::Float64
  ####a2#7156#7573::Float64
  ########a#7084#7139#7157#7574::Tuple{}
  ########b#7085#7140#7158#7575::Tuple{}
  ########afactor#7086#7141#7159#7576::Float64
  ########bfactor#7087#7142#7160#7577::Float64
  ######_var0#7143#7161#7578::Tuple{}
  ##xs#7579::Tuple{}
  ##########types#7070#7134#7521#7522#7580::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7581::Tuple{}
  ########b#7080#7082#7524#7582::Tuple{}
  ######_var0#7083#7525#7583::Tuple{}
  ##a1#7584::Float64
  ##a2#7585::Float64
  ##div_a#7586::Float64
  ####afactor#7094#7587::Float64
  ####bfactor#7095#7588::Float64
  ########a#7084#7088#7096#7589::Tuple{}
  ########b#7085#7089#7097#7590::Tuple{}
  ########afactor#7086#7090#7098#7591::Float64
  ########bfactor#7087#7091#7099#7592::Float64
  ######_var0#7092#7100#7593::Tuple{}
  ######types#7093#7101#7594::Tuple{Type{Float64}}
  ##sqrt_a#7595::Float64
  ##deriv#7596::Float64
  ####G#7526#7597::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7527#7598::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7528#7599::Tuple{}
  ##########x#7164#7166#7170#7529#7600::Float64
  ########_var0#7167#7171#7530#7601::Tuple{}
  ##a1#7602::Float64
  ##a2#7603::Float64
  ######a#7084#7139#7604::Tuple{}
  ######b#7085#7140#7605::Tuple{}
  ######afactor#7086#7141#7606::Float64
  ######bfactor#7087#7142#7607::Float64
  ####_var0#7143#7608::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7542 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7137#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7538 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7378#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7544 = GenSym(5)
      ##a2#7545 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7550 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7550 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7544::Float64,##a2#7545::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7534 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7534 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7551 = GenSym(8)
      ##a2#7552 = GenSym(9)
      ##div_a#7553 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7551::Float64,##a2#7552::Float64))
      ####afactor#7094#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7552::Float64))
      ####bfactor#7095#7555 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7551::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7552::Float64,##a2#7552::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7560 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7553::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7583 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7525#7583 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7566 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7525#7566 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7570 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7153#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7572 = GenSym(10)
      ####a2#7156#7573 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7578 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7161#7578 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7572::Float64,####a2#7156#7573::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7584 = GenSym(14)
      ##a2#7585 = GenSym(15)
      ##div_a#7586 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7584::Float64,##a2#7585::Float64))
      ####afactor#7094#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7585::Float64))
      ####bfactor#7095#7588 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7584::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7585::Float64,##a2#7585::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7593 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7593 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7586::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7595 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7596 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7595::Float64))
      ####G#7526#7597 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7530#7601 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7167#7171#7530#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7595::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7602 = GenSym(17)
      ##a2#7603 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7608 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7143#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7602::Float64,##a2#7603::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{}
  ##xs#7519::Tuple{Float64}
  ##xs#7520::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{}
  ##xs#7519::Tuple{Float64}
  ##xs#7520::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7531::Tuple{}
  ########a#7079#7081#7135#7532::Tuple{}
  ########b#7080#7082#7136#7533::Tuple{}
  ######_var0#7083#7137#7534::Tuple{}
  ########types#7070#7134#7138#7535::Tuple{Type{Int64}}
  ######a#7374#7376#7536::Tuple{}
  ######b#7375#7377#7537::Tuple{}
  ####_var0#7378#7538::Tuple{}
  ##xs#7539::Tuple{}
  ########a#7079#7081#7135#7540::Tuple{}
  ########b#7080#7082#7136#7541::Tuple{}
  ######_var0#7083#7137#7542::Tuple{}
  ########types#7070#7134#7138#7543::Tuple{Type{Int64}}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ######a#7084#7139#7546::Tuple{}
  ######b#7085#7140#7547::Tuple{}
  ######afactor#7086#7141#7548::Float64
  ######bfactor#7087#7142#7549::Float64
  ####_var0#7143#7550::Tuple{}
  ##a1#7551::Float64
  ##a2#7552::Float64
  ##div_a#7553::Float64
  ####afactor#7094#7554::Float64
  ####bfactor#7095#7555::Float64
  ########a#7084#7088#7096#7556::Tuple{}
  ########b#7085#7089#7097#7557::Tuple{}
  ########afactor#7086#7090#7098#7558::Float64
  ########bfactor#7087#7091#7099#7559::Float64
  ######_var0#7092#7100#7560::Tuple{}
  ######types#7093#7101#7561::Tuple{Type{Float64}}
  ##xs#7562::Tuple{}
  ##########types#7070#7134#7521#7522#7563::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7564::Tuple{}
  ########b#7080#7082#7524#7565::Tuple{}
  ######_var0#7083#7525#7566::Tuple{}
  ##xs#7567::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7568::Tuple{}
  ##########x#7069#7072#7076#7152#7569::Int64
  ########_var0#7073#7077#7153#7570::Tuple{}
  ##########types#7070#7074#7078#7154#7571::Tuple{Type{Int64}}
  ####a1#7155#7572::Float64
  ####a2#7156#7573::Float64
  ########a#7084#7139#7157#7574::Tuple{}
  ########b#7085#7140#7158#7575::Tuple{}
  ########afactor#7086#7141#7159#7576::Float64
  ########bfactor#7087#7142#7160#7577::Float64
  ######_var0#7143#7161#7578::Tuple{}
  ##xs#7579::Tuple{}
  ##########types#7070#7134#7521#7522#7580::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7581::Tuple{}
  ########b#7080#7082#7524#7582::Tuple{}
  ######_var0#7083#7525#7583::Tuple{}
  ##a1#7584::Float64
  ##a2#7585::Float64
  ##div_a#7586::Float64
  ####afactor#7094#7587::Float64
  ####bfactor#7095#7588::Float64
  ########a#7084#7088#7096#7589::Tuple{}
  ########b#7085#7089#7097#7590::Tuple{}
  ########afactor#7086#7090#7098#7591::Float64
  ########bfactor#7087#7091#7099#7592::Float64
  ######_var0#7092#7100#7593::Tuple{}
  ######types#7093#7101#7594::Tuple{Type{Float64}}
  ##sqrt_a#7595::Float64
  ##deriv#7596::Float64
  ####G#7526#7597::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7527#7598::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7528#7599::Tuple{}
  ##########x#7164#7166#7170#7529#7600::Float64
  ########_var0#7167#7171#7530#7601::Tuple{}
  ##a1#7602::Float64
  ##a2#7603::Float64
  ######a#7084#7139#7604::Tuple{}
  ######b#7085#7140#7605::Tuple{}
  ######afactor#7086#7141#7606::Float64
  ######bfactor#7087#7142#7607::Float64
  ####_var0#7143#7608::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7542 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7137#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7538 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7378#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7544 = GenSym(5)
      ##a2#7545 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7550 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7550 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7544::Float64,##a2#7545::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7534 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7534 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7551 = GenSym(8)
      ##a2#7552 = GenSym(9)
      ##div_a#7553 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7551::Float64,##a2#7552::Float64))
      ####afactor#7094#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7552::Float64))
      ####bfactor#7095#7555 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7551::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7552::Float64,##a2#7552::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7560 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7553::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7583 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7525#7583 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7566 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7525#7566 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7570 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7153#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7572 = GenSym(10)
      ####a2#7156#7573 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7578 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7161#7578 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7572::Float64,####a2#7156#7573::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7584 = GenSym(14)
      ##a2#7585 = GenSym(15)
      ##div_a#7586 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7584::Float64,##a2#7585::Float64))
      ####afactor#7094#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7585::Float64))
      ####bfactor#7095#7588 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7584::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7585::Float64,##a2#7585::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7593 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7593 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7586::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7595 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7596 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7595::Float64))
      ####G#7526#7597 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7530#7601 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7167#7171#7530#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7595::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7602 = GenSym(17)
      ##a2#7603 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7608 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7143#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7602::Float64,##a2#7603::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7531::Tuple{}
  ########a#7079#7081#7135#7532::Tuple{}
  ########b#7080#7082#7136#7533::Tuple{}
  ######_var0#7083#7137#7534::Tuple{}
  ########types#7070#7134#7138#7535::Tuple{Type{Int64}}
  ######a#7374#7376#7536::Tuple{}
  ######b#7375#7377#7537::Tuple{}
  ####_var0#7378#7538::Tuple{}
  ##xs#7539::Tuple{}
  ########a#7079#7081#7135#7540::Tuple{}
  ########b#7080#7082#7136#7541::Tuple{}
  ######_var0#7083#7137#7542::Tuple{}
  ########types#7070#7134#7138#7543::Tuple{Type{Int64}}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ######a#7084#7139#7546::Tuple{}
  ######b#7085#7140#7547::Tuple{}
  ######afactor#7086#7141#7548::Float64
  ######bfactor#7087#7142#7549::Float64
  ####_var0#7143#7550::Tuple{}
  ##a1#7551::Float64
  ##a2#7552::Float64
  ##div_a#7553::Float64
  ####afactor#7094#7554::Float64
  ####bfactor#7095#7555::Float64
  ########a#7084#7088#7096#7556::Tuple{}
  ########b#7085#7089#7097#7557::Tuple{}
  ########afactor#7086#7090#7098#7558::Float64
  ########bfactor#7087#7091#7099#7559::Float64
  ######_var0#7092#7100#7560::Tuple{}
  ######types#7093#7101#7561::Tuple{Type{Float64}}
  ##xs#7562::Tuple{}
  ##########types#7070#7134#7521#7522#7563::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7564::Tuple{}
  ########b#7080#7082#7524#7565::Tuple{}
  ######_var0#7083#7525#7566::Tuple{}
  ##xs#7567::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7568::Tuple{}
  ##########x#7069#7072#7076#7152#7569::Int64
  ########_var0#7073#7077#7153#7570::Tuple{}
  ##########types#7070#7074#7078#7154#7571::Tuple{Type{Int64}}
  ####a1#7155#7572::Float64
  ####a2#7156#7573::Float64
  ########a#7084#7139#7157#7574::Tuple{}
  ########b#7085#7140#7158#7575::Tuple{}
  ########afactor#7086#7141#7159#7576::Float64
  ########bfactor#7087#7142#7160#7577::Float64
  ######_var0#7143#7161#7578::Tuple{}
  ##xs#7579::Tuple{}
  ##########types#7070#7134#7521#7522#7580::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7581::Tuple{}
  ########b#7080#7082#7524#7582::Tuple{}
  ######_var0#7083#7525#7583::Tuple{}
  ##a1#7584::Float64
  ##a2#7585::Float64
  ##div_a#7586::Float64
  ####afactor#7094#7587::Float64
  ####bfactor#7095#7588::Float64
  ########a#7084#7088#7096#7589::Tuple{}
  ########b#7085#7089#7097#7590::Tuple{}
  ########afactor#7086#7090#7098#7591::Float64
  ########bfactor#7087#7091#7099#7592::Float64
  ######_var0#7092#7100#7593::Tuple{}
  ######types#7093#7101#7594::Tuple{Type{Float64}}
  ##sqrt_a#7595::Float64
  ##deriv#7596::Float64
  ####G#7526#7597::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7527#7598::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7528#7599::Tuple{}
  ##########x#7164#7166#7170#7529#7600::Float64
  ########_var0#7167#7171#7530#7601::Tuple{}
  ##a1#7602::Float64
  ##a2#7603::Float64
  ######a#7084#7139#7604::Tuple{}
  ######b#7085#7140#7605::Tuple{}
  ######afactor#7086#7141#7606::Float64
  ######bfactor#7087#7142#7607::Float64
  ####_var0#7143#7608::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7542 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7137#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7538 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7378#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7544 = GenSym(5)
      ##a2#7545 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7550 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7550 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7544::Float64,##a2#7545::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7534 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7534 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7551 = GenSym(8)
      ##a2#7552 = GenSym(9)
      ##div_a#7553 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7551::Float64,##a2#7552::Float64))
      ####afactor#7094#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7552::Float64))
      ####bfactor#7095#7555 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7551::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7552::Float64,##a2#7552::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7560 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7553::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7583 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7525#7583 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7566 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7525#7566 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7570 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7153#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7572 = GenSym(10)
      ####a2#7156#7573 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7578 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7161#7578 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7572::Float64,####a2#7156#7573::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7584 = GenSym(14)
      ##a2#7585 = GenSym(15)
      ##div_a#7586 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7584::Float64,##a2#7585::Float64))
      ####afactor#7094#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7585::Float64))
      ####bfactor#7095#7588 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7584::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7585::Float64,##a2#7585::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7593 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7593 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7586::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7595 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7596 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7595::Float64))
      ####G#7526#7597 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7530#7601 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7167#7171#7530#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7595::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7602 = GenSym(17)
      ##a2#7603 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7608 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7143#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7602::Float64,##a2#7603::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7531::Tuple{}
  ########a#7079#7081#7135#7532::Tuple{}
  ########b#7080#7082#7136#7533::Tuple{}
  ######_var0#7083#7137#7534::Tuple{}
  ########types#7070#7134#7138#7535::Tuple{Type{Int64}}
  ######a#7374#7376#7536::Tuple{}
  ######b#7375#7377#7537::Tuple{}
  ####_var0#7378#7538::Tuple{}
  ##xs#7539::Tuple{}
  ########a#7079#7081#7135#7540::Tuple{}
  ########b#7080#7082#7136#7541::Tuple{}
  ######_var0#7083#7137#7542::Tuple{}
  ########types#7070#7134#7138#7543::Tuple{Type{Int64}}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ######a#7084#7139#7546::Tuple{}
  ######b#7085#7140#7547::Tuple{}
  ######afactor#7086#7141#7548::Float64
  ######bfactor#7087#7142#7549::Float64
  ####_var0#7143#7550::Tuple{}
  ##a1#7551::Float64
  ##a2#7552::Float64
  ##div_a#7553::Float64
  ####afactor#7094#7554::Float64
  ####bfactor#7095#7555::Float64
  ########a#7084#7088#7096#7556::Tuple{}
  ########b#7085#7089#7097#7557::Tuple{}
  ########afactor#7086#7090#7098#7558::Float64
  ########bfactor#7087#7091#7099#7559::Float64
  ######_var0#7092#7100#7560::Tuple{}
  ######types#7093#7101#7561::Tuple{Type{Float64}}
  ##xs#7562::Tuple{}
  ##########types#7070#7134#7521#7522#7563::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7564::Tuple{}
  ########b#7080#7082#7524#7565::Tuple{}
  ######_var0#7083#7525#7566::Tuple{}
  ##xs#7567::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7568::Tuple{}
  ##########x#7069#7072#7076#7152#7569::Int64
  ########_var0#7073#7077#7153#7570::Tuple{}
  ##########types#7070#7074#7078#7154#7571::Tuple{Type{Int64}}
  ####a1#7155#7572::Float64
  ####a2#7156#7573::Float64
  ########a#7084#7139#7157#7574::Tuple{}
  ########b#7085#7140#7158#7575::Tuple{}
  ########afactor#7086#7141#7159#7576::Float64
  ########bfactor#7087#7142#7160#7577::Float64
  ######_var0#7143#7161#7578::Tuple{}
  ##xs#7579::Tuple{}
  ##########types#7070#7134#7521#7522#7580::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7581::Tuple{}
  ########b#7080#7082#7524#7582::Tuple{}
  ######_var0#7083#7525#7583::Tuple{}
  ##a1#7584::Float64
  ##a2#7585::Float64
  ##div_a#7586::Float64
  ####afactor#7094#7587::Float64
  ####bfactor#7095#7588::Float64
  ########a#7084#7088#7096#7589::Tuple{}
  ########b#7085#7089#7097#7590::Tuple{}
  ########afactor#7086#7090#7098#7591::Float64
  ########bfactor#7087#7091#7099#7592::Float64
  ######_var0#7092#7100#7593::Tuple{}
  ######types#7093#7101#7594::Tuple{Type{Float64}}
  ##sqrt_a#7595::Float64
  ##deriv#7596::Float64
  ####G#7526#7597::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7527#7598::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7528#7599::Tuple{}
  ##########x#7164#7166#7170#7529#7600::Float64
  ########_var0#7167#7171#7530#7601::Tuple{}
  ##a1#7602::Float64
  ##a2#7603::Float64
  ######a#7084#7139#7604::Tuple{}
  ######b#7085#7140#7605::Tuple{}
  ######afactor#7086#7141#7606::Float64
  ######bfactor#7087#7142#7607::Float64
  ####_var0#7143#7608::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7542 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7137#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7538 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7378#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7544 = GenSym(5)
      ##a2#7545 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7550 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7550 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7544::Float64,##a2#7545::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7534 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7534 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7551 = GenSym(8)
      ##a2#7552 = GenSym(9)
      ##div_a#7553 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7551::Float64,##a2#7552::Float64))
      ####afactor#7094#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7552::Float64))
      ####bfactor#7095#7555 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7551::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7552::Float64,##a2#7552::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7560 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7553::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7583 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7525#7583 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7566 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7525#7566 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7570 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7153#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7572 = GenSym(10)
      ####a2#7156#7573 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7578 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7161#7578 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7572::Float64,####a2#7156#7573::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7584 = GenSym(14)
      ##a2#7585 = GenSym(15)
      ##div_a#7586 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7584::Float64,##a2#7585::Float64))
      ####afactor#7094#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7585::Float64))
      ####bfactor#7095#7588 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7584::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7585::Float64,##a2#7585::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7593 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7593 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7586::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7595 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7596 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7595::Float64))
      ####G#7526#7597 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7530#7601 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7167#7171#7530#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7595::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7602 = GenSym(17)
      ##a2#7603 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7608 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7143#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7602::Float64,##a2#7603::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7531::Tuple{}
  ########a#7079#7081#7135#7532::Tuple{}
  ########b#7080#7082#7136#7533::Tuple{}
  ######_var0#7083#7137#7534::Tuple{}
  ########types#7070#7134#7138#7535::Tuple{Type{Int64}}
  ######a#7374#7376#7536::Tuple{}
  ######b#7375#7377#7537::Tuple{}
  ####_var0#7378#7538::Tuple{}
  ##xs#7539::Tuple{}
  ########a#7079#7081#7135#7540::Tuple{}
  ########b#7080#7082#7136#7541::Tuple{}
  ######_var0#7083#7137#7542::Tuple{}
  ########types#7070#7134#7138#7543::Tuple{Type{Int64}}
  ##a1#7544::Float64
  ##a2#7545::Float64
  ######a#7084#7139#7546::Tuple{}
  ######b#7085#7140#7547::Tuple{}
  ######afactor#7086#7141#7548::Float64
  ######bfactor#7087#7142#7549::Float64
  ####_var0#7143#7550::Tuple{}
  ##a1#7551::Float64
  ##a2#7552::Float64
  ##div_a#7553::Float64
  ####afactor#7094#7554::Float64
  ####bfactor#7095#7555::Float64
  ########a#7084#7088#7096#7556::Tuple{}
  ########b#7085#7089#7097#7557::Tuple{}
  ########afactor#7086#7090#7098#7558::Float64
  ########bfactor#7087#7091#7099#7559::Float64
  ######_var0#7092#7100#7560::Tuple{}
  ######types#7093#7101#7561::Tuple{Type{Float64}}
  ##xs#7562::Tuple{}
  ##########types#7070#7134#7521#7522#7563::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7564::Tuple{}
  ########b#7080#7082#7524#7565::Tuple{}
  ######_var0#7083#7525#7566::Tuple{}
  ##xs#7567::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7068#7071#7075#7151#7568::Tuple{}
  ##########x#7069#7072#7076#7152#7569::Int64
  ########_var0#7073#7077#7153#7570::Tuple{}
  ##########types#7070#7074#7078#7154#7571::Tuple{Type{Int64}}
  ####a1#7155#7572::Float64
  ####a2#7156#7573::Float64
  ########a#7084#7139#7157#7574::Tuple{}
  ########b#7085#7140#7158#7575::Tuple{}
  ########afactor#7086#7141#7159#7576::Float64
  ########bfactor#7087#7142#7160#7577::Float64
  ######_var0#7143#7161#7578::Tuple{}
  ##xs#7579::Tuple{}
  ##########types#7070#7134#7521#7522#7580::Tuple{Type{Int64}}
  ########a#7079#7081#7523#7581::Tuple{}
  ########b#7080#7082#7524#7582::Tuple{}
  ######_var0#7083#7525#7583::Tuple{}
  ##a1#7584::Float64
  ##a2#7585::Float64
  ##div_a#7586::Float64
  ####afactor#7094#7587::Float64
  ####bfactor#7095#7588::Float64
  ########a#7084#7088#7096#7589::Tuple{}
  ########b#7085#7089#7097#7590::Tuple{}
  ########afactor#7086#7090#7098#7591::Float64
  ########bfactor#7087#7091#7099#7592::Float64
  ######_var0#7092#7100#7593::Tuple{}
  ######types#7093#7101#7594::Tuple{Type{Float64}}
  ##sqrt_a#7595::Float64
  ##deriv#7596::Float64
  ####G#7526#7597::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7527#7598::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7528#7599::Tuple{}
  ##########x#7164#7166#7170#7529#7600::Float64
  ########_var0#7167#7171#7530#7601::Tuple{}
  ##a1#7602::Float64
  ##a2#7603::Float64
  ######a#7084#7139#7604::Tuple{}
  ######b#7085#7140#7605::Tuple{}
  ######afactor#7086#7141#7606::Float64
  ######bfactor#7087#7142#7607::Float64
  ####_var0#7143#7608::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 43:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 44:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7542 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7083#7137#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7538 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7378#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7544 = GenSym(5)
      ##a2#7545 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7550 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7550 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7544::Float64,##a2#7545::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7534 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7083#7137#7534 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7551 = GenSym(8)
      ##a2#7552 = GenSym(9)
      ##div_a#7553 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7551::Float64,##a2#7552::Float64))
      ####afactor#7094#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7552::Float64))
      ####bfactor#7095#7555 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7551::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7552::Float64,##a2#7552::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7560 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7092#7100#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7553::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 45:
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7583 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7083#7525#7583 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7525#7566 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7083#7525#7566 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7153#7570 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7153#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7155#7572 = GenSym(10)
      ####a2#7156#7573 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7161#7578 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7161#7578 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7155#7572::Float64,####a2#7156#7573::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7584 = GenSym(14)
      ##a2#7585 = GenSym(15)
      ##div_a#7586 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7584::Float64,##a2#7585::Float64))
      ####afactor#7094#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7585::Float64))
      ####bfactor#7095#7588 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7584::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7585::Float64,##a2#7585::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7593 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7092#7100#7593 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7586::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7595 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7596 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7595::Float64))
      ####G#7526#7597 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7530#7601 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7167#7171#7530#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7595::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 46:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7602 = GenSym(17)
      ##a2#7603 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7608 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7143#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7602::Float64,##a2#7603::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}
  n::Int64
  α::Int64
  β::Int64
  alpha_beta_sum::Int64
  alpha_beta_product::Int64
  numerator::Int64
  denominator::Int64
  left::Float64
  right::ANY
  ##xs#7609::Tuple{Int64}
  ##xs#7610::Tuple{}
  ##xs#7611::Tuple{}
  ##xs#7612::Tuple{Int64}
  ##xs#7613::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:β)::Int64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      alpha_beta_sum = (Base.box)(Base.Int,(Base.add_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      alpha_beta_product = (Base.box)(Int64,(Base.mul_int)(α::Int64,β::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      numerator = (Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(alpha_beta_sum::Int64,alpha_beta_sum::Int64)),(Base.box)(Base.Int,(Base.add_int)(1,alpha_beta_sum::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      denominator = (Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(n::Int64,alpha_beta_product::Int64)),(Base.box)(Base.Int,(Base.add_int)(alpha_beta_sum::Int64,2)))),(Base.box)(Base.Int,(Base.add_int)(alpha_beta_sum::Int64,3)))),(Base.box)(Base.Int,(Base.add_int)(alpha_beta_sum::Int64,n::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      left = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,numerator::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,denominator::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      right = (Base.box)(Base.Int,(Base.add_int)((Base.box)(Base.Int,(Base.add_int)((Base.box)(Int64,(Base.mul_int)(alpha_beta_sum::Int64,(Base.box)(Base.Int,(Base.add_int)((Base.box)(Int64,(Base.sub_int)(alpha_beta_sum::Int64,1)),(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))),(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(3,alpha_beta_product::Int64)),(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))),(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      right = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,right::Int64)),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(3,alpha_beta_product::Int64)),n::Int64)),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),(Base.box)(Float64,(Base.sitofp)(Float64,alpha_beta_sum::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(18,alpha_beta_product::Int64)),(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(alpha_beta_sum::Int64,alpha_beta_sum::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7614::Tuple{Float64}
  ##xs#7615::Tuple{}
  ##xs#7616::Tuple{}
  ##xs#7617::Tuple{Int64}
  ##xs#7618::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7658::Tuple{}
  ######b#7080#7082#7659::Tuple{}
  ####_var0#7083#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ######a#7084#7139#7663::Tuple{}
  ######b#7085#7140#7664::Tuple{}
  ######afactor#7086#7141#7665::Float64
  ######bfactor#7087#7142#7666::Float64
  ####_var0#7143#7667::Tuple{}
  ########types#7070#7134#7521#7668::Tuple{Type{Int64}}
  ##a#7669::Float64
  ##exp_a#7670::Float64
  ##deriv#7671::Float64
  ####G#7619#7672::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7673::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7674::Tuple{}
  ##########x#7164#7166#7170#7622#7675::Float64
  ########_var0#7167#7171#7623#7676::Tuple{}
  ##a1#7677::Float64
  ##a2#7678::Float64
  ######a#7084#7139#7679::Tuple{}
  ######b#7085#7140#7680::Tuple{}
  ######afactor#7086#7141#7681::Float64
  ######bfactor#7087#7142#7682::Float64
  ####_var0#7143#7683::Tuple{}
  ######types#7070#7134#7684::Tuple{Type{Int64}}
  ######types#7070#7134#7685::Tuple{Type{Int64}}
  ######types#7070#7134#7686::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7687::Tuple{}
  ########x#7069#7072#7076#7688::Int64
  ######_var0#7073#7077#7689::Tuple{}
  ########types#7070#7074#7078#7690::Tuple{Type{Int64}}
  ##xs#7691::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7624#7692::Float64
  ####a2#7625#7693::Float64
  ########a#7084#7139#7626#7694::Tuple{}
  ########b#7085#7140#7627#7695::Tuple{}
  ########afactor#7086#7141#7628#7696::Float64
  ########bfactor#7087#7142#7629#7697::Float64
  ######_var0#7143#7630#7698::Tuple{}
  ####a1#7631#7699::Float64
  ####a2#7632#7700::Float64
  ########a#7084#7139#7633#7701::Tuple{}
  ########b#7085#7140#7634#7702::Tuple{}
  ########afactor#7086#7141#7635#7703::Float64
  ########bfactor#7087#7142#7636#7704::Float64
  ######_var0#7143#7637#7705::Tuple{}
  ##a1#7706::Float64
  ##a2#7707::Float64
  ##div_a#7708::Float64
  ####afactor#7094#7709::Float64
  ####bfactor#7095#7710::Float64
  ########a#7084#7088#7096#7711::Tuple{}
  ########b#7085#7089#7097#7712::Tuple{}
  ########afactor#7086#7090#7098#7713::Float64
  ########bfactor#7087#7091#7099#7714::Float64
  ######_var0#7092#7100#7715::Tuple{}
  ######types#7093#7101#7716::Tuple{Type{Float64}}
  ##xs#7717::Tuple{}
  ##########tup#7068#7071#7075#7638#7718::Tuple{}
  ##########x#7069#7072#7076#7639#7719::Int64
  ########_var0#7073#7077#7640#7720::Tuple{}
  ##########types#7070#7074#7078#7641#7721::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7722::Tuple{}
  ########x#7069#7072#7643#7723::Int64
  ######_var0#7073#7644#7724::Tuple{}
  ########types#7070#7074#7645#7725::Tuple{Type{Int64}}
  ######types#7070#7373#7726::Tuple{Type{Int64}}
  ######types#7070#7134#7727::Tuple{Type{Int64}}
  ##a1#7728::Float64
  ##a2#7729::Float64
  ######a#7084#7139#7730::Tuple{}
  ######b#7085#7140#7731::Tuple{}
  ######afactor#7086#7141#7732::Float64
  ######bfactor#7087#7142#7733::Float64
  ####_var0#7143#7734::Tuple{}
  ##xs#7735::Tuple{}
  ########a#7079#7081#7135#7736::Tuple{}
  ########b#7080#7082#7136#7737::Tuple{}
  ######_var0#7083#7137#7738::Tuple{}
  ########types#7070#7134#7138#7739::Tuple{Type{Int64}}
  ##xs#7740::Tuple{Int64}
  ##########tup#7068#7071#7075#7650#7741::Tuple{}
  ##########x#7069#7072#7076#7651#7742::Int64
  ########_var0#7073#7077#7652#7743::Tuple{}
  ##########types#7070#7074#7078#7653#7744::Tuple{Type{Int64}}
  ########tup#7068#7071#7654#7745::Tuple{}
  ########x#7069#7072#7655#7746::Int64
  ######_var0#7073#7656#7747::Tuple{}
  ########types#7070#7074#7657#7748::Tuple{Type{Int64}}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ##div_a#7751::Float64
  ####afactor#7094#7752::Float64
  ####bfactor#7095#7753::Float64
  ########a#7084#7088#7096#7754::Tuple{}
  ########b#7085#7089#7097#7755::Tuple{}
  ########afactor#7086#7090#7098#7756::Float64
  ########bfactor#7087#7091#7099#7757::Float64
  ######_var0#7092#7100#7758::Tuple{}
  ######types#7093#7101#7759::Tuple{Type{Float64}}
  ######a#7374#7376#7760::Tuple{}
  ######b#7375#7377#7761::Tuple{}
  ####_var0#7378#7762::Tuple{}
  ##a#7763::Float64
  ##exp_a#7764::Float64
  ##deriv#7765::Float64
  ####G#7619#7766::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7767::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7768::Tuple{}
  ##########x#7164#7166#7170#7622#7769::Float64
  ########_var0#7167#7171#7623#7770::Tuple{}
  ##xs#7771::Tuple{}
  ##########tup#7068#7071#7075#7638#7772::Tuple{}
  ##########x#7069#7072#7076#7639#7773::Int64
  ########_var0#7073#7077#7640#7774::Tuple{}
  ##########types#7070#7074#7078#7641#7775::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7776::Tuple{}
  ########x#7069#7072#7643#7777::Int64
  ######_var0#7073#7644#7778::Tuple{}
  ########types#7070#7074#7645#7779::Tuple{Type{Int64}}
  ##a1#7780::Float64
  ##a2#7781::Float64
  ##div_a#7782::Float64
  ####afactor#7094#7783::Float64
  ####bfactor#7095#7784::Float64
  ########a#7084#7088#7096#7785::Tuple{}
  ########b#7085#7089#7097#7786::Tuple{}
  ########afactor#7086#7090#7098#7787::Float64
  ########bfactor#7087#7091#7099#7788::Float64
  ######_var0#7092#7100#7789::Tuple{}
  ######types#7093#7101#7790::Tuple{Type{Float64}}
  ######a#7374#7376#7791::Tuple{}
  ######b#7375#7377#7792::Tuple{}
  ####_var0#7378#7793::Tuple{}
  ##a1#7794::Float64
  ##a2#7795::Float64
  ######a#7084#7139#7796::Tuple{}
  ######b#7085#7140#7797::Tuple{}
  ######afactor#7086#7141#7798::Float64
  ######bfactor#7087#7142#7799::Float64
  ####_var0#7143#7800::Tuple{}
  ######types#7070#7373#7801::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7660 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(3)
      ##a2#7662 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7667 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7143#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7661::Float64,##a2#7662::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      ##a#7669 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7670 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7671 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7672 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7676 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7167#7171#7623#7676 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7670::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7677 = GenSym(6)
      ##a2#7678 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7683 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7677::Float64,##a2#7678::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7689 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7624#7692 = GenSym(8)
      ####a2#7625#7693 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7630#7698 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7630#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7624#7692::Float64,####a2#7625#7693::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7631#7699 = GenSym(11)
      ####a2#7632#7700 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7637#7705 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7143#7637#7705 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7631#7699::Float64,####a2#7632#7700::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7706 = GenSym(14)
      ##a2#7707 = GenSym(15)
      ##div_a#7708 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7706::Float64,##a2#7707::Float64))
      ####afactor#7094#7709 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7707::Float64))
      ####bfactor#7095#7710 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7706::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7707::Float64,##a2#7707::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7715 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7715 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7708::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7728 = GenSym(17)
      ##a2#7729 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7734 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7143#7734 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7728::Float64,##a2#7729::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7720 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7640#7720 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7724 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7644#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7738 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7137#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7652#7743 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7652#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7656#7747 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7656#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(22)
      ##a2#7750 = GenSym(23)
      ##div_a#7751 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7749::Float64,##a2#7750::Float64))
      ####afactor#7094#7752 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7750::Float64))
      ####bfactor#7095#7753 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7749::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7750::Float64,##a2#7750::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7758 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7751::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7762 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7378#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7774 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7640#7774 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7778 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7644#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7763 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7764 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7765 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7766 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7770 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7167#7171#7623#7770 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7764::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7780 = GenSym(26)
      ##a2#7781 = GenSym(27)
      ##div_a#7782 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7780::Float64,##a2#7781::Float64))
      ####afactor#7094#7783 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7781::Float64))
      ####bfactor#7095#7784 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7780::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7781::Float64,##a2#7781::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7789 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7789 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7782::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7793 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7378#7793 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7794 = GenSym(29)
      ##a2#7795 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7800 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7143#7800 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7794::Float64,##a2#7795::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7614::Tuple{Float64}
  ##xs#7615::Tuple{}
  ##xs#7616::Tuple{}
  ##xs#7617::Tuple{Int64}
  ##xs#7618::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7614::Tuple{Float64}
  ##xs#7615::Tuple{}
  ##xs#7616::Tuple{}
  ##xs#7617::Tuple{Int64}
  ##xs#7618::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7658::Tuple{}
  ######b#7080#7082#7659::Tuple{}
  ####_var0#7083#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ######a#7084#7139#7663::Tuple{}
  ######b#7085#7140#7664::Tuple{}
  ######afactor#7086#7141#7665::Float64
  ######bfactor#7087#7142#7666::Float64
  ####_var0#7143#7667::Tuple{}
  ########types#7070#7134#7521#7668::Tuple{Type{Int64}}
  ##a#7669::Float64
  ##exp_a#7670::Float64
  ##deriv#7671::Float64
  ####G#7619#7672::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7673::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7674::Tuple{}
  ##########x#7164#7166#7170#7622#7675::Float64
  ########_var0#7167#7171#7623#7676::Tuple{}
  ##a1#7677::Float64
  ##a2#7678::Float64
  ######a#7084#7139#7679::Tuple{}
  ######b#7085#7140#7680::Tuple{}
  ######afactor#7086#7141#7681::Float64
  ######bfactor#7087#7142#7682::Float64
  ####_var0#7143#7683::Tuple{}
  ######types#7070#7134#7684::Tuple{Type{Int64}}
  ######types#7070#7134#7685::Tuple{Type{Int64}}
  ######types#7070#7134#7686::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7687::Tuple{}
  ########x#7069#7072#7076#7688::Int64
  ######_var0#7073#7077#7689::Tuple{}
  ########types#7070#7074#7078#7690::Tuple{Type{Int64}}
  ##xs#7691::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7624#7692::Float64
  ####a2#7625#7693::Float64
  ########a#7084#7139#7626#7694::Tuple{}
  ########b#7085#7140#7627#7695::Tuple{}
  ########afactor#7086#7141#7628#7696::Float64
  ########bfactor#7087#7142#7629#7697::Float64
  ######_var0#7143#7630#7698::Tuple{}
  ####a1#7631#7699::Float64
  ####a2#7632#7700::Float64
  ########a#7084#7139#7633#7701::Tuple{}
  ########b#7085#7140#7634#7702::Tuple{}
  ########afactor#7086#7141#7635#7703::Float64
  ########bfactor#7087#7142#7636#7704::Float64
  ######_var0#7143#7637#7705::Tuple{}
  ##a1#7706::Float64
  ##a2#7707::Float64
  ##div_a#7708::Float64
  ####afactor#7094#7709::Float64
  ####bfactor#7095#7710::Float64
  ########a#7084#7088#7096#7711::Tuple{}
  ########b#7085#7089#7097#7712::Tuple{}
  ########afactor#7086#7090#7098#7713::Float64
  ########bfactor#7087#7091#7099#7714::Float64
  ######_var0#7092#7100#7715::Tuple{}
  ######types#7093#7101#7716::Tuple{Type{Float64}}
  ##xs#7717::Tuple{}
  ##########tup#7068#7071#7075#7638#7718::Tuple{}
  ##########x#7069#7072#7076#7639#7719::Int64
  ########_var0#7073#7077#7640#7720::Tuple{}
  ##########types#7070#7074#7078#7641#7721::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7722::Tuple{}
  ########x#7069#7072#7643#7723::Int64
  ######_var0#7073#7644#7724::Tuple{}
  ########types#7070#7074#7645#7725::Tuple{Type{Int64}}
  ######types#7070#7373#7726::Tuple{Type{Int64}}
  ######types#7070#7134#7727::Tuple{Type{Int64}}
  ##a1#7728::Float64
  ##a2#7729::Float64
  ######a#7084#7139#7730::Tuple{}
  ######b#7085#7140#7731::Tuple{}
  ######afactor#7086#7141#7732::Float64
  ######bfactor#7087#7142#7733::Float64
  ####_var0#7143#7734::Tuple{}
  ##xs#7735::Tuple{}
  ########a#7079#7081#7135#7736::Tuple{}
  ########b#7080#7082#7136#7737::Tuple{}
  ######_var0#7083#7137#7738::Tuple{}
  ########types#7070#7134#7138#7739::Tuple{Type{Int64}}
  ##xs#7740::Tuple{Int64}
  ##########tup#7068#7071#7075#7650#7741::Tuple{}
  ##########x#7069#7072#7076#7651#7742::Int64
  ########_var0#7073#7077#7652#7743::Tuple{}
  ##########types#7070#7074#7078#7653#7744::Tuple{Type{Int64}}
  ########tup#7068#7071#7654#7745::Tuple{}
  ########x#7069#7072#7655#7746::Int64
  ######_var0#7073#7656#7747::Tuple{}
  ########types#7070#7074#7657#7748::Tuple{Type{Int64}}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ##div_a#7751::Float64
  ####afactor#7094#7752::Float64
  ####bfactor#7095#7753::Float64
  ########a#7084#7088#7096#7754::Tuple{}
  ########b#7085#7089#7097#7755::Tuple{}
  ########afactor#7086#7090#7098#7756::Float64
  ########bfactor#7087#7091#7099#7757::Float64
  ######_var0#7092#7100#7758::Tuple{}
  ######types#7093#7101#7759::Tuple{Type{Float64}}
  ######a#7374#7376#7760::Tuple{}
  ######b#7375#7377#7761::Tuple{}
  ####_var0#7378#7762::Tuple{}
  ##a#7763::Float64
  ##exp_a#7764::Float64
  ##deriv#7765::Float64
  ####G#7619#7766::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7767::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7768::Tuple{}
  ##########x#7164#7166#7170#7622#7769::Float64
  ########_var0#7167#7171#7623#7770::Tuple{}
  ##xs#7771::Tuple{}
  ##########tup#7068#7071#7075#7638#7772::Tuple{}
  ##########x#7069#7072#7076#7639#7773::Int64
  ########_var0#7073#7077#7640#7774::Tuple{}
  ##########types#7070#7074#7078#7641#7775::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7776::Tuple{}
  ########x#7069#7072#7643#7777::Int64
  ######_var0#7073#7644#7778::Tuple{}
  ########types#7070#7074#7645#7779::Tuple{Type{Int64}}
  ##a1#7780::Float64
  ##a2#7781::Float64
  ##div_a#7782::Float64
  ####afactor#7094#7783::Float64
  ####bfactor#7095#7784::Float64
  ########a#7084#7088#7096#7785::Tuple{}
  ########b#7085#7089#7097#7786::Tuple{}
  ########afactor#7086#7090#7098#7787::Float64
  ########bfactor#7087#7091#7099#7788::Float64
  ######_var0#7092#7100#7789::Tuple{}
  ######types#7093#7101#7790::Tuple{Type{Float64}}
  ######a#7374#7376#7791::Tuple{}
  ######b#7375#7377#7792::Tuple{}
  ####_var0#7378#7793::Tuple{}
  ##a1#7794::Float64
  ##a2#7795::Float64
  ######a#7084#7139#7796::Tuple{}
  ######b#7085#7140#7797::Tuple{}
  ######afactor#7086#7141#7798::Float64
  ######bfactor#7087#7142#7799::Float64
  ####_var0#7143#7800::Tuple{}
  ######types#7070#7373#7801::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7660 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(3)
      ##a2#7662 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7667 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7143#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7661::Float64,##a2#7662::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      ##a#7669 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7670 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7671 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7672 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7676 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7167#7171#7623#7676 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7670::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7677 = GenSym(6)
      ##a2#7678 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7683 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7677::Float64,##a2#7678::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7689 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7624#7692 = GenSym(8)
      ####a2#7625#7693 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7630#7698 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7630#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7624#7692::Float64,####a2#7625#7693::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7631#7699 = GenSym(11)
      ####a2#7632#7700 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7637#7705 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7143#7637#7705 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7631#7699::Float64,####a2#7632#7700::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7706 = GenSym(14)
      ##a2#7707 = GenSym(15)
      ##div_a#7708 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7706::Float64,##a2#7707::Float64))
      ####afactor#7094#7709 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7707::Float64))
      ####bfactor#7095#7710 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7706::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7707::Float64,##a2#7707::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7715 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7715 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7708::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7728 = GenSym(17)
      ##a2#7729 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7734 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7143#7734 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7728::Float64,##a2#7729::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7720 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7640#7720 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7724 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7644#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7738 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7137#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7652#7743 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7652#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7656#7747 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7656#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(22)
      ##a2#7750 = GenSym(23)
      ##div_a#7751 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7749::Float64,##a2#7750::Float64))
      ####afactor#7094#7752 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7750::Float64))
      ####bfactor#7095#7753 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7749::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7750::Float64,##a2#7750::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7758 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7751::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7762 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7378#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7774 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7640#7774 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7778 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7644#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7763 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7764 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7765 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7766 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7770 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7167#7171#7623#7770 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7764::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7780 = GenSym(26)
      ##a2#7781 = GenSym(27)
      ##div_a#7782 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7780::Float64,##a2#7781::Float64))
      ####afactor#7094#7783 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7781::Float64))
      ####bfactor#7095#7784 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7780::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7781::Float64,##a2#7781::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7789 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7789 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7782::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7793 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7378#7793 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7794 = GenSym(29)
      ##a2#7795 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7800 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7143#7800 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7794::Float64,##a2#7795::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7658::Tuple{}
  ######b#7080#7082#7659::Tuple{}
  ####_var0#7083#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ######a#7084#7139#7663::Tuple{}
  ######b#7085#7140#7664::Tuple{}
  ######afactor#7086#7141#7665::Float64
  ######bfactor#7087#7142#7666::Float64
  ####_var0#7143#7667::Tuple{}
  ########types#7070#7134#7521#7668::Tuple{Type{Int64}}
  ##a#7669::Float64
  ##exp_a#7670::Float64
  ##deriv#7671::Float64
  ####G#7619#7672::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7673::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7674::Tuple{}
  ##########x#7164#7166#7170#7622#7675::Float64
  ########_var0#7167#7171#7623#7676::Tuple{}
  ##a1#7677::Float64
  ##a2#7678::Float64
  ######a#7084#7139#7679::Tuple{}
  ######b#7085#7140#7680::Tuple{}
  ######afactor#7086#7141#7681::Float64
  ######bfactor#7087#7142#7682::Float64
  ####_var0#7143#7683::Tuple{}
  ######types#7070#7134#7684::Tuple{Type{Int64}}
  ######types#7070#7134#7685::Tuple{Type{Int64}}
  ######types#7070#7134#7686::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7687::Tuple{}
  ########x#7069#7072#7076#7688::Int64
  ######_var0#7073#7077#7689::Tuple{}
  ########types#7070#7074#7078#7690::Tuple{Type{Int64}}
  ##xs#7691::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7624#7692::Float64
  ####a2#7625#7693::Float64
  ########a#7084#7139#7626#7694::Tuple{}
  ########b#7085#7140#7627#7695::Tuple{}
  ########afactor#7086#7141#7628#7696::Float64
  ########bfactor#7087#7142#7629#7697::Float64
  ######_var0#7143#7630#7698::Tuple{}
  ####a1#7631#7699::Float64
  ####a2#7632#7700::Float64
  ########a#7084#7139#7633#7701::Tuple{}
  ########b#7085#7140#7634#7702::Tuple{}
  ########afactor#7086#7141#7635#7703::Float64
  ########bfactor#7087#7142#7636#7704::Float64
  ######_var0#7143#7637#7705::Tuple{}
  ##a1#7706::Float64
  ##a2#7707::Float64
  ##div_a#7708::Float64
  ####afactor#7094#7709::Float64
  ####bfactor#7095#7710::Float64
  ########a#7084#7088#7096#7711::Tuple{}
  ########b#7085#7089#7097#7712::Tuple{}
  ########afactor#7086#7090#7098#7713::Float64
  ########bfactor#7087#7091#7099#7714::Float64
  ######_var0#7092#7100#7715::Tuple{}
  ######types#7093#7101#7716::Tuple{Type{Float64}}
  ##xs#7717::Tuple{}
  ##########tup#7068#7071#7075#7638#7718::Tuple{}
  ##########x#7069#7072#7076#7639#7719::Int64
  ########_var0#7073#7077#7640#7720::Tuple{}
  ##########types#7070#7074#7078#7641#7721::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7722::Tuple{}
  ########x#7069#7072#7643#7723::Int64
  ######_var0#7073#7644#7724::Tuple{}
  ########types#7070#7074#7645#7725::Tuple{Type{Int64}}
  ######types#7070#7373#7726::Tuple{Type{Int64}}
  ######types#7070#7134#7727::Tuple{Type{Int64}}
  ##a1#7728::Float64
  ##a2#7729::Float64
  ######a#7084#7139#7730::Tuple{}
  ######b#7085#7140#7731::Tuple{}
  ######afactor#7086#7141#7732::Float64
  ######bfactor#7087#7142#7733::Float64
  ####_var0#7143#7734::Tuple{}
  ##xs#7735::Tuple{}
  ########a#7079#7081#7135#7736::Tuple{}
  ########b#7080#7082#7136#7737::Tuple{}
  ######_var0#7083#7137#7738::Tuple{}
  ########types#7070#7134#7138#7739::Tuple{Type{Int64}}
  ##xs#7740::Tuple{Int64}
  ##########tup#7068#7071#7075#7650#7741::Tuple{}
  ##########x#7069#7072#7076#7651#7742::Int64
  ########_var0#7073#7077#7652#7743::Tuple{}
  ##########types#7070#7074#7078#7653#7744::Tuple{Type{Int64}}
  ########tup#7068#7071#7654#7745::Tuple{}
  ########x#7069#7072#7655#7746::Int64
  ######_var0#7073#7656#7747::Tuple{}
  ########types#7070#7074#7657#7748::Tuple{Type{Int64}}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ##div_a#7751::Float64
  ####afactor#7094#7752::Float64
  ####bfactor#7095#7753::Float64
  ########a#7084#7088#7096#7754::Tuple{}
  ########b#7085#7089#7097#7755::Tuple{}
  ########afactor#7086#7090#7098#7756::Float64
  ########bfactor#7087#7091#7099#7757::Float64
  ######_var0#7092#7100#7758::Tuple{}
  ######types#7093#7101#7759::Tuple{Type{Float64}}
  ######a#7374#7376#7760::Tuple{}
  ######b#7375#7377#7761::Tuple{}
  ####_var0#7378#7762::Tuple{}
  ##a#7763::Float64
  ##exp_a#7764::Float64
  ##deriv#7765::Float64
  ####G#7619#7766::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7767::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7768::Tuple{}
  ##########x#7164#7166#7170#7622#7769::Float64
  ########_var0#7167#7171#7623#7770::Tuple{}
  ##xs#7771::Tuple{}
  ##########tup#7068#7071#7075#7638#7772::Tuple{}
  ##########x#7069#7072#7076#7639#7773::Int64
  ########_var0#7073#7077#7640#7774::Tuple{}
  ##########types#7070#7074#7078#7641#7775::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7776::Tuple{}
  ########x#7069#7072#7643#7777::Int64
  ######_var0#7073#7644#7778::Tuple{}
  ########types#7070#7074#7645#7779::Tuple{Type{Int64}}
  ##a1#7780::Float64
  ##a2#7781::Float64
  ##div_a#7782::Float64
  ####afactor#7094#7783::Float64
  ####bfactor#7095#7784::Float64
  ########a#7084#7088#7096#7785::Tuple{}
  ########b#7085#7089#7097#7786::Tuple{}
  ########afactor#7086#7090#7098#7787::Float64
  ########bfactor#7087#7091#7099#7788::Float64
  ######_var0#7092#7100#7789::Tuple{}
  ######types#7093#7101#7790::Tuple{Type{Float64}}
  ######a#7374#7376#7791::Tuple{}
  ######b#7375#7377#7792::Tuple{}
  ####_var0#7378#7793::Tuple{}
  ##a1#7794::Float64
  ##a2#7795::Float64
  ######a#7084#7139#7796::Tuple{}
  ######b#7085#7140#7797::Tuple{}
  ######afactor#7086#7141#7798::Float64
  ######bfactor#7087#7142#7799::Float64
  ####_var0#7143#7800::Tuple{}
  ######types#7070#7373#7801::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7660 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(3)
      ##a2#7662 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7667 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7143#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7661::Float64,##a2#7662::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      ##a#7669 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7670 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7671 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7672 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7676 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7167#7171#7623#7676 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7670::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7677 = GenSym(6)
      ##a2#7678 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7683 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7677::Float64,##a2#7678::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7689 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7624#7692 = GenSym(8)
      ####a2#7625#7693 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7630#7698 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7630#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7624#7692::Float64,####a2#7625#7693::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7631#7699 = GenSym(11)
      ####a2#7632#7700 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7637#7705 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7143#7637#7705 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7631#7699::Float64,####a2#7632#7700::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7706 = GenSym(14)
      ##a2#7707 = GenSym(15)
      ##div_a#7708 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7706::Float64,##a2#7707::Float64))
      ####afactor#7094#7709 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7707::Float64))
      ####bfactor#7095#7710 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7706::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7707::Float64,##a2#7707::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7715 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7715 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7708::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7728 = GenSym(17)
      ##a2#7729 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7734 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7143#7734 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7728::Float64,##a2#7729::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7720 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7640#7720 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7724 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7644#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7738 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7137#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7652#7743 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7652#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7656#7747 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7656#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(22)
      ##a2#7750 = GenSym(23)
      ##div_a#7751 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7749::Float64,##a2#7750::Float64))
      ####afactor#7094#7752 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7750::Float64))
      ####bfactor#7095#7753 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7749::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7750::Float64,##a2#7750::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7758 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7751::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7762 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7378#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7774 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7640#7774 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7778 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7644#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7763 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7764 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7765 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7766 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7770 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7167#7171#7623#7770 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7764::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7780 = GenSym(26)
      ##a2#7781 = GenSym(27)
      ##div_a#7782 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7780::Float64,##a2#7781::Float64))
      ####afactor#7094#7783 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7781::Float64))
      ####bfactor#7095#7784 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7780::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7781::Float64,##a2#7781::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7789 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7789 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7782::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7793 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7378#7793 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7794 = GenSym(29)
      ##a2#7795 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7800 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7143#7800 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7794::Float64,##a2#7795::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7658::Tuple{}
  ######b#7080#7082#7659::Tuple{}
  ####_var0#7083#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ######a#7084#7139#7663::Tuple{}
  ######b#7085#7140#7664::Tuple{}
  ######afactor#7086#7141#7665::Float64
  ######bfactor#7087#7142#7666::Float64
  ####_var0#7143#7667::Tuple{}
  ########types#7070#7134#7521#7668::Tuple{Type{Int64}}
  ##a#7669::Float64
  ##exp_a#7670::Float64
  ##deriv#7671::Float64
  ####G#7619#7672::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7673::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7674::Tuple{}
  ##########x#7164#7166#7170#7622#7675::Float64
  ########_var0#7167#7171#7623#7676::Tuple{}
  ##a1#7677::Float64
  ##a2#7678::Float64
  ######a#7084#7139#7679::Tuple{}
  ######b#7085#7140#7680::Tuple{}
  ######afactor#7086#7141#7681::Float64
  ######bfactor#7087#7142#7682::Float64
  ####_var0#7143#7683::Tuple{}
  ######types#7070#7134#7684::Tuple{Type{Int64}}
  ######types#7070#7134#7685::Tuple{Type{Int64}}
  ######types#7070#7134#7686::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7687::Tuple{}
  ########x#7069#7072#7076#7688::Int64
  ######_var0#7073#7077#7689::Tuple{}
  ########types#7070#7074#7078#7690::Tuple{Type{Int64}}
  ##xs#7691::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7624#7692::Float64
  ####a2#7625#7693::Float64
  ########a#7084#7139#7626#7694::Tuple{}
  ########b#7085#7140#7627#7695::Tuple{}
  ########afactor#7086#7141#7628#7696::Float64
  ########bfactor#7087#7142#7629#7697::Float64
  ######_var0#7143#7630#7698::Tuple{}
  ####a1#7631#7699::Float64
  ####a2#7632#7700::Float64
  ########a#7084#7139#7633#7701::Tuple{}
  ########b#7085#7140#7634#7702::Tuple{}
  ########afactor#7086#7141#7635#7703::Float64
  ########bfactor#7087#7142#7636#7704::Float64
  ######_var0#7143#7637#7705::Tuple{}
  ##a1#7706::Float64
  ##a2#7707::Float64
  ##div_a#7708::Float64
  ####afactor#7094#7709::Float64
  ####bfactor#7095#7710::Float64
  ########a#7084#7088#7096#7711::Tuple{}
  ########b#7085#7089#7097#7712::Tuple{}
  ########afactor#7086#7090#7098#7713::Float64
  ########bfactor#7087#7091#7099#7714::Float64
  ######_var0#7092#7100#7715::Tuple{}
  ######types#7093#7101#7716::Tuple{Type{Float64}}
  ##xs#7717::Tuple{}
  ##########tup#7068#7071#7075#7638#7718::Tuple{}
  ##########x#7069#7072#7076#7639#7719::Int64
  ########_var0#7073#7077#7640#7720::Tuple{}
  ##########types#7070#7074#7078#7641#7721::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7722::Tuple{}
  ########x#7069#7072#7643#7723::Int64
  ######_var0#7073#7644#7724::Tuple{}
  ########types#7070#7074#7645#7725::Tuple{Type{Int64}}
  ######types#7070#7373#7726::Tuple{Type{Int64}}
  ######types#7070#7134#7727::Tuple{Type{Int64}}
  ##a1#7728::Float64
  ##a2#7729::Float64
  ######a#7084#7139#7730::Tuple{}
  ######b#7085#7140#7731::Tuple{}
  ######afactor#7086#7141#7732::Float64
  ######bfactor#7087#7142#7733::Float64
  ####_var0#7143#7734::Tuple{}
  ##xs#7735::Tuple{}
  ########a#7079#7081#7135#7736::Tuple{}
  ########b#7080#7082#7136#7737::Tuple{}
  ######_var0#7083#7137#7738::Tuple{}
  ########types#7070#7134#7138#7739::Tuple{Type{Int64}}
  ##xs#7740::Tuple{Int64}
  ##########tup#7068#7071#7075#7650#7741::Tuple{}
  ##########x#7069#7072#7076#7651#7742::Int64
  ########_var0#7073#7077#7652#7743::Tuple{}
  ##########types#7070#7074#7078#7653#7744::Tuple{Type{Int64}}
  ########tup#7068#7071#7654#7745::Tuple{}
  ########x#7069#7072#7655#7746::Int64
  ######_var0#7073#7656#7747::Tuple{}
  ########types#7070#7074#7657#7748::Tuple{Type{Int64}}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ##div_a#7751::Float64
  ####afactor#7094#7752::Float64
  ####bfactor#7095#7753::Float64
  ########a#7084#7088#7096#7754::Tuple{}
  ########b#7085#7089#7097#7755::Tuple{}
  ########afactor#7086#7090#7098#7756::Float64
  ########bfactor#7087#7091#7099#7757::Float64
  ######_var0#7092#7100#7758::Tuple{}
  ######types#7093#7101#7759::Tuple{Type{Float64}}
  ######a#7374#7376#7760::Tuple{}
  ######b#7375#7377#7761::Tuple{}
  ####_var0#7378#7762::Tuple{}
  ##a#7763::Float64
  ##exp_a#7764::Float64
  ##deriv#7765::Float64
  ####G#7619#7766::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7767::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7768::Tuple{}
  ##########x#7164#7166#7170#7622#7769::Float64
  ########_var0#7167#7171#7623#7770::Tuple{}
  ##xs#7771::Tuple{}
  ##########tup#7068#7071#7075#7638#7772::Tuple{}
  ##########x#7069#7072#7076#7639#7773::Int64
  ########_var0#7073#7077#7640#7774::Tuple{}
  ##########types#7070#7074#7078#7641#7775::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7776::Tuple{}
  ########x#7069#7072#7643#7777::Int64
  ######_var0#7073#7644#7778::Tuple{}
  ########types#7070#7074#7645#7779::Tuple{Type{Int64}}
  ##a1#7780::Float64
  ##a2#7781::Float64
  ##div_a#7782::Float64
  ####afactor#7094#7783::Float64
  ####bfactor#7095#7784::Float64
  ########a#7084#7088#7096#7785::Tuple{}
  ########b#7085#7089#7097#7786::Tuple{}
  ########afactor#7086#7090#7098#7787::Float64
  ########bfactor#7087#7091#7099#7788::Float64
  ######_var0#7092#7100#7789::Tuple{}
  ######types#7093#7101#7790::Tuple{Type{Float64}}
  ######a#7374#7376#7791::Tuple{}
  ######b#7375#7377#7792::Tuple{}
  ####_var0#7378#7793::Tuple{}
  ##a1#7794::Float64
  ##a2#7795::Float64
  ######a#7084#7139#7796::Tuple{}
  ######b#7085#7140#7797::Tuple{}
  ######afactor#7086#7141#7798::Float64
  ######bfactor#7087#7142#7799::Float64
  ####_var0#7143#7800::Tuple{}
  ######types#7070#7373#7801::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7660 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(3)
      ##a2#7662 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7667 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7143#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7661::Float64,##a2#7662::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      ##a#7669 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7670 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7671 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7672 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7676 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7167#7171#7623#7676 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7670::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7677 = GenSym(6)
      ##a2#7678 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7683 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7677::Float64,##a2#7678::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7689 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7624#7692 = GenSym(8)
      ####a2#7625#7693 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7630#7698 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7630#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7624#7692::Float64,####a2#7625#7693::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7631#7699 = GenSym(11)
      ####a2#7632#7700 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7637#7705 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7143#7637#7705 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7631#7699::Float64,####a2#7632#7700::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7706 = GenSym(14)
      ##a2#7707 = GenSym(15)
      ##div_a#7708 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7706::Float64,##a2#7707::Float64))
      ####afactor#7094#7709 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7707::Float64))
      ####bfactor#7095#7710 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7706::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7707::Float64,##a2#7707::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7715 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7715 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7708::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7728 = GenSym(17)
      ##a2#7729 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7734 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7143#7734 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7728::Float64,##a2#7729::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7720 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7640#7720 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7724 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7644#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7738 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7137#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7652#7743 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7652#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7656#7747 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7656#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(22)
      ##a2#7750 = GenSym(23)
      ##div_a#7751 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7749::Float64,##a2#7750::Float64))
      ####afactor#7094#7752 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7750::Float64))
      ####bfactor#7095#7753 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7749::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7750::Float64,##a2#7750::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7758 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7751::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7762 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7378#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7774 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7640#7774 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7778 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7644#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7763 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7764 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7765 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7766 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7770 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7167#7171#7623#7770 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7764::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7780 = GenSym(26)
      ##a2#7781 = GenSym(27)
      ##div_a#7782 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7780::Float64,##a2#7781::Float64))
      ####afactor#7094#7783 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7781::Float64))
      ####bfactor#7095#7784 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7780::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7781::Float64,##a2#7781::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7789 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7789 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7782::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7793 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7378#7793 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7794 = GenSym(29)
      ##a2#7795 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7800 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7143#7800 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7794::Float64,##a2#7795::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7079#7081#7658::Tuple{}
  ######b#7080#7082#7659::Tuple{}
  ####_var0#7083#7660::Tuple{}
  ##a1#7661::Float64
  ##a2#7662::Float64
  ######a#7084#7139#7663::Tuple{}
  ######b#7085#7140#7664::Tuple{}
  ######afactor#7086#7141#7665::Float64
  ######bfactor#7087#7142#7666::Float64
  ####_var0#7143#7667::Tuple{}
  ########types#7070#7134#7521#7668::Tuple{Type{Int64}}
  ##a#7669::Float64
  ##exp_a#7670::Float64
  ##deriv#7671::Float64
  ####G#7619#7672::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7673::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7674::Tuple{}
  ##########x#7164#7166#7170#7622#7675::Float64
  ########_var0#7167#7171#7623#7676::Tuple{}
  ##a1#7677::Float64
  ##a2#7678::Float64
  ######a#7084#7139#7679::Tuple{}
  ######b#7085#7140#7680::Tuple{}
  ######afactor#7086#7141#7681::Float64
  ######bfactor#7087#7142#7682::Float64
  ####_var0#7143#7683::Tuple{}
  ######types#7070#7134#7684::Tuple{Type{Int64}}
  ######types#7070#7134#7685::Tuple{Type{Int64}}
  ######types#7070#7134#7686::Tuple{Type{Int64}}
  ########tup#7068#7071#7075#7687::Tuple{}
  ########x#7069#7072#7076#7688::Int64
  ######_var0#7073#7077#7689::Tuple{}
  ########types#7070#7074#7078#7690::Tuple{Type{Int64}}
  ##xs#7691::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7624#7692::Float64
  ####a2#7625#7693::Float64
  ########a#7084#7139#7626#7694::Tuple{}
  ########b#7085#7140#7627#7695::Tuple{}
  ########afactor#7086#7141#7628#7696::Float64
  ########bfactor#7087#7142#7629#7697::Float64
  ######_var0#7143#7630#7698::Tuple{}
  ####a1#7631#7699::Float64
  ####a2#7632#7700::Float64
  ########a#7084#7139#7633#7701::Tuple{}
  ########b#7085#7140#7634#7702::Tuple{}
  ########afactor#7086#7141#7635#7703::Float64
  ########bfactor#7087#7142#7636#7704::Float64
  ######_var0#7143#7637#7705::Tuple{}
  ##a1#7706::Float64
  ##a2#7707::Float64
  ##div_a#7708::Float64
  ####afactor#7094#7709::Float64
  ####bfactor#7095#7710::Float64
  ########a#7084#7088#7096#7711::Tuple{}
  ########b#7085#7089#7097#7712::Tuple{}
  ########afactor#7086#7090#7098#7713::Float64
  ########bfactor#7087#7091#7099#7714::Float64
  ######_var0#7092#7100#7715::Tuple{}
  ######types#7093#7101#7716::Tuple{Type{Float64}}
  ##xs#7717::Tuple{}
  ##########tup#7068#7071#7075#7638#7718::Tuple{}
  ##########x#7069#7072#7076#7639#7719::Int64
  ########_var0#7073#7077#7640#7720::Tuple{}
  ##########types#7070#7074#7078#7641#7721::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7722::Tuple{}
  ########x#7069#7072#7643#7723::Int64
  ######_var0#7073#7644#7724::Tuple{}
  ########types#7070#7074#7645#7725::Tuple{Type{Int64}}
  ######types#7070#7373#7726::Tuple{Type{Int64}}
  ######types#7070#7134#7727::Tuple{Type{Int64}}
  ##a1#7728::Float64
  ##a2#7729::Float64
  ######a#7084#7139#7730::Tuple{}
  ######b#7085#7140#7731::Tuple{}
  ######afactor#7086#7141#7732::Float64
  ######bfactor#7087#7142#7733::Float64
  ####_var0#7143#7734::Tuple{}
  ##xs#7735::Tuple{}
  ########a#7079#7081#7135#7736::Tuple{}
  ########b#7080#7082#7136#7737::Tuple{}
  ######_var0#7083#7137#7738::Tuple{}
  ########types#7070#7134#7138#7739::Tuple{Type{Int64}}
  ##xs#7740::Tuple{Int64}
  ##########tup#7068#7071#7075#7650#7741::Tuple{}
  ##########x#7069#7072#7076#7651#7742::Int64
  ########_var0#7073#7077#7652#7743::Tuple{}
  ##########types#7070#7074#7078#7653#7744::Tuple{Type{Int64}}
  ########tup#7068#7071#7654#7745::Tuple{}
  ########x#7069#7072#7655#7746::Int64
  ######_var0#7073#7656#7747::Tuple{}
  ########types#7070#7074#7657#7748::Tuple{Type{Int64}}
  ##a1#7749::Float64
  ##a2#7750::Float64
  ##div_a#7751::Float64
  ####afactor#7094#7752::Float64
  ####bfactor#7095#7753::Float64
  ########a#7084#7088#7096#7754::Tuple{}
  ########b#7085#7089#7097#7755::Tuple{}
  ########afactor#7086#7090#7098#7756::Float64
  ########bfactor#7087#7091#7099#7757::Float64
  ######_var0#7092#7100#7758::Tuple{}
  ######types#7093#7101#7759::Tuple{Type{Float64}}
  ######a#7374#7376#7760::Tuple{}
  ######b#7375#7377#7761::Tuple{}
  ####_var0#7378#7762::Tuple{}
  ##a#7763::Float64
  ##exp_a#7764::Float64
  ##deriv#7765::Float64
  ####G#7619#7766::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7162#7168#7620#7767::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7163#7165#7169#7621#7768::Tuple{}
  ##########x#7164#7166#7170#7622#7769::Float64
  ########_var0#7167#7171#7623#7770::Tuple{}
  ##xs#7771::Tuple{}
  ##########tup#7068#7071#7075#7638#7772::Tuple{}
  ##########x#7069#7072#7076#7639#7773::Int64
  ########_var0#7073#7077#7640#7774::Tuple{}
  ##########types#7070#7074#7078#7641#7775::Tuple{Type{Int64}}
  ########tup#7068#7071#7642#7776::Tuple{}
  ########x#7069#7072#7643#7777::Int64
  ######_var0#7073#7644#7778::Tuple{}
  ########types#7070#7074#7645#7779::Tuple{Type{Int64}}
  ##a1#7780::Float64
  ##a2#7781::Float64
  ##div_a#7782::Float64
  ####afactor#7094#7783::Float64
  ####bfactor#7095#7784::Float64
  ########a#7084#7088#7096#7785::Tuple{}
  ########b#7085#7089#7097#7786::Tuple{}
  ########afactor#7086#7090#7098#7787::Float64
  ########bfactor#7087#7091#7099#7788::Float64
  ######_var0#7092#7100#7789::Tuple{}
  ######types#7093#7101#7790::Tuple{Type{Float64}}
  ######a#7374#7376#7791::Tuple{}
  ######b#7375#7377#7792::Tuple{}
  ####_var0#7378#7793::Tuple{}
  ##a1#7794::Float64
  ##a2#7795::Float64
  ######a#7084#7139#7796::Tuple{}
  ######b#7085#7140#7797::Tuple{}
  ######afactor#7086#7141#7798::Float64
  ######bfactor#7087#7142#7799::Float64
  ####_var0#7143#7800::Tuple{}
  ######types#7070#7373#7801::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7083#7660 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7083#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7661 = GenSym(3)
      ##a2#7662 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7667 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7143#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7661::Float64,##a2#7662::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 53:
      ##a#7669 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7670 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7671 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7669::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7672 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7676 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7167#7171#7623#7676 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7670::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7677 = GenSym(6)
      ##a2#7678 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7683 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7143#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7677::Float64,##a2#7678::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7073#7077#7689 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7073#7077#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7624#7692 = GenSym(8)
      ####a2#7625#7693 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7630#7698 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7143#7630#7698 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7624#7692::Float64,####a2#7625#7693::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7631#7699 = GenSym(11)
      ####a2#7632#7700 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7143#7637#7705 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7143#7637#7705 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7631#7699::Float64,####a2#7632#7700::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 55:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7706 = GenSym(14)
      ##a2#7707 = GenSym(15)
      ##div_a#7708 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7706::Float64,##a2#7707::Float64))
      ####afactor#7094#7709 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7707::Float64))
      ####bfactor#7095#7710 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7706::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7707::Float64,##a2#7707::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7715 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7092#7100#7715 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7708::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7728 = GenSym(17)
      ##a2#7729 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7734 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7143#7734 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7728::Float64,##a2#7729::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7720 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7640#7720 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7724 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7073#7644#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7083#7137#7738 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7083#7137#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7652#7743 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7073#7077#7652#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7656#7747 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7073#7656#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7749 = GenSym(22)
      ##a2#7750 = GenSym(23)
      ##div_a#7751 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7749::Float64,##a2#7750::Float64))
      ####afactor#7094#7752 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7750::Float64))
      ####bfactor#7095#7753 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7749::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7750::Float64,##a2#7750::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7758 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7092#7100#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7751::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7762 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7378#7762 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7640#7774 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7073#7077#7640#7774 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7073#7644#7778 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7073#7644#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7763 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7764 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7765 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7763::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7619#7766 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7623#7770 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7167#7171#7623#7770 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7764::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7780 = GenSym(26)
      ##a2#7781 = GenSym(27)
      ##div_a#7782 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7780::Float64,##a2#7781::Float64))
      ####afactor#7094#7783 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7781::Float64))
      ####bfactor#7095#7784 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7780::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7781::Float64,##a2#7781::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7092#7100#7789 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7092#7100#7789 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7782::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7378#7793 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7378#7793 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7794 = GenSym(29)
      ##a2#7795 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7143#7800 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7143#7800 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7794::Float64,##a2#7795::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(0) = call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Int64})::Array{Float64,1})::Distributions.Categorical
      return (Distributions.entropy)((top(getfield))(GenSym(0),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(0) = call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical
      return (Distributions.entropy)((top(getfield))(GenSym(0),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(0) = call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical
      return (Distributions.entropy)((top(getfield))(GenSym(0),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(0) = call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical
      return (Distributions.entropy)((top(getfield))(GenSym(0),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}
  ####_var0#7804#7806::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7807::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7806 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7806 = false
      2: 
      ####_var0#7804#7806::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7807 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7807 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7807::Float64,1.0))
      GenSym(3) = (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Int64})::Array{Float64,1})::Distributions.Categorical,GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(3),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7804#7808::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7809::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7808 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7808 = false
      2: 
      ####_var0#7804#7808::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7809 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7809 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7809::Float64,1.0))
      GenSym(3) = (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical,GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(3),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7804#7810::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7811::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7810 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7810 = false
      2: 
      ####_var0#7804#7810::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7811 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7811 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7811::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7804#7808::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7809::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7808 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7808 = false
      2: 
      ####_var0#7804#7808::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7809 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7809 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7809::Float64,1.0))
      GenSym(3) = (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical,GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(3),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7804#7808::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7809::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7808 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7808 = false
      2: 
      ####_var0#7804#7808::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7809 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7809 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7809::Float64,1.0))
      GenSym(3) = (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1})::Distributions.Categorical,GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(3),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7804#7810::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7811::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7810 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7810 = false
      2: 
      ####_var0#7804#7810::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7811 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7811 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7811::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7804#7810::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7811::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7810 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7810 = false
      2: 
      ####_var0#7804#7810::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7811 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7811 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7811::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7804#7810::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7811::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7810 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7810 = false
      2: 
      ####_var0#7804#7810::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7811 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7811 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7811::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7804#7810::UNION{BOOL,INT64}
  ########_var0#7802#7803#7805#7811::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7804#7810 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7804#7810 = false
      2: 
      ####_var0#7804#7810::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7802#7803#7805#7811 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7802#7803#7805#7811 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7802#7803#7805#7811::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Int64}
  k::Int64
  n::Int64
  α::Int64
  β::Int64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:α)::Int64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Int64},:β)::Int64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)((Base.box)(Base.Int,(Base.add_int)(k::Int64,α::Int64)),(Base.box)(Base.Int,(Base.add_int)((Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)),β::Int64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::Int64,β::Int64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7134#7521#7812::Tuple{Type{Int64}}
  ########types#7070#7134#7521#7813::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7134#7521#7812::Tuple{Type{Int64}}
  ########types#7070#7134#7521#7813::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7134#7521#7812::Tuple{Type{Int64}}
  ########types#7070#7134#7521#7813::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7134#7521#7812::Tuple{Type{Int64}}
  ########types#7070#7134#7521#7813::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7070#7134#7521#7812::Tuple{Type{Int64}}
  ########types#7070#7134#7521#7813::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::BigInt
      choose = call(Base.GMP.Float64,GenSym(3),Base.GMP.RoundNearest)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





