____________________________
ntrials
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 48:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64




____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7118#7120#7141::Tuple{}
  ######b#7119#7121#7142::Tuple{}
  ####_var0#7122#7143::Tuple{}
  ########tup#7107#7110#7114#7144::Tuple{}
  ########x#7108#7111#7115#7145::Int64
  ######_var0#7112#7116#7146::Tuple{}
  ########types#7109#7113#7117#7147::Tuple{Type{Int64}}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ##div_a#7150::Float64
  ####afactor#7133#7151::Float64
  ####bfactor#7134#7152::Float64
  ########a#7123#7127#7135#7153::Tuple{}
  ########b#7124#7128#7136#7154::Tuple{}
  ########afactor#7125#7129#7137#7155::Float64
  ########bfactor#7126#7130#7138#7156::Float64
  ######_var0#7131#7139#7157::Tuple{}
  ######types#7132#7140#7158::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7146 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7112#7116#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7122#7143 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7148 = GenSym(0)
      ##a2#7149 = GenSym(1)
      ##div_a#7150 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7148::Float64,##a2#7149::Float64))
      ####afactor#7133#7151 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7149::Float64))
      ####bfactor#7134#7152 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7148::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7149::Float64,##a2#7149::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7157 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7131#7139#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7118#7120#7141::Tuple{}
  ######b#7119#7121#7142::Tuple{}
  ####_var0#7122#7143::Tuple{}
  ########tup#7107#7110#7114#7144::Tuple{}
  ########x#7108#7111#7115#7145::Int64
  ######_var0#7112#7116#7146::Tuple{}
  ########types#7109#7113#7117#7147::Tuple{Type{Int64}}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ##div_a#7150::Float64
  ####afactor#7133#7151::Float64
  ####bfactor#7134#7152::Float64
  ########a#7123#7127#7135#7153::Tuple{}
  ########b#7124#7128#7136#7154::Tuple{}
  ########afactor#7125#7129#7137#7155::Float64
  ########bfactor#7126#7130#7138#7156::Float64
  ######_var0#7131#7139#7157::Tuple{}
  ######types#7132#7140#7158::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7146 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7112#7116#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7122#7143 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7148 = GenSym(0)
      ##a2#7149 = GenSym(1)
      ##div_a#7150 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7148::Float64,##a2#7149::Float64))
      ####afactor#7133#7151 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7149::Float64))
      ####bfactor#7134#7152 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7148::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7149::Float64,##a2#7149::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7157 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7131#7139#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7118#7120#7141::Tuple{}
  ######b#7119#7121#7142::Tuple{}
  ####_var0#7122#7143::Tuple{}
  ########tup#7107#7110#7114#7144::Tuple{}
  ########x#7108#7111#7115#7145::Int64
  ######_var0#7112#7116#7146::Tuple{}
  ########types#7109#7113#7117#7147::Tuple{Type{Int64}}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ##div_a#7150::Float64
  ####afactor#7133#7151::Float64
  ####bfactor#7134#7152::Float64
  ########a#7123#7127#7135#7153::Tuple{}
  ########b#7124#7128#7136#7154::Tuple{}
  ########afactor#7125#7129#7137#7155::Float64
  ########bfactor#7126#7130#7138#7156::Float64
  ######_var0#7131#7139#7157::Tuple{}
  ######types#7132#7140#7158::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7146 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7112#7116#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7122#7143 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7148 = GenSym(0)
      ##a2#7149 = GenSym(1)
      ##div_a#7150 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7148::Float64,##a2#7149::Float64))
      ####afactor#7133#7151 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7149::Float64))
      ####bfactor#7134#7152 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7148::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7149::Float64,##a2#7149::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7157 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7131#7139#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7118#7120#7141::Tuple{}
  ######b#7119#7121#7142::Tuple{}
  ####_var0#7122#7143::Tuple{}
  ########tup#7107#7110#7114#7144::Tuple{}
  ########x#7108#7111#7115#7145::Int64
  ######_var0#7112#7116#7146::Tuple{}
  ########types#7109#7113#7117#7147::Tuple{Type{Int64}}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ##div_a#7150::Float64
  ####afactor#7133#7151::Float64
  ####bfactor#7134#7152::Float64
  ########a#7123#7127#7135#7153::Tuple{}
  ########b#7124#7128#7136#7154::Tuple{}
  ########afactor#7125#7129#7137#7155::Float64
  ########bfactor#7126#7130#7138#7156::Float64
  ######_var0#7131#7139#7157::Tuple{}
  ######types#7132#7140#7158::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7146 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7112#7116#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7122#7143 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7148 = GenSym(0)
      ##a2#7149 = GenSym(1)
      ##div_a#7150 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7148::Float64,##a2#7149::Float64))
      ####afactor#7133#7151 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7149::Float64))
      ####bfactor#7134#7152 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7148::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7149::Float64,##a2#7149::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7157 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7131#7139#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7118#7120#7141::Tuple{}
  ######b#7119#7121#7142::Tuple{}
  ####_var0#7122#7143::Tuple{}
  ########tup#7107#7110#7114#7144::Tuple{}
  ########x#7108#7111#7115#7145::Int64
  ######_var0#7112#7116#7146::Tuple{}
  ########types#7109#7113#7117#7147::Tuple{Type{Int64}}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ##div_a#7150::Float64
  ####afactor#7133#7151::Float64
  ####bfactor#7134#7152::Float64
  ########a#7123#7127#7135#7153::Tuple{}
  ########b#7124#7128#7136#7154::Tuple{}
  ########afactor#7125#7129#7137#7155::Float64
  ########bfactor#7126#7130#7138#7156::Float64
  ######_var0#7131#7139#7157::Tuple{}
  ######types#7132#7140#7158::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7146 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7112#7116#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7122#7143 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7143 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7148 = GenSym(0)
      ##a2#7149 = GenSym(1)
      ##div_a#7150 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7148::Float64,##a2#7149::Float64))
      ####afactor#7133#7151 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7149::Float64))
      ####bfactor#7134#7152 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7148::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7149::Float64,##a2#7149::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7157 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7131#7139#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7166::Tuple{}
  ##xs#7167::Tuple{Float64}
  ##xs#7168::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7166::Tuple{}
  ##xs#7167::Tuple{Float64}
  ##xs#7168::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7219::Tuple{}
  ########a#7118#7120#7171#7220::Tuple{}
  ########b#7119#7121#7172#7221::Tuple{}
  ######_var0#7122#7173#7222::Tuple{}
  ########types#7109#7170#7174#7223::Tuple{Type{Int64}}
  ##xs#7224::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7225::Tuple{}
  ##########x#7108#7111#7115#7188#7226::Int64
  ########_var0#7112#7116#7189#7227::Tuple{}
  ##########types#7109#7113#7117#7190#7228::Tuple{Type{Int64}}
  ####a1#7191#7229::Float64
  ####a2#7192#7230::Float64
  ########a#7123#7175#7193#7231::Tuple{}
  ########b#7124#7176#7194#7232::Tuple{}
  ########afactor#7125#7177#7195#7233::Float64
  ########bfactor#7126#7178#7196#7234::Float64
  ######_var0#7179#7197#7235::Tuple{}
  ##xs#7236::Tuple{}
  ########a#7118#7120#7215#7237::Tuple{}
  ########b#7119#7121#7216#7238::Tuple{}
  ######_var0#7122#7217#7239::Tuple{}
  ########types#7213#7214#7218#7240::Tuple{Type{Float64}}
  ######a#7118#7120#7241::Tuple{}
  ######b#7119#7121#7242::Tuple{}
  ####_var0#7122#7243::Tuple{}
  ##a#7244::Float64
  ##exp_a#7245::Float64
  ##deriv#7246::Float64
  ####G#7208#7247::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7209#7248::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7210#7249::Tuple{}
  ##########x#7200#7202#7206#7211#7250::Float64
  ########_var0#7203#7207#7212#7251::Tuple{}
  ##a1#7252::Float64
  ##a2#7253::Float64
  ######a#7123#7175#7254::Tuple{}
  ######b#7124#7176#7255::Tuple{}
  ######afactor#7125#7177#7256::Float64
  ######bfactor#7126#7178#7257::Float64
  ####_var0#7179#7258::Tuple{}
  ##a1#7259::Float64
  ##a2#7260::Float64
  ##div_a#7261::Float64
  ####afactor#7133#7262::Float64
  ####bfactor#7134#7263::Float64
  ########a#7123#7127#7135#7264::Tuple{}
  ########b#7124#7128#7136#7265::Tuple{}
  ########afactor#7125#7129#7137#7266::Float64
  ########bfactor#7126#7130#7138#7267::Float64
  ######_var0#7131#7139#7268::Tuple{}
  ######types#7132#7140#7269::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7222 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7227 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7189#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7229 = GenSym(4)
      ####a2#7192#7230 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7235 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7179#7197#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7229::Float64,####a2#7192#7230::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7243 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7122#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7244 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,2.0,0)::Float64
      ##exp_a#7245 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,GenSym(11),0)::Float64
      ##deriv#7246 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,GenSym(11))))::Float64))
      ####G#7208#7247 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7212#7251 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7203#7207#7212#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7245::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7217#7239 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7217#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7252 = GenSym(16)
      ##a2#7253 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7258 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7179#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7252::Float64,##a2#7253::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7259 = GenSym(18)
      ##a2#7260 = GenSym(19)
      ##div_a#7261 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7259::Float64,##a2#7260::Float64))
      ####afactor#7133#7262 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7260::Float64))
      ####bfactor#7134#7263 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7259::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7260::Float64,##a2#7260::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7268 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7131#7139#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7261::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7166::Tuple{}
  ##xs#7167::Tuple{Float64}
  ##xs#7168::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7166::Tuple{}
  ##xs#7167::Tuple{Float64}
  ##xs#7168::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7219::Tuple{}
  ########a#7118#7120#7171#7220::Tuple{}
  ########b#7119#7121#7172#7221::Tuple{}
  ######_var0#7122#7173#7222::Tuple{}
  ########types#7109#7170#7174#7223::Tuple{Type{Int64}}
  ##xs#7224::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7225::Tuple{}
  ##########x#7108#7111#7115#7188#7226::Int64
  ########_var0#7112#7116#7189#7227::Tuple{}
  ##########types#7109#7113#7117#7190#7228::Tuple{Type{Int64}}
  ####a1#7191#7229::Float64
  ####a2#7192#7230::Float64
  ########a#7123#7175#7193#7231::Tuple{}
  ########b#7124#7176#7194#7232::Tuple{}
  ########afactor#7125#7177#7195#7233::Float64
  ########bfactor#7126#7178#7196#7234::Float64
  ######_var0#7179#7197#7235::Tuple{}
  ##xs#7236::Tuple{}
  ########a#7118#7120#7215#7237::Tuple{}
  ########b#7119#7121#7216#7238::Tuple{}
  ######_var0#7122#7217#7239::Tuple{}
  ########types#7213#7214#7218#7240::Tuple{Type{Float64}}
  ######a#7118#7120#7241::Tuple{}
  ######b#7119#7121#7242::Tuple{}
  ####_var0#7122#7243::Tuple{}
  ##a#7244::Float64
  ##exp_a#7245::Float64
  ##deriv#7246::Float64
  ####G#7208#7247::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7209#7248::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7210#7249::Tuple{}
  ##########x#7200#7202#7206#7211#7250::Float64
  ########_var0#7203#7207#7212#7251::Tuple{}
  ##a1#7252::Float64
  ##a2#7253::Float64
  ######a#7123#7175#7254::Tuple{}
  ######b#7124#7176#7255::Tuple{}
  ######afactor#7125#7177#7256::Float64
  ######bfactor#7126#7178#7257::Float64
  ####_var0#7179#7258::Tuple{}
  ##a1#7259::Float64
  ##a2#7260::Float64
  ##div_a#7261::Float64
  ####afactor#7133#7262::Float64
  ####bfactor#7134#7263::Float64
  ########a#7123#7127#7135#7264::Tuple{}
  ########b#7124#7128#7136#7265::Tuple{}
  ########afactor#7125#7129#7137#7266::Float64
  ########bfactor#7126#7130#7138#7267::Float64
  ######_var0#7131#7139#7268::Tuple{}
  ######types#7132#7140#7269::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7222 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7227 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7189#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7229 = GenSym(4)
      ####a2#7192#7230 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7235 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7179#7197#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7229::Float64,####a2#7192#7230::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7243 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7122#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7244 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,2.0,0)::Float64
      ##exp_a#7245 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,GenSym(11),0)::Float64
      ##deriv#7246 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,GenSym(11))))::Float64))
      ####G#7208#7247 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7212#7251 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7203#7207#7212#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7245::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7217#7239 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7217#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7252 = GenSym(16)
      ##a2#7253 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7258 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7179#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7252::Float64,##a2#7253::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7259 = GenSym(18)
      ##a2#7260 = GenSym(19)
      ##div_a#7261 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7259::Float64,##a2#7260::Float64))
      ####afactor#7133#7262 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7260::Float64))
      ####bfactor#7134#7263 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7259::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7260::Float64,##a2#7260::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7268 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7131#7139#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7261::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7219::Tuple{}
  ########a#7118#7120#7171#7220::Tuple{}
  ########b#7119#7121#7172#7221::Tuple{}
  ######_var0#7122#7173#7222::Tuple{}
  ########types#7109#7170#7174#7223::Tuple{Type{Int64}}
  ##xs#7224::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7225::Tuple{}
  ##########x#7108#7111#7115#7188#7226::Int64
  ########_var0#7112#7116#7189#7227::Tuple{}
  ##########types#7109#7113#7117#7190#7228::Tuple{Type{Int64}}
  ####a1#7191#7229::Float64
  ####a2#7192#7230::Float64
  ########a#7123#7175#7193#7231::Tuple{}
  ########b#7124#7176#7194#7232::Tuple{}
  ########afactor#7125#7177#7195#7233::Float64
  ########bfactor#7126#7178#7196#7234::Float64
  ######_var0#7179#7197#7235::Tuple{}
  ##xs#7236::Tuple{}
  ########a#7118#7120#7215#7237::Tuple{}
  ########b#7119#7121#7216#7238::Tuple{}
  ######_var0#7122#7217#7239::Tuple{}
  ########types#7213#7214#7218#7240::Tuple{Type{Float64}}
  ######a#7118#7120#7241::Tuple{}
  ######b#7119#7121#7242::Tuple{}
  ####_var0#7122#7243::Tuple{}
  ##a#7244::Float64
  ##exp_a#7245::Float64
  ##deriv#7246::Float64
  ####G#7208#7247::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7209#7248::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7210#7249::Tuple{}
  ##########x#7200#7202#7206#7211#7250::Float64
  ########_var0#7203#7207#7212#7251::Tuple{}
  ##a1#7252::Float64
  ##a2#7253::Float64
  ######a#7123#7175#7254::Tuple{}
  ######b#7124#7176#7255::Tuple{}
  ######afactor#7125#7177#7256::Float64
  ######bfactor#7126#7178#7257::Float64
  ####_var0#7179#7258::Tuple{}
  ##a1#7259::Float64
  ##a2#7260::Float64
  ##div_a#7261::Float64
  ####afactor#7133#7262::Float64
  ####bfactor#7134#7263::Float64
  ########a#7123#7127#7135#7264::Tuple{}
  ########b#7124#7128#7136#7265::Tuple{}
  ########afactor#7125#7129#7137#7266::Float64
  ########bfactor#7126#7130#7138#7267::Float64
  ######_var0#7131#7139#7268::Tuple{}
  ######types#7132#7140#7269::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7222 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7227 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7189#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7229 = GenSym(4)
      ####a2#7192#7230 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7235 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7179#7197#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7229::Float64,####a2#7192#7230::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7243 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7122#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7244 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,2.0,0)::Float64
      ##exp_a#7245 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,GenSym(11),0)::Float64
      ##deriv#7246 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,GenSym(11))))::Float64))
      ####G#7208#7247 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7212#7251 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7203#7207#7212#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7245::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7217#7239 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7217#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7252 = GenSym(16)
      ##a2#7253 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7258 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7179#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7252::Float64,##a2#7253::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7259 = GenSym(18)
      ##a2#7260 = GenSym(19)
      ##div_a#7261 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7259::Float64,##a2#7260::Float64))
      ####afactor#7133#7262 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7260::Float64))
      ####bfactor#7134#7263 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7259::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7260::Float64,##a2#7260::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7268 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7131#7139#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7261::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7219::Tuple{}
  ########a#7118#7120#7171#7220::Tuple{}
  ########b#7119#7121#7172#7221::Tuple{}
  ######_var0#7122#7173#7222::Tuple{}
  ########types#7109#7170#7174#7223::Tuple{Type{Int64}}
  ##xs#7224::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7225::Tuple{}
  ##########x#7108#7111#7115#7188#7226::Int64
  ########_var0#7112#7116#7189#7227::Tuple{}
  ##########types#7109#7113#7117#7190#7228::Tuple{Type{Int64}}
  ####a1#7191#7229::Float64
  ####a2#7192#7230::Float64
  ########a#7123#7175#7193#7231::Tuple{}
  ########b#7124#7176#7194#7232::Tuple{}
  ########afactor#7125#7177#7195#7233::Float64
  ########bfactor#7126#7178#7196#7234::Float64
  ######_var0#7179#7197#7235::Tuple{}
  ##xs#7236::Tuple{}
  ########a#7118#7120#7215#7237::Tuple{}
  ########b#7119#7121#7216#7238::Tuple{}
  ######_var0#7122#7217#7239::Tuple{}
  ########types#7213#7214#7218#7240::Tuple{Type{Float64}}
  ######a#7118#7120#7241::Tuple{}
  ######b#7119#7121#7242::Tuple{}
  ####_var0#7122#7243::Tuple{}
  ##a#7244::Float64
  ##exp_a#7245::Float64
  ##deriv#7246::Float64
  ####G#7208#7247::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7209#7248::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7210#7249::Tuple{}
  ##########x#7200#7202#7206#7211#7250::Float64
  ########_var0#7203#7207#7212#7251::Tuple{}
  ##a1#7252::Float64
  ##a2#7253::Float64
  ######a#7123#7175#7254::Tuple{}
  ######b#7124#7176#7255::Tuple{}
  ######afactor#7125#7177#7256::Float64
  ######bfactor#7126#7178#7257::Float64
  ####_var0#7179#7258::Tuple{}
  ##a1#7259::Float64
  ##a2#7260::Float64
  ##div_a#7261::Float64
  ####afactor#7133#7262::Float64
  ####bfactor#7134#7263::Float64
  ########a#7123#7127#7135#7264::Tuple{}
  ########b#7124#7128#7136#7265::Tuple{}
  ########afactor#7125#7129#7137#7266::Float64
  ########bfactor#7126#7130#7138#7267::Float64
  ######_var0#7131#7139#7268::Tuple{}
  ######types#7132#7140#7269::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7222 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7227 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7189#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7229 = GenSym(4)
      ####a2#7192#7230 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7235 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7179#7197#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7229::Float64,####a2#7192#7230::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7243 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7122#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7244 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,2.0,0)::Float64
      ##exp_a#7245 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,GenSym(11),0)::Float64
      ##deriv#7246 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,GenSym(11))))::Float64))
      ####G#7208#7247 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7212#7251 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7203#7207#7212#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7245::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7217#7239 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7217#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7252 = GenSym(16)
      ##a2#7253 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7258 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7179#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7252::Float64,##a2#7253::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7259 = GenSym(18)
      ##a2#7260 = GenSym(19)
      ##div_a#7261 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7259::Float64,##a2#7260::Float64))
      ####afactor#7133#7262 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7260::Float64))
      ####bfactor#7134#7263 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7259::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7260::Float64,##a2#7260::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7268 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7131#7139#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7261::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7219::Tuple{}
  ########a#7118#7120#7171#7220::Tuple{}
  ########b#7119#7121#7172#7221::Tuple{}
  ######_var0#7122#7173#7222::Tuple{}
  ########types#7109#7170#7174#7223::Tuple{Type{Int64}}
  ##xs#7224::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7225::Tuple{}
  ##########x#7108#7111#7115#7188#7226::Int64
  ########_var0#7112#7116#7189#7227::Tuple{}
  ##########types#7109#7113#7117#7190#7228::Tuple{Type{Int64}}
  ####a1#7191#7229::Float64
  ####a2#7192#7230::Float64
  ########a#7123#7175#7193#7231::Tuple{}
  ########b#7124#7176#7194#7232::Tuple{}
  ########afactor#7125#7177#7195#7233::Float64
  ########bfactor#7126#7178#7196#7234::Float64
  ######_var0#7179#7197#7235::Tuple{}
  ##xs#7236::Tuple{}
  ########a#7118#7120#7215#7237::Tuple{}
  ########b#7119#7121#7216#7238::Tuple{}
  ######_var0#7122#7217#7239::Tuple{}
  ########types#7213#7214#7218#7240::Tuple{Type{Float64}}
  ######a#7118#7120#7241::Tuple{}
  ######b#7119#7121#7242::Tuple{}
  ####_var0#7122#7243::Tuple{}
  ##a#7244::Float64
  ##exp_a#7245::Float64
  ##deriv#7246::Float64
  ####G#7208#7247::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7209#7248::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7210#7249::Tuple{}
  ##########x#7200#7202#7206#7211#7250::Float64
  ########_var0#7203#7207#7212#7251::Tuple{}
  ##a1#7252::Float64
  ##a2#7253::Float64
  ######a#7123#7175#7254::Tuple{}
  ######b#7124#7176#7255::Tuple{}
  ######afactor#7125#7177#7256::Float64
  ######bfactor#7126#7178#7257::Float64
  ####_var0#7179#7258::Tuple{}
  ##a1#7259::Float64
  ##a2#7260::Float64
  ##div_a#7261::Float64
  ####afactor#7133#7262::Float64
  ####bfactor#7134#7263::Float64
  ########a#7123#7127#7135#7264::Tuple{}
  ########b#7124#7128#7136#7265::Tuple{}
  ########afactor#7125#7129#7137#7266::Float64
  ########bfactor#7126#7130#7138#7267::Float64
  ######_var0#7131#7139#7268::Tuple{}
  ######types#7132#7140#7269::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 57:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7222 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7227 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7189#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7229 = GenSym(4)
      ####a2#7192#7230 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7235 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7179#7197#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7229::Float64,####a2#7192#7230::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7243 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7122#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7244 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,2.0,0)::Float64
      ##exp_a#7245 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7244::Float64,0,GenSym(11),0)::Float64
      ##deriv#7246 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7244::Float64,GenSym(11))))::Float64))
      ####G#7208#7247 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7212#7251 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7203#7207#7212#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7245::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7217#7239 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7217#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7252 = GenSym(16)
      ##a2#7253 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7258 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7179#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7252::Float64,##a2#7253::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7259 = GenSym(18)
      ##a2#7260 = GenSym(19)
      ##div_a#7261 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7259::Float64,##a2#7260::Float64))
      ####afactor#7133#7262 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7260::Float64))
      ####bfactor#7134#7263 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7259::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7260::Float64,##a2#7260::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7268 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7131#7139#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7261::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 99:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7515::Tuple{}
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{Float64}
  ##xs#7519::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7515::Tuple{}
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{Float64}
  ##xs#7519::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7530::Tuple{}
  ########a#7118#7120#7171#7531::Tuple{}
  ########b#7119#7121#7172#7532::Tuple{}
  ######_var0#7122#7173#7533::Tuple{}
  ########types#7109#7170#7174#7534::Tuple{Type{Int64}}
  ######a#7378#7380#7535::Tuple{}
  ######b#7379#7381#7536::Tuple{}
  ####_var0#7382#7537::Tuple{}
  ##xs#7538::Tuple{}
  ########a#7118#7120#7171#7539::Tuple{}
  ########b#7119#7121#7172#7540::Tuple{}
  ######_var0#7122#7173#7541::Tuple{}
  ########types#7109#7170#7174#7542::Tuple{Type{Int64}}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ######a#7123#7175#7545::Tuple{}
  ######b#7124#7176#7546::Tuple{}
  ######afactor#7125#7177#7547::Float64
  ######bfactor#7126#7178#7548::Float64
  ####_var0#7179#7549::Tuple{}
  ##a1#7550::Float64
  ##a2#7551::Float64
  ##div_a#7552::Float64
  ####afactor#7133#7553::Float64
  ####bfactor#7134#7554::Float64
  ########a#7123#7127#7135#7555::Tuple{}
  ########b#7124#7128#7136#7556::Tuple{}
  ########afactor#7125#7129#7137#7557::Float64
  ########bfactor#7126#7130#7138#7558::Float64
  ######_var0#7131#7139#7559::Tuple{}
  ######types#7132#7140#7560::Tuple{Type{Float64}}
  ##xs#7561::Tuple{}
  ##########types#7109#7170#7520#7521#7562::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7563::Tuple{}
  ########b#7119#7121#7523#7564::Tuple{}
  ######_var0#7122#7524#7565::Tuple{}
  ##xs#7566::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7567::Tuple{}
  ##########x#7108#7111#7115#7188#7568::Int64
  ########_var0#7112#7116#7189#7569::Tuple{}
  ##########types#7109#7113#7117#7190#7570::Tuple{Type{Int64}}
  ####a1#7191#7571::Float64
  ####a2#7192#7572::Float64
  ########a#7123#7175#7193#7573::Tuple{}
  ########b#7124#7176#7194#7574::Tuple{}
  ########afactor#7125#7177#7195#7575::Float64
  ########bfactor#7126#7178#7196#7576::Float64
  ######_var0#7179#7197#7577::Tuple{}
  ##xs#7578::Tuple{}
  ##########types#7109#7170#7520#7521#7579::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7580::Tuple{}
  ########b#7119#7121#7523#7581::Tuple{}
  ######_var0#7122#7524#7582::Tuple{}
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7133#7586::Float64
  ####bfactor#7134#7587::Float64
  ########a#7123#7127#7135#7588::Tuple{}
  ########b#7124#7128#7136#7589::Tuple{}
  ########afactor#7125#7129#7137#7590::Float64
  ########bfactor#7126#7130#7138#7591::Float64
  ######_var0#7131#7139#7592::Tuple{}
  ######types#7132#7140#7593::Tuple{Type{Float64}}
  ##sqrt_a#7594::Float64
  ##deriv#7595::Float64
  ####G#7525#7596::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7526#7597::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7527#7598::Tuple{}
  ##########x#7200#7202#7206#7528#7599::Float64
  ########_var0#7203#7207#7529#7600::Tuple{}
  ##a1#7601::Float64
  ##a2#7602::Float64
  ######a#7123#7175#7603::Tuple{}
  ######b#7124#7176#7604::Tuple{}
  ######afactor#7125#7177#7605::Float64
  ######bfactor#7126#7178#7606::Float64
  ####_var0#7179#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7541 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7173#7541 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7537 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7382#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7543 = GenSym(5)
      ##a2#7544 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7549 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7543::Float64,##a2#7544::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7533 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7533 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7550 = GenSym(8)
      ##a2#7551 = GenSym(9)
      ##div_a#7552 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7550::Float64,##a2#7551::Float64))
      ####afactor#7133#7553 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7551::Float64))
      ####bfactor#7134#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7550::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7551::Float64,##a2#7551::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7559 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7131#7139#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7552::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7582 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7524#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7565 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7122#7524#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7569 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7189#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7571 = GenSym(10)
      ####a2#7192#7572 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7577 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7197#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7571::Float64,####a2#7192#7572::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7583 = GenSym(14)
      ##a2#7584 = GenSym(15)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7133#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7134#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7592 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7131#7139#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7594 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7595 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7594::Float64))
      ####G#7525#7596 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7529#7600 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7203#7207#7529#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7601 = GenSym(17)
      ##a2#7602 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7607 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7179#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7601::Float64,##a2#7602::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7515::Tuple{}
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{Float64}
  ##xs#7519::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7515::Tuple{}
  ##xs#7516::Tuple{}
  ##xs#7517::Tuple{}
  ##xs#7518::Tuple{Float64}
  ##xs#7519::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7530::Tuple{}
  ########a#7118#7120#7171#7531::Tuple{}
  ########b#7119#7121#7172#7532::Tuple{}
  ######_var0#7122#7173#7533::Tuple{}
  ########types#7109#7170#7174#7534::Tuple{Type{Int64}}
  ######a#7378#7380#7535::Tuple{}
  ######b#7379#7381#7536::Tuple{}
  ####_var0#7382#7537::Tuple{}
  ##xs#7538::Tuple{}
  ########a#7118#7120#7171#7539::Tuple{}
  ########b#7119#7121#7172#7540::Tuple{}
  ######_var0#7122#7173#7541::Tuple{}
  ########types#7109#7170#7174#7542::Tuple{Type{Int64}}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ######a#7123#7175#7545::Tuple{}
  ######b#7124#7176#7546::Tuple{}
  ######afactor#7125#7177#7547::Float64
  ######bfactor#7126#7178#7548::Float64
  ####_var0#7179#7549::Tuple{}
  ##a1#7550::Float64
  ##a2#7551::Float64
  ##div_a#7552::Float64
  ####afactor#7133#7553::Float64
  ####bfactor#7134#7554::Float64
  ########a#7123#7127#7135#7555::Tuple{}
  ########b#7124#7128#7136#7556::Tuple{}
  ########afactor#7125#7129#7137#7557::Float64
  ########bfactor#7126#7130#7138#7558::Float64
  ######_var0#7131#7139#7559::Tuple{}
  ######types#7132#7140#7560::Tuple{Type{Float64}}
  ##xs#7561::Tuple{}
  ##########types#7109#7170#7520#7521#7562::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7563::Tuple{}
  ########b#7119#7121#7523#7564::Tuple{}
  ######_var0#7122#7524#7565::Tuple{}
  ##xs#7566::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7567::Tuple{}
  ##########x#7108#7111#7115#7188#7568::Int64
  ########_var0#7112#7116#7189#7569::Tuple{}
  ##########types#7109#7113#7117#7190#7570::Tuple{Type{Int64}}
  ####a1#7191#7571::Float64
  ####a2#7192#7572::Float64
  ########a#7123#7175#7193#7573::Tuple{}
  ########b#7124#7176#7194#7574::Tuple{}
  ########afactor#7125#7177#7195#7575::Float64
  ########bfactor#7126#7178#7196#7576::Float64
  ######_var0#7179#7197#7577::Tuple{}
  ##xs#7578::Tuple{}
  ##########types#7109#7170#7520#7521#7579::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7580::Tuple{}
  ########b#7119#7121#7523#7581::Tuple{}
  ######_var0#7122#7524#7582::Tuple{}
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7133#7586::Float64
  ####bfactor#7134#7587::Float64
  ########a#7123#7127#7135#7588::Tuple{}
  ########b#7124#7128#7136#7589::Tuple{}
  ########afactor#7125#7129#7137#7590::Float64
  ########bfactor#7126#7130#7138#7591::Float64
  ######_var0#7131#7139#7592::Tuple{}
  ######types#7132#7140#7593::Tuple{Type{Float64}}
  ##sqrt_a#7594::Float64
  ##deriv#7595::Float64
  ####G#7525#7596::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7526#7597::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7527#7598::Tuple{}
  ##########x#7200#7202#7206#7528#7599::Float64
  ########_var0#7203#7207#7529#7600::Tuple{}
  ##a1#7601::Float64
  ##a2#7602::Float64
  ######a#7123#7175#7603::Tuple{}
  ######b#7124#7176#7604::Tuple{}
  ######afactor#7125#7177#7605::Float64
  ######bfactor#7126#7178#7606::Float64
  ####_var0#7179#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7541 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7173#7541 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7537 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7382#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7543 = GenSym(5)
      ##a2#7544 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7549 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7543::Float64,##a2#7544::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7533 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7533 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7550 = GenSym(8)
      ##a2#7551 = GenSym(9)
      ##div_a#7552 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7550::Float64,##a2#7551::Float64))
      ####afactor#7133#7553 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7551::Float64))
      ####bfactor#7134#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7550::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7551::Float64,##a2#7551::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7559 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7131#7139#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7552::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7582 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7524#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7565 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7122#7524#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7569 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7189#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7571 = GenSym(10)
      ####a2#7192#7572 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7577 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7197#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7571::Float64,####a2#7192#7572::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7583 = GenSym(14)
      ##a2#7584 = GenSym(15)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7133#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7134#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7592 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7131#7139#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7594 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7595 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7594::Float64))
      ####G#7525#7596 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7529#7600 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7203#7207#7529#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7601 = GenSym(17)
      ##a2#7602 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7607 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7179#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7601::Float64,##a2#7602::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7530::Tuple{}
  ########a#7118#7120#7171#7531::Tuple{}
  ########b#7119#7121#7172#7532::Tuple{}
  ######_var0#7122#7173#7533::Tuple{}
  ########types#7109#7170#7174#7534::Tuple{Type{Int64}}
  ######a#7378#7380#7535::Tuple{}
  ######b#7379#7381#7536::Tuple{}
  ####_var0#7382#7537::Tuple{}
  ##xs#7538::Tuple{}
  ########a#7118#7120#7171#7539::Tuple{}
  ########b#7119#7121#7172#7540::Tuple{}
  ######_var0#7122#7173#7541::Tuple{}
  ########types#7109#7170#7174#7542::Tuple{Type{Int64}}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ######a#7123#7175#7545::Tuple{}
  ######b#7124#7176#7546::Tuple{}
  ######afactor#7125#7177#7547::Float64
  ######bfactor#7126#7178#7548::Float64
  ####_var0#7179#7549::Tuple{}
  ##a1#7550::Float64
  ##a2#7551::Float64
  ##div_a#7552::Float64
  ####afactor#7133#7553::Float64
  ####bfactor#7134#7554::Float64
  ########a#7123#7127#7135#7555::Tuple{}
  ########b#7124#7128#7136#7556::Tuple{}
  ########afactor#7125#7129#7137#7557::Float64
  ########bfactor#7126#7130#7138#7558::Float64
  ######_var0#7131#7139#7559::Tuple{}
  ######types#7132#7140#7560::Tuple{Type{Float64}}
  ##xs#7561::Tuple{}
  ##########types#7109#7170#7520#7521#7562::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7563::Tuple{}
  ########b#7119#7121#7523#7564::Tuple{}
  ######_var0#7122#7524#7565::Tuple{}
  ##xs#7566::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7567::Tuple{}
  ##########x#7108#7111#7115#7188#7568::Int64
  ########_var0#7112#7116#7189#7569::Tuple{}
  ##########types#7109#7113#7117#7190#7570::Tuple{Type{Int64}}
  ####a1#7191#7571::Float64
  ####a2#7192#7572::Float64
  ########a#7123#7175#7193#7573::Tuple{}
  ########b#7124#7176#7194#7574::Tuple{}
  ########afactor#7125#7177#7195#7575::Float64
  ########bfactor#7126#7178#7196#7576::Float64
  ######_var0#7179#7197#7577::Tuple{}
  ##xs#7578::Tuple{}
  ##########types#7109#7170#7520#7521#7579::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7580::Tuple{}
  ########b#7119#7121#7523#7581::Tuple{}
  ######_var0#7122#7524#7582::Tuple{}
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7133#7586::Float64
  ####bfactor#7134#7587::Float64
  ########a#7123#7127#7135#7588::Tuple{}
  ########b#7124#7128#7136#7589::Tuple{}
  ########afactor#7125#7129#7137#7590::Float64
  ########bfactor#7126#7130#7138#7591::Float64
  ######_var0#7131#7139#7592::Tuple{}
  ######types#7132#7140#7593::Tuple{Type{Float64}}
  ##sqrt_a#7594::Float64
  ##deriv#7595::Float64
  ####G#7525#7596::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7526#7597::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7527#7598::Tuple{}
  ##########x#7200#7202#7206#7528#7599::Float64
  ########_var0#7203#7207#7529#7600::Tuple{}
  ##a1#7601::Float64
  ##a2#7602::Float64
  ######a#7123#7175#7603::Tuple{}
  ######b#7124#7176#7604::Tuple{}
  ######afactor#7125#7177#7605::Float64
  ######bfactor#7126#7178#7606::Float64
  ####_var0#7179#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7541 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7173#7541 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7537 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7382#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7543 = GenSym(5)
      ##a2#7544 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7549 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7543::Float64,##a2#7544::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7533 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7533 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7550 = GenSym(8)
      ##a2#7551 = GenSym(9)
      ##div_a#7552 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7550::Float64,##a2#7551::Float64))
      ####afactor#7133#7553 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7551::Float64))
      ####bfactor#7134#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7550::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7551::Float64,##a2#7551::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7559 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7131#7139#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7552::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7582 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7524#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7565 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7122#7524#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7569 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7189#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7571 = GenSym(10)
      ####a2#7192#7572 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7577 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7197#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7571::Float64,####a2#7192#7572::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7583 = GenSym(14)
      ##a2#7584 = GenSym(15)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7133#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7134#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7592 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7131#7139#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7594 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7595 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7594::Float64))
      ####G#7525#7596 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7529#7600 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7203#7207#7529#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7601 = GenSym(17)
      ##a2#7602 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7607 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7179#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7601::Float64,##a2#7602::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7530::Tuple{}
  ########a#7118#7120#7171#7531::Tuple{}
  ########b#7119#7121#7172#7532::Tuple{}
  ######_var0#7122#7173#7533::Tuple{}
  ########types#7109#7170#7174#7534::Tuple{Type{Int64}}
  ######a#7378#7380#7535::Tuple{}
  ######b#7379#7381#7536::Tuple{}
  ####_var0#7382#7537::Tuple{}
  ##xs#7538::Tuple{}
  ########a#7118#7120#7171#7539::Tuple{}
  ########b#7119#7121#7172#7540::Tuple{}
  ######_var0#7122#7173#7541::Tuple{}
  ########types#7109#7170#7174#7542::Tuple{Type{Int64}}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ######a#7123#7175#7545::Tuple{}
  ######b#7124#7176#7546::Tuple{}
  ######afactor#7125#7177#7547::Float64
  ######bfactor#7126#7178#7548::Float64
  ####_var0#7179#7549::Tuple{}
  ##a1#7550::Float64
  ##a2#7551::Float64
  ##div_a#7552::Float64
  ####afactor#7133#7553::Float64
  ####bfactor#7134#7554::Float64
  ########a#7123#7127#7135#7555::Tuple{}
  ########b#7124#7128#7136#7556::Tuple{}
  ########afactor#7125#7129#7137#7557::Float64
  ########bfactor#7126#7130#7138#7558::Float64
  ######_var0#7131#7139#7559::Tuple{}
  ######types#7132#7140#7560::Tuple{Type{Float64}}
  ##xs#7561::Tuple{}
  ##########types#7109#7170#7520#7521#7562::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7563::Tuple{}
  ########b#7119#7121#7523#7564::Tuple{}
  ######_var0#7122#7524#7565::Tuple{}
  ##xs#7566::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7567::Tuple{}
  ##########x#7108#7111#7115#7188#7568::Int64
  ########_var0#7112#7116#7189#7569::Tuple{}
  ##########types#7109#7113#7117#7190#7570::Tuple{Type{Int64}}
  ####a1#7191#7571::Float64
  ####a2#7192#7572::Float64
  ########a#7123#7175#7193#7573::Tuple{}
  ########b#7124#7176#7194#7574::Tuple{}
  ########afactor#7125#7177#7195#7575::Float64
  ########bfactor#7126#7178#7196#7576::Float64
  ######_var0#7179#7197#7577::Tuple{}
  ##xs#7578::Tuple{}
  ##########types#7109#7170#7520#7521#7579::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7580::Tuple{}
  ########b#7119#7121#7523#7581::Tuple{}
  ######_var0#7122#7524#7582::Tuple{}
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7133#7586::Float64
  ####bfactor#7134#7587::Float64
  ########a#7123#7127#7135#7588::Tuple{}
  ########b#7124#7128#7136#7589::Tuple{}
  ########afactor#7125#7129#7137#7590::Float64
  ########bfactor#7126#7130#7138#7591::Float64
  ######_var0#7131#7139#7592::Tuple{}
  ######types#7132#7140#7593::Tuple{Type{Float64}}
  ##sqrt_a#7594::Float64
  ##deriv#7595::Float64
  ####G#7525#7596::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7526#7597::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7527#7598::Tuple{}
  ##########x#7200#7202#7206#7528#7599::Float64
  ########_var0#7203#7207#7529#7600::Tuple{}
  ##a1#7601::Float64
  ##a2#7602::Float64
  ######a#7123#7175#7603::Tuple{}
  ######b#7124#7176#7604::Tuple{}
  ######afactor#7125#7177#7605::Float64
  ######bfactor#7126#7178#7606::Float64
  ####_var0#7179#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7541 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7173#7541 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7537 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7382#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7543 = GenSym(5)
      ##a2#7544 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7549 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7543::Float64,##a2#7544::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7533 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7533 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7550 = GenSym(8)
      ##a2#7551 = GenSym(9)
      ##div_a#7552 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7550::Float64,##a2#7551::Float64))
      ####afactor#7133#7553 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7551::Float64))
      ####bfactor#7134#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7550::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7551::Float64,##a2#7551::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7559 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7131#7139#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7552::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7582 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7524#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7565 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7122#7524#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7569 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7189#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7571 = GenSym(10)
      ####a2#7192#7572 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7577 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7197#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7571::Float64,####a2#7192#7572::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7583 = GenSym(14)
      ##a2#7584 = GenSym(15)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7133#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7134#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7592 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7131#7139#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7594 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7595 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7594::Float64))
      ####G#7525#7596 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7529#7600 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7203#7207#7529#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7601 = GenSym(17)
      ##a2#7602 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7607 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7179#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7601::Float64,##a2#7602::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7530::Tuple{}
  ########a#7118#7120#7171#7531::Tuple{}
  ########b#7119#7121#7172#7532::Tuple{}
  ######_var0#7122#7173#7533::Tuple{}
  ########types#7109#7170#7174#7534::Tuple{Type{Int64}}
  ######a#7378#7380#7535::Tuple{}
  ######b#7379#7381#7536::Tuple{}
  ####_var0#7382#7537::Tuple{}
  ##xs#7538::Tuple{}
  ########a#7118#7120#7171#7539::Tuple{}
  ########b#7119#7121#7172#7540::Tuple{}
  ######_var0#7122#7173#7541::Tuple{}
  ########types#7109#7170#7174#7542::Tuple{Type{Int64}}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ######a#7123#7175#7545::Tuple{}
  ######b#7124#7176#7546::Tuple{}
  ######afactor#7125#7177#7547::Float64
  ######bfactor#7126#7178#7548::Float64
  ####_var0#7179#7549::Tuple{}
  ##a1#7550::Float64
  ##a2#7551::Float64
  ##div_a#7552::Float64
  ####afactor#7133#7553::Float64
  ####bfactor#7134#7554::Float64
  ########a#7123#7127#7135#7555::Tuple{}
  ########b#7124#7128#7136#7556::Tuple{}
  ########afactor#7125#7129#7137#7557::Float64
  ########bfactor#7126#7130#7138#7558::Float64
  ######_var0#7131#7139#7559::Tuple{}
  ######types#7132#7140#7560::Tuple{Type{Float64}}
  ##xs#7561::Tuple{}
  ##########types#7109#7170#7520#7521#7562::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7563::Tuple{}
  ########b#7119#7121#7523#7564::Tuple{}
  ######_var0#7122#7524#7565::Tuple{}
  ##xs#7566::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7107#7110#7114#7187#7567::Tuple{}
  ##########x#7108#7111#7115#7188#7568::Int64
  ########_var0#7112#7116#7189#7569::Tuple{}
  ##########types#7109#7113#7117#7190#7570::Tuple{Type{Int64}}
  ####a1#7191#7571::Float64
  ####a2#7192#7572::Float64
  ########a#7123#7175#7193#7573::Tuple{}
  ########b#7124#7176#7194#7574::Tuple{}
  ########afactor#7125#7177#7195#7575::Float64
  ########bfactor#7126#7178#7196#7576::Float64
  ######_var0#7179#7197#7577::Tuple{}
  ##xs#7578::Tuple{}
  ##########types#7109#7170#7520#7521#7579::Tuple{Type{Int64}}
  ########a#7118#7120#7522#7580::Tuple{}
  ########b#7119#7121#7523#7581::Tuple{}
  ######_var0#7122#7524#7582::Tuple{}
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7133#7586::Float64
  ####bfactor#7134#7587::Float64
  ########a#7123#7127#7135#7588::Tuple{}
  ########b#7124#7128#7136#7589::Tuple{}
  ########afactor#7125#7129#7137#7590::Float64
  ########bfactor#7126#7130#7138#7591::Float64
  ######_var0#7131#7139#7592::Tuple{}
  ######types#7132#7140#7593::Tuple{Type{Float64}}
  ##sqrt_a#7594::Float64
  ##deriv#7595::Float64
  ####G#7525#7596::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7526#7597::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7527#7598::Tuple{}
  ##########x#7200#7202#7206#7528#7599::Float64
  ########_var0#7203#7207#7529#7600::Tuple{}
  ##a1#7601::Float64
  ##a2#7602::Float64
  ######a#7123#7175#7603::Tuple{}
  ######b#7124#7176#7604::Tuple{}
  ######afactor#7125#7177#7605::Float64
  ######bfactor#7126#7178#7606::Float64
  ####_var0#7179#7607::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 64:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7541 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7122#7173#7541 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7537 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7382#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7543 = GenSym(5)
      ##a2#7544 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7549 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7543::Float64,##a2#7544::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7533 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7122#7173#7533 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7550 = GenSym(8)
      ##a2#7551 = GenSym(9)
      ##div_a#7552 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7550::Float64,##a2#7551::Float64))
      ####afactor#7133#7553 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7551::Float64))
      ####bfactor#7134#7554 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7550::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7551::Float64,##a2#7551::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7559 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7131#7139#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7552::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7582 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7524#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7524#7565 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7122#7524#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7189#7569 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7189#7569 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7191#7571 = GenSym(10)
      ####a2#7192#7572 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7197#7577 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7197#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7191#7571::Float64,####a2#7192#7572::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7583 = GenSym(14)
      ##a2#7584 = GenSym(15)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7133#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7134#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7592 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7131#7139#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7594 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7595 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7594::Float64))
      ####G#7525#7596 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7529#7600 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7203#7207#7529#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7601 = GenSym(17)
      ##a2#7602 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7607 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7179#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7601::Float64,##a2#7602::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7608::Tuple{Float64}
  ##xs#7609::Tuple{}
  ##xs#7610::Tuple{}
  ##xs#7611::Tuple{Int64}
  ##xs#7612::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7608::Tuple{Float64}
  ##xs#7609::Tuple{}
  ##xs#7610::Tuple{}
  ##xs#7611::Tuple{Int64}
  ##xs#7612::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7118#7120#7652::Tuple{}
  ######b#7119#7121#7653::Tuple{}
  ####_var0#7122#7654::Tuple{}
  ##a1#7655::Float64
  ##a2#7656::Float64
  ######a#7123#7175#7657::Tuple{}
  ######b#7124#7176#7658::Tuple{}
  ######afactor#7125#7177#7659::Float64
  ######bfactor#7126#7178#7660::Float64
  ####_var0#7179#7661::Tuple{}
  ########types#7109#7170#7520#7662::Tuple{Type{Int64}}
  ##a#7663::Float64
  ##exp_a#7664::Float64
  ##deriv#7665::Float64
  ####G#7613#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7668::Tuple{}
  ##########x#7200#7202#7206#7616#7669::Float64
  ########_var0#7203#7207#7617#7670::Tuple{}
  ##a1#7671::Float64
  ##a2#7672::Float64
  ######a#7123#7175#7673::Tuple{}
  ######b#7124#7176#7674::Tuple{}
  ######afactor#7125#7177#7675::Float64
  ######bfactor#7126#7178#7676::Float64
  ####_var0#7179#7677::Tuple{}
  ######types#7109#7170#7678::Tuple{Type{Int64}}
  ######types#7109#7170#7679::Tuple{Type{Int64}}
  ######types#7109#7170#7680::Tuple{Type{Int64}}
  ########tup#7107#7110#7114#7681::Tuple{}
  ########x#7108#7111#7115#7682::Int64
  ######_var0#7112#7116#7683::Tuple{}
  ########types#7109#7113#7117#7684::Tuple{Type{Int64}}
  ##xs#7685::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7618#7686::Float64
  ####a2#7619#7687::Float64
  ########a#7123#7175#7620#7688::Tuple{}
  ########b#7124#7176#7621#7689::Tuple{}
  ########afactor#7125#7177#7622#7690::Float64
  ########bfactor#7126#7178#7623#7691::Float64
  ######_var0#7179#7624#7692::Tuple{}
  ####a1#7625#7693::Float64
  ####a2#7626#7694::Float64
  ########a#7123#7175#7627#7695::Tuple{}
  ########b#7124#7176#7628#7696::Tuple{}
  ########afactor#7125#7177#7629#7697::Float64
  ########bfactor#7126#7178#7630#7698::Float64
  ######_var0#7179#7631#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ##div_a#7702::Float64
  ####afactor#7133#7703::Float64
  ####bfactor#7134#7704::Float64
  ########a#7123#7127#7135#7705::Tuple{}
  ########b#7124#7128#7136#7706::Tuple{}
  ########afactor#7125#7129#7137#7707::Float64
  ########bfactor#7126#7130#7138#7708::Float64
  ######_var0#7131#7139#7709::Tuple{}
  ######types#7132#7140#7710::Tuple{Type{Float64}}
  ##xs#7711::Tuple{}
  ##########tup#7107#7110#7114#7632#7712::Tuple{}
  ##########x#7108#7111#7115#7633#7713::Int64
  ########_var0#7112#7116#7634#7714::Tuple{}
  ##########types#7109#7113#7117#7635#7715::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7716::Tuple{}
  ########x#7108#7111#7637#7717::Int64
  ######_var0#7112#7638#7718::Tuple{}
  ########types#7109#7113#7639#7719::Tuple{Type{Int64}}
  ######types#7109#7377#7720::Tuple{Type{Int64}}
  ######types#7109#7170#7721::Tuple{Type{Int64}}
  ##a1#7722::Float64
  ##a2#7723::Float64
  ######a#7123#7175#7724::Tuple{}
  ######b#7124#7176#7725::Tuple{}
  ######afactor#7125#7177#7726::Float64
  ######bfactor#7126#7178#7727::Float64
  ####_var0#7179#7728::Tuple{}
  ##xs#7729::Tuple{}
  ########a#7118#7120#7171#7730::Tuple{}
  ########b#7119#7121#7172#7731::Tuple{}
  ######_var0#7122#7173#7732::Tuple{}
  ########types#7109#7170#7174#7733::Tuple{Type{Int64}}
  ##xs#7734::Tuple{Int64}
  ##########tup#7107#7110#7114#7644#7735::Tuple{}
  ##########x#7108#7111#7115#7645#7736::Int64
  ########_var0#7112#7116#7646#7737::Tuple{}
  ##########types#7109#7113#7117#7647#7738::Tuple{Type{Int64}}
  ########tup#7107#7110#7648#7739::Tuple{}
  ########x#7108#7111#7649#7740::Int64
  ######_var0#7112#7650#7741::Tuple{}
  ########types#7109#7113#7651#7742::Tuple{Type{Int64}}
  ##a1#7743::Float64
  ##a2#7744::Float64
  ##div_a#7745::Float64
  ####afactor#7133#7746::Float64
  ####bfactor#7134#7747::Float64
  ########a#7123#7127#7135#7748::Tuple{}
  ########b#7124#7128#7136#7749::Tuple{}
  ########afactor#7125#7129#7137#7750::Float64
  ########bfactor#7126#7130#7138#7751::Float64
  ######_var0#7131#7139#7752::Tuple{}
  ######types#7132#7140#7753::Tuple{Type{Float64}}
  ######a#7378#7380#7754::Tuple{}
  ######b#7379#7381#7755::Tuple{}
  ####_var0#7382#7756::Tuple{}
  ##a#7757::Float64
  ##exp_a#7758::Float64
  ##deriv#7759::Float64
  ####G#7613#7760::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7761::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7762::Tuple{}
  ##########x#7200#7202#7206#7616#7763::Float64
  ########_var0#7203#7207#7617#7764::Tuple{}
  ##xs#7765::Tuple{}
  ##########tup#7107#7110#7114#7632#7766::Tuple{}
  ##########x#7108#7111#7115#7633#7767::Int64
  ########_var0#7112#7116#7634#7768::Tuple{}
  ##########types#7109#7113#7117#7635#7769::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7770::Tuple{}
  ########x#7108#7111#7637#7771::Int64
  ######_var0#7112#7638#7772::Tuple{}
  ########types#7109#7113#7639#7773::Tuple{Type{Int64}}
  ##a1#7774::Float64
  ##a2#7775::Float64
  ##div_a#7776::Float64
  ####afactor#7133#7777::Float64
  ####bfactor#7134#7778::Float64
  ########a#7123#7127#7135#7779::Tuple{}
  ########b#7124#7128#7136#7780::Tuple{}
  ########afactor#7125#7129#7137#7781::Float64
  ########bfactor#7126#7130#7138#7782::Float64
  ######_var0#7131#7139#7783::Tuple{}
  ######types#7132#7140#7784::Tuple{Type{Float64}}
  ######a#7378#7380#7785::Tuple{}
  ######b#7379#7381#7786::Tuple{}
  ####_var0#7382#7787::Tuple{}
  ##a1#7788::Float64
  ##a2#7789::Float64
  ######a#7123#7175#7790::Tuple{}
  ######b#7124#7176#7791::Tuple{}
  ######afactor#7125#7177#7792::Float64
  ######bfactor#7126#7178#7793::Float64
  ####_var0#7179#7794::Tuple{}
  ######types#7109#7377#7795::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7654 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7655 = GenSym(3)
      ##a2#7656 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7661 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7179#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7655::Float64,##a2#7656::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7663 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7664 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7665 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7670 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7203#7207#7617#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7664::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7671 = GenSym(6)
      ##a2#7672 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7677 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7671::Float64,##a2#7672::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7683 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7112#7116#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7618#7686 = GenSym(8)
      ####a2#7619#7687 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7624#7692 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7624#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7618#7686::Float64,####a2#7619#7687::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7625#7693 = GenSym(11)
      ####a2#7626#7694 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7631#7699 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7179#7631#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7625#7693::Float64,####a2#7626#7694::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7700 = GenSym(14)
      ##a2#7701 = GenSym(15)
      ##div_a#7702 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7700::Float64,##a2#7701::Float64))
      ####afactor#7133#7703 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7701::Float64))
      ####bfactor#7134#7704 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7700::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7701::Float64,##a2#7701::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7709 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7131#7139#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7702::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7722 = GenSym(17)
      ##a2#7723 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7728 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7179#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7722::Float64,##a2#7723::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7714 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7112#7116#7634#7714 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7718 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7112#7638#7718 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7732 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7122#7173#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7646#7737 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7646#7737 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7650#7741 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7112#7650#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7743 = GenSym(22)
      ##a2#7744 = GenSym(23)
      ##div_a#7745 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7743::Float64,##a2#7744::Float64))
      ####afactor#7133#7746 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7744::Float64))
      ####bfactor#7134#7747 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7743::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7744::Float64,##a2#7744::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7752 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7131#7139#7752 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7745::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7756 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7382#7756 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7768 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7112#7116#7634#7768 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7772 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7112#7638#7772 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7757 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7758 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7759 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7760 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7764 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7203#7207#7617#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7758::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7774 = GenSym(26)
      ##a2#7775 = GenSym(27)
      ##div_a#7776 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7774::Float64,##a2#7775::Float64))
      ####afactor#7133#7777 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7775::Float64))
      ####bfactor#7134#7778 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7774::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7775::Float64,##a2#7775::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7783 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7131#7139#7783 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7776::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7787 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7382#7787 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7788 = GenSym(29)
      ##a2#7789 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7794 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7179#7794 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7788::Float64,##a2#7789::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7608::Tuple{Float64}
  ##xs#7609::Tuple{}
  ##xs#7610::Tuple{}
  ##xs#7611::Tuple{Int64}
  ##xs#7612::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7608::Tuple{Float64}
  ##xs#7609::Tuple{}
  ##xs#7610::Tuple{}
  ##xs#7611::Tuple{Int64}
  ##xs#7612::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7118#7120#7652::Tuple{}
  ######b#7119#7121#7653::Tuple{}
  ####_var0#7122#7654::Tuple{}
  ##a1#7655::Float64
  ##a2#7656::Float64
  ######a#7123#7175#7657::Tuple{}
  ######b#7124#7176#7658::Tuple{}
  ######afactor#7125#7177#7659::Float64
  ######bfactor#7126#7178#7660::Float64
  ####_var0#7179#7661::Tuple{}
  ########types#7109#7170#7520#7662::Tuple{Type{Int64}}
  ##a#7663::Float64
  ##exp_a#7664::Float64
  ##deriv#7665::Float64
  ####G#7613#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7668::Tuple{}
  ##########x#7200#7202#7206#7616#7669::Float64
  ########_var0#7203#7207#7617#7670::Tuple{}
  ##a1#7671::Float64
  ##a2#7672::Float64
  ######a#7123#7175#7673::Tuple{}
  ######b#7124#7176#7674::Tuple{}
  ######afactor#7125#7177#7675::Float64
  ######bfactor#7126#7178#7676::Float64
  ####_var0#7179#7677::Tuple{}
  ######types#7109#7170#7678::Tuple{Type{Int64}}
  ######types#7109#7170#7679::Tuple{Type{Int64}}
  ######types#7109#7170#7680::Tuple{Type{Int64}}
  ########tup#7107#7110#7114#7681::Tuple{}
  ########x#7108#7111#7115#7682::Int64
  ######_var0#7112#7116#7683::Tuple{}
  ########types#7109#7113#7117#7684::Tuple{Type{Int64}}
  ##xs#7685::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7618#7686::Float64
  ####a2#7619#7687::Float64
  ########a#7123#7175#7620#7688::Tuple{}
  ########b#7124#7176#7621#7689::Tuple{}
  ########afactor#7125#7177#7622#7690::Float64
  ########bfactor#7126#7178#7623#7691::Float64
  ######_var0#7179#7624#7692::Tuple{}
  ####a1#7625#7693::Float64
  ####a2#7626#7694::Float64
  ########a#7123#7175#7627#7695::Tuple{}
  ########b#7124#7176#7628#7696::Tuple{}
  ########afactor#7125#7177#7629#7697::Float64
  ########bfactor#7126#7178#7630#7698::Float64
  ######_var0#7179#7631#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ##div_a#7702::Float64
  ####afactor#7133#7703::Float64
  ####bfactor#7134#7704::Float64
  ########a#7123#7127#7135#7705::Tuple{}
  ########b#7124#7128#7136#7706::Tuple{}
  ########afactor#7125#7129#7137#7707::Float64
  ########bfactor#7126#7130#7138#7708::Float64
  ######_var0#7131#7139#7709::Tuple{}
  ######types#7132#7140#7710::Tuple{Type{Float64}}
  ##xs#7711::Tuple{}
  ##########tup#7107#7110#7114#7632#7712::Tuple{}
  ##########x#7108#7111#7115#7633#7713::Int64
  ########_var0#7112#7116#7634#7714::Tuple{}
  ##########types#7109#7113#7117#7635#7715::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7716::Tuple{}
  ########x#7108#7111#7637#7717::Int64
  ######_var0#7112#7638#7718::Tuple{}
  ########types#7109#7113#7639#7719::Tuple{Type{Int64}}
  ######types#7109#7377#7720::Tuple{Type{Int64}}
  ######types#7109#7170#7721::Tuple{Type{Int64}}
  ##a1#7722::Float64
  ##a2#7723::Float64
  ######a#7123#7175#7724::Tuple{}
  ######b#7124#7176#7725::Tuple{}
  ######afactor#7125#7177#7726::Float64
  ######bfactor#7126#7178#7727::Float64
  ####_var0#7179#7728::Tuple{}
  ##xs#7729::Tuple{}
  ########a#7118#7120#7171#7730::Tuple{}
  ########b#7119#7121#7172#7731::Tuple{}
  ######_var0#7122#7173#7732::Tuple{}
  ########types#7109#7170#7174#7733::Tuple{Type{Int64}}
  ##xs#7734::Tuple{Int64}
  ##########tup#7107#7110#7114#7644#7735::Tuple{}
  ##########x#7108#7111#7115#7645#7736::Int64
  ########_var0#7112#7116#7646#7737::Tuple{}
  ##########types#7109#7113#7117#7647#7738::Tuple{Type{Int64}}
  ########tup#7107#7110#7648#7739::Tuple{}
  ########x#7108#7111#7649#7740::Int64
  ######_var0#7112#7650#7741::Tuple{}
  ########types#7109#7113#7651#7742::Tuple{Type{Int64}}
  ##a1#7743::Float64
  ##a2#7744::Float64
  ##div_a#7745::Float64
  ####afactor#7133#7746::Float64
  ####bfactor#7134#7747::Float64
  ########a#7123#7127#7135#7748::Tuple{}
  ########b#7124#7128#7136#7749::Tuple{}
  ########afactor#7125#7129#7137#7750::Float64
  ########bfactor#7126#7130#7138#7751::Float64
  ######_var0#7131#7139#7752::Tuple{}
  ######types#7132#7140#7753::Tuple{Type{Float64}}
  ######a#7378#7380#7754::Tuple{}
  ######b#7379#7381#7755::Tuple{}
  ####_var0#7382#7756::Tuple{}
  ##a#7757::Float64
  ##exp_a#7758::Float64
  ##deriv#7759::Float64
  ####G#7613#7760::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7761::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7762::Tuple{}
  ##########x#7200#7202#7206#7616#7763::Float64
  ########_var0#7203#7207#7617#7764::Tuple{}
  ##xs#7765::Tuple{}
  ##########tup#7107#7110#7114#7632#7766::Tuple{}
  ##########x#7108#7111#7115#7633#7767::Int64
  ########_var0#7112#7116#7634#7768::Tuple{}
  ##########types#7109#7113#7117#7635#7769::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7770::Tuple{}
  ########x#7108#7111#7637#7771::Int64
  ######_var0#7112#7638#7772::Tuple{}
  ########types#7109#7113#7639#7773::Tuple{Type{Int64}}
  ##a1#7774::Float64
  ##a2#7775::Float64
  ##div_a#7776::Float64
  ####afactor#7133#7777::Float64
  ####bfactor#7134#7778::Float64
  ########a#7123#7127#7135#7779::Tuple{}
  ########b#7124#7128#7136#7780::Tuple{}
  ########afactor#7125#7129#7137#7781::Float64
  ########bfactor#7126#7130#7138#7782::Float64
  ######_var0#7131#7139#7783::Tuple{}
  ######types#7132#7140#7784::Tuple{Type{Float64}}
  ######a#7378#7380#7785::Tuple{}
  ######b#7379#7381#7786::Tuple{}
  ####_var0#7382#7787::Tuple{}
  ##a1#7788::Float64
  ##a2#7789::Float64
  ######a#7123#7175#7790::Tuple{}
  ######b#7124#7176#7791::Tuple{}
  ######afactor#7125#7177#7792::Float64
  ######bfactor#7126#7178#7793::Float64
  ####_var0#7179#7794::Tuple{}
  ######types#7109#7377#7795::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7654 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7655 = GenSym(3)
      ##a2#7656 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7661 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7179#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7655::Float64,##a2#7656::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7663 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7664 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7665 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7670 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7203#7207#7617#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7664::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7671 = GenSym(6)
      ##a2#7672 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7677 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7671::Float64,##a2#7672::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7683 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7112#7116#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7618#7686 = GenSym(8)
      ####a2#7619#7687 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7624#7692 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7624#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7618#7686::Float64,####a2#7619#7687::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7625#7693 = GenSym(11)
      ####a2#7626#7694 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7631#7699 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7179#7631#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7625#7693::Float64,####a2#7626#7694::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7700 = GenSym(14)
      ##a2#7701 = GenSym(15)
      ##div_a#7702 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7700::Float64,##a2#7701::Float64))
      ####afactor#7133#7703 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7701::Float64))
      ####bfactor#7134#7704 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7700::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7701::Float64,##a2#7701::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7709 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7131#7139#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7702::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7722 = GenSym(17)
      ##a2#7723 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7728 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7179#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7722::Float64,##a2#7723::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7714 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7112#7116#7634#7714 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7718 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7112#7638#7718 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7732 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7122#7173#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7646#7737 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7646#7737 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7650#7741 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7112#7650#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7743 = GenSym(22)
      ##a2#7744 = GenSym(23)
      ##div_a#7745 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7743::Float64,##a2#7744::Float64))
      ####afactor#7133#7746 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7744::Float64))
      ####bfactor#7134#7747 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7743::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7744::Float64,##a2#7744::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7752 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7131#7139#7752 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7745::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7756 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7382#7756 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7768 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7112#7116#7634#7768 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7772 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7112#7638#7772 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7757 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7758 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7759 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7760 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7764 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7203#7207#7617#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7758::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7774 = GenSym(26)
      ##a2#7775 = GenSym(27)
      ##div_a#7776 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7774::Float64,##a2#7775::Float64))
      ####afactor#7133#7777 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7775::Float64))
      ####bfactor#7134#7778 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7774::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7775::Float64,##a2#7775::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7783 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7131#7139#7783 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7776::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7787 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7382#7787 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7788 = GenSym(29)
      ##a2#7789 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7794 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7179#7794 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7788::Float64,##a2#7789::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7118#7120#7652::Tuple{}
  ######b#7119#7121#7653::Tuple{}
  ####_var0#7122#7654::Tuple{}
  ##a1#7655::Float64
  ##a2#7656::Float64
  ######a#7123#7175#7657::Tuple{}
  ######b#7124#7176#7658::Tuple{}
  ######afactor#7125#7177#7659::Float64
  ######bfactor#7126#7178#7660::Float64
  ####_var0#7179#7661::Tuple{}
  ########types#7109#7170#7520#7662::Tuple{Type{Int64}}
  ##a#7663::Float64
  ##exp_a#7664::Float64
  ##deriv#7665::Float64
  ####G#7613#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7668::Tuple{}
  ##########x#7200#7202#7206#7616#7669::Float64
  ########_var0#7203#7207#7617#7670::Tuple{}
  ##a1#7671::Float64
  ##a2#7672::Float64
  ######a#7123#7175#7673::Tuple{}
  ######b#7124#7176#7674::Tuple{}
  ######afactor#7125#7177#7675::Float64
  ######bfactor#7126#7178#7676::Float64
  ####_var0#7179#7677::Tuple{}
  ######types#7109#7170#7678::Tuple{Type{Int64}}
  ######types#7109#7170#7679::Tuple{Type{Int64}}
  ######types#7109#7170#7680::Tuple{Type{Int64}}
  ########tup#7107#7110#7114#7681::Tuple{}
  ########x#7108#7111#7115#7682::Int64
  ######_var0#7112#7116#7683::Tuple{}
  ########types#7109#7113#7117#7684::Tuple{Type{Int64}}
  ##xs#7685::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7618#7686::Float64
  ####a2#7619#7687::Float64
  ########a#7123#7175#7620#7688::Tuple{}
  ########b#7124#7176#7621#7689::Tuple{}
  ########afactor#7125#7177#7622#7690::Float64
  ########bfactor#7126#7178#7623#7691::Float64
  ######_var0#7179#7624#7692::Tuple{}
  ####a1#7625#7693::Float64
  ####a2#7626#7694::Float64
  ########a#7123#7175#7627#7695::Tuple{}
  ########b#7124#7176#7628#7696::Tuple{}
  ########afactor#7125#7177#7629#7697::Float64
  ########bfactor#7126#7178#7630#7698::Float64
  ######_var0#7179#7631#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ##div_a#7702::Float64
  ####afactor#7133#7703::Float64
  ####bfactor#7134#7704::Float64
  ########a#7123#7127#7135#7705::Tuple{}
  ########b#7124#7128#7136#7706::Tuple{}
  ########afactor#7125#7129#7137#7707::Float64
  ########bfactor#7126#7130#7138#7708::Float64
  ######_var0#7131#7139#7709::Tuple{}
  ######types#7132#7140#7710::Tuple{Type{Float64}}
  ##xs#7711::Tuple{}
  ##########tup#7107#7110#7114#7632#7712::Tuple{}
  ##########x#7108#7111#7115#7633#7713::Int64
  ########_var0#7112#7116#7634#7714::Tuple{}
  ##########types#7109#7113#7117#7635#7715::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7716::Tuple{}
  ########x#7108#7111#7637#7717::Int64
  ######_var0#7112#7638#7718::Tuple{}
  ########types#7109#7113#7639#7719::Tuple{Type{Int64}}
  ######types#7109#7377#7720::Tuple{Type{Int64}}
  ######types#7109#7170#7721::Tuple{Type{Int64}}
  ##a1#7722::Float64
  ##a2#7723::Float64
  ######a#7123#7175#7724::Tuple{}
  ######b#7124#7176#7725::Tuple{}
  ######afactor#7125#7177#7726::Float64
  ######bfactor#7126#7178#7727::Float64
  ####_var0#7179#7728::Tuple{}
  ##xs#7729::Tuple{}
  ########a#7118#7120#7171#7730::Tuple{}
  ########b#7119#7121#7172#7731::Tuple{}
  ######_var0#7122#7173#7732::Tuple{}
  ########types#7109#7170#7174#7733::Tuple{Type{Int64}}
  ##xs#7734::Tuple{Int64}
  ##########tup#7107#7110#7114#7644#7735::Tuple{}
  ##########x#7108#7111#7115#7645#7736::Int64
  ########_var0#7112#7116#7646#7737::Tuple{}
  ##########types#7109#7113#7117#7647#7738::Tuple{Type{Int64}}
  ########tup#7107#7110#7648#7739::Tuple{}
  ########x#7108#7111#7649#7740::Int64
  ######_var0#7112#7650#7741::Tuple{}
  ########types#7109#7113#7651#7742::Tuple{Type{Int64}}
  ##a1#7743::Float64
  ##a2#7744::Float64
  ##div_a#7745::Float64
  ####afactor#7133#7746::Float64
  ####bfactor#7134#7747::Float64
  ########a#7123#7127#7135#7748::Tuple{}
  ########b#7124#7128#7136#7749::Tuple{}
  ########afactor#7125#7129#7137#7750::Float64
  ########bfactor#7126#7130#7138#7751::Float64
  ######_var0#7131#7139#7752::Tuple{}
  ######types#7132#7140#7753::Tuple{Type{Float64}}
  ######a#7378#7380#7754::Tuple{}
  ######b#7379#7381#7755::Tuple{}
  ####_var0#7382#7756::Tuple{}
  ##a#7757::Float64
  ##exp_a#7758::Float64
  ##deriv#7759::Float64
  ####G#7613#7760::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7761::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7762::Tuple{}
  ##########x#7200#7202#7206#7616#7763::Float64
  ########_var0#7203#7207#7617#7764::Tuple{}
  ##xs#7765::Tuple{}
  ##########tup#7107#7110#7114#7632#7766::Tuple{}
  ##########x#7108#7111#7115#7633#7767::Int64
  ########_var0#7112#7116#7634#7768::Tuple{}
  ##########types#7109#7113#7117#7635#7769::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7770::Tuple{}
  ########x#7108#7111#7637#7771::Int64
  ######_var0#7112#7638#7772::Tuple{}
  ########types#7109#7113#7639#7773::Tuple{Type{Int64}}
  ##a1#7774::Float64
  ##a2#7775::Float64
  ##div_a#7776::Float64
  ####afactor#7133#7777::Float64
  ####bfactor#7134#7778::Float64
  ########a#7123#7127#7135#7779::Tuple{}
  ########b#7124#7128#7136#7780::Tuple{}
  ########afactor#7125#7129#7137#7781::Float64
  ########bfactor#7126#7130#7138#7782::Float64
  ######_var0#7131#7139#7783::Tuple{}
  ######types#7132#7140#7784::Tuple{Type{Float64}}
  ######a#7378#7380#7785::Tuple{}
  ######b#7379#7381#7786::Tuple{}
  ####_var0#7382#7787::Tuple{}
  ##a1#7788::Float64
  ##a2#7789::Float64
  ######a#7123#7175#7790::Tuple{}
  ######b#7124#7176#7791::Tuple{}
  ######afactor#7125#7177#7792::Float64
  ######bfactor#7126#7178#7793::Float64
  ####_var0#7179#7794::Tuple{}
  ######types#7109#7377#7795::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7654 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7655 = GenSym(3)
      ##a2#7656 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7661 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7179#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7655::Float64,##a2#7656::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7663 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7664 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7665 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7670 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7203#7207#7617#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7664::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7671 = GenSym(6)
      ##a2#7672 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7677 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7671::Float64,##a2#7672::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7683 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7112#7116#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7618#7686 = GenSym(8)
      ####a2#7619#7687 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7624#7692 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7624#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7618#7686::Float64,####a2#7619#7687::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7625#7693 = GenSym(11)
      ####a2#7626#7694 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7631#7699 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7179#7631#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7625#7693::Float64,####a2#7626#7694::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7700 = GenSym(14)
      ##a2#7701 = GenSym(15)
      ##div_a#7702 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7700::Float64,##a2#7701::Float64))
      ####afactor#7133#7703 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7701::Float64))
      ####bfactor#7134#7704 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7700::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7701::Float64,##a2#7701::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7709 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7131#7139#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7702::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7722 = GenSym(17)
      ##a2#7723 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7728 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7179#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7722::Float64,##a2#7723::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7714 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7112#7116#7634#7714 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7718 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7112#7638#7718 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7732 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7122#7173#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7646#7737 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7646#7737 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7650#7741 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7112#7650#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7743 = GenSym(22)
      ##a2#7744 = GenSym(23)
      ##div_a#7745 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7743::Float64,##a2#7744::Float64))
      ####afactor#7133#7746 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7744::Float64))
      ####bfactor#7134#7747 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7743::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7744::Float64,##a2#7744::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7752 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7131#7139#7752 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7745::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7756 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7382#7756 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7768 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7112#7116#7634#7768 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7772 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7112#7638#7772 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7757 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7758 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7759 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7760 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7764 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7203#7207#7617#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7758::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7774 = GenSym(26)
      ##a2#7775 = GenSym(27)
      ##div_a#7776 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7774::Float64,##a2#7775::Float64))
      ####afactor#7133#7777 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7775::Float64))
      ####bfactor#7134#7778 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7774::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7775::Float64,##a2#7775::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7783 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7131#7139#7783 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7776::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7787 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7382#7787 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7788 = GenSym(29)
      ##a2#7789 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7794 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7179#7794 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7788::Float64,##a2#7789::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7118#7120#7652::Tuple{}
  ######b#7119#7121#7653::Tuple{}
  ####_var0#7122#7654::Tuple{}
  ##a1#7655::Float64
  ##a2#7656::Float64
  ######a#7123#7175#7657::Tuple{}
  ######b#7124#7176#7658::Tuple{}
  ######afactor#7125#7177#7659::Float64
  ######bfactor#7126#7178#7660::Float64
  ####_var0#7179#7661::Tuple{}
  ########types#7109#7170#7520#7662::Tuple{Type{Int64}}
  ##a#7663::Float64
  ##exp_a#7664::Float64
  ##deriv#7665::Float64
  ####G#7613#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7668::Tuple{}
  ##########x#7200#7202#7206#7616#7669::Float64
  ########_var0#7203#7207#7617#7670::Tuple{}
  ##a1#7671::Float64
  ##a2#7672::Float64
  ######a#7123#7175#7673::Tuple{}
  ######b#7124#7176#7674::Tuple{}
  ######afactor#7125#7177#7675::Float64
  ######bfactor#7126#7178#7676::Float64
  ####_var0#7179#7677::Tuple{}
  ######types#7109#7170#7678::Tuple{Type{Int64}}
  ######types#7109#7170#7679::Tuple{Type{Int64}}
  ######types#7109#7170#7680::Tuple{Type{Int64}}
  ########tup#7107#7110#7114#7681::Tuple{}
  ########x#7108#7111#7115#7682::Int64
  ######_var0#7112#7116#7683::Tuple{}
  ########types#7109#7113#7117#7684::Tuple{Type{Int64}}
  ##xs#7685::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7618#7686::Float64
  ####a2#7619#7687::Float64
  ########a#7123#7175#7620#7688::Tuple{}
  ########b#7124#7176#7621#7689::Tuple{}
  ########afactor#7125#7177#7622#7690::Float64
  ########bfactor#7126#7178#7623#7691::Float64
  ######_var0#7179#7624#7692::Tuple{}
  ####a1#7625#7693::Float64
  ####a2#7626#7694::Float64
  ########a#7123#7175#7627#7695::Tuple{}
  ########b#7124#7176#7628#7696::Tuple{}
  ########afactor#7125#7177#7629#7697::Float64
  ########bfactor#7126#7178#7630#7698::Float64
  ######_var0#7179#7631#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ##div_a#7702::Float64
  ####afactor#7133#7703::Float64
  ####bfactor#7134#7704::Float64
  ########a#7123#7127#7135#7705::Tuple{}
  ########b#7124#7128#7136#7706::Tuple{}
  ########afactor#7125#7129#7137#7707::Float64
  ########bfactor#7126#7130#7138#7708::Float64
  ######_var0#7131#7139#7709::Tuple{}
  ######types#7132#7140#7710::Tuple{Type{Float64}}
  ##xs#7711::Tuple{}
  ##########tup#7107#7110#7114#7632#7712::Tuple{}
  ##########x#7108#7111#7115#7633#7713::Int64
  ########_var0#7112#7116#7634#7714::Tuple{}
  ##########types#7109#7113#7117#7635#7715::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7716::Tuple{}
  ########x#7108#7111#7637#7717::Int64
  ######_var0#7112#7638#7718::Tuple{}
  ########types#7109#7113#7639#7719::Tuple{Type{Int64}}
  ######types#7109#7377#7720::Tuple{Type{Int64}}
  ######types#7109#7170#7721::Tuple{Type{Int64}}
  ##a1#7722::Float64
  ##a2#7723::Float64
  ######a#7123#7175#7724::Tuple{}
  ######b#7124#7176#7725::Tuple{}
  ######afactor#7125#7177#7726::Float64
  ######bfactor#7126#7178#7727::Float64
  ####_var0#7179#7728::Tuple{}
  ##xs#7729::Tuple{}
  ########a#7118#7120#7171#7730::Tuple{}
  ########b#7119#7121#7172#7731::Tuple{}
  ######_var0#7122#7173#7732::Tuple{}
  ########types#7109#7170#7174#7733::Tuple{Type{Int64}}
  ##xs#7734::Tuple{Int64}
  ##########tup#7107#7110#7114#7644#7735::Tuple{}
  ##########x#7108#7111#7115#7645#7736::Int64
  ########_var0#7112#7116#7646#7737::Tuple{}
  ##########types#7109#7113#7117#7647#7738::Tuple{Type{Int64}}
  ########tup#7107#7110#7648#7739::Tuple{}
  ########x#7108#7111#7649#7740::Int64
  ######_var0#7112#7650#7741::Tuple{}
  ########types#7109#7113#7651#7742::Tuple{Type{Int64}}
  ##a1#7743::Float64
  ##a2#7744::Float64
  ##div_a#7745::Float64
  ####afactor#7133#7746::Float64
  ####bfactor#7134#7747::Float64
  ########a#7123#7127#7135#7748::Tuple{}
  ########b#7124#7128#7136#7749::Tuple{}
  ########afactor#7125#7129#7137#7750::Float64
  ########bfactor#7126#7130#7138#7751::Float64
  ######_var0#7131#7139#7752::Tuple{}
  ######types#7132#7140#7753::Tuple{Type{Float64}}
  ######a#7378#7380#7754::Tuple{}
  ######b#7379#7381#7755::Tuple{}
  ####_var0#7382#7756::Tuple{}
  ##a#7757::Float64
  ##exp_a#7758::Float64
  ##deriv#7759::Float64
  ####G#7613#7760::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7761::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7762::Tuple{}
  ##########x#7200#7202#7206#7616#7763::Float64
  ########_var0#7203#7207#7617#7764::Tuple{}
  ##xs#7765::Tuple{}
  ##########tup#7107#7110#7114#7632#7766::Tuple{}
  ##########x#7108#7111#7115#7633#7767::Int64
  ########_var0#7112#7116#7634#7768::Tuple{}
  ##########types#7109#7113#7117#7635#7769::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7770::Tuple{}
  ########x#7108#7111#7637#7771::Int64
  ######_var0#7112#7638#7772::Tuple{}
  ########types#7109#7113#7639#7773::Tuple{Type{Int64}}
  ##a1#7774::Float64
  ##a2#7775::Float64
  ##div_a#7776::Float64
  ####afactor#7133#7777::Float64
  ####bfactor#7134#7778::Float64
  ########a#7123#7127#7135#7779::Tuple{}
  ########b#7124#7128#7136#7780::Tuple{}
  ########afactor#7125#7129#7137#7781::Float64
  ########bfactor#7126#7130#7138#7782::Float64
  ######_var0#7131#7139#7783::Tuple{}
  ######types#7132#7140#7784::Tuple{Type{Float64}}
  ######a#7378#7380#7785::Tuple{}
  ######b#7379#7381#7786::Tuple{}
  ####_var0#7382#7787::Tuple{}
  ##a1#7788::Float64
  ##a2#7789::Float64
  ######a#7123#7175#7790::Tuple{}
  ######b#7124#7176#7791::Tuple{}
  ######afactor#7125#7177#7792::Float64
  ######bfactor#7126#7178#7793::Float64
  ####_var0#7179#7794::Tuple{}
  ######types#7109#7377#7795::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7654 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7655 = GenSym(3)
      ##a2#7656 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7661 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7179#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7655::Float64,##a2#7656::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7663 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7664 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7665 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7670 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7203#7207#7617#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7664::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7671 = GenSym(6)
      ##a2#7672 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7677 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7671::Float64,##a2#7672::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7683 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7112#7116#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7618#7686 = GenSym(8)
      ####a2#7619#7687 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7624#7692 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7624#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7618#7686::Float64,####a2#7619#7687::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7625#7693 = GenSym(11)
      ####a2#7626#7694 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7631#7699 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7179#7631#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7625#7693::Float64,####a2#7626#7694::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7700 = GenSym(14)
      ##a2#7701 = GenSym(15)
      ##div_a#7702 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7700::Float64,##a2#7701::Float64))
      ####afactor#7133#7703 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7701::Float64))
      ####bfactor#7134#7704 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7700::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7701::Float64,##a2#7701::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7709 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7131#7139#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7702::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7722 = GenSym(17)
      ##a2#7723 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7728 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7179#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7722::Float64,##a2#7723::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7714 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7112#7116#7634#7714 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7718 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7112#7638#7718 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7732 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7122#7173#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7646#7737 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7646#7737 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7650#7741 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7112#7650#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7743 = GenSym(22)
      ##a2#7744 = GenSym(23)
      ##div_a#7745 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7743::Float64,##a2#7744::Float64))
      ####afactor#7133#7746 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7744::Float64))
      ####bfactor#7134#7747 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7743::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7744::Float64,##a2#7744::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7752 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7131#7139#7752 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7745::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7756 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7382#7756 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7768 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7112#7116#7634#7768 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7772 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7112#7638#7772 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7757 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7758 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7759 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7760 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7764 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7203#7207#7617#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7758::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7774 = GenSym(26)
      ##a2#7775 = GenSym(27)
      ##div_a#7776 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7774::Float64,##a2#7775::Float64))
      ####afactor#7133#7777 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7775::Float64))
      ####bfactor#7134#7778 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7774::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7775::Float64,##a2#7775::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7783 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7131#7139#7783 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7776::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7787 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7382#7787 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7788 = GenSym(29)
      ##a2#7789 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7794 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7179#7794 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7788::Float64,##a2#7789::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7118#7120#7652::Tuple{}
  ######b#7119#7121#7653::Tuple{}
  ####_var0#7122#7654::Tuple{}
  ##a1#7655::Float64
  ##a2#7656::Float64
  ######a#7123#7175#7657::Tuple{}
  ######b#7124#7176#7658::Tuple{}
  ######afactor#7125#7177#7659::Float64
  ######bfactor#7126#7178#7660::Float64
  ####_var0#7179#7661::Tuple{}
  ########types#7109#7170#7520#7662::Tuple{Type{Int64}}
  ##a#7663::Float64
  ##exp_a#7664::Float64
  ##deriv#7665::Float64
  ####G#7613#7666::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7667::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7668::Tuple{}
  ##########x#7200#7202#7206#7616#7669::Float64
  ########_var0#7203#7207#7617#7670::Tuple{}
  ##a1#7671::Float64
  ##a2#7672::Float64
  ######a#7123#7175#7673::Tuple{}
  ######b#7124#7176#7674::Tuple{}
  ######afactor#7125#7177#7675::Float64
  ######bfactor#7126#7178#7676::Float64
  ####_var0#7179#7677::Tuple{}
  ######types#7109#7170#7678::Tuple{Type{Int64}}
  ######types#7109#7170#7679::Tuple{Type{Int64}}
  ######types#7109#7170#7680::Tuple{Type{Int64}}
  ########tup#7107#7110#7114#7681::Tuple{}
  ########x#7108#7111#7115#7682::Int64
  ######_var0#7112#7116#7683::Tuple{}
  ########types#7109#7113#7117#7684::Tuple{Type{Int64}}
  ##xs#7685::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7618#7686::Float64
  ####a2#7619#7687::Float64
  ########a#7123#7175#7620#7688::Tuple{}
  ########b#7124#7176#7621#7689::Tuple{}
  ########afactor#7125#7177#7622#7690::Float64
  ########bfactor#7126#7178#7623#7691::Float64
  ######_var0#7179#7624#7692::Tuple{}
  ####a1#7625#7693::Float64
  ####a2#7626#7694::Float64
  ########a#7123#7175#7627#7695::Tuple{}
  ########b#7124#7176#7628#7696::Tuple{}
  ########afactor#7125#7177#7629#7697::Float64
  ########bfactor#7126#7178#7630#7698::Float64
  ######_var0#7179#7631#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ##div_a#7702::Float64
  ####afactor#7133#7703::Float64
  ####bfactor#7134#7704::Float64
  ########a#7123#7127#7135#7705::Tuple{}
  ########b#7124#7128#7136#7706::Tuple{}
  ########afactor#7125#7129#7137#7707::Float64
  ########bfactor#7126#7130#7138#7708::Float64
  ######_var0#7131#7139#7709::Tuple{}
  ######types#7132#7140#7710::Tuple{Type{Float64}}
  ##xs#7711::Tuple{}
  ##########tup#7107#7110#7114#7632#7712::Tuple{}
  ##########x#7108#7111#7115#7633#7713::Int64
  ########_var0#7112#7116#7634#7714::Tuple{}
  ##########types#7109#7113#7117#7635#7715::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7716::Tuple{}
  ########x#7108#7111#7637#7717::Int64
  ######_var0#7112#7638#7718::Tuple{}
  ########types#7109#7113#7639#7719::Tuple{Type{Int64}}
  ######types#7109#7377#7720::Tuple{Type{Int64}}
  ######types#7109#7170#7721::Tuple{Type{Int64}}
  ##a1#7722::Float64
  ##a2#7723::Float64
  ######a#7123#7175#7724::Tuple{}
  ######b#7124#7176#7725::Tuple{}
  ######afactor#7125#7177#7726::Float64
  ######bfactor#7126#7178#7727::Float64
  ####_var0#7179#7728::Tuple{}
  ##xs#7729::Tuple{}
  ########a#7118#7120#7171#7730::Tuple{}
  ########b#7119#7121#7172#7731::Tuple{}
  ######_var0#7122#7173#7732::Tuple{}
  ########types#7109#7170#7174#7733::Tuple{Type{Int64}}
  ##xs#7734::Tuple{Int64}
  ##########tup#7107#7110#7114#7644#7735::Tuple{}
  ##########x#7108#7111#7115#7645#7736::Int64
  ########_var0#7112#7116#7646#7737::Tuple{}
  ##########types#7109#7113#7117#7647#7738::Tuple{Type{Int64}}
  ########tup#7107#7110#7648#7739::Tuple{}
  ########x#7108#7111#7649#7740::Int64
  ######_var0#7112#7650#7741::Tuple{}
  ########types#7109#7113#7651#7742::Tuple{Type{Int64}}
  ##a1#7743::Float64
  ##a2#7744::Float64
  ##div_a#7745::Float64
  ####afactor#7133#7746::Float64
  ####bfactor#7134#7747::Float64
  ########a#7123#7127#7135#7748::Tuple{}
  ########b#7124#7128#7136#7749::Tuple{}
  ########afactor#7125#7129#7137#7750::Float64
  ########bfactor#7126#7130#7138#7751::Float64
  ######_var0#7131#7139#7752::Tuple{}
  ######types#7132#7140#7753::Tuple{Type{Float64}}
  ######a#7378#7380#7754::Tuple{}
  ######b#7379#7381#7755::Tuple{}
  ####_var0#7382#7756::Tuple{}
  ##a#7757::Float64
  ##exp_a#7758::Float64
  ##deriv#7759::Float64
  ####G#7613#7760::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7198#7204#7614#7761::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7199#7201#7205#7615#7762::Tuple{}
  ##########x#7200#7202#7206#7616#7763::Float64
  ########_var0#7203#7207#7617#7764::Tuple{}
  ##xs#7765::Tuple{}
  ##########tup#7107#7110#7114#7632#7766::Tuple{}
  ##########x#7108#7111#7115#7633#7767::Int64
  ########_var0#7112#7116#7634#7768::Tuple{}
  ##########types#7109#7113#7117#7635#7769::Tuple{Type{Int64}}
  ########tup#7107#7110#7636#7770::Tuple{}
  ########x#7108#7111#7637#7771::Int64
  ######_var0#7112#7638#7772::Tuple{}
  ########types#7109#7113#7639#7773::Tuple{Type{Int64}}
  ##a1#7774::Float64
  ##a2#7775::Float64
  ##div_a#7776::Float64
  ####afactor#7133#7777::Float64
  ####bfactor#7134#7778::Float64
  ########a#7123#7127#7135#7779::Tuple{}
  ########b#7124#7128#7136#7780::Tuple{}
  ########afactor#7125#7129#7137#7781::Float64
  ########bfactor#7126#7130#7138#7782::Float64
  ######_var0#7131#7139#7783::Tuple{}
  ######types#7132#7140#7784::Tuple{Type{Float64}}
  ######a#7378#7380#7785::Tuple{}
  ######b#7379#7381#7786::Tuple{}
  ####_var0#7382#7787::Tuple{}
  ##a1#7788::Float64
  ##a2#7789::Float64
  ######a#7123#7175#7790::Tuple{}
  ######b#7124#7176#7791::Tuple{}
  ######afactor#7125#7177#7792::Float64
  ######bfactor#7126#7178#7793::Float64
  ####_var0#7179#7794::Tuple{}
  ######types#7109#7377#7795::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 70:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7654 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7122#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7655 = GenSym(3)
      ##a2#7656 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7661 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7179#7661 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7655::Float64,##a2#7656::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      ##a#7663 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7664 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7665 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7663::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7666 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7670 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7203#7207#7617#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7664::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7671 = GenSym(6)
      ##a2#7672 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7677 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7179#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7671::Float64,##a2#7672::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      $(Expr(:boundscheck, false))
      ######_var0#7112#7116#7683 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7112#7116#7683 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7618#7686 = GenSym(8)
      ####a2#7619#7687 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7624#7692 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7179#7624#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7618#7686::Float64,####a2#7619#7687::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7625#7693 = GenSym(11)
      ####a2#7626#7694 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7179#7631#7699 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7179#7631#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7625#7693::Float64,####a2#7626#7694::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7700 = GenSym(14)
      ##a2#7701 = GenSym(15)
      ##div_a#7702 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7700::Float64,##a2#7701::Float64))
      ####afactor#7133#7703 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7701::Float64))
      ####bfactor#7134#7704 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7700::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7701::Float64,##a2#7701::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7709 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7131#7139#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7702::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7722 = GenSym(17)
      ##a2#7723 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7728 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7179#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7722::Float64,##a2#7723::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7714 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7112#7116#7634#7714 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7718 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7112#7638#7718 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7122#7173#7732 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7122#7173#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7646#7737 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7646#7737 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7650#7741 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7112#7650#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7743 = GenSym(22)
      ##a2#7744 = GenSym(23)
      ##div_a#7745 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7743::Float64,##a2#7744::Float64))
      ####afactor#7133#7746 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7744::Float64))
      ####bfactor#7134#7747 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7743::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7744::Float64,##a2#7744::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7752 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7131#7139#7752 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7745::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7756 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7382#7756 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7634#7768 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7112#7116#7634#7768 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7112#7638#7772 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7112#7638#7772 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7757 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7758 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7759 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7757::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7613#7760 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7203#7207#7617#7764 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7203#7207#7617#7764 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7758::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7774 = GenSym(26)
      ##a2#7775 = GenSym(27)
      ##div_a#7776 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7774::Float64,##a2#7775::Float64))
      ####afactor#7133#7777 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7775::Float64))
      ####bfactor#7134#7778 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7774::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7775::Float64,##a2#7775::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7131#7139#7783 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7131#7139#7783 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7776::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7382#7787 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7382#7787 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7788 = GenSym(29)
      ##a2#7789 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7179#7794 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7179#7794 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7788::Float64,##a2#7789::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 98:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7798#7800::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7801::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7800 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7800 = false
      2: 
      ####_var0#7798#7800::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7801 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7801 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7801::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7798#7800::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7801::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7800 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7800 = false
      2: 
      ####_var0#7798#7800::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7801 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7801 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7801::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7798#7802::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7803::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7802 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7802 = false
      2: 
      ####_var0#7798#7802::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7803 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7803 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7803::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7798#7800::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7801::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7800 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7800 = false
      2: 
      ####_var0#7798#7800::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7801 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7801 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7801::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7798#7800::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7801::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7800 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7800 = false
      2: 
      ####_var0#7798#7800::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7801 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7801 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7801::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7798#7802::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7803::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7802 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7802 = false
      2: 
      ####_var0#7798#7802::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7803 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7803 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7803::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7798#7802::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7803::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7802 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7802 = false
      2: 
      ####_var0#7798#7802::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7803 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7803 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7803::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7798#7802::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7803::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7802 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7802 = false
      2: 
      ####_var0#7798#7802::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7803 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7803 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7803::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7798#7802::UNION{BOOL,INT64}
  ########_var0#7796#7797#7799#7803::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7798#7802 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7798#7802 = false
      2: 
      ####_var0#7798#7802::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7796#7797#7799#7803 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7796#7797#7799#7803 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7796#7797#7799#7803::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7109#7170#7520#7804::Tuple{Type{Int64}}
  ########types#7109#7170#7520#7805::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7109#7170#7520#7804::Tuple{Type{Int64}}
  ########types#7109#7170#7520#7805::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7109#7170#7520#7804::Tuple{Type{Int64}}
  ########types#7109#7170#7520#7805::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7109#7170#7520#7804::Tuple{Type{Int64}}
  ########types#7109#7170#7520#7805::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7109#7170#7520#7804::Tuple{Type{Int64}}
  ########types#7109#7170#7520#7805::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 83:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 84:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





