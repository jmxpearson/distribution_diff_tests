____________________________
ntrials
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 50:
      return (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64




____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64)::Tuple{Int64,Float64,Float64}
  end::Tuple{Int64,Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 52:
      return (top(tuple))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7100::Tuple{}
  ######b#7078#7080#7101::Tuple{}
  ####_var0#7081#7102::Tuple{}
  ########tup#7066#7069#7073#7103::Tuple{}
  ########x#7067#7070#7074#7104::Int64
  ######_var0#7071#7075#7105::Tuple{}
  ########types#7068#7072#7076#7106::Tuple{Type{Int64}}
  ##a1#7107::Float64
  ##a2#7108::Float64
  ##div_a#7109::Float64
  ####afactor#7092#7110::Float64
  ####bfactor#7093#7111::Float64
  ########a#7082#7086#7094#7112::Tuple{}
  ########b#7083#7087#7095#7113::Tuple{}
  ########afactor#7084#7088#7096#7114::Float64
  ########bfactor#7085#7089#7097#7115::Float64
  ######_var0#7090#7098#7116::Tuple{}
  ######types#7091#7099#7117::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7105 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7071#7075#7105 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7081#7102 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7107 = GenSym(0)
      ##a2#7108 = GenSym(1)
      ##div_a#7109 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7107::Float64,##a2#7108::Float64))
      ####afactor#7092#7110 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7108::Float64))
      ####bfactor#7093#7111 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7107::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7108::Float64,##a2#7108::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7116 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7090#7098#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7109::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64,(top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7100::Tuple{}
  ######b#7078#7080#7101::Tuple{}
  ####_var0#7081#7102::Tuple{}
  ########tup#7066#7069#7073#7103::Tuple{}
  ########x#7067#7070#7074#7104::Int64
  ######_var0#7071#7075#7105::Tuple{}
  ########types#7068#7072#7076#7106::Tuple{Type{Int64}}
  ##a1#7107::Float64
  ##a2#7108::Float64
  ##div_a#7109::Float64
  ####afactor#7092#7110::Float64
  ####bfactor#7093#7111::Float64
  ########a#7082#7086#7094#7112::Tuple{}
  ########b#7083#7087#7095#7113::Tuple{}
  ########afactor#7084#7088#7096#7114::Float64
  ########bfactor#7085#7089#7097#7115::Float64
  ######_var0#7090#7098#7116::Tuple{}
  ######types#7091#7099#7117::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7105 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7071#7075#7105 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7081#7102 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7107 = GenSym(0)
      ##a2#7108 = GenSym(1)
      ##div_a#7109 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7107::Float64,##a2#7108::Float64))
      ####afactor#7092#7110 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7108::Float64))
      ####bfactor#7093#7111 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7107::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7108::Float64,##a2#7108::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7116 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7090#7098#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7109::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7100::Tuple{}
  ######b#7078#7080#7101::Tuple{}
  ####_var0#7081#7102::Tuple{}
  ########tup#7066#7069#7073#7103::Tuple{}
  ########x#7067#7070#7074#7104::Int64
  ######_var0#7071#7075#7105::Tuple{}
  ########types#7068#7072#7076#7106::Tuple{Type{Int64}}
  ##a1#7107::Float64
  ##a2#7108::Float64
  ##div_a#7109::Float64
  ####afactor#7092#7110::Float64
  ####bfactor#7093#7111::Float64
  ########a#7082#7086#7094#7112::Tuple{}
  ########b#7083#7087#7095#7113::Tuple{}
  ########afactor#7084#7088#7096#7114::Float64
  ########bfactor#7085#7089#7097#7115::Float64
  ######_var0#7090#7098#7116::Tuple{}
  ######types#7091#7099#7117::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7105 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7071#7075#7105 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7081#7102 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7107 = GenSym(0)
      ##a2#7108 = GenSym(1)
      ##div_a#7109 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7107::Float64,##a2#7108::Float64))
      ####afactor#7092#7110 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7108::Float64))
      ####bfactor#7093#7111 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7107::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7108::Float64,##a2#7108::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7116 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7090#7098#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7109::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7100::Tuple{}
  ######b#7078#7080#7101::Tuple{}
  ####_var0#7081#7102::Tuple{}
  ########tup#7066#7069#7073#7103::Tuple{}
  ########x#7067#7070#7074#7104::Int64
  ######_var0#7071#7075#7105::Tuple{}
  ########types#7068#7072#7076#7106::Tuple{Type{Int64}}
  ##a1#7107::Float64
  ##a2#7108::Float64
  ##div_a#7109::Float64
  ####afactor#7092#7110::Float64
  ####bfactor#7093#7111::Float64
  ########a#7082#7086#7094#7112::Tuple{}
  ########b#7083#7087#7095#7113::Tuple{}
  ########afactor#7084#7088#7096#7114::Float64
  ########bfactor#7085#7089#7097#7115::Float64
  ######_var0#7090#7098#7116::Tuple{}
  ######types#7091#7099#7117::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7105 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7071#7075#7105 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7081#7102 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7107 = GenSym(0)
      ##a2#7108 = GenSym(1)
      ##div_a#7109 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7107::Float64,##a2#7108::Float64))
      ####afactor#7092#7110 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7108::Float64))
      ####bfactor#7093#7111 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7107::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7108::Float64,##a2#7108::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7116 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7090#7098#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7109::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7077#7079#7100::Tuple{}
  ######b#7078#7080#7101::Tuple{}
  ####_var0#7081#7102::Tuple{}
  ########tup#7066#7069#7073#7103::Tuple{}
  ########x#7067#7070#7074#7104::Int64
  ######_var0#7071#7075#7105::Tuple{}
  ########types#7068#7072#7076#7106::Tuple{Type{Int64}}
  ##a1#7107::Float64
  ##a2#7108::Float64
  ##div_a#7109::Float64
  ####afactor#7092#7110::Float64
  ####bfactor#7093#7111::Float64
  ########a#7082#7086#7094#7112::Tuple{}
  ########b#7083#7087#7095#7113::Tuple{}
  ########afactor#7084#7088#7096#7114::Float64
  ########bfactor#7085#7089#7097#7115::Float64
  ######_var0#7090#7098#7116::Tuple{}
  ######types#7091#7099#7117::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 56:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7105 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7071#7075#7105 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7081#7102 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7107 = GenSym(0)
      ##a2#7108 = GenSym(1)
      ##div_a#7109 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7107::Float64,##a2#7108::Float64))
      ####afactor#7092#7110 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7108::Float64))
      ####bfactor#7093#7111 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7107::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7108::Float64,##a2#7108::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7116 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7090#7098#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7109::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7125::Tuple{}
  ##xs#7126::Tuple{Float64}
  ##xs#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7125::Tuple{}
  ##xs#7126::Tuple{Float64}
  ##xs#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7178::Tuple{}
  ########a#7077#7079#7130#7179::Tuple{}
  ########b#7078#7080#7131#7180::Tuple{}
  ######_var0#7081#7132#7181::Tuple{}
  ########types#7068#7129#7133#7182::Tuple{Type{Int64}}
  ##xs#7183::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7184::Tuple{}
  ##########x#7067#7070#7074#7147#7185::Int64
  ########_var0#7071#7075#7148#7186::Tuple{}
  ##########types#7068#7072#7076#7149#7187::Tuple{Type{Int64}}
  ####a1#7150#7188::Float64
  ####a2#7151#7189::Float64
  ########a#7082#7134#7152#7190::Tuple{}
  ########b#7083#7135#7153#7191::Tuple{}
  ########afactor#7084#7136#7154#7192::Float64
  ########bfactor#7085#7137#7155#7193::Float64
  ######_var0#7138#7156#7194::Tuple{}
  ##xs#7195::Tuple{}
  ########a#7077#7079#7174#7196::Tuple{}
  ########b#7078#7080#7175#7197::Tuple{}
  ######_var0#7081#7176#7198::Tuple{}
  ########types#7172#7173#7177#7199::Tuple{Type{Float64}}
  ######a#7077#7079#7200::Tuple{}
  ######b#7078#7080#7201::Tuple{}
  ####_var0#7081#7202::Tuple{}
  ##a#7203::Float64
  ##exp_a#7204::Float64
  ##deriv#7205::Float64
  ####G#7167#7206::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7168#7207::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7169#7208::Tuple{}
  ##########x#7159#7161#7165#7170#7209::Float64
  ########_var0#7162#7166#7171#7210::Tuple{}
  ##a1#7211::Float64
  ##a2#7212::Float64
  ######a#7082#7134#7213::Tuple{}
  ######b#7083#7135#7214::Tuple{}
  ######afactor#7084#7136#7215::Float64
  ######bfactor#7085#7137#7216::Float64
  ####_var0#7138#7217::Tuple{}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ##div_a#7220::Float64
  ####afactor#7092#7221::Float64
  ####bfactor#7093#7222::Float64
  ########a#7082#7086#7094#7223::Tuple{}
  ########b#7083#7087#7095#7224::Tuple{}
  ########afactor#7084#7088#7096#7225::Float64
  ########bfactor#7085#7089#7097#7226::Float64
  ######_var0#7090#7098#7227::Tuple{}
  ######types#7091#7099#7228::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7181 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7186 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7071#7075#7148#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7188 = GenSym(4)
      ####a2#7151#7189 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7138#7156#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7188::Float64,####a2#7151#7189::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7202 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7203 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,2.0,0)::Float64
      ##exp_a#7204 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,GenSym(11),0)::Float64
      ##deriv#7205 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,GenSym(11))))::Float64))
      ####G#7167#7206 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7171#7210 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7162#7166#7171#7210 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7204::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7176#7198 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7176#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7211 = GenSym(16)
      ##a2#7212 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7217 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7138#7217 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7211::Float64,##a2#7212::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7218 = GenSym(18)
      ##a2#7219 = GenSym(19)
      ##div_a#7220 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7218::Float64,##a2#7219::Float64))
      ####afactor#7092#7221 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7219::Float64))
      ####bfactor#7093#7222 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7218::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7219::Float64,##a2#7219::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7227 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7090#7098#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7220::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7125::Tuple{}
  ##xs#7126::Tuple{Float64}
  ##xs#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  numerator::Float64
  denominator::Float64
  ##xs#7125::Tuple{}
  ##xs#7126::Tuple{Float64}
  ##xs#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      GenSym(3) = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,2.0,0)::Float64
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),2.0)))::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7178::Tuple{}
  ########a#7077#7079#7130#7179::Tuple{}
  ########b#7078#7080#7131#7180::Tuple{}
  ######_var0#7081#7132#7181::Tuple{}
  ########types#7068#7129#7133#7182::Tuple{Type{Int64}}
  ##xs#7183::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7184::Tuple{}
  ##########x#7067#7070#7074#7147#7185::Int64
  ########_var0#7071#7075#7148#7186::Tuple{}
  ##########types#7068#7072#7076#7149#7187::Tuple{Type{Int64}}
  ####a1#7150#7188::Float64
  ####a2#7151#7189::Float64
  ########a#7082#7134#7152#7190::Tuple{}
  ########b#7083#7135#7153#7191::Tuple{}
  ########afactor#7084#7136#7154#7192::Float64
  ########bfactor#7085#7137#7155#7193::Float64
  ######_var0#7138#7156#7194::Tuple{}
  ##xs#7195::Tuple{}
  ########a#7077#7079#7174#7196::Tuple{}
  ########b#7078#7080#7175#7197::Tuple{}
  ######_var0#7081#7176#7198::Tuple{}
  ########types#7172#7173#7177#7199::Tuple{Type{Float64}}
  ######a#7077#7079#7200::Tuple{}
  ######b#7078#7080#7201::Tuple{}
  ####_var0#7081#7202::Tuple{}
  ##a#7203::Float64
  ##exp_a#7204::Float64
  ##deriv#7205::Float64
  ####G#7167#7206::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7168#7207::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7169#7208::Tuple{}
  ##########x#7159#7161#7165#7170#7209::Float64
  ########_var0#7162#7166#7171#7210::Tuple{}
  ##a1#7211::Float64
  ##a2#7212::Float64
  ######a#7082#7134#7213::Tuple{}
  ######b#7083#7135#7214::Tuple{}
  ######afactor#7084#7136#7215::Float64
  ######bfactor#7085#7137#7216::Float64
  ####_var0#7138#7217::Tuple{}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ##div_a#7220::Float64
  ####afactor#7092#7221::Float64
  ####bfactor#7093#7222::Float64
  ########a#7082#7086#7094#7223::Tuple{}
  ########b#7083#7087#7095#7224::Tuple{}
  ########afactor#7084#7088#7096#7225::Float64
  ########bfactor#7085#7089#7097#7226::Float64
  ######_var0#7090#7098#7227::Tuple{}
  ######types#7091#7099#7228::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7181 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7186 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7071#7075#7148#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7188 = GenSym(4)
      ####a2#7151#7189 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7138#7156#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7188::Float64,####a2#7151#7189::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7202 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7203 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,2.0,0)::Float64
      ##exp_a#7204 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,GenSym(11),0)::Float64
      ##deriv#7205 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,GenSym(11))))::Float64))
      ####G#7167#7206 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7171#7210 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7162#7166#7171#7210 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7204::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7176#7198 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7176#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7211 = GenSym(16)
      ##a2#7212 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7217 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7138#7217 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7211::Float64,##a2#7212::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7218 = GenSym(18)
      ##a2#7219 = GenSym(19)
      ##div_a#7220 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7218::Float64,##a2#7219::Float64))
      ####afactor#7092#7221 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7219::Float64))
      ####bfactor#7093#7222 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7218::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7219::Float64,##a2#7219::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7227 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7090#7098#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7220::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7178::Tuple{}
  ########a#7077#7079#7130#7179::Tuple{}
  ########b#7078#7080#7131#7180::Tuple{}
  ######_var0#7081#7132#7181::Tuple{}
  ########types#7068#7129#7133#7182::Tuple{Type{Int64}}
  ##xs#7183::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7184::Tuple{}
  ##########x#7067#7070#7074#7147#7185::Int64
  ########_var0#7071#7075#7148#7186::Tuple{}
  ##########types#7068#7072#7076#7149#7187::Tuple{Type{Int64}}
  ####a1#7150#7188::Float64
  ####a2#7151#7189::Float64
  ########a#7082#7134#7152#7190::Tuple{}
  ########b#7083#7135#7153#7191::Tuple{}
  ########afactor#7084#7136#7154#7192::Float64
  ########bfactor#7085#7137#7155#7193::Float64
  ######_var0#7138#7156#7194::Tuple{}
  ##xs#7195::Tuple{}
  ########a#7077#7079#7174#7196::Tuple{}
  ########b#7078#7080#7175#7197::Tuple{}
  ######_var0#7081#7176#7198::Tuple{}
  ########types#7172#7173#7177#7199::Tuple{Type{Float64}}
  ######a#7077#7079#7200::Tuple{}
  ######b#7078#7080#7201::Tuple{}
  ####_var0#7081#7202::Tuple{}
  ##a#7203::Float64
  ##exp_a#7204::Float64
  ##deriv#7205::Float64
  ####G#7167#7206::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7168#7207::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7169#7208::Tuple{}
  ##########x#7159#7161#7165#7170#7209::Float64
  ########_var0#7162#7166#7171#7210::Tuple{}
  ##a1#7211::Float64
  ##a2#7212::Float64
  ######a#7082#7134#7213::Tuple{}
  ######b#7083#7135#7214::Tuple{}
  ######afactor#7084#7136#7215::Float64
  ######bfactor#7085#7137#7216::Float64
  ####_var0#7138#7217::Tuple{}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ##div_a#7220::Float64
  ####afactor#7092#7221::Float64
  ####bfactor#7093#7222::Float64
  ########a#7082#7086#7094#7223::Tuple{}
  ########b#7083#7087#7095#7224::Tuple{}
  ########afactor#7084#7088#7096#7225::Float64
  ########bfactor#7085#7089#7097#7226::Float64
  ######_var0#7090#7098#7227::Tuple{}
  ######types#7091#7099#7228::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7181 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7186 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7071#7075#7148#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7188 = GenSym(4)
      ####a2#7151#7189 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7138#7156#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7188::Float64,####a2#7151#7189::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7202 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7203 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,2.0,0)::Float64
      ##exp_a#7204 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,GenSym(11),0)::Float64
      ##deriv#7205 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,GenSym(11))))::Float64))
      ####G#7167#7206 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7171#7210 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7162#7166#7171#7210 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7204::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7176#7198 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7176#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7211 = GenSym(16)
      ##a2#7212 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7217 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7138#7217 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7211::Float64,##a2#7212::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7218 = GenSym(18)
      ##a2#7219 = GenSym(19)
      ##div_a#7220 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7218::Float64,##a2#7219::Float64))
      ####afactor#7092#7221 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7219::Float64))
      ####bfactor#7093#7222 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7218::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7219::Float64,##a2#7219::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7227 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7090#7098#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7220::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7178::Tuple{}
  ########a#7077#7079#7130#7179::Tuple{}
  ########b#7078#7080#7131#7180::Tuple{}
  ######_var0#7081#7132#7181::Tuple{}
  ########types#7068#7129#7133#7182::Tuple{Type{Int64}}
  ##xs#7183::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7184::Tuple{}
  ##########x#7067#7070#7074#7147#7185::Int64
  ########_var0#7071#7075#7148#7186::Tuple{}
  ##########types#7068#7072#7076#7149#7187::Tuple{Type{Int64}}
  ####a1#7150#7188::Float64
  ####a2#7151#7189::Float64
  ########a#7082#7134#7152#7190::Tuple{}
  ########b#7083#7135#7153#7191::Tuple{}
  ########afactor#7084#7136#7154#7192::Float64
  ########bfactor#7085#7137#7155#7193::Float64
  ######_var0#7138#7156#7194::Tuple{}
  ##xs#7195::Tuple{}
  ########a#7077#7079#7174#7196::Tuple{}
  ########b#7078#7080#7175#7197::Tuple{}
  ######_var0#7081#7176#7198::Tuple{}
  ########types#7172#7173#7177#7199::Tuple{Type{Float64}}
  ######a#7077#7079#7200::Tuple{}
  ######b#7078#7080#7201::Tuple{}
  ####_var0#7081#7202::Tuple{}
  ##a#7203::Float64
  ##exp_a#7204::Float64
  ##deriv#7205::Float64
  ####G#7167#7206::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7168#7207::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7169#7208::Tuple{}
  ##########x#7159#7161#7165#7170#7209::Float64
  ########_var0#7162#7166#7171#7210::Tuple{}
  ##a1#7211::Float64
  ##a2#7212::Float64
  ######a#7082#7134#7213::Tuple{}
  ######b#7083#7135#7214::Tuple{}
  ######afactor#7084#7136#7215::Float64
  ######bfactor#7085#7137#7216::Float64
  ####_var0#7138#7217::Tuple{}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ##div_a#7220::Float64
  ####afactor#7092#7221::Float64
  ####bfactor#7093#7222::Float64
  ########a#7082#7086#7094#7223::Tuple{}
  ########b#7083#7087#7095#7224::Tuple{}
  ########afactor#7084#7088#7096#7225::Float64
  ########bfactor#7085#7089#7097#7226::Float64
  ######_var0#7090#7098#7227::Tuple{}
  ######types#7091#7099#7228::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7181 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7186 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7071#7075#7148#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7188 = GenSym(4)
      ####a2#7151#7189 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7138#7156#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7188::Float64,####a2#7151#7189::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7202 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7203 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,2.0,0)::Float64
      ##exp_a#7204 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,GenSym(11),0)::Float64
      ##deriv#7205 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,GenSym(11))))::Float64))
      ####G#7167#7206 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7171#7210 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7162#7166#7171#7210 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7204::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7176#7198 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7176#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7211 = GenSym(16)
      ##a2#7212 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7217 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7138#7217 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7211::Float64,##a2#7212::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7218 = GenSym(18)
      ##a2#7219 = GenSym(19)
      ##div_a#7220 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7218::Float64,##a2#7219::Float64))
      ####afactor#7092#7221 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7219::Float64))
      ####bfactor#7093#7222 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7218::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7219::Float64,##a2#7219::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7227 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7090#7098#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7220::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7178::Tuple{}
  ########a#7077#7079#7130#7179::Tuple{}
  ########b#7078#7080#7131#7180::Tuple{}
  ######_var0#7081#7132#7181::Tuple{}
  ########types#7068#7129#7133#7182::Tuple{Type{Int64}}
  ##xs#7183::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7184::Tuple{}
  ##########x#7067#7070#7074#7147#7185::Int64
  ########_var0#7071#7075#7148#7186::Tuple{}
  ##########types#7068#7072#7076#7149#7187::Tuple{Type{Int64}}
  ####a1#7150#7188::Float64
  ####a2#7151#7189::Float64
  ########a#7082#7134#7152#7190::Tuple{}
  ########b#7083#7135#7153#7191::Tuple{}
  ########afactor#7084#7136#7154#7192::Float64
  ########bfactor#7085#7137#7155#7193::Float64
  ######_var0#7138#7156#7194::Tuple{}
  ##xs#7195::Tuple{}
  ########a#7077#7079#7174#7196::Tuple{}
  ########b#7078#7080#7175#7197::Tuple{}
  ######_var0#7081#7176#7198::Tuple{}
  ########types#7172#7173#7177#7199::Tuple{Type{Float64}}
  ######a#7077#7079#7200::Tuple{}
  ######b#7078#7080#7201::Tuple{}
  ####_var0#7081#7202::Tuple{}
  ##a#7203::Float64
  ##exp_a#7204::Float64
  ##deriv#7205::Float64
  ####G#7167#7206::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7168#7207::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7169#7208::Tuple{}
  ##########x#7159#7161#7165#7170#7209::Float64
  ########_var0#7162#7166#7171#7210::Tuple{}
  ##a1#7211::Float64
  ##a2#7212::Float64
  ######a#7082#7134#7213::Tuple{}
  ######b#7083#7135#7214::Tuple{}
  ######afactor#7084#7136#7215::Float64
  ######bfactor#7085#7137#7216::Float64
  ####_var0#7138#7217::Tuple{}
  ##a1#7218::Float64
  ##a2#7219::Float64
  ##div_a#7220::Float64
  ####afactor#7092#7221::Float64
  ####bfactor#7093#7222::Float64
  ########a#7082#7086#7094#7223::Tuple{}
  ########b#7083#7087#7095#7224::Tuple{}
  ########afactor#7084#7088#7096#7225::Float64
  ########bfactor#7085#7089#7097#7226::Float64
  ######_var0#7090#7098#7227::Tuple{}
  ######types#7091#7099#7228::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 58:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 59:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7181 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7186 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7071#7075#7148#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7188 = GenSym(4)
      ####a2#7151#7189 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7138#7156#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7188::Float64,####a2#7151#7189::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      numerator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 60:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7202 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7081#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ##a#7203 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,2.0,0)::Float64
      ##exp_a#7204 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7203::Float64,0,GenSym(11),0)::Float64
      ##deriv#7205 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7203::Float64,GenSym(11))))::Float64))
      ####G#7167#7206 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7171#7210 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7162#7166#7171#7210 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7204::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7176#7198 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7176#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(15),:value)::Float64
      GenSym(17) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,1.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7211 = GenSym(16)
      ##a2#7212 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7217 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7138#7217 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      denominator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7211::Float64,##a2#7212::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 61:
      GenSym(18) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7218 = GenSym(18)
      ##a2#7219 = GenSym(19)
      ##div_a#7220 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7218::Float64,##a2#7219::Float64))
      ####afactor#7092#7221 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7219::Float64))
      ####bfactor#7093#7222 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7218::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7219::Float64,##a2#7219::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7227 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7090#7098#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7220::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Base.findmax)(GenSym(0))::Tuple{Float64,Int64}
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.getfield)(GenSym(1),2)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 102:
      return (Distributions.indmax)((Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
  end::UNION{}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  #s8::Int64
  #s7::Int64
  #s6::Int64
  x::Int64
  #s3::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(8) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical{Float64},GenSym(8))::Distributions.Categorical{Float64})::Array{Int64,1}
      GenSym(1) = (Base.arraylen)(GenSym(0))::Int64
      0: 
      GenSym(3) = (top(ccall))(:jl_alloc_array_1d,(top(apply_type))(Base.Array,Int64,1)::Type{Array{Int64,1}},(top(svec))(Base.Any,Base.Int)::SimpleVector,Array{Int64,1},0,GenSym(1),0)::Array{Int64,1}
      #s8 = 1
      #s7 = 1
      #s6 = 0
      unless (Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)) goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(10) = (Base.arrayref)(GenSym(0),#s7::Int64)::Int64
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(#s7::Int64,1))
      #s3 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      x = GenSym(12)
      #s3 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      #s7 = GenSym(14)
      #s3 = GenSym(15)
      GenSym(4) = (Base.box)(Int64,(Base.sub_int)(x::Int64,1))
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (Base.arrayset)(GenSym(3),GenSym(4),#s8::Int64)::Array{Int64,1}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s6::Int64 === GenSym(1)::Bool)))) goto 3
      2: 
      1: 
      return GenSym(3)
  end::Array{Int64,1}

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  #s8::Int64
  #s7::UNION{}
  #s6::Int64
  x::UNION{}
  #s3::UNION{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 103:
      GenSym(0) = (Distributions.modes)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
      GenSym(1) = (top(length))(GenSym(0))::UNION{}
      0: 
      GenSym(3) = call(top(Array),$(Expr(:static_typeof, GenSym(4))),GenSym(1))::UNION{}
      #s8 = 1
      #s7 = (top(start))(GenSym(0))::UNION{}
      #s6 = 0
      unless (top(!=))(#s6::Int64,GenSym(1))::UNION{} goto 2
      3: 
      #s6 = (Base.box)(Base.Int,(Base.add_int)(#s6::Int64,1))
      GenSym(5) = (top(next))(GenSym(0),#s7::UNION{})::UNION{}
      #s3 = (top(start))(GenSym(5))::UNION{}
      GenSym(6) = (top(indexed_next))(GenSym(5),1,#s3::UNION{})::UNION{}
      x = (top(getfield))(GenSym(6),1)::UNION{}
      #s3 = (top(getfield))(GenSym(6),2)::UNION{}
      GenSym(7) = (top(indexed_next))(GenSym(5),2,#s3::UNION{})::UNION{}
      #s7 = (top(getfield))(GenSym(7),1)::UNION{}
      #s3 = (top(getfield))(GenSym(7),2)::UNION{}
      GenSym(4) = x::UNION{} - 1::UNION{}
      $(Expr(:type_goto, 0, GenSym(4)))
      $(Expr(:boundscheck, false))
      (top(setindex!))(GenSym(3),GenSym(4),#s8::Int64)::UNION{}
      $(Expr(:boundscheck, :(Distributions.pop)))
      #s8 = (Base.box)(Base.Int,(Base.add_int)(#s8::Int64,1))
      4: 
      unless (top(!))((top(!=))(#s6::Int64,GenSym(1))::UNION{})::UNION{} goto 3
      2: 
      1: 
      return GenSym(3)
  end::UNION{}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = (Distributions.median)(call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64})::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(1),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 101:
      return (Distributions.median)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7475::Tuple{}
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{Float64}
  ##xs#7479::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7475::Tuple{}
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{Float64}
  ##xs#7479::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7490::Tuple{}
  ########a#7077#7079#7130#7491::Tuple{}
  ########b#7078#7080#7131#7492::Tuple{}
  ######_var0#7081#7132#7493::Tuple{}
  ########types#7068#7129#7133#7494::Tuple{Type{Int64}}
  ######a#7337#7339#7495::Tuple{}
  ######b#7338#7340#7496::Tuple{}
  ####_var0#7341#7497::Tuple{}
  ##xs#7498::Tuple{}
  ########a#7077#7079#7130#7499::Tuple{}
  ########b#7078#7080#7131#7500::Tuple{}
  ######_var0#7081#7132#7501::Tuple{}
  ########types#7068#7129#7133#7502::Tuple{Type{Int64}}
  ##a1#7503::Float64
  ##a2#7504::Float64
  ######a#7082#7134#7505::Tuple{}
  ######b#7083#7135#7506::Tuple{}
  ######afactor#7084#7136#7507::Float64
  ######bfactor#7085#7137#7508::Float64
  ####_var0#7138#7509::Tuple{}
  ##a1#7510::Float64
  ##a2#7511::Float64
  ##div_a#7512::Float64
  ####afactor#7092#7513::Float64
  ####bfactor#7093#7514::Float64
  ########a#7082#7086#7094#7515::Tuple{}
  ########b#7083#7087#7095#7516::Tuple{}
  ########afactor#7084#7088#7096#7517::Float64
  ########bfactor#7085#7089#7097#7518::Float64
  ######_var0#7090#7098#7519::Tuple{}
  ######types#7091#7099#7520::Tuple{Type{Float64}}
  ##xs#7521::Tuple{}
  ##########types#7068#7129#7480#7481#7522::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7523::Tuple{}
  ########b#7078#7080#7483#7524::Tuple{}
  ######_var0#7081#7484#7525::Tuple{}
  ##xs#7526::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7527::Tuple{}
  ##########x#7067#7070#7074#7147#7528::Int64
  ########_var0#7071#7075#7148#7529::Tuple{}
  ##########types#7068#7072#7076#7149#7530::Tuple{Type{Int64}}
  ####a1#7150#7531::Float64
  ####a2#7151#7532::Float64
  ########a#7082#7134#7152#7533::Tuple{}
  ########b#7083#7135#7153#7534::Tuple{}
  ########afactor#7084#7136#7154#7535::Float64
  ########bfactor#7085#7137#7155#7536::Float64
  ######_var0#7138#7156#7537::Tuple{}
  ##xs#7538::Tuple{}
  ##########types#7068#7129#7480#7481#7539::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7540::Tuple{}
  ########b#7078#7080#7483#7541::Tuple{}
  ######_var0#7081#7484#7542::Tuple{}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ##div_a#7545::Float64
  ####afactor#7092#7546::Float64
  ####bfactor#7093#7547::Float64
  ########a#7082#7086#7094#7548::Tuple{}
  ########b#7083#7087#7095#7549::Tuple{}
  ########afactor#7084#7088#7096#7550::Float64
  ########bfactor#7085#7089#7097#7551::Float64
  ######_var0#7090#7098#7552::Tuple{}
  ######types#7091#7099#7553::Tuple{Type{Float64}}
  ##sqrt_a#7554::Float64
  ##deriv#7555::Float64
  ####G#7485#7556::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7486#7557::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7487#7558::Tuple{}
  ##########x#7159#7161#7165#7488#7559::Float64
  ########_var0#7162#7166#7489#7560::Tuple{}
  ##a1#7561::Float64
  ##a2#7562::Float64
  ######a#7082#7134#7563::Tuple{}
  ######b#7083#7135#7564::Tuple{}
  ######afactor#7084#7136#7565::Float64
  ######bfactor#7085#7137#7566::Float64
  ####_var0#7138#7567::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7501 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7132#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7497 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7341#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7503 = GenSym(5)
      ##a2#7504 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7509 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7503::Float64,##a2#7504::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7493 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7510 = GenSym(8)
      ##a2#7511 = GenSym(9)
      ##div_a#7512 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7510::Float64,##a2#7511::Float64))
      ####afactor#7092#7513 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7511::Float64))
      ####bfactor#7093#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7510::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7511::Float64,##a2#7511::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7519 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7090#7098#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7512::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7542 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7484#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7525 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7081#7484#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7529 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7071#7075#7148#7529 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7531 = GenSym(10)
      ####a2#7151#7532 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7537 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7156#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7531::Float64,####a2#7151#7532::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7543 = GenSym(14)
      ##a2#7544 = GenSym(15)
      ##div_a#7545 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7543::Float64,##a2#7544::Float64))
      ####afactor#7092#7546 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7544::Float64))
      ####bfactor#7093#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7543::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7544::Float64,##a2#7544::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7552 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7090#7098#7552 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7554 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7555 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7554::Float64))
      ####G#7485#7556 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7489#7560 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7162#7166#7489#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7554::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7561 = GenSym(17)
      ##a2#7562 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7567 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7138#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7561::Float64,##a2#7562::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7475::Tuple{}
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{Float64}
  ##xs#7479::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  t1::Float64
  t2::Float64
  ##xs#7475::Tuple{}
  ##xs#7476::Tuple{}
  ##xs#7477::Tuple{}
  ##xs#7478::Tuple{Float64}
  ##xs#7479::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      t1 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64)))))),(Base.box)(Base.Float64,(Base.sub_float)(β::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      t2 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),α::Float64)),β::Float64)))))))::ANY)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)(t1::Float64,t2::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7490::Tuple{}
  ########a#7077#7079#7130#7491::Tuple{}
  ########b#7078#7080#7131#7492::Tuple{}
  ######_var0#7081#7132#7493::Tuple{}
  ########types#7068#7129#7133#7494::Tuple{Type{Int64}}
  ######a#7337#7339#7495::Tuple{}
  ######b#7338#7340#7496::Tuple{}
  ####_var0#7341#7497::Tuple{}
  ##xs#7498::Tuple{}
  ########a#7077#7079#7130#7499::Tuple{}
  ########b#7078#7080#7131#7500::Tuple{}
  ######_var0#7081#7132#7501::Tuple{}
  ########types#7068#7129#7133#7502::Tuple{Type{Int64}}
  ##a1#7503::Float64
  ##a2#7504::Float64
  ######a#7082#7134#7505::Tuple{}
  ######b#7083#7135#7506::Tuple{}
  ######afactor#7084#7136#7507::Float64
  ######bfactor#7085#7137#7508::Float64
  ####_var0#7138#7509::Tuple{}
  ##a1#7510::Float64
  ##a2#7511::Float64
  ##div_a#7512::Float64
  ####afactor#7092#7513::Float64
  ####bfactor#7093#7514::Float64
  ########a#7082#7086#7094#7515::Tuple{}
  ########b#7083#7087#7095#7516::Tuple{}
  ########afactor#7084#7088#7096#7517::Float64
  ########bfactor#7085#7089#7097#7518::Float64
  ######_var0#7090#7098#7519::Tuple{}
  ######types#7091#7099#7520::Tuple{Type{Float64}}
  ##xs#7521::Tuple{}
  ##########types#7068#7129#7480#7481#7522::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7523::Tuple{}
  ########b#7078#7080#7483#7524::Tuple{}
  ######_var0#7081#7484#7525::Tuple{}
  ##xs#7526::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7527::Tuple{}
  ##########x#7067#7070#7074#7147#7528::Int64
  ########_var0#7071#7075#7148#7529::Tuple{}
  ##########types#7068#7072#7076#7149#7530::Tuple{Type{Int64}}
  ####a1#7150#7531::Float64
  ####a2#7151#7532::Float64
  ########a#7082#7134#7152#7533::Tuple{}
  ########b#7083#7135#7153#7534::Tuple{}
  ########afactor#7084#7136#7154#7535::Float64
  ########bfactor#7085#7137#7155#7536::Float64
  ######_var0#7138#7156#7537::Tuple{}
  ##xs#7538::Tuple{}
  ##########types#7068#7129#7480#7481#7539::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7540::Tuple{}
  ########b#7078#7080#7483#7541::Tuple{}
  ######_var0#7081#7484#7542::Tuple{}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ##div_a#7545::Float64
  ####afactor#7092#7546::Float64
  ####bfactor#7093#7547::Float64
  ########a#7082#7086#7094#7548::Tuple{}
  ########b#7083#7087#7095#7549::Tuple{}
  ########afactor#7084#7088#7096#7550::Float64
  ########bfactor#7085#7089#7097#7551::Float64
  ######_var0#7090#7098#7552::Tuple{}
  ######types#7091#7099#7553::Tuple{Type{Float64}}
  ##sqrt_a#7554::Float64
  ##deriv#7555::Float64
  ####G#7485#7556::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7486#7557::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7487#7558::Tuple{}
  ##########x#7159#7161#7165#7488#7559::Float64
  ########_var0#7162#7166#7489#7560::Tuple{}
  ##a1#7561::Float64
  ##a2#7562::Float64
  ######a#7082#7134#7563::Tuple{}
  ######b#7083#7135#7564::Tuple{}
  ######afactor#7084#7136#7565::Float64
  ######bfactor#7085#7137#7566::Float64
  ####_var0#7138#7567::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7501 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7132#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7497 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7341#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7503 = GenSym(5)
      ##a2#7504 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7509 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7503::Float64,##a2#7504::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7493 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7510 = GenSym(8)
      ##a2#7511 = GenSym(9)
      ##div_a#7512 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7510::Float64,##a2#7511::Float64))
      ####afactor#7092#7513 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7511::Float64))
      ####bfactor#7093#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7510::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7511::Float64,##a2#7511::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7519 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7090#7098#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7512::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7542 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7484#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7525 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7081#7484#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7529 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7071#7075#7148#7529 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7531 = GenSym(10)
      ####a2#7151#7532 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7537 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7156#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7531::Float64,####a2#7151#7532::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7543 = GenSym(14)
      ##a2#7544 = GenSym(15)
      ##div_a#7545 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7543::Float64,##a2#7544::Float64))
      ####afactor#7092#7546 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7544::Float64))
      ####bfactor#7093#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7543::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7544::Float64,##a2#7544::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7552 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7090#7098#7552 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7554 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7555 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7554::Float64))
      ####G#7485#7556 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7489#7560 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7162#7166#7489#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7554::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7561 = GenSym(17)
      ##a2#7562 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7567 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7138#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7561::Float64,##a2#7562::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7490::Tuple{}
  ########a#7077#7079#7130#7491::Tuple{}
  ########b#7078#7080#7131#7492::Tuple{}
  ######_var0#7081#7132#7493::Tuple{}
  ########types#7068#7129#7133#7494::Tuple{Type{Int64}}
  ######a#7337#7339#7495::Tuple{}
  ######b#7338#7340#7496::Tuple{}
  ####_var0#7341#7497::Tuple{}
  ##xs#7498::Tuple{}
  ########a#7077#7079#7130#7499::Tuple{}
  ########b#7078#7080#7131#7500::Tuple{}
  ######_var0#7081#7132#7501::Tuple{}
  ########types#7068#7129#7133#7502::Tuple{Type{Int64}}
  ##a1#7503::Float64
  ##a2#7504::Float64
  ######a#7082#7134#7505::Tuple{}
  ######b#7083#7135#7506::Tuple{}
  ######afactor#7084#7136#7507::Float64
  ######bfactor#7085#7137#7508::Float64
  ####_var0#7138#7509::Tuple{}
  ##a1#7510::Float64
  ##a2#7511::Float64
  ##div_a#7512::Float64
  ####afactor#7092#7513::Float64
  ####bfactor#7093#7514::Float64
  ########a#7082#7086#7094#7515::Tuple{}
  ########b#7083#7087#7095#7516::Tuple{}
  ########afactor#7084#7088#7096#7517::Float64
  ########bfactor#7085#7089#7097#7518::Float64
  ######_var0#7090#7098#7519::Tuple{}
  ######types#7091#7099#7520::Tuple{Type{Float64}}
  ##xs#7521::Tuple{}
  ##########types#7068#7129#7480#7481#7522::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7523::Tuple{}
  ########b#7078#7080#7483#7524::Tuple{}
  ######_var0#7081#7484#7525::Tuple{}
  ##xs#7526::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7527::Tuple{}
  ##########x#7067#7070#7074#7147#7528::Int64
  ########_var0#7071#7075#7148#7529::Tuple{}
  ##########types#7068#7072#7076#7149#7530::Tuple{Type{Int64}}
  ####a1#7150#7531::Float64
  ####a2#7151#7532::Float64
  ########a#7082#7134#7152#7533::Tuple{}
  ########b#7083#7135#7153#7534::Tuple{}
  ########afactor#7084#7136#7154#7535::Float64
  ########bfactor#7085#7137#7155#7536::Float64
  ######_var0#7138#7156#7537::Tuple{}
  ##xs#7538::Tuple{}
  ##########types#7068#7129#7480#7481#7539::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7540::Tuple{}
  ########b#7078#7080#7483#7541::Tuple{}
  ######_var0#7081#7484#7542::Tuple{}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ##div_a#7545::Float64
  ####afactor#7092#7546::Float64
  ####bfactor#7093#7547::Float64
  ########a#7082#7086#7094#7548::Tuple{}
  ########b#7083#7087#7095#7549::Tuple{}
  ########afactor#7084#7088#7096#7550::Float64
  ########bfactor#7085#7089#7097#7551::Float64
  ######_var0#7090#7098#7552::Tuple{}
  ######types#7091#7099#7553::Tuple{Type{Float64}}
  ##sqrt_a#7554::Float64
  ##deriv#7555::Float64
  ####G#7485#7556::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7486#7557::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7487#7558::Tuple{}
  ##########x#7159#7161#7165#7488#7559::Float64
  ########_var0#7162#7166#7489#7560::Tuple{}
  ##a1#7561::Float64
  ##a2#7562::Float64
  ######a#7082#7134#7563::Tuple{}
  ######b#7083#7135#7564::Tuple{}
  ######afactor#7084#7136#7565::Float64
  ######bfactor#7085#7137#7566::Float64
  ####_var0#7138#7567::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7501 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7132#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7497 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7341#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7503 = GenSym(5)
      ##a2#7504 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7509 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7503::Float64,##a2#7504::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7493 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7510 = GenSym(8)
      ##a2#7511 = GenSym(9)
      ##div_a#7512 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7510::Float64,##a2#7511::Float64))
      ####afactor#7092#7513 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7511::Float64))
      ####bfactor#7093#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7510::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7511::Float64,##a2#7511::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7519 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7090#7098#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7512::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7542 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7484#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7525 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7081#7484#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7529 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7071#7075#7148#7529 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7531 = GenSym(10)
      ####a2#7151#7532 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7537 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7156#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7531::Float64,####a2#7151#7532::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7543 = GenSym(14)
      ##a2#7544 = GenSym(15)
      ##div_a#7545 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7543::Float64,##a2#7544::Float64))
      ####afactor#7092#7546 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7544::Float64))
      ####bfactor#7093#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7543::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7544::Float64,##a2#7544::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7552 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7090#7098#7552 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7554 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7555 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7554::Float64))
      ####G#7485#7556 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7489#7560 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7162#7166#7489#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7554::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7561 = GenSym(17)
      ##a2#7562 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7567 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7138#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7561::Float64,##a2#7562::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7490::Tuple{}
  ########a#7077#7079#7130#7491::Tuple{}
  ########b#7078#7080#7131#7492::Tuple{}
  ######_var0#7081#7132#7493::Tuple{}
  ########types#7068#7129#7133#7494::Tuple{Type{Int64}}
  ######a#7337#7339#7495::Tuple{}
  ######b#7338#7340#7496::Tuple{}
  ####_var0#7341#7497::Tuple{}
  ##xs#7498::Tuple{}
  ########a#7077#7079#7130#7499::Tuple{}
  ########b#7078#7080#7131#7500::Tuple{}
  ######_var0#7081#7132#7501::Tuple{}
  ########types#7068#7129#7133#7502::Tuple{Type{Int64}}
  ##a1#7503::Float64
  ##a2#7504::Float64
  ######a#7082#7134#7505::Tuple{}
  ######b#7083#7135#7506::Tuple{}
  ######afactor#7084#7136#7507::Float64
  ######bfactor#7085#7137#7508::Float64
  ####_var0#7138#7509::Tuple{}
  ##a1#7510::Float64
  ##a2#7511::Float64
  ##div_a#7512::Float64
  ####afactor#7092#7513::Float64
  ####bfactor#7093#7514::Float64
  ########a#7082#7086#7094#7515::Tuple{}
  ########b#7083#7087#7095#7516::Tuple{}
  ########afactor#7084#7088#7096#7517::Float64
  ########bfactor#7085#7089#7097#7518::Float64
  ######_var0#7090#7098#7519::Tuple{}
  ######types#7091#7099#7520::Tuple{Type{Float64}}
  ##xs#7521::Tuple{}
  ##########types#7068#7129#7480#7481#7522::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7523::Tuple{}
  ########b#7078#7080#7483#7524::Tuple{}
  ######_var0#7081#7484#7525::Tuple{}
  ##xs#7526::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7527::Tuple{}
  ##########x#7067#7070#7074#7147#7528::Int64
  ########_var0#7071#7075#7148#7529::Tuple{}
  ##########types#7068#7072#7076#7149#7530::Tuple{Type{Int64}}
  ####a1#7150#7531::Float64
  ####a2#7151#7532::Float64
  ########a#7082#7134#7152#7533::Tuple{}
  ########b#7083#7135#7153#7534::Tuple{}
  ########afactor#7084#7136#7154#7535::Float64
  ########bfactor#7085#7137#7155#7536::Float64
  ######_var0#7138#7156#7537::Tuple{}
  ##xs#7538::Tuple{}
  ##########types#7068#7129#7480#7481#7539::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7540::Tuple{}
  ########b#7078#7080#7483#7541::Tuple{}
  ######_var0#7081#7484#7542::Tuple{}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ##div_a#7545::Float64
  ####afactor#7092#7546::Float64
  ####bfactor#7093#7547::Float64
  ########a#7082#7086#7094#7548::Tuple{}
  ########b#7083#7087#7095#7549::Tuple{}
  ########afactor#7084#7088#7096#7550::Float64
  ########bfactor#7085#7089#7097#7551::Float64
  ######_var0#7090#7098#7552::Tuple{}
  ######types#7091#7099#7553::Tuple{Type{Float64}}
  ##sqrt_a#7554::Float64
  ##deriv#7555::Float64
  ####G#7485#7556::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7486#7557::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7487#7558::Tuple{}
  ##########x#7159#7161#7165#7488#7559::Float64
  ########_var0#7162#7166#7489#7560::Tuple{}
  ##a1#7561::Float64
  ##a2#7562::Float64
  ######a#7082#7134#7563::Tuple{}
  ######b#7083#7135#7564::Tuple{}
  ######afactor#7084#7136#7565::Float64
  ######bfactor#7085#7137#7566::Float64
  ####_var0#7138#7567::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7501 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7132#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7497 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7341#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7503 = GenSym(5)
      ##a2#7504 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7509 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7503::Float64,##a2#7504::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7493 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7510 = GenSym(8)
      ##a2#7511 = GenSym(9)
      ##div_a#7512 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7510::Float64,##a2#7511::Float64))
      ####afactor#7092#7513 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7511::Float64))
      ####bfactor#7093#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7510::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7511::Float64,##a2#7511::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7519 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7090#7098#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7512::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7542 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7484#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7525 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7081#7484#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7529 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7071#7075#7148#7529 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7531 = GenSym(10)
      ####a2#7151#7532 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7537 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7156#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7531::Float64,####a2#7151#7532::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7543 = GenSym(14)
      ##a2#7544 = GenSym(15)
      ##div_a#7545 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7543::Float64,##a2#7544::Float64))
      ####afactor#7092#7546 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7544::Float64))
      ####bfactor#7093#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7543::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7544::Float64,##a2#7544::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7552 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7090#7098#7552 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7554 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7555 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7554::Float64))
      ####G#7485#7556 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7489#7560 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7162#7166#7489#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7554::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7561 = GenSym(17)
      ##a2#7562 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7567 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7138#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7561::Float64,##a2#7562::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7490::Tuple{}
  ########a#7077#7079#7130#7491::Tuple{}
  ########b#7078#7080#7131#7492::Tuple{}
  ######_var0#7081#7132#7493::Tuple{}
  ########types#7068#7129#7133#7494::Tuple{Type{Int64}}
  ######a#7337#7339#7495::Tuple{}
  ######b#7338#7340#7496::Tuple{}
  ####_var0#7341#7497::Tuple{}
  ##xs#7498::Tuple{}
  ########a#7077#7079#7130#7499::Tuple{}
  ########b#7078#7080#7131#7500::Tuple{}
  ######_var0#7081#7132#7501::Tuple{}
  ########types#7068#7129#7133#7502::Tuple{Type{Int64}}
  ##a1#7503::Float64
  ##a2#7504::Float64
  ######a#7082#7134#7505::Tuple{}
  ######b#7083#7135#7506::Tuple{}
  ######afactor#7084#7136#7507::Float64
  ######bfactor#7085#7137#7508::Float64
  ####_var0#7138#7509::Tuple{}
  ##a1#7510::Float64
  ##a2#7511::Float64
  ##div_a#7512::Float64
  ####afactor#7092#7513::Float64
  ####bfactor#7093#7514::Float64
  ########a#7082#7086#7094#7515::Tuple{}
  ########b#7083#7087#7095#7516::Tuple{}
  ########afactor#7084#7088#7096#7517::Float64
  ########bfactor#7085#7089#7097#7518::Float64
  ######_var0#7090#7098#7519::Tuple{}
  ######types#7091#7099#7520::Tuple{Type{Float64}}
  ##xs#7521::Tuple{}
  ##########types#7068#7129#7480#7481#7522::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7523::Tuple{}
  ########b#7078#7080#7483#7524::Tuple{}
  ######_var0#7081#7484#7525::Tuple{}
  ##xs#7526::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7066#7069#7073#7146#7527::Tuple{}
  ##########x#7067#7070#7074#7147#7528::Int64
  ########_var0#7071#7075#7148#7529::Tuple{}
  ##########types#7068#7072#7076#7149#7530::Tuple{Type{Int64}}
  ####a1#7150#7531::Float64
  ####a2#7151#7532::Float64
  ########a#7082#7134#7152#7533::Tuple{}
  ########b#7083#7135#7153#7534::Tuple{}
  ########afactor#7084#7136#7154#7535::Float64
  ########bfactor#7085#7137#7155#7536::Float64
  ######_var0#7138#7156#7537::Tuple{}
  ##xs#7538::Tuple{}
  ##########types#7068#7129#7480#7481#7539::Tuple{Type{Int64}}
  ########a#7077#7079#7482#7540::Tuple{}
  ########b#7078#7080#7483#7541::Tuple{}
  ######_var0#7081#7484#7542::Tuple{}
  ##a1#7543::Float64
  ##a2#7544::Float64
  ##div_a#7545::Float64
  ####afactor#7092#7546::Float64
  ####bfactor#7093#7547::Float64
  ########a#7082#7086#7094#7548::Tuple{}
  ########b#7083#7087#7095#7549::Tuple{}
  ########afactor#7084#7088#7096#7550::Float64
  ########bfactor#7085#7089#7097#7551::Float64
  ######_var0#7090#7098#7552::Tuple{}
  ######types#7091#7099#7553::Tuple{Type{Float64}}
  ##sqrt_a#7554::Float64
  ##deriv#7555::Float64
  ####G#7485#7556::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7486#7557::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7487#7558::Tuple{}
  ##########x#7159#7161#7165#7488#7559::Float64
  ########_var0#7162#7166#7489#7560::Tuple{}
  ##a1#7561::Float64
  ##a2#7562::Float64
  ######a#7082#7134#7563::Tuple{}
  ######b#7083#7135#7564::Tuple{}
  ######afactor#7084#7136#7565::Float64
  ######bfactor#7085#7137#7566::Float64
  ####_var0#7138#7567::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 65:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 66:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7501 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7132#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7497 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7341#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(2,n::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7503 = GenSym(5)
      ##a2#7504 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7509 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7503::Float64,##a2#7504::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7493 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7081#7132#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7510 = GenSym(8)
      ##a2#7511 = GenSym(9)
      ##div_a#7512 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7510::Float64,##a2#7511::Float64))
      ####afactor#7092#7513 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7511::Float64))
      ####bfactor#7093#7514 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7510::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7511::Float64,##a2#7511::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7519 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7090#7098#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      t1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7512::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7542 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7081#7484#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7484#7525 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7081#7484#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7148#7529 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7071#7075#7148#7529 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7150#7531 = GenSym(10)
      ####a2#7151#7532 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7156#7537 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7156#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7150#7531::Float64,####a2#7151#7532::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(12),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7543 = GenSym(14)
      ##a2#7544 = GenSym(15)
      ##div_a#7545 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7543::Float64,##a2#7544::Float64))
      ####afactor#7092#7546 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7544::Float64))
      ####bfactor#7093#7547 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7543::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7544::Float64,##a2#7544::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7552 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7090#7098#7552 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7554 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(16),:value)::Float64)::ANY)::Float64
      ##deriv#7555 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7554::Float64))
      ####G#7485#7556 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7489#7560 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7162#7166#7489#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      t2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7554::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 68:
      GenSym(17) = (top(getfield))(t1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))(t2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7561 = GenSym(17)
      ##a2#7562 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7567 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7138#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7561::Float64,##a2#7562::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7568::Tuple{Float64}
  ##xs#7569::Tuple{}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{Int64}
  ##xs#7572::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7568::Tuple{Float64}
  ##xs#7569::Tuple{}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{Int64}
  ##xs#7572::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7077#7079#7612::Tuple{}
  ######b#7078#7080#7613::Tuple{}
  ####_var0#7081#7614::Tuple{}
  ##a1#7615::Float64
  ##a2#7616::Float64
  ######a#7082#7134#7617::Tuple{}
  ######b#7083#7135#7618::Tuple{}
  ######afactor#7084#7136#7619::Float64
  ######bfactor#7085#7137#7620::Float64
  ####_var0#7138#7621::Tuple{}
  ########types#7068#7129#7480#7622::Tuple{Type{Int64}}
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7573#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7628::Tuple{}
  ##########x#7159#7161#7165#7576#7629::Float64
  ########_var0#7162#7166#7577#7630::Tuple{}
  ##a1#7631::Float64
  ##a2#7632::Float64
  ######a#7082#7134#7633::Tuple{}
  ######b#7083#7135#7634::Tuple{}
  ######afactor#7084#7136#7635::Float64
  ######bfactor#7085#7137#7636::Float64
  ####_var0#7138#7637::Tuple{}
  ######types#7068#7129#7638::Tuple{Type{Int64}}
  ######types#7068#7129#7639::Tuple{Type{Int64}}
  ######types#7068#7129#7640::Tuple{Type{Int64}}
  ########tup#7066#7069#7073#7641::Tuple{}
  ########x#7067#7070#7074#7642::Int64
  ######_var0#7071#7075#7643::Tuple{}
  ########types#7068#7072#7076#7644::Tuple{Type{Int64}}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7578#7646::Float64
  ####a2#7579#7647::Float64
  ########a#7082#7134#7580#7648::Tuple{}
  ########b#7083#7135#7581#7649::Tuple{}
  ########afactor#7084#7136#7582#7650::Float64
  ########bfactor#7085#7137#7583#7651::Float64
  ######_var0#7138#7584#7652::Tuple{}
  ####a1#7585#7653::Float64
  ####a2#7586#7654::Float64
  ########a#7082#7134#7587#7655::Tuple{}
  ########b#7083#7135#7588#7656::Tuple{}
  ########afactor#7084#7136#7589#7657::Float64
  ########bfactor#7085#7137#7590#7658::Float64
  ######_var0#7138#7591#7659::Tuple{}
  ##a1#7660::Float64
  ##a2#7661::Float64
  ##div_a#7662::Float64
  ####afactor#7092#7663::Float64
  ####bfactor#7093#7664::Float64
  ########a#7082#7086#7094#7665::Tuple{}
  ########b#7083#7087#7095#7666::Tuple{}
  ########afactor#7084#7088#7096#7667::Float64
  ########bfactor#7085#7089#7097#7668::Float64
  ######_var0#7090#7098#7669::Tuple{}
  ######types#7091#7099#7670::Tuple{Type{Float64}}
  ##xs#7671::Tuple{}
  ##########tup#7066#7069#7073#7592#7672::Tuple{}
  ##########x#7067#7070#7074#7593#7673::Int64
  ########_var0#7071#7075#7594#7674::Tuple{}
  ##########types#7068#7072#7076#7595#7675::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7676::Tuple{}
  ########x#7067#7070#7597#7677::Int64
  ######_var0#7071#7598#7678::Tuple{}
  ########types#7068#7072#7599#7679::Tuple{Type{Int64}}
  ######types#7068#7336#7680::Tuple{Type{Int64}}
  ######types#7068#7129#7681::Tuple{Type{Int64}}
  ##a1#7682::Float64
  ##a2#7683::Float64
  ######a#7082#7134#7684::Tuple{}
  ######b#7083#7135#7685::Tuple{}
  ######afactor#7084#7136#7686::Float64
  ######bfactor#7085#7137#7687::Float64
  ####_var0#7138#7688::Tuple{}
  ##xs#7689::Tuple{}
  ########a#7077#7079#7130#7690::Tuple{}
  ########b#7078#7080#7131#7691::Tuple{}
  ######_var0#7081#7132#7692::Tuple{}
  ########types#7068#7129#7133#7693::Tuple{Type{Int64}}
  ##xs#7694::Tuple{Int64}
  ##########tup#7066#7069#7073#7604#7695::Tuple{}
  ##########x#7067#7070#7074#7605#7696::Int64
  ########_var0#7071#7075#7606#7697::Tuple{}
  ##########types#7068#7072#7076#7607#7698::Tuple{Type{Int64}}
  ########tup#7066#7069#7608#7699::Tuple{}
  ########x#7067#7070#7609#7700::Int64
  ######_var0#7071#7610#7701::Tuple{}
  ########types#7068#7072#7611#7702::Tuple{Type{Int64}}
  ##a1#7703::Float64
  ##a2#7704::Float64
  ##div_a#7705::Float64
  ####afactor#7092#7706::Float64
  ####bfactor#7093#7707::Float64
  ########a#7082#7086#7094#7708::Tuple{}
  ########b#7083#7087#7095#7709::Tuple{}
  ########afactor#7084#7088#7096#7710::Float64
  ########bfactor#7085#7089#7097#7711::Float64
  ######_var0#7090#7098#7712::Tuple{}
  ######types#7091#7099#7713::Tuple{Type{Float64}}
  ######a#7337#7339#7714::Tuple{}
  ######b#7338#7340#7715::Tuple{}
  ####_var0#7341#7716::Tuple{}
  ##a#7717::Float64
  ##exp_a#7718::Float64
  ##deriv#7719::Float64
  ####G#7573#7720::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7721::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7722::Tuple{}
  ##########x#7159#7161#7165#7576#7723::Float64
  ########_var0#7162#7166#7577#7724::Tuple{}
  ##xs#7725::Tuple{}
  ##########tup#7066#7069#7073#7592#7726::Tuple{}
  ##########x#7067#7070#7074#7593#7727::Int64
  ########_var0#7071#7075#7594#7728::Tuple{}
  ##########types#7068#7072#7076#7595#7729::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7730::Tuple{}
  ########x#7067#7070#7597#7731::Int64
  ######_var0#7071#7598#7732::Tuple{}
  ########types#7068#7072#7599#7733::Tuple{Type{Int64}}
  ##a1#7734::Float64
  ##a2#7735::Float64
  ##div_a#7736::Float64
  ####afactor#7092#7737::Float64
  ####bfactor#7093#7738::Float64
  ########a#7082#7086#7094#7739::Tuple{}
  ########b#7083#7087#7095#7740::Tuple{}
  ########afactor#7084#7088#7096#7741::Float64
  ########bfactor#7085#7089#7097#7742::Float64
  ######_var0#7090#7098#7743::Tuple{}
  ######types#7091#7099#7744::Tuple{Type{Float64}}
  ######a#7337#7339#7745::Tuple{}
  ######b#7338#7340#7746::Tuple{}
  ####_var0#7341#7747::Tuple{}
  ##a1#7748::Float64
  ##a2#7749::Float64
  ######a#7082#7134#7750::Tuple{}
  ######b#7083#7135#7751::Tuple{}
  ######afactor#7084#7136#7752::Float64
  ######bfactor#7085#7137#7753::Float64
  ####_var0#7138#7754::Tuple{}
  ######types#7068#7336#7755::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7614 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7614 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7615 = GenSym(3)
      ##a2#7616 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7621 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7138#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7615::Float64,##a2#7616::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      ##a#7623 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7630 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7162#7166#7577#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7631 = GenSym(6)
      ##a2#7632 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7637 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7637 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7631::Float64,##a2#7632::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7643 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7071#7075#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7578#7646 = GenSym(8)
      ####a2#7579#7647 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7584#7652 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7584#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7578#7646::Float64,####a2#7579#7647::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7585#7653 = GenSym(11)
      ####a2#7586#7654 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7591#7659 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7138#7591#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7585#7653::Float64,####a2#7586#7654::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7660 = GenSym(14)
      ##a2#7661 = GenSym(15)
      ##div_a#7662 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7660::Float64,##a2#7661::Float64))
      ####afactor#7092#7663 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7661::Float64))
      ####bfactor#7093#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7660::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7661::Float64,##a2#7661::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7669 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7090#7098#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7662::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7682 = GenSym(17)
      ##a2#7683 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7688 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7138#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7682::Float64,##a2#7683::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7674 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7071#7075#7594#7674 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7678 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7071#7598#7678 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7692 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7081#7132#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7606#7697 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7071#7075#7606#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7610#7701 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7071#7610#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7703 = GenSym(22)
      ##a2#7704 = GenSym(23)
      ##div_a#7705 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7703::Float64,##a2#7704::Float64))
      ####afactor#7092#7706 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7704::Float64))
      ####bfactor#7093#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7703::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7704::Float64,##a2#7704::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7712 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7090#7098#7712 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7705::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7716 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7341#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7728 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7071#7075#7594#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7732 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7071#7598#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7717 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7718 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7719 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7720 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7724 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7162#7166#7577#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7718::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7734 = GenSym(26)
      ##a2#7735 = GenSym(27)
      ##div_a#7736 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7734::Float64,##a2#7735::Float64))
      ####afactor#7092#7737 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7735::Float64))
      ####bfactor#7093#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7734::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7735::Float64,##a2#7735::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7743 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7090#7098#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7736::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7747 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7341#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7748 = GenSym(29)
      ##a2#7749 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7754 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7138#7754 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7748::Float64,##a2#7749::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7568::Tuple{Float64}
  ##xs#7569::Tuple{}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{Int64}
  ##xs#7572::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  n::Int64
  α::Float64
  β::Float64
  alpha_beta_sum::Float64
  alpha_beta_product::Float64
  numerator::Float64
  denominator::Float64
  left::Float64
  right::Float64
  ##xs#7568::Tuple{Float64}
  ##xs#7569::Tuple{}
  ##xs#7570::Tuple{}
  ##xs#7571::Tuple{Int64}
  ##xs#7572::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      alpha_beta_sum = (Base.box)(Base.Float64,(Base.add_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      alpha_beta_product = (Base.box)(Base.Float64,(Base.mul_float)(α::Float64,β::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      numerator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      denominator = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),alpha_beta_product::Float64)),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3)))))),(Base.box)(Base.Float64,(Base.add_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      left = (Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      right = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(alpha_beta_sum::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64)))))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))))),alpha_beta_sum::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      right = (Base.box)(Base.Float64,(Base.sub_float)(right::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,18)),alpha_beta_product::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)(alpha_beta_sum::Float64,alpha_beta_sum::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(left::Float64,right::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7077#7079#7612::Tuple{}
  ######b#7078#7080#7613::Tuple{}
  ####_var0#7081#7614::Tuple{}
  ##a1#7615::Float64
  ##a2#7616::Float64
  ######a#7082#7134#7617::Tuple{}
  ######b#7083#7135#7618::Tuple{}
  ######afactor#7084#7136#7619::Float64
  ######bfactor#7085#7137#7620::Float64
  ####_var0#7138#7621::Tuple{}
  ########types#7068#7129#7480#7622::Tuple{Type{Int64}}
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7573#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7628::Tuple{}
  ##########x#7159#7161#7165#7576#7629::Float64
  ########_var0#7162#7166#7577#7630::Tuple{}
  ##a1#7631::Float64
  ##a2#7632::Float64
  ######a#7082#7134#7633::Tuple{}
  ######b#7083#7135#7634::Tuple{}
  ######afactor#7084#7136#7635::Float64
  ######bfactor#7085#7137#7636::Float64
  ####_var0#7138#7637::Tuple{}
  ######types#7068#7129#7638::Tuple{Type{Int64}}
  ######types#7068#7129#7639::Tuple{Type{Int64}}
  ######types#7068#7129#7640::Tuple{Type{Int64}}
  ########tup#7066#7069#7073#7641::Tuple{}
  ########x#7067#7070#7074#7642::Int64
  ######_var0#7071#7075#7643::Tuple{}
  ########types#7068#7072#7076#7644::Tuple{Type{Int64}}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7578#7646::Float64
  ####a2#7579#7647::Float64
  ########a#7082#7134#7580#7648::Tuple{}
  ########b#7083#7135#7581#7649::Tuple{}
  ########afactor#7084#7136#7582#7650::Float64
  ########bfactor#7085#7137#7583#7651::Float64
  ######_var0#7138#7584#7652::Tuple{}
  ####a1#7585#7653::Float64
  ####a2#7586#7654::Float64
  ########a#7082#7134#7587#7655::Tuple{}
  ########b#7083#7135#7588#7656::Tuple{}
  ########afactor#7084#7136#7589#7657::Float64
  ########bfactor#7085#7137#7590#7658::Float64
  ######_var0#7138#7591#7659::Tuple{}
  ##a1#7660::Float64
  ##a2#7661::Float64
  ##div_a#7662::Float64
  ####afactor#7092#7663::Float64
  ####bfactor#7093#7664::Float64
  ########a#7082#7086#7094#7665::Tuple{}
  ########b#7083#7087#7095#7666::Tuple{}
  ########afactor#7084#7088#7096#7667::Float64
  ########bfactor#7085#7089#7097#7668::Float64
  ######_var0#7090#7098#7669::Tuple{}
  ######types#7091#7099#7670::Tuple{Type{Float64}}
  ##xs#7671::Tuple{}
  ##########tup#7066#7069#7073#7592#7672::Tuple{}
  ##########x#7067#7070#7074#7593#7673::Int64
  ########_var0#7071#7075#7594#7674::Tuple{}
  ##########types#7068#7072#7076#7595#7675::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7676::Tuple{}
  ########x#7067#7070#7597#7677::Int64
  ######_var0#7071#7598#7678::Tuple{}
  ########types#7068#7072#7599#7679::Tuple{Type{Int64}}
  ######types#7068#7336#7680::Tuple{Type{Int64}}
  ######types#7068#7129#7681::Tuple{Type{Int64}}
  ##a1#7682::Float64
  ##a2#7683::Float64
  ######a#7082#7134#7684::Tuple{}
  ######b#7083#7135#7685::Tuple{}
  ######afactor#7084#7136#7686::Float64
  ######bfactor#7085#7137#7687::Float64
  ####_var0#7138#7688::Tuple{}
  ##xs#7689::Tuple{}
  ########a#7077#7079#7130#7690::Tuple{}
  ########b#7078#7080#7131#7691::Tuple{}
  ######_var0#7081#7132#7692::Tuple{}
  ########types#7068#7129#7133#7693::Tuple{Type{Int64}}
  ##xs#7694::Tuple{Int64}
  ##########tup#7066#7069#7073#7604#7695::Tuple{}
  ##########x#7067#7070#7074#7605#7696::Int64
  ########_var0#7071#7075#7606#7697::Tuple{}
  ##########types#7068#7072#7076#7607#7698::Tuple{Type{Int64}}
  ########tup#7066#7069#7608#7699::Tuple{}
  ########x#7067#7070#7609#7700::Int64
  ######_var0#7071#7610#7701::Tuple{}
  ########types#7068#7072#7611#7702::Tuple{Type{Int64}}
  ##a1#7703::Float64
  ##a2#7704::Float64
  ##div_a#7705::Float64
  ####afactor#7092#7706::Float64
  ####bfactor#7093#7707::Float64
  ########a#7082#7086#7094#7708::Tuple{}
  ########b#7083#7087#7095#7709::Tuple{}
  ########afactor#7084#7088#7096#7710::Float64
  ########bfactor#7085#7089#7097#7711::Float64
  ######_var0#7090#7098#7712::Tuple{}
  ######types#7091#7099#7713::Tuple{Type{Float64}}
  ######a#7337#7339#7714::Tuple{}
  ######b#7338#7340#7715::Tuple{}
  ####_var0#7341#7716::Tuple{}
  ##a#7717::Float64
  ##exp_a#7718::Float64
  ##deriv#7719::Float64
  ####G#7573#7720::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7721::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7722::Tuple{}
  ##########x#7159#7161#7165#7576#7723::Float64
  ########_var0#7162#7166#7577#7724::Tuple{}
  ##xs#7725::Tuple{}
  ##########tup#7066#7069#7073#7592#7726::Tuple{}
  ##########x#7067#7070#7074#7593#7727::Int64
  ########_var0#7071#7075#7594#7728::Tuple{}
  ##########types#7068#7072#7076#7595#7729::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7730::Tuple{}
  ########x#7067#7070#7597#7731::Int64
  ######_var0#7071#7598#7732::Tuple{}
  ########types#7068#7072#7599#7733::Tuple{Type{Int64}}
  ##a1#7734::Float64
  ##a2#7735::Float64
  ##div_a#7736::Float64
  ####afactor#7092#7737::Float64
  ####bfactor#7093#7738::Float64
  ########a#7082#7086#7094#7739::Tuple{}
  ########b#7083#7087#7095#7740::Tuple{}
  ########afactor#7084#7088#7096#7741::Float64
  ########bfactor#7085#7089#7097#7742::Float64
  ######_var0#7090#7098#7743::Tuple{}
  ######types#7091#7099#7744::Tuple{Type{Float64}}
  ######a#7337#7339#7745::Tuple{}
  ######b#7338#7340#7746::Tuple{}
  ####_var0#7341#7747::Tuple{}
  ##a1#7748::Float64
  ##a2#7749::Float64
  ######a#7082#7134#7750::Tuple{}
  ######b#7083#7135#7751::Tuple{}
  ######afactor#7084#7136#7752::Float64
  ######bfactor#7085#7137#7753::Float64
  ####_var0#7138#7754::Tuple{}
  ######types#7068#7336#7755::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7614 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7614 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7615 = GenSym(3)
      ##a2#7616 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7621 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7138#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7615::Float64,##a2#7616::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      ##a#7623 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7630 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7162#7166#7577#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7631 = GenSym(6)
      ##a2#7632 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7637 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7637 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7631::Float64,##a2#7632::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7643 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7071#7075#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7578#7646 = GenSym(8)
      ####a2#7579#7647 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7584#7652 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7584#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7578#7646::Float64,####a2#7579#7647::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7585#7653 = GenSym(11)
      ####a2#7586#7654 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7591#7659 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7138#7591#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7585#7653::Float64,####a2#7586#7654::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7660 = GenSym(14)
      ##a2#7661 = GenSym(15)
      ##div_a#7662 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7660::Float64,##a2#7661::Float64))
      ####afactor#7092#7663 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7661::Float64))
      ####bfactor#7093#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7660::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7661::Float64,##a2#7661::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7669 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7090#7098#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7662::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7682 = GenSym(17)
      ##a2#7683 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7688 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7138#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7682::Float64,##a2#7683::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7674 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7071#7075#7594#7674 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7678 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7071#7598#7678 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7692 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7081#7132#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7606#7697 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7071#7075#7606#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7610#7701 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7071#7610#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7703 = GenSym(22)
      ##a2#7704 = GenSym(23)
      ##div_a#7705 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7703::Float64,##a2#7704::Float64))
      ####afactor#7092#7706 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7704::Float64))
      ####bfactor#7093#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7703::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7704::Float64,##a2#7704::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7712 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7090#7098#7712 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7705::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7716 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7341#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7728 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7071#7075#7594#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7732 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7071#7598#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7717 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7718 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7719 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7720 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7724 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7162#7166#7577#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7718::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7734 = GenSym(26)
      ##a2#7735 = GenSym(27)
      ##div_a#7736 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7734::Float64,##a2#7735::Float64))
      ####afactor#7092#7737 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7735::Float64))
      ####bfactor#7093#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7734::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7735::Float64,##a2#7735::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7743 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7090#7098#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7736::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7747 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7341#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7748 = GenSym(29)
      ##a2#7749 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7754 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7138#7754 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7748::Float64,##a2#7749::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7077#7079#7612::Tuple{}
  ######b#7078#7080#7613::Tuple{}
  ####_var0#7081#7614::Tuple{}
  ##a1#7615::Float64
  ##a2#7616::Float64
  ######a#7082#7134#7617::Tuple{}
  ######b#7083#7135#7618::Tuple{}
  ######afactor#7084#7136#7619::Float64
  ######bfactor#7085#7137#7620::Float64
  ####_var0#7138#7621::Tuple{}
  ########types#7068#7129#7480#7622::Tuple{Type{Int64}}
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7573#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7628::Tuple{}
  ##########x#7159#7161#7165#7576#7629::Float64
  ########_var0#7162#7166#7577#7630::Tuple{}
  ##a1#7631::Float64
  ##a2#7632::Float64
  ######a#7082#7134#7633::Tuple{}
  ######b#7083#7135#7634::Tuple{}
  ######afactor#7084#7136#7635::Float64
  ######bfactor#7085#7137#7636::Float64
  ####_var0#7138#7637::Tuple{}
  ######types#7068#7129#7638::Tuple{Type{Int64}}
  ######types#7068#7129#7639::Tuple{Type{Int64}}
  ######types#7068#7129#7640::Tuple{Type{Int64}}
  ########tup#7066#7069#7073#7641::Tuple{}
  ########x#7067#7070#7074#7642::Int64
  ######_var0#7071#7075#7643::Tuple{}
  ########types#7068#7072#7076#7644::Tuple{Type{Int64}}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7578#7646::Float64
  ####a2#7579#7647::Float64
  ########a#7082#7134#7580#7648::Tuple{}
  ########b#7083#7135#7581#7649::Tuple{}
  ########afactor#7084#7136#7582#7650::Float64
  ########bfactor#7085#7137#7583#7651::Float64
  ######_var0#7138#7584#7652::Tuple{}
  ####a1#7585#7653::Float64
  ####a2#7586#7654::Float64
  ########a#7082#7134#7587#7655::Tuple{}
  ########b#7083#7135#7588#7656::Tuple{}
  ########afactor#7084#7136#7589#7657::Float64
  ########bfactor#7085#7137#7590#7658::Float64
  ######_var0#7138#7591#7659::Tuple{}
  ##a1#7660::Float64
  ##a2#7661::Float64
  ##div_a#7662::Float64
  ####afactor#7092#7663::Float64
  ####bfactor#7093#7664::Float64
  ########a#7082#7086#7094#7665::Tuple{}
  ########b#7083#7087#7095#7666::Tuple{}
  ########afactor#7084#7088#7096#7667::Float64
  ########bfactor#7085#7089#7097#7668::Float64
  ######_var0#7090#7098#7669::Tuple{}
  ######types#7091#7099#7670::Tuple{Type{Float64}}
  ##xs#7671::Tuple{}
  ##########tup#7066#7069#7073#7592#7672::Tuple{}
  ##########x#7067#7070#7074#7593#7673::Int64
  ########_var0#7071#7075#7594#7674::Tuple{}
  ##########types#7068#7072#7076#7595#7675::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7676::Tuple{}
  ########x#7067#7070#7597#7677::Int64
  ######_var0#7071#7598#7678::Tuple{}
  ########types#7068#7072#7599#7679::Tuple{Type{Int64}}
  ######types#7068#7336#7680::Tuple{Type{Int64}}
  ######types#7068#7129#7681::Tuple{Type{Int64}}
  ##a1#7682::Float64
  ##a2#7683::Float64
  ######a#7082#7134#7684::Tuple{}
  ######b#7083#7135#7685::Tuple{}
  ######afactor#7084#7136#7686::Float64
  ######bfactor#7085#7137#7687::Float64
  ####_var0#7138#7688::Tuple{}
  ##xs#7689::Tuple{}
  ########a#7077#7079#7130#7690::Tuple{}
  ########b#7078#7080#7131#7691::Tuple{}
  ######_var0#7081#7132#7692::Tuple{}
  ########types#7068#7129#7133#7693::Tuple{Type{Int64}}
  ##xs#7694::Tuple{Int64}
  ##########tup#7066#7069#7073#7604#7695::Tuple{}
  ##########x#7067#7070#7074#7605#7696::Int64
  ########_var0#7071#7075#7606#7697::Tuple{}
  ##########types#7068#7072#7076#7607#7698::Tuple{Type{Int64}}
  ########tup#7066#7069#7608#7699::Tuple{}
  ########x#7067#7070#7609#7700::Int64
  ######_var0#7071#7610#7701::Tuple{}
  ########types#7068#7072#7611#7702::Tuple{Type{Int64}}
  ##a1#7703::Float64
  ##a2#7704::Float64
  ##div_a#7705::Float64
  ####afactor#7092#7706::Float64
  ####bfactor#7093#7707::Float64
  ########a#7082#7086#7094#7708::Tuple{}
  ########b#7083#7087#7095#7709::Tuple{}
  ########afactor#7084#7088#7096#7710::Float64
  ########bfactor#7085#7089#7097#7711::Float64
  ######_var0#7090#7098#7712::Tuple{}
  ######types#7091#7099#7713::Tuple{Type{Float64}}
  ######a#7337#7339#7714::Tuple{}
  ######b#7338#7340#7715::Tuple{}
  ####_var0#7341#7716::Tuple{}
  ##a#7717::Float64
  ##exp_a#7718::Float64
  ##deriv#7719::Float64
  ####G#7573#7720::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7721::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7722::Tuple{}
  ##########x#7159#7161#7165#7576#7723::Float64
  ########_var0#7162#7166#7577#7724::Tuple{}
  ##xs#7725::Tuple{}
  ##########tup#7066#7069#7073#7592#7726::Tuple{}
  ##########x#7067#7070#7074#7593#7727::Int64
  ########_var0#7071#7075#7594#7728::Tuple{}
  ##########types#7068#7072#7076#7595#7729::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7730::Tuple{}
  ########x#7067#7070#7597#7731::Int64
  ######_var0#7071#7598#7732::Tuple{}
  ########types#7068#7072#7599#7733::Tuple{Type{Int64}}
  ##a1#7734::Float64
  ##a2#7735::Float64
  ##div_a#7736::Float64
  ####afactor#7092#7737::Float64
  ####bfactor#7093#7738::Float64
  ########a#7082#7086#7094#7739::Tuple{}
  ########b#7083#7087#7095#7740::Tuple{}
  ########afactor#7084#7088#7096#7741::Float64
  ########bfactor#7085#7089#7097#7742::Float64
  ######_var0#7090#7098#7743::Tuple{}
  ######types#7091#7099#7744::Tuple{Type{Float64}}
  ######a#7337#7339#7745::Tuple{}
  ######b#7338#7340#7746::Tuple{}
  ####_var0#7341#7747::Tuple{}
  ##a1#7748::Float64
  ##a2#7749::Float64
  ######a#7082#7134#7750::Tuple{}
  ######b#7083#7135#7751::Tuple{}
  ######afactor#7084#7136#7752::Float64
  ######bfactor#7085#7137#7753::Float64
  ####_var0#7138#7754::Tuple{}
  ######types#7068#7336#7755::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7614 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7614 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7615 = GenSym(3)
      ##a2#7616 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7621 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7138#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7615::Float64,##a2#7616::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      ##a#7623 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7630 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7162#7166#7577#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7631 = GenSym(6)
      ##a2#7632 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7637 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7637 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7631::Float64,##a2#7632::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7643 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7071#7075#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7578#7646 = GenSym(8)
      ####a2#7579#7647 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7584#7652 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7584#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7578#7646::Float64,####a2#7579#7647::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7585#7653 = GenSym(11)
      ####a2#7586#7654 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7591#7659 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7138#7591#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7585#7653::Float64,####a2#7586#7654::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7660 = GenSym(14)
      ##a2#7661 = GenSym(15)
      ##div_a#7662 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7660::Float64,##a2#7661::Float64))
      ####afactor#7092#7663 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7661::Float64))
      ####bfactor#7093#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7660::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7661::Float64,##a2#7661::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7669 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7090#7098#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7662::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7682 = GenSym(17)
      ##a2#7683 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7688 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7138#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7682::Float64,##a2#7683::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7674 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7071#7075#7594#7674 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7678 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7071#7598#7678 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7692 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7081#7132#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7606#7697 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7071#7075#7606#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7610#7701 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7071#7610#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7703 = GenSym(22)
      ##a2#7704 = GenSym(23)
      ##div_a#7705 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7703::Float64,##a2#7704::Float64))
      ####afactor#7092#7706 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7704::Float64))
      ####bfactor#7093#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7703::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7704::Float64,##a2#7704::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7712 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7090#7098#7712 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7705::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7716 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7341#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7728 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7071#7075#7594#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7732 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7071#7598#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7717 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7718 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7719 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7720 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7724 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7162#7166#7577#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7718::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7734 = GenSym(26)
      ##a2#7735 = GenSym(27)
      ##div_a#7736 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7734::Float64,##a2#7735::Float64))
      ####afactor#7092#7737 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7735::Float64))
      ####bfactor#7093#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7734::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7735::Float64,##a2#7735::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7743 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7090#7098#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7736::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7747 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7341#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7748 = GenSym(29)
      ##a2#7749 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7754 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7138#7754 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7748::Float64,##a2#7749::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7077#7079#7612::Tuple{}
  ######b#7078#7080#7613::Tuple{}
  ####_var0#7081#7614::Tuple{}
  ##a1#7615::Float64
  ##a2#7616::Float64
  ######a#7082#7134#7617::Tuple{}
  ######b#7083#7135#7618::Tuple{}
  ######afactor#7084#7136#7619::Float64
  ######bfactor#7085#7137#7620::Float64
  ####_var0#7138#7621::Tuple{}
  ########types#7068#7129#7480#7622::Tuple{Type{Int64}}
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7573#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7628::Tuple{}
  ##########x#7159#7161#7165#7576#7629::Float64
  ########_var0#7162#7166#7577#7630::Tuple{}
  ##a1#7631::Float64
  ##a2#7632::Float64
  ######a#7082#7134#7633::Tuple{}
  ######b#7083#7135#7634::Tuple{}
  ######afactor#7084#7136#7635::Float64
  ######bfactor#7085#7137#7636::Float64
  ####_var0#7138#7637::Tuple{}
  ######types#7068#7129#7638::Tuple{Type{Int64}}
  ######types#7068#7129#7639::Tuple{Type{Int64}}
  ######types#7068#7129#7640::Tuple{Type{Int64}}
  ########tup#7066#7069#7073#7641::Tuple{}
  ########x#7067#7070#7074#7642::Int64
  ######_var0#7071#7075#7643::Tuple{}
  ########types#7068#7072#7076#7644::Tuple{Type{Int64}}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7578#7646::Float64
  ####a2#7579#7647::Float64
  ########a#7082#7134#7580#7648::Tuple{}
  ########b#7083#7135#7581#7649::Tuple{}
  ########afactor#7084#7136#7582#7650::Float64
  ########bfactor#7085#7137#7583#7651::Float64
  ######_var0#7138#7584#7652::Tuple{}
  ####a1#7585#7653::Float64
  ####a2#7586#7654::Float64
  ########a#7082#7134#7587#7655::Tuple{}
  ########b#7083#7135#7588#7656::Tuple{}
  ########afactor#7084#7136#7589#7657::Float64
  ########bfactor#7085#7137#7590#7658::Float64
  ######_var0#7138#7591#7659::Tuple{}
  ##a1#7660::Float64
  ##a2#7661::Float64
  ##div_a#7662::Float64
  ####afactor#7092#7663::Float64
  ####bfactor#7093#7664::Float64
  ########a#7082#7086#7094#7665::Tuple{}
  ########b#7083#7087#7095#7666::Tuple{}
  ########afactor#7084#7088#7096#7667::Float64
  ########bfactor#7085#7089#7097#7668::Float64
  ######_var0#7090#7098#7669::Tuple{}
  ######types#7091#7099#7670::Tuple{Type{Float64}}
  ##xs#7671::Tuple{}
  ##########tup#7066#7069#7073#7592#7672::Tuple{}
  ##########x#7067#7070#7074#7593#7673::Int64
  ########_var0#7071#7075#7594#7674::Tuple{}
  ##########types#7068#7072#7076#7595#7675::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7676::Tuple{}
  ########x#7067#7070#7597#7677::Int64
  ######_var0#7071#7598#7678::Tuple{}
  ########types#7068#7072#7599#7679::Tuple{Type{Int64}}
  ######types#7068#7336#7680::Tuple{Type{Int64}}
  ######types#7068#7129#7681::Tuple{Type{Int64}}
  ##a1#7682::Float64
  ##a2#7683::Float64
  ######a#7082#7134#7684::Tuple{}
  ######b#7083#7135#7685::Tuple{}
  ######afactor#7084#7136#7686::Float64
  ######bfactor#7085#7137#7687::Float64
  ####_var0#7138#7688::Tuple{}
  ##xs#7689::Tuple{}
  ########a#7077#7079#7130#7690::Tuple{}
  ########b#7078#7080#7131#7691::Tuple{}
  ######_var0#7081#7132#7692::Tuple{}
  ########types#7068#7129#7133#7693::Tuple{Type{Int64}}
  ##xs#7694::Tuple{Int64}
  ##########tup#7066#7069#7073#7604#7695::Tuple{}
  ##########x#7067#7070#7074#7605#7696::Int64
  ########_var0#7071#7075#7606#7697::Tuple{}
  ##########types#7068#7072#7076#7607#7698::Tuple{Type{Int64}}
  ########tup#7066#7069#7608#7699::Tuple{}
  ########x#7067#7070#7609#7700::Int64
  ######_var0#7071#7610#7701::Tuple{}
  ########types#7068#7072#7611#7702::Tuple{Type{Int64}}
  ##a1#7703::Float64
  ##a2#7704::Float64
  ##div_a#7705::Float64
  ####afactor#7092#7706::Float64
  ####bfactor#7093#7707::Float64
  ########a#7082#7086#7094#7708::Tuple{}
  ########b#7083#7087#7095#7709::Tuple{}
  ########afactor#7084#7088#7096#7710::Float64
  ########bfactor#7085#7089#7097#7711::Float64
  ######_var0#7090#7098#7712::Tuple{}
  ######types#7091#7099#7713::Tuple{Type{Float64}}
  ######a#7337#7339#7714::Tuple{}
  ######b#7338#7340#7715::Tuple{}
  ####_var0#7341#7716::Tuple{}
  ##a#7717::Float64
  ##exp_a#7718::Float64
  ##deriv#7719::Float64
  ####G#7573#7720::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7721::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7722::Tuple{}
  ##########x#7159#7161#7165#7576#7723::Float64
  ########_var0#7162#7166#7577#7724::Tuple{}
  ##xs#7725::Tuple{}
  ##########tup#7066#7069#7073#7592#7726::Tuple{}
  ##########x#7067#7070#7074#7593#7727::Int64
  ########_var0#7071#7075#7594#7728::Tuple{}
  ##########types#7068#7072#7076#7595#7729::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7730::Tuple{}
  ########x#7067#7070#7597#7731::Int64
  ######_var0#7071#7598#7732::Tuple{}
  ########types#7068#7072#7599#7733::Tuple{Type{Int64}}
  ##a1#7734::Float64
  ##a2#7735::Float64
  ##div_a#7736::Float64
  ####afactor#7092#7737::Float64
  ####bfactor#7093#7738::Float64
  ########a#7082#7086#7094#7739::Tuple{}
  ########b#7083#7087#7095#7740::Tuple{}
  ########afactor#7084#7088#7096#7741::Float64
  ########bfactor#7085#7089#7097#7742::Float64
  ######_var0#7090#7098#7743::Tuple{}
  ######types#7091#7099#7744::Tuple{Type{Float64}}
  ######a#7337#7339#7745::Tuple{}
  ######b#7338#7340#7746::Tuple{}
  ####_var0#7341#7747::Tuple{}
  ##a1#7748::Float64
  ##a2#7749::Float64
  ######a#7082#7134#7750::Tuple{}
  ######b#7083#7135#7751::Tuple{}
  ######afactor#7084#7136#7752::Float64
  ######bfactor#7085#7137#7753::Float64
  ####_var0#7138#7754::Tuple{}
  ######types#7068#7336#7755::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7614 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7614 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7615 = GenSym(3)
      ##a2#7616 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7621 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7138#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7615::Float64,##a2#7616::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      ##a#7623 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7630 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7162#7166#7577#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7631 = GenSym(6)
      ##a2#7632 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7637 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7637 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7631::Float64,##a2#7632::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7643 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7071#7075#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7578#7646 = GenSym(8)
      ####a2#7579#7647 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7584#7652 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7584#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7578#7646::Float64,####a2#7579#7647::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7585#7653 = GenSym(11)
      ####a2#7586#7654 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7591#7659 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7138#7591#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7585#7653::Float64,####a2#7586#7654::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7660 = GenSym(14)
      ##a2#7661 = GenSym(15)
      ##div_a#7662 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7660::Float64,##a2#7661::Float64))
      ####afactor#7092#7663 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7661::Float64))
      ####bfactor#7093#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7660::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7661::Float64,##a2#7661::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7669 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7090#7098#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7662::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7682 = GenSym(17)
      ##a2#7683 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7688 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7138#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7682::Float64,##a2#7683::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7674 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7071#7075#7594#7674 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7678 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7071#7598#7678 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7692 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7081#7132#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7606#7697 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7071#7075#7606#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7610#7701 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7071#7610#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7703 = GenSym(22)
      ##a2#7704 = GenSym(23)
      ##div_a#7705 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7703::Float64,##a2#7704::Float64))
      ####afactor#7092#7706 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7704::Float64))
      ####bfactor#7093#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7703::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7704::Float64,##a2#7704::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7712 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7090#7098#7712 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7705::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7716 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7341#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7728 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7071#7075#7594#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7732 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7071#7598#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7717 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7718 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7719 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7720 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7724 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7162#7166#7577#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7718::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7734 = GenSym(26)
      ##a2#7735 = GenSym(27)
      ##div_a#7736 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7734::Float64,##a2#7735::Float64))
      ####afactor#7092#7737 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7735::Float64))
      ####bfactor#7093#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7734::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7735::Float64,##a2#7735::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7743 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7090#7098#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7736::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7747 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7341#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7748 = GenSym(29)
      ##a2#7749 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7754 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7138#7754 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7748::Float64,##a2#7749::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  left::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  right::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7077#7079#7612::Tuple{}
  ######b#7078#7080#7613::Tuple{}
  ####_var0#7081#7614::Tuple{}
  ##a1#7615::Float64
  ##a2#7616::Float64
  ######a#7082#7134#7617::Tuple{}
  ######b#7083#7135#7618::Tuple{}
  ######afactor#7084#7136#7619::Float64
  ######bfactor#7085#7137#7620::Float64
  ####_var0#7138#7621::Tuple{}
  ########types#7068#7129#7480#7622::Tuple{Type{Int64}}
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7573#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7628::Tuple{}
  ##########x#7159#7161#7165#7576#7629::Float64
  ########_var0#7162#7166#7577#7630::Tuple{}
  ##a1#7631::Float64
  ##a2#7632::Float64
  ######a#7082#7134#7633::Tuple{}
  ######b#7083#7135#7634::Tuple{}
  ######afactor#7084#7136#7635::Float64
  ######bfactor#7085#7137#7636::Float64
  ####_var0#7138#7637::Tuple{}
  ######types#7068#7129#7638::Tuple{Type{Int64}}
  ######types#7068#7129#7639::Tuple{Type{Int64}}
  ######types#7068#7129#7640::Tuple{Type{Int64}}
  ########tup#7066#7069#7073#7641::Tuple{}
  ########x#7067#7070#7074#7642::Int64
  ######_var0#7071#7075#7643::Tuple{}
  ########types#7068#7072#7076#7644::Tuple{Type{Int64}}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####a1#7578#7646::Float64
  ####a2#7579#7647::Float64
  ########a#7082#7134#7580#7648::Tuple{}
  ########b#7083#7135#7581#7649::Tuple{}
  ########afactor#7084#7136#7582#7650::Float64
  ########bfactor#7085#7137#7583#7651::Float64
  ######_var0#7138#7584#7652::Tuple{}
  ####a1#7585#7653::Float64
  ####a2#7586#7654::Float64
  ########a#7082#7134#7587#7655::Tuple{}
  ########b#7083#7135#7588#7656::Tuple{}
  ########afactor#7084#7136#7589#7657::Float64
  ########bfactor#7085#7137#7590#7658::Float64
  ######_var0#7138#7591#7659::Tuple{}
  ##a1#7660::Float64
  ##a2#7661::Float64
  ##div_a#7662::Float64
  ####afactor#7092#7663::Float64
  ####bfactor#7093#7664::Float64
  ########a#7082#7086#7094#7665::Tuple{}
  ########b#7083#7087#7095#7666::Tuple{}
  ########afactor#7084#7088#7096#7667::Float64
  ########bfactor#7085#7089#7097#7668::Float64
  ######_var0#7090#7098#7669::Tuple{}
  ######types#7091#7099#7670::Tuple{Type{Float64}}
  ##xs#7671::Tuple{}
  ##########tup#7066#7069#7073#7592#7672::Tuple{}
  ##########x#7067#7070#7074#7593#7673::Int64
  ########_var0#7071#7075#7594#7674::Tuple{}
  ##########types#7068#7072#7076#7595#7675::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7676::Tuple{}
  ########x#7067#7070#7597#7677::Int64
  ######_var0#7071#7598#7678::Tuple{}
  ########types#7068#7072#7599#7679::Tuple{Type{Int64}}
  ######types#7068#7336#7680::Tuple{Type{Int64}}
  ######types#7068#7129#7681::Tuple{Type{Int64}}
  ##a1#7682::Float64
  ##a2#7683::Float64
  ######a#7082#7134#7684::Tuple{}
  ######b#7083#7135#7685::Tuple{}
  ######afactor#7084#7136#7686::Float64
  ######bfactor#7085#7137#7687::Float64
  ####_var0#7138#7688::Tuple{}
  ##xs#7689::Tuple{}
  ########a#7077#7079#7130#7690::Tuple{}
  ########b#7078#7080#7131#7691::Tuple{}
  ######_var0#7081#7132#7692::Tuple{}
  ########types#7068#7129#7133#7693::Tuple{Type{Int64}}
  ##xs#7694::Tuple{Int64}
  ##########tup#7066#7069#7073#7604#7695::Tuple{}
  ##########x#7067#7070#7074#7605#7696::Int64
  ########_var0#7071#7075#7606#7697::Tuple{}
  ##########types#7068#7072#7076#7607#7698::Tuple{Type{Int64}}
  ########tup#7066#7069#7608#7699::Tuple{}
  ########x#7067#7070#7609#7700::Int64
  ######_var0#7071#7610#7701::Tuple{}
  ########types#7068#7072#7611#7702::Tuple{Type{Int64}}
  ##a1#7703::Float64
  ##a2#7704::Float64
  ##div_a#7705::Float64
  ####afactor#7092#7706::Float64
  ####bfactor#7093#7707::Float64
  ########a#7082#7086#7094#7708::Tuple{}
  ########b#7083#7087#7095#7709::Tuple{}
  ########afactor#7084#7088#7096#7710::Float64
  ########bfactor#7085#7089#7097#7711::Float64
  ######_var0#7090#7098#7712::Tuple{}
  ######types#7091#7099#7713::Tuple{Type{Float64}}
  ######a#7337#7339#7714::Tuple{}
  ######b#7338#7340#7715::Tuple{}
  ####_var0#7341#7716::Tuple{}
  ##a#7717::Float64
  ##exp_a#7718::Float64
  ##deriv#7719::Float64
  ####G#7573#7720::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7157#7163#7574#7721::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7158#7160#7164#7575#7722::Tuple{}
  ##########x#7159#7161#7165#7576#7723::Float64
  ########_var0#7162#7166#7577#7724::Tuple{}
  ##xs#7725::Tuple{}
  ##########tup#7066#7069#7073#7592#7726::Tuple{}
  ##########x#7067#7070#7074#7593#7727::Int64
  ########_var0#7071#7075#7594#7728::Tuple{}
  ##########types#7068#7072#7076#7595#7729::Tuple{Type{Int64}}
  ########tup#7066#7069#7596#7730::Tuple{}
  ########x#7067#7070#7597#7731::Int64
  ######_var0#7071#7598#7732::Tuple{}
  ########types#7068#7072#7599#7733::Tuple{Type{Int64}}
  ##a1#7734::Float64
  ##a2#7735::Float64
  ##div_a#7736::Float64
  ####afactor#7092#7737::Float64
  ####bfactor#7093#7738::Float64
  ########a#7082#7086#7094#7739::Tuple{}
  ########b#7083#7087#7095#7740::Tuple{}
  ########afactor#7084#7088#7096#7741::Float64
  ########bfactor#7085#7089#7097#7742::Float64
  ######_var0#7090#7098#7743::Tuple{}
  ######types#7091#7099#7744::Tuple{Type{Float64}}
  ######a#7337#7339#7745::Tuple{}
  ######b#7338#7340#7746::Tuple{}
  ####_var0#7341#7747::Tuple{}
  ##a1#7748::Float64
  ##a2#7749::Float64
  ######a#7082#7134#7750::Tuple{}
  ######b#7083#7135#7751::Tuple{}
  ######afactor#7084#7136#7752::Float64
  ######bfactor#7085#7137#7753::Float64
  ####_var0#7138#7754::Tuple{}
  ######types#7068#7336#7755::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 73:
      $(Expr(:boundscheck, false))
      ####_var0#7081#7614 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7081#7614 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      alpha_beta_sum = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 74:
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7615 = GenSym(3)
      ##a2#7616 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7621 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7138#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      alpha_beta_product = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7615::Float64,##a2#7616::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 75:
      ##a#7623 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7630 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7162#7166#7577#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7631 = GenSym(6)
      ##a2#7632 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7637 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7138#7637 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      numerator = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7631::Float64,##a2#7632::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 76:
      $(Expr(:boundscheck, false))
      ######_var0#7071#7075#7643 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7071#7075#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7578#7646 = GenSym(8)
      ####a2#7579#7647 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7584#7652 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7138#7584#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7578#7646::Float64,####a2#7579#7647::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7585#7653 = GenSym(11)
      ####a2#7586#7654 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7138#7591#7659 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7138#7591#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7585#7653::Float64,####a2#7586#7654::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      denominator = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(13),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 77:
      GenSym(14) = (top(getfield))(numerator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(15) = (top(getfield))(denominator::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7660 = GenSym(14)
      ##a2#7661 = GenSym(15)
      ##div_a#7662 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7660::Float64,##a2#7661::Float64))
      ####afactor#7092#7663 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7661::Float64))
      ####bfactor#7093#7664 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7660::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7661::Float64,##a2#7661::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7669 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7090#7098#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      left = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7662::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 78:
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))), :((top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(17) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(18) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(16),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,n::Int64))))))), :((top(getfield))(GenSym(16),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7682 = GenSym(17)
      ##a2#7683 = GenSym(18)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7688 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7138#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7682::Float64,##a2#7683::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7674 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7071#7075#7594#7674 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7678 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7071#7598#7678 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7081#7132#7692 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7081#7132#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(19),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,2))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(6,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 79:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7606#7697 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7071#7075#7606#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7610#7701 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7071#7610#7701 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(21) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),(Base.box)(Int64,(Base.sub_int)(6,n::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7703 = GenSym(22)
      ##a2#7704 = GenSym(23)
      ##div_a#7705 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7703::Float64,##a2#7704::Float64))
      ####afactor#7092#7706 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7704::Float64))
      ####bfactor#7093#7707 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7703::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7704::Float64,##a2#7704::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7712 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7090#7098#7712 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7705::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7716 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7341#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7071#7075#7594#7728 = (top(tuple))()::Tuple{}
      goto 44
      ########_var0#7071#7075#7594#7728 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ######_var0#7071#7598#7732 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7071#7598#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      ##a#7717 = (top(getfield))(alpha_beta_sum::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7718 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7719 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7717::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7573#7720 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7162#7166#7577#7724 = (top(tuple))()::Tuple{}
      goto 41
      ########_var0#7162#7166#7577#7724 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7718::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(alpha_beta_product::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(n::Int64,n::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7734 = GenSym(26)
      ##a2#7735 = GenSym(27)
      ##div_a#7736 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7734::Float64,##a2#7735::Float64))
      ####afactor#7092#7737 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7735::Float64))
      ####bfactor#7093#7738 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7734::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7735::Float64,##a2#7735::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7098#7743 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7090#7098#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7736::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7341#7747 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7341#7747 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      right = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(28),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 81:
      GenSym(29) = (top(getfield))(left::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(30) = (top(getfield))(right::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7748 = GenSym(29)
      ##a2#7749 = GenSym(30)
      $(Expr(:boundscheck, false))
      ####_var0#7138#7754 = (top(tuple))()::Tuple{}
      goto 51
      ####_var0#7138#7754 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7748::Float64,##a2#7749::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(31),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :((top(getfield))(GenSym(31),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      GenSym(0) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(1) = call(Distributions.Categorical{Float64},GenSym(0))::Distributions.Categorical{Float64}
      return (Distributions.entropy)((top(getfield))(GenSym(1),:p)::Array{Float64,1})::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 100:
      return (Distributions.entropy)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{})::UNION{}
  end::UNION{}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7758#7760::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7761::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7760 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7760 = false
      2: 
      ####_var0#7758#7760::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7761 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7761 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7761::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7758#7760::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7761::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7760 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7760 = false
      2: 
      ####_var0#7758#7760::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7761 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7761 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7761::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7758#7762::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7763::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7762 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7762 = false
      2: 
      ####_var0#7758#7762::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7763 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7763 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7763::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7758#7760::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7761::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7760 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7760 = false
      2: 
      ####_var0#7758#7760::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7761 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7761 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7761::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  ####_var0#7758#7760::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7761::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7760 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7760 = false
      2: 
      ####_var0#7758#7760::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7761 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7761 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7761::Float64,1.0))
      GenSym(3) = (Distributions.pdf)(d::Distributions.BetaBinomial{Float64})::Array{Float64,1}
      GenSym(4) = (Distributions.quantile)(call(Distributions.Categorical{Float64},GenSym(3))::Distributions.Categorical{Float64},GenSym(2))::Int64
      return (Base.box)(Int64,(Base.sub_int)(GenSym(4),1))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7758#7762::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7763::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7762 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7762 = false
      2: 
      ####_var0#7758#7762::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7763 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7763 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7763::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7758#7762::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7763::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7762 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7762 = false
      2: 
      ####_var0#7758#7762::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7763 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7763 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7763::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7758#7762::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7763::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7762 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7762 = false
      2: 
      ####_var0#7758#7762::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7763 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7763 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7763::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7758#7762::UNION{BOOL,INT64}
  ########_var0#7756#7757#7759#7763::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7758#7762 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7758#7762 = false
      2: 
      ####_var0#7758#7762::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7756#7757#7759#7763 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7756#7757#7759#7763 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7756#7757#7759#7763::Float64,1.0))
      return (Distributions.quantile)(call(Distributions.Categorical,(Distributions.pdf)(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{})::UNION{},GenSym(2))::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7068#7129#7480#7764::Tuple{Type{Int64}}
  ########types#7068#7129#7480#7765::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.BetaBinomial{Float64}
  k::Int64
  n::Int64
  α::Float64
  β::Float64
  choose::Float64
  numerator::Float64
  denominator::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:α)::Float64
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{Float64},:β)::Float64
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),α::Float64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64)))),β::Float64)))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::Float64,β::Float64)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return (Base.box)(Base.Float64,(Base.mul_float)(choose::Float64,(Base.box)(Base.Float64,(Base.div_float)(numerator::Float64,denominator::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7068#7129#7480#7764::Tuple{Type{Int64}}
  ########types#7068#7129#7480#7765::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7068#7129#7480#7764::Tuple{Type{Int64}}
  ########types#7068#7129#7480#7765::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7068#7129#7480#7764::Tuple{Type{Int64}}
  ########types#7068#7129#7480#7765::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  k::Int64
  n::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  β::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  choose::Float64
  numerator::UNION{}
  denominator::UNION{}
  ########types#7068#7129#7480#7764::Tuple{Type{Int64}}
  ########types#7068#7129#7480#7765::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 85:
      GenSym(0) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(1) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(d::Distributions.BetaBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:β)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      n = GenSym(0)
      α = GenSym(1)
      β = GenSym(2) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 86:
      GenSym(3) = (Distributions.binomial)(n::Int64,k::Int64)::Int64
      choose = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(3))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 87:
      numerator = (Distributions.beta)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,k::Int64))))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(n::Int64,k::Int64))))))), :((top(getfield))(β::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))))::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 88:
      denominator = (Distributions.beta)(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},β::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/betabinomial.jl, line 89:
      return choose::Float64 * (numerator::UNION{} / denominator::UNION{})::UNION{}::UNION{}
  end::UNION{}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





