____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 59:
      return (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7101::Float64
  ##exp_a#7102::Float64
  ##deriv#7103::Float64
  ####G#7078#7104::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7105::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7106::Tuple{}
  ##########x#7070#7072#7076#7081#7107::Float64
  ########_var0#7073#7077#7082#7108::Tuple{}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7093#7112::Float64
  ####bfactor#7094#7113::Float64
  ########a#7083#7087#7095#7114::Tuple{}
  ########b#7084#7088#7096#7115::Tuple{}
  ########afactor#7085#7089#7097#7116::Float64
  ########bfactor#7086#7090#7098#7117::Float64
  ######_var0#7091#7099#7118::Tuple{}
  ######types#7092#7100#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      ##a#7101 = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7102 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7103 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7078#7104 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7108 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7108 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7102::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7109 = GenSym(1)
      ##a2#7110 = GenSym(2)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7093#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7094#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7118 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3))))::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7101::Float64
  ##exp_a#7102::Float64
  ##deriv#7103::Float64
  ####G#7078#7104::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7105::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7106::Tuple{}
  ##########x#7070#7072#7076#7081#7107::Float64
  ########_var0#7073#7077#7082#7108::Tuple{}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7093#7112::Float64
  ####bfactor#7094#7113::Float64
  ########a#7083#7087#7095#7114::Tuple{}
  ########b#7084#7088#7096#7115::Tuple{}
  ########afactor#7085#7089#7097#7116::Float64
  ########bfactor#7086#7090#7098#7117::Float64
  ######_var0#7091#7099#7118::Tuple{}
  ######types#7092#7100#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      ##a#7101 = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7102 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7103 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7078#7104 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7108 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7108 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7102::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7109 = GenSym(1)
      ##a2#7110 = GenSym(2)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7093#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7094#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7118 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7101::Float64
  ##exp_a#7102::Float64
  ##deriv#7103::Float64
  ####G#7078#7104::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7105::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7106::Tuple{}
  ##########x#7070#7072#7076#7081#7107::Float64
  ########_var0#7073#7077#7082#7108::Tuple{}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7093#7112::Float64
  ####bfactor#7094#7113::Float64
  ########a#7083#7087#7095#7114::Tuple{}
  ########b#7084#7088#7096#7115::Tuple{}
  ########afactor#7085#7089#7097#7116::Float64
  ########bfactor#7086#7090#7098#7117::Float64
  ######_var0#7091#7099#7118::Tuple{}
  ######types#7092#7100#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      ##a#7101 = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7102 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7103 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7078#7104 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7108 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7108 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7102::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7109 = GenSym(1)
      ##a2#7110 = GenSym(2)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7093#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7094#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7118 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7101::Float64
  ##exp_a#7102::Float64
  ##deriv#7103::Float64
  ####G#7078#7104::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7105::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7106::Tuple{}
  ##########x#7070#7072#7076#7081#7107::Float64
  ########_var0#7073#7077#7082#7108::Tuple{}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7093#7112::Float64
  ####bfactor#7094#7113::Float64
  ########a#7083#7087#7095#7114::Tuple{}
  ########b#7084#7088#7096#7115::Tuple{}
  ########afactor#7085#7089#7097#7116::Float64
  ########bfactor#7086#7090#7098#7117::Float64
  ######_var0#7091#7099#7118::Tuple{}
  ######types#7092#7100#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      ##a#7101 = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7102 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7103 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7078#7104 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7108 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7108 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7102::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7109 = GenSym(1)
      ##a2#7110 = GenSym(2)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7093#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7094#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7118 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7101::Float64
  ##exp_a#7102::Float64
  ##deriv#7103::Float64
  ####G#7078#7104::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7105::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7106::Tuple{}
  ##########x#7070#7072#7076#7081#7107::Float64
  ########_var0#7073#7077#7082#7108::Tuple{}
  ##a1#7109::Float64
  ##a2#7110::Float64
  ##div_a#7111::Float64
  ####afactor#7093#7112::Float64
  ####bfactor#7094#7113::Float64
  ########a#7083#7087#7095#7114::Tuple{}
  ########b#7084#7088#7096#7115::Tuple{}
  ########afactor#7085#7089#7097#7116::Float64
  ########bfactor#7086#7090#7098#7117::Float64
  ######_var0#7091#7099#7118::Tuple{}
  ######types#7092#7100#7119::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 61:
      ##a#7101 = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7102 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7103 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7101::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7078#7104 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7108 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7108 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7102::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7109 = GenSym(1)
      ##a2#7110 = GenSym(2)
      ##div_a#7111 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7109::Float64,##a2#7110::Float64))
      ####afactor#7093#7112 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7110::Float64))
      ####bfactor#7094#7113 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7109::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7110::Float64,##a2#7110::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7118 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7111::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  r::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(3) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,λ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      return (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.25,(Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64))))))))::Float64,(Base.box)(Base.Float64,(Base.mul_float)(1.5,r::Float64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  r::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(3) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,λ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      return (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.25,(Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64))))))))::Float64,(Base.box)(Base.Float64,(Base.mul_float)(1.5,r::Float64))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7093#7160::Float64
  ####bfactor#7094#7161::Float64
  ########a#7083#7087#7095#7162::Tuple{}
  ########b#7084#7088#7096#7163::Tuple{}
  ########afactor#7085#7089#7097#7164::Float64
  ########bfactor#7086#7090#7098#7165::Float64
  ######_var0#7091#7099#7166::Tuple{}
  ######types#7092#7100#7167::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7168::Tuple{}
  ########x#7070#7133#7137#7169::Float64
  ######_var0#7134#7138#7170::Tuple{}
  ########types#7131#7135#7139#7171::Tuple{Type{Float64}}
  ##a#7172::Float64
  ##exp_a#7173::Float64
  ##deriv#7174::Float64
  ####G#7078#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7177::Tuple{}
  ##########x#7070#7072#7076#7081#7178::Float64
  ########_var0#7073#7077#7082#7179::Tuple{}
  ########tup#7069#7132#7136#7180::Tuple{}
  ########x#7070#7133#7137#7181::Float64
  ######_var0#7134#7138#7182::Tuple{}
  ########types#7131#7135#7139#7183::Tuple{Type{Float64}}
  ########types#7131#7140#7141#7184::Tuple{Type{Float64}}
  ##sqrt_a#7185::Float64
  ##deriv#7186::Float64
  ####G#7142#7187::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7188::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7189::Tuple{}
  ##########x#7070#7072#7076#7145#7190::Float64
  ########_var0#7073#7077#7146#7191::Tuple{}
  ######a#7147#7149#7192::Tuple{}
  ######b#7148#7150#7193::Tuple{}
  ####_var0#7151#7194::Tuple{}
  ##a1#7195::Float64
  ##a2#7196::Float64
  ######a#7083#7152#7197::Tuple{}
  ######b#7084#7153#7198::Tuple{}
  ######afactor#7085#7154#7199::Float64
  ######bfactor#7086#7155#7200::Float64
  ####_var0#7156#7201::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(10) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7157 = GenSym(3)
      ##a2#7158 = GenSym(4)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7093#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7094#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7166 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7091#7099#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      ##a#7172 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7173 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7174 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7179 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7173::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7182 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7134#7138#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,2.25))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7185 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7186 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7185::Float64))
      ####G#7142#7187 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7191 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7146#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7170 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7134#7138#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7151#7194 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7151#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(8) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7195 = GenSym(8)
      ##a2#7196 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7201 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7156#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7195::Float64,##a2#7196::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  r::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(3) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,λ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      return (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.25,(Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64))))))))::Float64,(Base.box)(Base.Float64,(Base.mul_float)(1.5,r::Float64))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  r::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(3) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      r = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,λ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      return (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.25,(Base.box)(Base.Float64,(Base.mul_float)(r::Float64,r::Float64))))))))::Float64,(Base.box)(Base.Float64,(Base.mul_float)(1.5,r::Float64))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7093#7160::Float64
  ####bfactor#7094#7161::Float64
  ########a#7083#7087#7095#7162::Tuple{}
  ########b#7084#7088#7096#7163::Tuple{}
  ########afactor#7085#7089#7097#7164::Float64
  ########bfactor#7086#7090#7098#7165::Float64
  ######_var0#7091#7099#7166::Tuple{}
  ######types#7092#7100#7167::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7168::Tuple{}
  ########x#7070#7133#7137#7169::Float64
  ######_var0#7134#7138#7170::Tuple{}
  ########types#7131#7135#7139#7171::Tuple{Type{Float64}}
  ##a#7172::Float64
  ##exp_a#7173::Float64
  ##deriv#7174::Float64
  ####G#7078#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7177::Tuple{}
  ##########x#7070#7072#7076#7081#7178::Float64
  ########_var0#7073#7077#7082#7179::Tuple{}
  ########tup#7069#7132#7136#7180::Tuple{}
  ########x#7070#7133#7137#7181::Float64
  ######_var0#7134#7138#7182::Tuple{}
  ########types#7131#7135#7139#7183::Tuple{Type{Float64}}
  ########types#7131#7140#7141#7184::Tuple{Type{Float64}}
  ##sqrt_a#7185::Float64
  ##deriv#7186::Float64
  ####G#7142#7187::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7188::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7189::Tuple{}
  ##########x#7070#7072#7076#7145#7190::Float64
  ########_var0#7073#7077#7146#7191::Tuple{}
  ######a#7147#7149#7192::Tuple{}
  ######b#7148#7150#7193::Tuple{}
  ####_var0#7151#7194::Tuple{}
  ##a1#7195::Float64
  ##a2#7196::Float64
  ######a#7083#7152#7197::Tuple{}
  ######b#7084#7153#7198::Tuple{}
  ######afactor#7085#7154#7199::Float64
  ######bfactor#7086#7155#7200::Float64
  ####_var0#7156#7201::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(10) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7157 = GenSym(3)
      ##a2#7158 = GenSym(4)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7093#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7094#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7166 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7091#7099#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      ##a#7172 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7173 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7174 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7179 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7173::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7182 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7134#7138#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,2.25))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7185 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7186 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7185::Float64))
      ####G#7142#7187 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7191 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7146#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7170 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7134#7138#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7151#7194 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7151#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(8) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7195 = GenSym(8)
      ##a2#7196 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7201 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7156#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7195::Float64,##a2#7196::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7093#7160::Float64
  ####bfactor#7094#7161::Float64
  ########a#7083#7087#7095#7162::Tuple{}
  ########b#7084#7088#7096#7163::Tuple{}
  ########afactor#7085#7089#7097#7164::Float64
  ########bfactor#7086#7090#7098#7165::Float64
  ######_var0#7091#7099#7166::Tuple{}
  ######types#7092#7100#7167::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7168::Tuple{}
  ########x#7070#7133#7137#7169::Float64
  ######_var0#7134#7138#7170::Tuple{}
  ########types#7131#7135#7139#7171::Tuple{Type{Float64}}
  ##a#7172::Float64
  ##exp_a#7173::Float64
  ##deriv#7174::Float64
  ####G#7078#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7177::Tuple{}
  ##########x#7070#7072#7076#7081#7178::Float64
  ########_var0#7073#7077#7082#7179::Tuple{}
  ########tup#7069#7132#7136#7180::Tuple{}
  ########x#7070#7133#7137#7181::Float64
  ######_var0#7134#7138#7182::Tuple{}
  ########types#7131#7135#7139#7183::Tuple{Type{Float64}}
  ########types#7131#7140#7141#7184::Tuple{Type{Float64}}
  ##sqrt_a#7185::Float64
  ##deriv#7186::Float64
  ####G#7142#7187::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7188::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7189::Tuple{}
  ##########x#7070#7072#7076#7145#7190::Float64
  ########_var0#7073#7077#7146#7191::Tuple{}
  ######a#7147#7149#7192::Tuple{}
  ######b#7148#7150#7193::Tuple{}
  ####_var0#7151#7194::Tuple{}
  ##a1#7195::Float64
  ##a2#7196::Float64
  ######a#7083#7152#7197::Tuple{}
  ######b#7084#7153#7198::Tuple{}
  ######afactor#7085#7154#7199::Float64
  ######bfactor#7086#7155#7200::Float64
  ####_var0#7156#7201::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(10) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7157 = GenSym(3)
      ##a2#7158 = GenSym(4)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7093#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7094#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7166 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7091#7099#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      ##a#7172 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7173 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7174 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7179 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7173::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7182 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7134#7138#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,2.25))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7185 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7186 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7185::Float64))
      ####G#7142#7187 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7191 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7146#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7170 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7134#7138#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7151#7194 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7151#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(8) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7195 = GenSym(8)
      ##a2#7196 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7201 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7156#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7195::Float64,##a2#7196::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7093#7160::Float64
  ####bfactor#7094#7161::Float64
  ########a#7083#7087#7095#7162::Tuple{}
  ########b#7084#7088#7096#7163::Tuple{}
  ########afactor#7085#7089#7097#7164::Float64
  ########bfactor#7086#7090#7098#7165::Float64
  ######_var0#7091#7099#7166::Tuple{}
  ######types#7092#7100#7167::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7168::Tuple{}
  ########x#7070#7133#7137#7169::Float64
  ######_var0#7134#7138#7170::Tuple{}
  ########types#7131#7135#7139#7171::Tuple{Type{Float64}}
  ##a#7172::Float64
  ##exp_a#7173::Float64
  ##deriv#7174::Float64
  ####G#7078#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7177::Tuple{}
  ##########x#7070#7072#7076#7081#7178::Float64
  ########_var0#7073#7077#7082#7179::Tuple{}
  ########tup#7069#7132#7136#7180::Tuple{}
  ########x#7070#7133#7137#7181::Float64
  ######_var0#7134#7138#7182::Tuple{}
  ########types#7131#7135#7139#7183::Tuple{Type{Float64}}
  ########types#7131#7140#7141#7184::Tuple{Type{Float64}}
  ##sqrt_a#7185::Float64
  ##deriv#7186::Float64
  ####G#7142#7187::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7188::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7189::Tuple{}
  ##########x#7070#7072#7076#7145#7190::Float64
  ########_var0#7073#7077#7146#7191::Tuple{}
  ######a#7147#7149#7192::Tuple{}
  ######b#7148#7150#7193::Tuple{}
  ####_var0#7151#7194::Tuple{}
  ##a1#7195::Float64
  ##a2#7196::Float64
  ######a#7083#7152#7197::Tuple{}
  ######b#7084#7153#7198::Tuple{}
  ######afactor#7085#7154#7199::Float64
  ######bfactor#7086#7155#7200::Float64
  ####_var0#7156#7201::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(10) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7157 = GenSym(3)
      ##a2#7158 = GenSym(4)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7093#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7094#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7166 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7091#7099#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      ##a#7172 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7173 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7174 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7179 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7173::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7182 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7134#7138#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,2.25))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7185 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7186 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7185::Float64))
      ####G#7142#7187 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7191 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7146#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7170 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7134#7138#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7151#7194 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7151#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(8) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7195 = GenSym(8)
      ##a2#7196 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7201 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7156#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7195::Float64,##a2#7196::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ##div_a#7159::Float64
  ####afactor#7093#7160::Float64
  ####bfactor#7094#7161::Float64
  ########a#7083#7087#7095#7162::Tuple{}
  ########b#7084#7088#7096#7163::Tuple{}
  ########afactor#7085#7089#7097#7164::Float64
  ########bfactor#7086#7090#7098#7165::Float64
  ######_var0#7091#7099#7166::Tuple{}
  ######types#7092#7100#7167::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7168::Tuple{}
  ########x#7070#7133#7137#7169::Float64
  ######_var0#7134#7138#7170::Tuple{}
  ########types#7131#7135#7139#7171::Tuple{Type{Float64}}
  ##a#7172::Float64
  ##exp_a#7173::Float64
  ##deriv#7174::Float64
  ####G#7078#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7177::Tuple{}
  ##########x#7070#7072#7076#7081#7178::Float64
  ########_var0#7073#7077#7082#7179::Tuple{}
  ########tup#7069#7132#7136#7180::Tuple{}
  ########x#7070#7133#7137#7181::Float64
  ######_var0#7134#7138#7182::Tuple{}
  ########types#7131#7135#7139#7183::Tuple{Type{Float64}}
  ########types#7131#7140#7141#7184::Tuple{Type{Float64}}
  ##sqrt_a#7185::Float64
  ##deriv#7186::Float64
  ####G#7142#7187::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7188::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7189::Tuple{}
  ##########x#7070#7072#7076#7145#7190::Float64
  ########_var0#7073#7077#7146#7191::Tuple{}
  ######a#7147#7149#7192::Tuple{}
  ######b#7148#7150#7193::Tuple{}
  ####_var0#7151#7194::Tuple{}
  ##a1#7195::Float64
  ##a2#7196::Float64
  ######a#7083#7152#7197::Tuple{}
  ######b#7084#7153#7198::Tuple{}
  ######afactor#7085#7154#7199::Float64
  ######bfactor#7086#7155#7200::Float64
  ####_var0#7156#7201::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 68:
      GenSym(10) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 69:
      GenSym(3) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7157 = GenSym(3)
      ##a2#7158 = GenSym(4)
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7157::Float64,##a2#7158::Float64))
      ####afactor#7093#7160 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7158::Float64))
      ####bfactor#7094#7161 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7157::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7158::Float64,##a2#7158::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7166 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7091#7099#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      r = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 70:
      ##a#7172 = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7173 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7174 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7172::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7179 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7082#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7173::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7182 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7134#7138#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,2.25))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7185 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7186 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7185::Float64))
      ####G#7142#7187 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7191 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7146#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7170 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7134#7138#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7151#7194 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7151#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(8) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7195 = GenSym(8)
      ##a2#7196 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7201 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7156#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7195::Float64,##a2#7196::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{Float64},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{Float64},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{Float64},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{Float64},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{Float64})::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile_newton)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},0.5,(Distributions.mode)(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      return (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      return (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7482::Float64
  ##a2#7483::Float64
  ##div_a#7484::Float64
  ####afactor#7093#7485::Float64
  ####bfactor#7094#7486::Float64
  ########a#7083#7087#7095#7487::Tuple{}
  ########b#7084#7088#7096#7488::Tuple{}
  ########afactor#7085#7089#7097#7489::Float64
  ########bfactor#7086#7090#7098#7490::Float64
  ######_var0#7091#7099#7491::Tuple{}
  ######types#7092#7100#7492::Tuple{Type{Float64}}
  ##sqrt_a#7493::Float64
  ##deriv#7494::Float64
  ####G#7142#7495::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7496::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7497::Tuple{}
  ##########x#7070#7072#7076#7145#7498::Float64
  ########_var0#7073#7077#7146#7499::Tuple{}
  ########tup#7069#7132#7136#7500::Tuple{}
  ########x#7070#7133#7137#7501::Float64
  ######_var0#7134#7138#7502::Tuple{}
  ########types#7131#7135#7139#7503::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7482 = GenSym(0)
      ##a2#7483 = GenSym(1)
      ##div_a#7484 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7482::Float64,##a2#7483::Float64))
      ####afactor#7093#7485 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7483::Float64))
      ####bfactor#7094#7486 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7482::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7483::Float64,##a2#7483::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7491 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7091#7099#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7484::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7493 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7494 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7493::Float64))
      ####G#7142#7495 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7499 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7146#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7493::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7502 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7134#7138#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      return (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      return (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64,(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7482::Float64
  ##a2#7483::Float64
  ##div_a#7484::Float64
  ####afactor#7093#7485::Float64
  ####bfactor#7094#7486::Float64
  ########a#7083#7087#7095#7487::Tuple{}
  ########b#7084#7088#7096#7488::Tuple{}
  ########afactor#7085#7089#7097#7489::Float64
  ########bfactor#7086#7090#7098#7490::Float64
  ######_var0#7091#7099#7491::Tuple{}
  ######types#7092#7100#7492::Tuple{Type{Float64}}
  ##sqrt_a#7493::Float64
  ##deriv#7494::Float64
  ####G#7142#7495::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7496::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7497::Tuple{}
  ##########x#7070#7072#7076#7145#7498::Float64
  ########_var0#7073#7077#7146#7499::Tuple{}
  ########tup#7069#7132#7136#7500::Tuple{}
  ########x#7070#7133#7137#7501::Float64
  ######_var0#7134#7138#7502::Tuple{}
  ########types#7131#7135#7139#7503::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7482 = GenSym(0)
      ##a2#7483 = GenSym(1)
      ##div_a#7484 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7482::Float64,##a2#7483::Float64))
      ####afactor#7093#7485 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7483::Float64))
      ####bfactor#7094#7486 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7482::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7483::Float64,##a2#7483::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7491 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7091#7099#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7484::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7493 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7494 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7493::Float64))
      ####G#7142#7495 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7499 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7146#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7493::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7502 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7134#7138#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7482::Float64
  ##a2#7483::Float64
  ##div_a#7484::Float64
  ####afactor#7093#7485::Float64
  ####bfactor#7094#7486::Float64
  ########a#7083#7087#7095#7487::Tuple{}
  ########b#7084#7088#7096#7488::Tuple{}
  ########afactor#7085#7089#7097#7489::Float64
  ########bfactor#7086#7090#7098#7490::Float64
  ######_var0#7091#7099#7491::Tuple{}
  ######types#7092#7100#7492::Tuple{Type{Float64}}
  ##sqrt_a#7493::Float64
  ##deriv#7494::Float64
  ####G#7142#7495::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7496::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7497::Tuple{}
  ##########x#7070#7072#7076#7145#7498::Float64
  ########_var0#7073#7077#7146#7499::Tuple{}
  ########tup#7069#7132#7136#7500::Tuple{}
  ########x#7070#7133#7137#7501::Float64
  ######_var0#7134#7138#7502::Tuple{}
  ########types#7131#7135#7139#7503::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7482 = GenSym(0)
      ##a2#7483 = GenSym(1)
      ##div_a#7484 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7482::Float64,##a2#7483::Float64))
      ####afactor#7093#7485 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7483::Float64))
      ####bfactor#7094#7486 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7482::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7483::Float64,##a2#7483::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7491 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7091#7099#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7484::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7493 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7494 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7493::Float64))
      ####G#7142#7495 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7499 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7146#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7493::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7502 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7134#7138#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7482::Float64
  ##a2#7483::Float64
  ##div_a#7484::Float64
  ####afactor#7093#7485::Float64
  ####bfactor#7094#7486::Float64
  ########a#7083#7087#7095#7487::Tuple{}
  ########b#7084#7088#7096#7488::Tuple{}
  ########afactor#7085#7089#7097#7489::Float64
  ########bfactor#7086#7090#7098#7490::Float64
  ######_var0#7091#7099#7491::Tuple{}
  ######types#7092#7100#7492::Tuple{Type{Float64}}
  ##sqrt_a#7493::Float64
  ##deriv#7494::Float64
  ####G#7142#7495::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7496::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7497::Tuple{}
  ##########x#7070#7072#7076#7145#7498::Float64
  ########_var0#7073#7077#7146#7499::Tuple{}
  ########tup#7069#7132#7136#7500::Tuple{}
  ########x#7070#7133#7137#7501::Float64
  ######_var0#7134#7138#7502::Tuple{}
  ########types#7131#7135#7139#7503::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7482 = GenSym(0)
      ##a2#7483 = GenSym(1)
      ##div_a#7484 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7482::Float64,##a2#7483::Float64))
      ####afactor#7093#7485 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7483::Float64))
      ####bfactor#7094#7486 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7482::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7483::Float64,##a2#7483::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7491 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7091#7099#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7484::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7493 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7494 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7493::Float64))
      ####G#7142#7495 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7499 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7146#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7493::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7502 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7134#7138#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7482::Float64
  ##a2#7483::Float64
  ##div_a#7484::Float64
  ####afactor#7093#7485::Float64
  ####bfactor#7094#7486::Float64
  ########a#7083#7087#7095#7487::Tuple{}
  ########b#7084#7088#7096#7488::Tuple{}
  ########afactor#7085#7089#7097#7489::Float64
  ########bfactor#7086#7090#7098#7490::Float64
  ######_var0#7091#7099#7491::Tuple{}
  ######types#7092#7100#7492::Tuple{Type{Float64}}
  ##sqrt_a#7493::Float64
  ##deriv#7494::Float64
  ####G#7142#7495::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7496::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7497::Tuple{}
  ##########x#7070#7072#7076#7145#7498::Float64
  ########_var0#7073#7077#7146#7499::Tuple{}
  ########tup#7069#7132#7136#7500::Tuple{}
  ########x#7070#7133#7137#7501::Float64
  ######_var0#7134#7138#7502::Tuple{}
  ########types#7131#7135#7139#7503::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 63:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7482 = GenSym(0)
      ##a2#7483 = GenSym(1)
      ##div_a#7484 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7482::Float64,##a2#7483::Float64))
      ####afactor#7093#7485 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7483::Float64))
      ####bfactor#7094#7486 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7482::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7483::Float64,##a2#7483::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7491 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7091#7099#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7484::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7493 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7494 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7493::Float64))
      ####G#7142#7495 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7499 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7073#7077#7146#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7493::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7502 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7134#7138#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,(top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,(top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7132#7136#7504::Tuple{}
  ########x#7070#7133#7137#7505::Float64
  ######_var0#7134#7138#7506::Tuple{}
  ########types#7131#7135#7139#7507::Tuple{Type{Float64}}
  ##a1#7508::Float64
  ##a2#7509::Float64
  ##div_a#7510::Float64
  ####afactor#7093#7511::Float64
  ####bfactor#7094#7512::Float64
  ########a#7083#7087#7095#7513::Tuple{}
  ########b#7084#7088#7096#7514::Tuple{}
  ########afactor#7085#7089#7097#7515::Float64
  ########bfactor#7086#7090#7098#7516::Float64
  ######_var0#7091#7099#7517::Tuple{}
  ######types#7092#7100#7518::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7506 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7134#7138#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7508 = GenSym(0)
      ##a2#7509 = GenSym(1)
      ##div_a#7510 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7508::Float64,##a2#7509::Float64))
      ####afactor#7093#7511 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7509::Float64))
      ####bfactor#7094#7512 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7508::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7509::Float64,##a2#7509::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7517 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7517 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,(top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,(top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7132#7136#7504::Tuple{}
  ########x#7070#7133#7137#7505::Float64
  ######_var0#7134#7138#7506::Tuple{}
  ########types#7131#7135#7139#7507::Tuple{Type{Float64}}
  ##a1#7508::Float64
  ##a2#7509::Float64
  ##div_a#7510::Float64
  ####afactor#7093#7511::Float64
  ####bfactor#7094#7512::Float64
  ########a#7083#7087#7095#7513::Tuple{}
  ########b#7084#7088#7096#7514::Tuple{}
  ########afactor#7085#7089#7097#7515::Float64
  ########bfactor#7086#7090#7098#7516::Float64
  ######_var0#7091#7099#7517::Tuple{}
  ######types#7092#7100#7518::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7506 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7134#7138#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7508 = GenSym(0)
      ##a2#7509 = GenSym(1)
      ##div_a#7510 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7508::Float64,##a2#7509::Float64))
      ####afactor#7093#7511 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7509::Float64))
      ####bfactor#7094#7512 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7508::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7509::Float64,##a2#7509::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7517 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7517 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7132#7136#7504::Tuple{}
  ########x#7070#7133#7137#7505::Float64
  ######_var0#7134#7138#7506::Tuple{}
  ########types#7131#7135#7139#7507::Tuple{Type{Float64}}
  ##a1#7508::Float64
  ##a2#7509::Float64
  ##div_a#7510::Float64
  ####afactor#7093#7511::Float64
  ####bfactor#7094#7512::Float64
  ########a#7083#7087#7095#7513::Tuple{}
  ########b#7084#7088#7096#7514::Tuple{}
  ########afactor#7085#7089#7097#7515::Float64
  ########bfactor#7086#7090#7098#7516::Float64
  ######_var0#7091#7099#7517::Tuple{}
  ######types#7092#7100#7518::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7506 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7134#7138#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7508 = GenSym(0)
      ##a2#7509 = GenSym(1)
      ##div_a#7510 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7508::Float64,##a2#7509::Float64))
      ####afactor#7093#7511 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7509::Float64))
      ####bfactor#7094#7512 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7508::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7509::Float64,##a2#7509::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7517 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7517 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7132#7136#7504::Tuple{}
  ########x#7070#7133#7137#7505::Float64
  ######_var0#7134#7138#7506::Tuple{}
  ########types#7131#7135#7139#7507::Tuple{Type{Float64}}
  ##a1#7508::Float64
  ##a2#7509::Float64
  ##div_a#7510::Float64
  ####afactor#7093#7511::Float64
  ####bfactor#7094#7512::Float64
  ########a#7083#7087#7095#7513::Tuple{}
  ########b#7084#7088#7096#7514::Tuple{}
  ########afactor#7085#7089#7097#7515::Float64
  ########bfactor#7086#7090#7098#7516::Float64
  ######_var0#7091#7099#7517::Tuple{}
  ######types#7092#7100#7518::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7506 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7134#7138#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7508 = GenSym(0)
      ##a2#7509 = GenSym(1)
      ##div_a#7510 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7508::Float64,##a2#7509::Float64))
      ####afactor#7093#7511 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7509::Float64))
      ####bfactor#7094#7512 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7508::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7509::Float64,##a2#7509::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7517 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7517 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7132#7136#7504::Tuple{}
  ########x#7070#7133#7137#7505::Float64
  ######_var0#7134#7138#7506::Tuple{}
  ########types#7131#7135#7139#7507::Tuple{Type{Float64}}
  ##a1#7508::Float64
  ##a2#7509::Float64
  ##div_a#7510::Float64
  ####afactor#7093#7511::Float64
  ####bfactor#7094#7512::Float64
  ########a#7083#7087#7095#7513::Tuple{}
  ########b#7084#7088#7096#7514::Tuple{}
  ########afactor#7085#7089#7097#7515::Float64
  ########bfactor#7086#7090#7098#7516::Float64
  ######_var0#7091#7099#7517::Tuple{}
  ######types#7092#7100#7518::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 65:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7506 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7134#7138#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7508 = GenSym(0)
      ##a2#7509 = GenSym(1)
      ##div_a#7510 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7508::Float64,##a2#7509::Float64))
      ####afactor#7093#7511 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7509::Float64))
      ####bfactor#7094#7512 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7508::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7509::Float64,##a2#7509::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7517 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7091#7099#7517 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  z::Float64
  v::Float64
  w::Float64
  x1::Float64
  p1::Float64
  u::Float64
  ####r#7529#7537::UInt64
  ####rabs#7530#7538::Int64
  ####idx#7531#7539::Int64
  ####x#7532#7540::Float64
  ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7542::Float64
  ##_var0#7543::Float64
  ####_var0#7535#7544::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7545::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(7) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7541 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7541 = false
      7: 
      ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7542 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7537 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7542::Float64),0x000fffffffffffff))
      ####rabs#7530#7538 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7537::UInt64,1))))
      ####idx#7531#7539 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7538::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7540 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7537::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7538::Int64)),####rabs#7530#7538::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7538::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7538::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7543 = ####x#7532#7540::Float64
      goto 10
      9: 
      ##_var0#7543 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7539::Int64,####rabs#7530#7538::Int64,####x#7532#7540::Float64)::Float64
      goto 10
      ##_var0#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7543::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      w = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,v::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      x1 = (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,λ::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(w::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,λ::Float64)),w::Float64))))))::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      p1 = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,x1::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 25
      ####_var0#7535#7544 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 26
      25: 
      ####_var0#7535#7544 = false
      26: 
      ####_var0#7535#7544::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(6) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(5) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7545 = (Base.arrayref)(GenSym(6),GenSym(5))::Float64
      goto 27
      ########_var0#7523#7524#7536#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7545::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)(p1::Float64,u::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)),x1::Float64))
      0: 
      return x1::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  z::Float64
  v::Float64
  w::Float64
  x1::Float64
  p1::Float64
  u::Float64
  ####r#7529#7537::UInt64
  ####rabs#7530#7538::Int64
  ####idx#7531#7539::Int64
  ####x#7532#7540::Float64
  ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7542::Float64
  ##_var0#7543::Float64
  ####_var0#7535#7544::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7545::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(7) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7541 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7541 = false
      7: 
      ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7542 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7537 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7542::Float64),0x000fffffffffffff))
      ####rabs#7530#7538 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7537::UInt64,1))))
      ####idx#7531#7539 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7538::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7540 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7537::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7538::Int64)),####rabs#7530#7538::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7538::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7538::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7543 = ####x#7532#7540::Float64
      goto 10
      9: 
      ##_var0#7543 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7539::Int64,####rabs#7530#7538::Int64,####x#7532#7540::Float64)::Float64
      goto 10
      ##_var0#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7543::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      w = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,v::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      x1 = (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,λ::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(w::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,λ::Float64)),w::Float64))))))::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      p1 = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,x1::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 25
      ####_var0#7535#7544 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 26
      25: 
      ####_var0#7535#7544 = false
      26: 
      ####_var0#7535#7544::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(6) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(5) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7545 = (Base.arrayref)(GenSym(6),GenSym(5))::Float64
      goto 27
      ########_var0#7523#7524#7536#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7545::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)(p1::Float64,u::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)),x1::Float64))
      0: 
      return x1::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::Float64
  v::Float64
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ####r#7529#7548::UInt64
  ####rabs#7530#7549::Int64
  ####idx#7531#7550::Int64
  ####x#7532#7551::Float64
  ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7553::Float64
  ##_var0#7554::Float64
  ######tup#7069#7132#7555::Tuple{}
  ######x#7070#7133#7556::Float64
  ####_var0#7134#7557::Tuple{}
  ######types#7131#7135#7558::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7559::Tuple{}
  ########x#7070#7133#7137#7560::Float64
  ######_var0#7134#7138#7561::Tuple{}
  ########types#7131#7135#7139#7562::Tuple{Type{Float64}}
  ######a#7248#7250#7563::Tuple{}
  ######b#7249#7251#7564::Tuple{}
  ####_var0#7252#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ######a#7083#7152#7568::Tuple{}
  ######b#7084#7153#7569::Tuple{}
  ######afactor#7085#7154#7570::Float64
  ######bfactor#7086#7155#7571::Float64
  ####_var0#7156#7572::Tuple{}
  ##sqrt_a#7573::Float64
  ##deriv#7574::Float64
  ####G#7142#7575::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7576::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7577::Tuple{}
  ##########x#7070#7072#7076#7145#7578::Float64
  ########_var0#7073#7077#7146#7579::Tuple{}
  ######a#7147#7149#7580::Tuple{}
  ######b#7148#7150#7581::Tuple{}
  ####_var0#7151#7582::Tuple{}
  ########tup#7069#7132#7136#7583::Tuple{}
  ########x#7070#7133#7137#7584::Float64
  ######_var0#7134#7138#7585::Tuple{}
  ########types#7131#7135#7139#7586::Tuple{Type{Float64}}
  ##a1#7587::Float64
  ##a2#7588::Float64
  ##div_a#7589::Float64
  ####afactor#7093#7590::Float64
  ####bfactor#7094#7591::Float64
  ########a#7083#7087#7095#7592::Tuple{}
  ########b#7084#7088#7096#7593::Tuple{}
  ########afactor#7085#7089#7097#7594::Float64
  ########bfactor#7086#7090#7098#7595::Float64
  ######_var0#7091#7099#7596::Tuple{}
  ######types#7092#7100#7597::Tuple{Type{Float64}}
  ##a1#7598::Float64
  ##a2#7599::Float64
  ######a#7083#7152#7600::Tuple{}
  ######b#7084#7153#7601::Tuple{}
  ######afactor#7085#7154#7602::Float64
  ######bfactor#7086#7155#7603::Float64
  ####_var0#7156#7604::Tuple{}
  ######a#7248#7250#7605::Tuple{}
  ######b#7249#7251#7606::Tuple{}
  ####_var0#7252#7607::Tuple{}
  ######a#7248#7250#7608::Tuple{}
  ######b#7249#7251#7609::Tuple{}
  ####_var0#7252#7610::Tuple{}
  ##a1#7611::Float64
  ##a2#7612::Float64
  ##div_a#7613::Float64
  ####afactor#7093#7614::Float64
  ####bfactor#7094#7615::Float64
  ########a#7083#7087#7095#7616::Tuple{}
  ########b#7084#7088#7096#7617::Tuple{}
  ########afactor#7085#7089#7097#7618::Float64
  ########bfactor#7086#7090#7098#7619::Float64
  ######_var0#7091#7099#7620::Tuple{}
  ######types#7092#7100#7621::Tuple{Type{Float64}}
  ####_var0#7535#7622::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7623::Float64
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7078#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7629::Tuple{}
  ##########x#7070#7072#7076#7081#7630::Float64
  ########_var0#7073#7077#7082#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ##div_a#7634::Float64
  ####afactor#7093#7635::Float64
  ####bfactor#7094#7636::Float64
  ########a#7083#7087#7095#7637::Tuple{}
  ########b#7084#7088#7096#7638::Tuple{}
  ########afactor#7085#7089#7097#7639::Float64
  ########bfactor#7086#7090#7098#7640::Float64
  ######_var0#7091#7099#7641::Tuple{}
  ######types#7092#7100#7642::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(22) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(24) = GenSym(22)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(24)
      #s25 = GenSym(25)
      GenSym(26) = GenSym(23)
      GenSym(27) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(26)
      #s25 = GenSym(27) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7552 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7552 = false
      7: 
      ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7553 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7548 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7553::Float64),0x000fffffffffffff))
      ####rabs#7530#7549 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7548::UInt64,1))))
      ####idx#7531#7550 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7549::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7551 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7548::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7549::Int64)),####rabs#7530#7549::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7549::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7549::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7554 = ####x#7532#7551::Float64
      goto 10
      9: 
      ##_var0#7554 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7550::Int64,####rabs#7530#7549::Int64,####x#7532#7551::Float64)::Float64
      goto 10
      ##_var0#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7554::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      $(Expr(:boundscheck, false))
      ####_var0#7134#7557 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7134#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,v::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7585 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7134#7138#7585 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(9) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7587 = GenSym(9)
      ##a2#7588 = GenSym(10)
      ##div_a#7589 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7587::Float64,##a2#7588::Float64))
      ####afactor#7093#7590 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7588::Float64))
      ####bfactor#7094#7591 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7587::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7588::Float64,##a2#7588::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7596 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7091#7099#7596 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7589::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7561 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7134#7138#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7565 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7252#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(5) = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7566 = GenSym(5)
      ##a2#7567 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7572 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7566::Float64,##a2#7567::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7573 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(7),:value)::Float64)::ANY)::Float64
      ##deriv#7574 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7573::Float64))
      ####G#7142#7575 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7579 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7073#7077#7146#7579 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7573::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7151#7582 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7151#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(12) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7598 = GenSym(12)
      ##a2#7599 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7604 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7156#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7598::Float64,##a2#7599::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7607 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7252#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      x1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      $(Expr(:boundscheck, false))
      ####_var0#7252#7610 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7252#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(15) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(16) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7611 = GenSym(15)
      ##a2#7612 = GenSym(16)
      ##div_a#7613 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7611::Float64,##a2#7612::Float64))
      ####afactor#7093#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7612::Float64))
      ####bfactor#7094#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7611::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7612::Float64,##a2#7612::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7620 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7091#7099#7620 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      p1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 37
      ####_var0#7535#7622 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 38
      37: 
      ####_var0#7535#7622 = false
      38: 
      ####_var0#7535#7622::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(18) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(17) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7623 = (Base.arrayref)(GenSym(18),GenSym(17))::Float64
      goto 39
      ########_var0#7523#7524#7536#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7623::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)((top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64)::Bool goto 0
      ##a#7624 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7631 = (top(tuple))()::Tuple{}
      goto 42
      ########_var0#7073#7077#7082#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(20) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(21) = (top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7632 = GenSym(20)
      ##a2#7633 = GenSym(21)
      ##div_a#7634 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7632::Float64,##a2#7633::Float64))
      ####afactor#7093#7635 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7633::Float64))
      ####bfactor#7094#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7632::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7633::Float64,##a2#7633::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7641 = (top(tuple))()::Tuple{}
      goto 44
      ######_var0#7091#7099#7641 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7634::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  z::Float64
  v::Float64
  w::Float64
  x1::Float64
  p1::Float64
  u::Float64
  ####r#7529#7537::UInt64
  ####rabs#7530#7538::Int64
  ####idx#7531#7539::Int64
  ####x#7532#7540::Float64
  ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7542::Float64
  ##_var0#7543::Float64
  ####_var0#7535#7544::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7545::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(7) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7541 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7541 = false
      7: 
      ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7542 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7537 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7542::Float64),0x000fffffffffffff))
      ####rabs#7530#7538 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7537::UInt64,1))))
      ####idx#7531#7539 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7538::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7540 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7537::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7538::Int64)),####rabs#7530#7538::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7538::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7538::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7543 = ####x#7532#7540::Float64
      goto 10
      9: 
      ##_var0#7543 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7539::Int64,####rabs#7530#7538::Int64,####x#7532#7540::Float64)::Float64
      goto 10
      ##_var0#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7543::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      w = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,v::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      x1 = (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,λ::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(w::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,λ::Float64)),w::Float64))))))::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      p1 = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,x1::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 25
      ####_var0#7535#7544 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 26
      25: 
      ####_var0#7535#7544 = false
      26: 
      ####_var0#7535#7544::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(6) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(5) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7545 = (Base.arrayref)(GenSym(6),GenSym(5))::Float64
      goto 27
      ########_var0#7523#7524#7536#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7545::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)(p1::Float64,u::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)),x1::Float64))
      0: 
      return x1::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  μ::Float64
  λ::Float64
  #s25::Int64
  z::Float64
  v::Float64
  w::Float64
  x1::Float64
  p1::Float64
  u::Float64
  ####r#7529#7537::UInt64
  ####rabs#7530#7538::Int64
  ####idx#7531#7539::Int64
  ####x#7532#7540::Float64
  ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7542::Float64
  ##_var0#7543::Float64
  ####_var0#7535#7544::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7545::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(7) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7541 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7541 = false
      7: 
      ########_var0#7521#7527#7533#7541::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7542 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7542 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7537 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7542::Float64),0x000fffffffffffff))
      ####rabs#7530#7538 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7537::UInt64,1))))
      ####idx#7531#7539 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7538::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7540 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7537::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7538::Int64)),####rabs#7530#7538::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7538::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7538::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7539::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7543 = ####x#7532#7540::Float64
      goto 10
      9: 
      ##_var0#7543 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7539::Int64,####rabs#7530#7538::Int64,####x#7532#7540::Float64)::Float64
      goto 10
      ##_var0#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7543::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      w = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,v::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      x1 = (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,λ::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(w::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,λ::Float64)),w::Float64))))))::Float64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      p1 = (Base.box)(Base.Float64,(Base.div_float)(μ::Float64,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,x1::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 25
      ####_var0#7535#7544 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 26
      25: 
      ####_var0#7535#7544 = false
      26: 
      ####_var0#7535#7544::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(6) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(5) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7545 = (Base.arrayref)(GenSym(6),GenSym(5))::Float64
      goto 27
      ########_var0#7523#7524#7536#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7545::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)(p1::Float64,u::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)),x1::Float64))
      0: 
      return x1::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::Float64
  v::Float64
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ####r#7529#7548::UInt64
  ####rabs#7530#7549::Int64
  ####idx#7531#7550::Int64
  ####x#7532#7551::Float64
  ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7553::Float64
  ##_var0#7554::Float64
  ######tup#7069#7132#7555::Tuple{}
  ######x#7070#7133#7556::Float64
  ####_var0#7134#7557::Tuple{}
  ######types#7131#7135#7558::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7559::Tuple{}
  ########x#7070#7133#7137#7560::Float64
  ######_var0#7134#7138#7561::Tuple{}
  ########types#7131#7135#7139#7562::Tuple{Type{Float64}}
  ######a#7248#7250#7563::Tuple{}
  ######b#7249#7251#7564::Tuple{}
  ####_var0#7252#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ######a#7083#7152#7568::Tuple{}
  ######b#7084#7153#7569::Tuple{}
  ######afactor#7085#7154#7570::Float64
  ######bfactor#7086#7155#7571::Float64
  ####_var0#7156#7572::Tuple{}
  ##sqrt_a#7573::Float64
  ##deriv#7574::Float64
  ####G#7142#7575::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7576::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7577::Tuple{}
  ##########x#7070#7072#7076#7145#7578::Float64
  ########_var0#7073#7077#7146#7579::Tuple{}
  ######a#7147#7149#7580::Tuple{}
  ######b#7148#7150#7581::Tuple{}
  ####_var0#7151#7582::Tuple{}
  ########tup#7069#7132#7136#7583::Tuple{}
  ########x#7070#7133#7137#7584::Float64
  ######_var0#7134#7138#7585::Tuple{}
  ########types#7131#7135#7139#7586::Tuple{Type{Float64}}
  ##a1#7587::Float64
  ##a2#7588::Float64
  ##div_a#7589::Float64
  ####afactor#7093#7590::Float64
  ####bfactor#7094#7591::Float64
  ########a#7083#7087#7095#7592::Tuple{}
  ########b#7084#7088#7096#7593::Tuple{}
  ########afactor#7085#7089#7097#7594::Float64
  ########bfactor#7086#7090#7098#7595::Float64
  ######_var0#7091#7099#7596::Tuple{}
  ######types#7092#7100#7597::Tuple{Type{Float64}}
  ##a1#7598::Float64
  ##a2#7599::Float64
  ######a#7083#7152#7600::Tuple{}
  ######b#7084#7153#7601::Tuple{}
  ######afactor#7085#7154#7602::Float64
  ######bfactor#7086#7155#7603::Float64
  ####_var0#7156#7604::Tuple{}
  ######a#7248#7250#7605::Tuple{}
  ######b#7249#7251#7606::Tuple{}
  ####_var0#7252#7607::Tuple{}
  ######a#7248#7250#7608::Tuple{}
  ######b#7249#7251#7609::Tuple{}
  ####_var0#7252#7610::Tuple{}
  ##a1#7611::Float64
  ##a2#7612::Float64
  ##div_a#7613::Float64
  ####afactor#7093#7614::Float64
  ####bfactor#7094#7615::Float64
  ########a#7083#7087#7095#7616::Tuple{}
  ########b#7084#7088#7096#7617::Tuple{}
  ########afactor#7085#7089#7097#7618::Float64
  ########bfactor#7086#7090#7098#7619::Float64
  ######_var0#7091#7099#7620::Tuple{}
  ######types#7092#7100#7621::Tuple{Type{Float64}}
  ####_var0#7535#7622::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7623::Float64
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7078#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7629::Tuple{}
  ##########x#7070#7072#7076#7081#7630::Float64
  ########_var0#7073#7077#7082#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ##div_a#7634::Float64
  ####afactor#7093#7635::Float64
  ####bfactor#7094#7636::Float64
  ########a#7083#7087#7095#7637::Tuple{}
  ########b#7084#7088#7096#7638::Tuple{}
  ########afactor#7085#7089#7097#7639::Float64
  ########bfactor#7086#7090#7098#7640::Float64
  ######_var0#7091#7099#7641::Tuple{}
  ######types#7092#7100#7642::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(22) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(24) = GenSym(22)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(24)
      #s25 = GenSym(25)
      GenSym(26) = GenSym(23)
      GenSym(27) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(26)
      #s25 = GenSym(27) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7552 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7552 = false
      7: 
      ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7553 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7548 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7553::Float64),0x000fffffffffffff))
      ####rabs#7530#7549 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7548::UInt64,1))))
      ####idx#7531#7550 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7549::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7551 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7548::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7549::Int64)),####rabs#7530#7549::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7549::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7549::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7554 = ####x#7532#7551::Float64
      goto 10
      9: 
      ##_var0#7554 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7550::Int64,####rabs#7530#7549::Int64,####x#7532#7551::Float64)::Float64
      goto 10
      ##_var0#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7554::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      $(Expr(:boundscheck, false))
      ####_var0#7134#7557 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7134#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,v::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7585 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7134#7138#7585 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(9) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7587 = GenSym(9)
      ##a2#7588 = GenSym(10)
      ##div_a#7589 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7587::Float64,##a2#7588::Float64))
      ####afactor#7093#7590 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7588::Float64))
      ####bfactor#7094#7591 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7587::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7588::Float64,##a2#7588::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7596 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7091#7099#7596 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7589::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7561 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7134#7138#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7565 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7252#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(5) = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7566 = GenSym(5)
      ##a2#7567 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7572 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7566::Float64,##a2#7567::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7573 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(7),:value)::Float64)::ANY)::Float64
      ##deriv#7574 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7573::Float64))
      ####G#7142#7575 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7579 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7073#7077#7146#7579 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7573::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7151#7582 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7151#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(12) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7598 = GenSym(12)
      ##a2#7599 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7604 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7156#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7598::Float64,##a2#7599::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7607 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7252#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      x1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      $(Expr(:boundscheck, false))
      ####_var0#7252#7610 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7252#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(15) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(16) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7611 = GenSym(15)
      ##a2#7612 = GenSym(16)
      ##div_a#7613 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7611::Float64,##a2#7612::Float64))
      ####afactor#7093#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7612::Float64))
      ####bfactor#7094#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7611::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7612::Float64,##a2#7612::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7620 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7091#7099#7620 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      p1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 37
      ####_var0#7535#7622 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 38
      37: 
      ####_var0#7535#7622 = false
      38: 
      ####_var0#7535#7622::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(18) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(17) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7623 = (Base.arrayref)(GenSym(18),GenSym(17))::Float64
      goto 39
      ########_var0#7523#7524#7536#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7623::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)((top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64)::Bool goto 0
      ##a#7624 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7631 = (top(tuple))()::Tuple{}
      goto 42
      ########_var0#7073#7077#7082#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(20) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(21) = (top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7632 = GenSym(20)
      ##a2#7633 = GenSym(21)
      ##div_a#7634 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7632::Float64,##a2#7633::Float64))
      ####afactor#7093#7635 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7633::Float64))
      ####bfactor#7094#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7632::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7633::Float64,##a2#7633::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7641 = (top(tuple))()::Tuple{}
      goto 44
      ######_var0#7091#7099#7641 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7634::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::Float64
  v::Float64
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ####r#7529#7548::UInt64
  ####rabs#7530#7549::Int64
  ####idx#7531#7550::Int64
  ####x#7532#7551::Float64
  ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7553::Float64
  ##_var0#7554::Float64
  ######tup#7069#7132#7555::Tuple{}
  ######x#7070#7133#7556::Float64
  ####_var0#7134#7557::Tuple{}
  ######types#7131#7135#7558::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7559::Tuple{}
  ########x#7070#7133#7137#7560::Float64
  ######_var0#7134#7138#7561::Tuple{}
  ########types#7131#7135#7139#7562::Tuple{Type{Float64}}
  ######a#7248#7250#7563::Tuple{}
  ######b#7249#7251#7564::Tuple{}
  ####_var0#7252#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ######a#7083#7152#7568::Tuple{}
  ######b#7084#7153#7569::Tuple{}
  ######afactor#7085#7154#7570::Float64
  ######bfactor#7086#7155#7571::Float64
  ####_var0#7156#7572::Tuple{}
  ##sqrt_a#7573::Float64
  ##deriv#7574::Float64
  ####G#7142#7575::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7576::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7577::Tuple{}
  ##########x#7070#7072#7076#7145#7578::Float64
  ########_var0#7073#7077#7146#7579::Tuple{}
  ######a#7147#7149#7580::Tuple{}
  ######b#7148#7150#7581::Tuple{}
  ####_var0#7151#7582::Tuple{}
  ########tup#7069#7132#7136#7583::Tuple{}
  ########x#7070#7133#7137#7584::Float64
  ######_var0#7134#7138#7585::Tuple{}
  ########types#7131#7135#7139#7586::Tuple{Type{Float64}}
  ##a1#7587::Float64
  ##a2#7588::Float64
  ##div_a#7589::Float64
  ####afactor#7093#7590::Float64
  ####bfactor#7094#7591::Float64
  ########a#7083#7087#7095#7592::Tuple{}
  ########b#7084#7088#7096#7593::Tuple{}
  ########afactor#7085#7089#7097#7594::Float64
  ########bfactor#7086#7090#7098#7595::Float64
  ######_var0#7091#7099#7596::Tuple{}
  ######types#7092#7100#7597::Tuple{Type{Float64}}
  ##a1#7598::Float64
  ##a2#7599::Float64
  ######a#7083#7152#7600::Tuple{}
  ######b#7084#7153#7601::Tuple{}
  ######afactor#7085#7154#7602::Float64
  ######bfactor#7086#7155#7603::Float64
  ####_var0#7156#7604::Tuple{}
  ######a#7248#7250#7605::Tuple{}
  ######b#7249#7251#7606::Tuple{}
  ####_var0#7252#7607::Tuple{}
  ######a#7248#7250#7608::Tuple{}
  ######b#7249#7251#7609::Tuple{}
  ####_var0#7252#7610::Tuple{}
  ##a1#7611::Float64
  ##a2#7612::Float64
  ##div_a#7613::Float64
  ####afactor#7093#7614::Float64
  ####bfactor#7094#7615::Float64
  ########a#7083#7087#7095#7616::Tuple{}
  ########b#7084#7088#7096#7617::Tuple{}
  ########afactor#7085#7089#7097#7618::Float64
  ########bfactor#7086#7090#7098#7619::Float64
  ######_var0#7091#7099#7620::Tuple{}
  ######types#7092#7100#7621::Tuple{Type{Float64}}
  ####_var0#7535#7622::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7623::Float64
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7078#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7629::Tuple{}
  ##########x#7070#7072#7076#7081#7630::Float64
  ########_var0#7073#7077#7082#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ##div_a#7634::Float64
  ####afactor#7093#7635::Float64
  ####bfactor#7094#7636::Float64
  ########a#7083#7087#7095#7637::Tuple{}
  ########b#7084#7088#7096#7638::Tuple{}
  ########afactor#7085#7089#7097#7639::Float64
  ########bfactor#7086#7090#7098#7640::Float64
  ######_var0#7091#7099#7641::Tuple{}
  ######types#7092#7100#7642::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(22) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(24) = GenSym(22)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(24)
      #s25 = GenSym(25)
      GenSym(26) = GenSym(23)
      GenSym(27) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(26)
      #s25 = GenSym(27) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7552 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7552 = false
      7: 
      ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7553 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7548 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7553::Float64),0x000fffffffffffff))
      ####rabs#7530#7549 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7548::UInt64,1))))
      ####idx#7531#7550 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7549::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7551 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7548::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7549::Int64)),####rabs#7530#7549::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7549::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7549::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7554 = ####x#7532#7551::Float64
      goto 10
      9: 
      ##_var0#7554 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7550::Int64,####rabs#7530#7549::Int64,####x#7532#7551::Float64)::Float64
      goto 10
      ##_var0#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7554::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      $(Expr(:boundscheck, false))
      ####_var0#7134#7557 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7134#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,v::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7585 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7134#7138#7585 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(9) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7587 = GenSym(9)
      ##a2#7588 = GenSym(10)
      ##div_a#7589 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7587::Float64,##a2#7588::Float64))
      ####afactor#7093#7590 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7588::Float64))
      ####bfactor#7094#7591 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7587::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7588::Float64,##a2#7588::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7596 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7091#7099#7596 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7589::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7561 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7134#7138#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7565 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7252#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(5) = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7566 = GenSym(5)
      ##a2#7567 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7572 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7566::Float64,##a2#7567::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7573 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(7),:value)::Float64)::ANY)::Float64
      ##deriv#7574 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7573::Float64))
      ####G#7142#7575 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7579 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7073#7077#7146#7579 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7573::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7151#7582 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7151#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(12) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7598 = GenSym(12)
      ##a2#7599 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7604 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7156#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7598::Float64,##a2#7599::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7607 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7252#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      x1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      $(Expr(:boundscheck, false))
      ####_var0#7252#7610 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7252#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(15) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(16) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7611 = GenSym(15)
      ##a2#7612 = GenSym(16)
      ##div_a#7613 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7611::Float64,##a2#7612::Float64))
      ####afactor#7093#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7612::Float64))
      ####bfactor#7094#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7611::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7612::Float64,##a2#7612::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7620 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7091#7099#7620 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      p1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 37
      ####_var0#7535#7622 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 38
      37: 
      ####_var0#7535#7622 = false
      38: 
      ####_var0#7535#7622::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(18) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(17) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7623 = (Base.arrayref)(GenSym(18),GenSym(17))::Float64
      goto 39
      ########_var0#7523#7524#7536#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7623::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)((top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64)::Bool goto 0
      ##a#7624 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7631 = (top(tuple))()::Tuple{}
      goto 42
      ########_var0#7073#7077#7082#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(20) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(21) = (top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7632 = GenSym(20)
      ##a2#7633 = GenSym(21)
      ##div_a#7634 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7632::Float64,##a2#7633::Float64))
      ####afactor#7093#7635 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7633::Float64))
      ####bfactor#7094#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7632::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7633::Float64,##a2#7633::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7641 = (top(tuple))()::Tuple{}
      goto 44
      ######_var0#7091#7099#7641 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7634::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::Float64
  v::Float64
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ####r#7529#7548::UInt64
  ####rabs#7530#7549::Int64
  ####idx#7531#7550::Int64
  ####x#7532#7551::Float64
  ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7553::Float64
  ##_var0#7554::Float64
  ######tup#7069#7132#7555::Tuple{}
  ######x#7070#7133#7556::Float64
  ####_var0#7134#7557::Tuple{}
  ######types#7131#7135#7558::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7559::Tuple{}
  ########x#7070#7133#7137#7560::Float64
  ######_var0#7134#7138#7561::Tuple{}
  ########types#7131#7135#7139#7562::Tuple{Type{Float64}}
  ######a#7248#7250#7563::Tuple{}
  ######b#7249#7251#7564::Tuple{}
  ####_var0#7252#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ######a#7083#7152#7568::Tuple{}
  ######b#7084#7153#7569::Tuple{}
  ######afactor#7085#7154#7570::Float64
  ######bfactor#7086#7155#7571::Float64
  ####_var0#7156#7572::Tuple{}
  ##sqrt_a#7573::Float64
  ##deriv#7574::Float64
  ####G#7142#7575::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7576::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7577::Tuple{}
  ##########x#7070#7072#7076#7145#7578::Float64
  ########_var0#7073#7077#7146#7579::Tuple{}
  ######a#7147#7149#7580::Tuple{}
  ######b#7148#7150#7581::Tuple{}
  ####_var0#7151#7582::Tuple{}
  ########tup#7069#7132#7136#7583::Tuple{}
  ########x#7070#7133#7137#7584::Float64
  ######_var0#7134#7138#7585::Tuple{}
  ########types#7131#7135#7139#7586::Tuple{Type{Float64}}
  ##a1#7587::Float64
  ##a2#7588::Float64
  ##div_a#7589::Float64
  ####afactor#7093#7590::Float64
  ####bfactor#7094#7591::Float64
  ########a#7083#7087#7095#7592::Tuple{}
  ########b#7084#7088#7096#7593::Tuple{}
  ########afactor#7085#7089#7097#7594::Float64
  ########bfactor#7086#7090#7098#7595::Float64
  ######_var0#7091#7099#7596::Tuple{}
  ######types#7092#7100#7597::Tuple{Type{Float64}}
  ##a1#7598::Float64
  ##a2#7599::Float64
  ######a#7083#7152#7600::Tuple{}
  ######b#7084#7153#7601::Tuple{}
  ######afactor#7085#7154#7602::Float64
  ######bfactor#7086#7155#7603::Float64
  ####_var0#7156#7604::Tuple{}
  ######a#7248#7250#7605::Tuple{}
  ######b#7249#7251#7606::Tuple{}
  ####_var0#7252#7607::Tuple{}
  ######a#7248#7250#7608::Tuple{}
  ######b#7249#7251#7609::Tuple{}
  ####_var0#7252#7610::Tuple{}
  ##a1#7611::Float64
  ##a2#7612::Float64
  ##div_a#7613::Float64
  ####afactor#7093#7614::Float64
  ####bfactor#7094#7615::Float64
  ########a#7083#7087#7095#7616::Tuple{}
  ########b#7084#7088#7096#7617::Tuple{}
  ########afactor#7085#7089#7097#7618::Float64
  ########bfactor#7086#7090#7098#7619::Float64
  ######_var0#7091#7099#7620::Tuple{}
  ######types#7092#7100#7621::Tuple{Type{Float64}}
  ####_var0#7535#7622::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7623::Float64
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7078#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7629::Tuple{}
  ##########x#7070#7072#7076#7081#7630::Float64
  ########_var0#7073#7077#7082#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ##div_a#7634::Float64
  ####afactor#7093#7635::Float64
  ####bfactor#7094#7636::Float64
  ########a#7083#7087#7095#7637::Tuple{}
  ########b#7084#7088#7096#7638::Tuple{}
  ########afactor#7085#7089#7097#7639::Float64
  ########bfactor#7086#7090#7098#7640::Float64
  ######_var0#7091#7099#7641::Tuple{}
  ######types#7092#7100#7642::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(22) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(24) = GenSym(22)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(24)
      #s25 = GenSym(25)
      GenSym(26) = GenSym(23)
      GenSym(27) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(26)
      #s25 = GenSym(27) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7552 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7552 = false
      7: 
      ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7553 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7548 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7553::Float64),0x000fffffffffffff))
      ####rabs#7530#7549 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7548::UInt64,1))))
      ####idx#7531#7550 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7549::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7551 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7548::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7549::Int64)),####rabs#7530#7549::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7549::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7549::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7554 = ####x#7532#7551::Float64
      goto 10
      9: 
      ##_var0#7554 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7550::Int64,####rabs#7530#7549::Int64,####x#7532#7551::Float64)::Float64
      goto 10
      ##_var0#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7554::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      $(Expr(:boundscheck, false))
      ####_var0#7134#7557 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7134#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,v::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7585 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7134#7138#7585 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(9) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7587 = GenSym(9)
      ##a2#7588 = GenSym(10)
      ##div_a#7589 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7587::Float64,##a2#7588::Float64))
      ####afactor#7093#7590 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7588::Float64))
      ####bfactor#7094#7591 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7587::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7588::Float64,##a2#7588::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7596 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7091#7099#7596 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7589::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7561 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7134#7138#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7565 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7252#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(5) = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7566 = GenSym(5)
      ##a2#7567 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7572 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7566::Float64,##a2#7567::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7573 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(7),:value)::Float64)::ANY)::Float64
      ##deriv#7574 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7573::Float64))
      ####G#7142#7575 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7579 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7073#7077#7146#7579 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7573::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7151#7582 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7151#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(12) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7598 = GenSym(12)
      ##a2#7599 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7604 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7156#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7598::Float64,##a2#7599::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7607 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7252#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      x1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      $(Expr(:boundscheck, false))
      ####_var0#7252#7610 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7252#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(15) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(16) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7611 = GenSym(15)
      ##a2#7612 = GenSym(16)
      ##div_a#7613 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7611::Float64,##a2#7612::Float64))
      ####afactor#7093#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7612::Float64))
      ####bfactor#7094#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7611::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7612::Float64,##a2#7612::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7620 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7091#7099#7620 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      p1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 37
      ####_var0#7535#7622 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 38
      37: 
      ####_var0#7535#7622 = false
      38: 
      ####_var0#7535#7622::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(18) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(17) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7623 = (Base.arrayref)(GenSym(18),GenSym(17))::Float64
      goto 39
      ########_var0#7523#7524#7536#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7623::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)((top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64)::Bool goto 0
      ##a#7624 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7631 = (top(tuple))()::Tuple{}
      goto 42
      ########_var0#7073#7077#7082#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(20) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(21) = (top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7632 = GenSym(20)
      ##a2#7633 = GenSym(21)
      ##div_a#7634 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7632::Float64,##a2#7633::Float64))
      ####afactor#7093#7635 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7633::Float64))
      ####bfactor#7094#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7632::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7633::Float64,##a2#7633::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7641 = (top(tuple))()::Tuple{}
      goto 44
      ######_var0#7091#7099#7641 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7634::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::Float64
  v::Float64
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ####r#7529#7548::UInt64
  ####rabs#7530#7549::Int64
  ####idx#7531#7550::Int64
  ####x#7532#7551::Float64
  ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
  ############_var0#7519#7520#7522#7528#7534#7553::Float64
  ##_var0#7554::Float64
  ######tup#7069#7132#7555::Tuple{}
  ######x#7070#7133#7556::Float64
  ####_var0#7134#7557::Tuple{}
  ######types#7131#7135#7558::Tuple{Type{Float64}}
  ########tup#7069#7132#7136#7559::Tuple{}
  ########x#7070#7133#7137#7560::Float64
  ######_var0#7134#7138#7561::Tuple{}
  ########types#7131#7135#7139#7562::Tuple{Type{Float64}}
  ######a#7248#7250#7563::Tuple{}
  ######b#7249#7251#7564::Tuple{}
  ####_var0#7252#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ######a#7083#7152#7568::Tuple{}
  ######b#7084#7153#7569::Tuple{}
  ######afactor#7085#7154#7570::Float64
  ######bfactor#7086#7155#7571::Float64
  ####_var0#7156#7572::Tuple{}
  ##sqrt_a#7573::Float64
  ##deriv#7574::Float64
  ####G#7142#7575::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7576::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7577::Tuple{}
  ##########x#7070#7072#7076#7145#7578::Float64
  ########_var0#7073#7077#7146#7579::Tuple{}
  ######a#7147#7149#7580::Tuple{}
  ######b#7148#7150#7581::Tuple{}
  ####_var0#7151#7582::Tuple{}
  ########tup#7069#7132#7136#7583::Tuple{}
  ########x#7070#7133#7137#7584::Float64
  ######_var0#7134#7138#7585::Tuple{}
  ########types#7131#7135#7139#7586::Tuple{Type{Float64}}
  ##a1#7587::Float64
  ##a2#7588::Float64
  ##div_a#7589::Float64
  ####afactor#7093#7590::Float64
  ####bfactor#7094#7591::Float64
  ########a#7083#7087#7095#7592::Tuple{}
  ########b#7084#7088#7096#7593::Tuple{}
  ########afactor#7085#7089#7097#7594::Float64
  ########bfactor#7086#7090#7098#7595::Float64
  ######_var0#7091#7099#7596::Tuple{}
  ######types#7092#7100#7597::Tuple{Type{Float64}}
  ##a1#7598::Float64
  ##a2#7599::Float64
  ######a#7083#7152#7600::Tuple{}
  ######b#7084#7153#7601::Tuple{}
  ######afactor#7085#7154#7602::Float64
  ######bfactor#7086#7155#7603::Float64
  ####_var0#7156#7604::Tuple{}
  ######a#7248#7250#7605::Tuple{}
  ######b#7249#7251#7606::Tuple{}
  ####_var0#7252#7607::Tuple{}
  ######a#7248#7250#7608::Tuple{}
  ######b#7249#7251#7609::Tuple{}
  ####_var0#7252#7610::Tuple{}
  ##a1#7611::Float64
  ##a2#7612::Float64
  ##div_a#7613::Float64
  ####afactor#7093#7614::Float64
  ####bfactor#7094#7615::Float64
  ########a#7083#7087#7095#7616::Tuple{}
  ########b#7084#7088#7096#7617::Tuple{}
  ########afactor#7085#7089#7097#7618::Float64
  ########bfactor#7086#7090#7098#7619::Float64
  ######_var0#7091#7099#7620::Tuple{}
  ######types#7092#7100#7621::Tuple{Type{Float64}}
  ####_var0#7535#7622::UNION{BOOL,INT64}
  ########_var0#7523#7524#7536#7623::Float64
  ##a#7624::Float64
  ##exp_a#7625::Float64
  ##deriv#7626::Float64
  ####G#7078#7627::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7628::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7629::Tuple{}
  ##########x#7070#7072#7076#7081#7630::Float64
  ########_var0#7073#7077#7082#7631::Tuple{}
  ##a1#7632::Float64
  ##a2#7633::Float64
  ##div_a#7634::Float64
  ####afactor#7093#7635::Float64
  ####bfactor#7094#7636::Float64
  ########a#7083#7087#7095#7637::Tuple{}
  ########b#7084#7088#7096#7638::Tuple{}
  ########afactor#7085#7089#7097#7639::Float64
  ########bfactor#7086#7090#7098#7640::Float64
  ######_var0#7091#7099#7641::Tuple{}
  ######types#7092#7100#7642::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 151:
      GenSym(22) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(24) = GenSym(22)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(24)
      #s25 = GenSym(25)
      GenSym(26) = GenSym(23)
      GenSym(27) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(26)
      #s25 = GenSym(27) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 152:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 6
      ########_var0#7521#7527#7533#7552 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 7
      6: 
      ########_var0#7521#7527#7533#7552 = false
      7: 
      ########_var0#7521#7527#7533#7552::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7519#7520#7522#7528#7534#7553 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 8
      ############_var0#7519#7520#7522#7528#7534#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      ####r#7529#7548 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7519#7520#7522#7528#7534#7553::Float64),0x000fffffffffffff))
      ####rabs#7530#7549 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7529#7548::UInt64,1))))
      ####idx#7531#7550 = (Base.box)(Int64,(Base.and_int)(####rabs#7530#7549::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7532#7551 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7529#7548::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7530#7549::Int64)),####rabs#7530#7549::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7530#7549::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7530#7549::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7531#7550::Int64,1)))::UInt64)::Bool)) goto 9
      ##_var0#7554 = ####x#7532#7551::Float64
      goto 10
      9: 
      ##_var0#7554 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7531#7550::Int64,####rabs#7530#7549::Int64,####x#7532#7551::Float64)::Float64
      goto 10
      ##_var0#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      z = ##_var0#7554::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 153:
      v = (Base.box)(Base.Float64,(Base.mul_float)(z::Float64,z::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 154:
      $(Expr(:boundscheck, false))
      ####_var0#7134#7557 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7134#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,v::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 155:
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7585 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7134#7138#7585 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(9) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7587 = GenSym(9)
      ##a2#7588 = GenSym(10)
      ##div_a#7589 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7587::Float64,##a2#7588::Float64))
      ####afactor#7093#7590 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7588::Float64))
      ####bfactor#7094#7591 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7587::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7588::Float64,##a2#7588::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7596 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7091#7099#7596 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7589::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7134#7138#7561 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7134#7138#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7565 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7252#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(5) = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7566 = GenSym(5)
      ##a2#7567 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7572 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7566::Float64,##a2#7567::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7573 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(7),:value)::Float64)::ANY)::Float64
      ##deriv#7574 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7573::Float64))
      ####G#7142#7575 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7579 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7073#7077#7146#7579 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7573::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7151#7582 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7151#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(12) = (top(getfield))(GenSym(11),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7598 = GenSym(12)
      ##a2#7599 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7604 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7156#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7598::Float64,##a2#7599::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7607 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7252#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      x1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(14),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 156:
      $(Expr(:boundscheck, false))
      ####_var0#7252#7610 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7252#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(15) = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(16) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7611 = GenSym(15)
      ##a2#7612 = GenSym(16)
      ##div_a#7613 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7611::Float64,##a2#7612::Float64))
      ####afactor#7093#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7612::Float64))
      ####bfactor#7094#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7611::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7612::Float64,##a2#7612::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7620 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7091#7099#7620 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      p1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 157:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 37
      ####_var0#7535#7622 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 38
      37: 
      ####_var0#7535#7622 = false
      38: 
      ####_var0#7535#7622::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(18) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(17) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7523#7524#7536#7623 = (Base.arrayref)(GenSym(18),GenSym(17))::Float64
      goto 39
      ########_var0#7523#7524#7536#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7523#7524#7536#7623::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 158:
      unless (Base.le_float)((top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64)::Bool goto 0
      ##a#7624 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7625 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7626 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7624::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7627 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7631 = (top(tuple))()::Tuple{}
      goto 42
      ########_var0#7073#7077#7082#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(19) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7625::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(20) = (top(getfield))(GenSym(19),:value)::Float64
      GenSym(21) = (top(getfield))(x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7632 = GenSym(20)
      ##a2#7633 = GenSym(21)
      ##div_a#7634 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7632::Float64,##a2#7633::Float64))
      ####afactor#7093#7635 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7633::Float64))
      ####bfactor#7094#7636 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7632::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7633::Float64,##a2#7633::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7641 = (top(tuple))()::Tuple{}
      goto 44
      ######_var0#7091#7099#7641 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7634::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return x1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  x::Int64
  μ::Float64
  λ::Float64
  #s25::Int64
  ####fy#7643#7644::Float64
  ##xs#7645::Tuple{}
  ##xs#7646::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7644 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.lt_float)(####fy#7643#7644::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7644::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(5) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(λ::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)(λ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))))::Float64,GenSym(4)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  x::Int64
  μ::Float64
  λ::Float64
  #s25::Int64
  ####fy#7643#7644::Float64
  ##xs#7645::Tuple{}
  ##xs#7646::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7644 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.lt_float)(####fy#7643#7644::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7644::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(5) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(λ::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)(λ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))))::Float64,GenSym(4)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fy#7643#7676::Float64
  ##a#7677::Float64
  ##exp_a#7678::Float64
  ##deriv#7679::Float64
  ####G#7078#7680::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7681::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7682::Tuple{}
  ##########x#7070#7072#7076#7081#7683::Float64
  ########_var0#7073#7077#7082#7684::Tuple{}
  ##xs#7685::Tuple{}
  ##########tup#7069#7132#7136#7668#7686::Tuple{}
  ##########x#7070#7133#7137#7669#7687::Float64
  ########_var0#7134#7138#7670#7688::Tuple{}
  ##########types#7131#7135#7139#7671#7689::Tuple{Type{Float64}}
  ########tup#7662#7664#7672#7690::Tuple{}
  ########x#7663#7665#7673#7691::Int64
  ######_var0#7666#7674#7692::Tuple{}
  ########types#7658#7667#7675#7693::Tuple{Type{Int64}}
  ######tup#7205#7659#7694::Tuple{}
  ####_var0#7660#7695::Tuple{}
  ######types#7658#7661#7696::Tuple{Type{Int64}}
  ##a#7697::Float64
  ##exp_a#7698::Float64
  ##deriv#7699::Float64
  ####G#7078#7700::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7701::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7702::Tuple{}
  ##########x#7070#7072#7076#7081#7703::Float64
  ########_var0#7073#7077#7082#7704::Tuple{}
  ######tup#7205#7206#7705::Tuple{}
  ####_var0#7207#7706::Tuple{}
  ##a1#7707::Float64
  ##a2#7708::Float64
  ######a#7083#7152#7709::Tuple{}
  ######b#7084#7153#7710::Tuple{}
  ######afactor#7085#7154#7711::Float64
  ######bfactor#7086#7155#7712::Float64
  ####_var0#7156#7713::Tuple{}
  ##a1#7714::Float64
  ##a2#7715::Float64
  ##div_a#7716::Float64
  ####afactor#7093#7717::Float64
  ####bfactor#7094#7718::Float64
  ########a#7083#7087#7095#7719::Tuple{}
  ########b#7084#7088#7096#7720::Tuple{}
  ########afactor#7085#7089#7097#7721::Float64
  ########bfactor#7086#7090#7098#7722::Float64
  ######_var0#7091#7099#7723::Tuple{}
  ######types#7092#7100#7724::Tuple{Type{Float64}}
  ##exp_a#7725::Float64
  ####G#7243#7726::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7244#7727::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7245#7728::Tuple{}
  ##########x#7070#7072#7076#7246#7729::Float64
  ########_var0#7073#7077#7247#7730::Tuple{}
  ##xs#7731::Tuple{}
  ##div_a#7732::Float64
  ######tup#7652#7654#7733::Tuple{}
  ######x#7653#7655#7734::Float64
  ####_var0#7656#7735::Tuple{}
  ######types#7131#7657#7736::Tuple{Type{Float64}}
  ##sqrt_a#7737::Float64
  ##deriv#7738::Float64
  ####G#7142#7739::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7740::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7741::Tuple{}
  ##########x#7070#7072#7076#7145#7742::Float64
  ########_var0#7073#7077#7146#7743::Tuple{}
  ##a1#7744::Float64
  ##a2#7745::Float64
  ######a#7083#7152#7746::Tuple{}
  ######b#7084#7153#7747::Tuple{}
  ######afactor#7085#7154#7748::Float64
  ######bfactor#7086#7155#7749::Float64
  ####_var0#7156#7750::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7676 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.lt_float)(####fy#7643#7676::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7676::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(17) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      ##div_a#7732 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))
      $(Expr(:boundscheck, false))
      ####_var0#7656#7735 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7656#7735 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7732::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7737 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7738 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7737::Float64))
      ####G#7142#7739 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7743 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7073#7077#7146#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7207#7706 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7207#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7660#7695 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7660#7695 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7697 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7698 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7699 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7700 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7704 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7073#7077#7082#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7698::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7707 = GenSym(5)
      ##a2#7708 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7713 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7707::Float64,##a2#7708::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7677 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7678 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7679 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7680 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7684 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7678::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7134#7138#7670#7688 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7134#7138#7670#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ######_var0#7666#7674#7692 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7666#7674#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7714 = GenSym(8)
      ##a2#7715 = GenSym(9)
      ##div_a#7716 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7714::Float64,##a2#7715::Float64))
      ####afactor#7093#7717 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7715::Float64))
      ####bfactor#7094#7718 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7714::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7715::Float64,##a2#7715::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7723 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7091#7099#7723 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7716::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7725 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(10),:value)::Float64,0)::Float64
      ####G#7243#7726 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7247#7730 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7247#7730 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7725::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7744 = GenSym(15)
      ##a2#7745 = GenSym(16)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7750 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7156#7750 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7744::Float64,##a2#7745::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  x::Int64
  μ::Float64
  λ::Float64
  #s25::Int64
  ####fy#7643#7644::Float64
  ##xs#7645::Tuple{}
  ##xs#7646::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7644 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.lt_float)(####fy#7643#7644::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7644::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(5) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(λ::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)(λ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))))::Float64,GenSym(4)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGaussian{Float64}
  x::Int64
  μ::Float64
  λ::Float64
  #s25::Int64
  ####fy#7643#7644::Float64
  ##xs#7645::Tuple{}
  ##xs#7646::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7644 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7644::Float64)::Bool,(Base.lt_float)(####fy#7643#7644::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7644::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(5) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:μ)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.InverseGaussian{Float64},:λ)::Float64
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(λ::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,μ::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)(λ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))))::Float64,GenSym(4)))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fy#7643#7676::Float64
  ##a#7677::Float64
  ##exp_a#7678::Float64
  ##deriv#7679::Float64
  ####G#7078#7680::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7681::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7682::Tuple{}
  ##########x#7070#7072#7076#7081#7683::Float64
  ########_var0#7073#7077#7082#7684::Tuple{}
  ##xs#7685::Tuple{}
  ##########tup#7069#7132#7136#7668#7686::Tuple{}
  ##########x#7070#7133#7137#7669#7687::Float64
  ########_var0#7134#7138#7670#7688::Tuple{}
  ##########types#7131#7135#7139#7671#7689::Tuple{Type{Float64}}
  ########tup#7662#7664#7672#7690::Tuple{}
  ########x#7663#7665#7673#7691::Int64
  ######_var0#7666#7674#7692::Tuple{}
  ########types#7658#7667#7675#7693::Tuple{Type{Int64}}
  ######tup#7205#7659#7694::Tuple{}
  ####_var0#7660#7695::Tuple{}
  ######types#7658#7661#7696::Tuple{Type{Int64}}
  ##a#7697::Float64
  ##exp_a#7698::Float64
  ##deriv#7699::Float64
  ####G#7078#7700::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7701::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7702::Tuple{}
  ##########x#7070#7072#7076#7081#7703::Float64
  ########_var0#7073#7077#7082#7704::Tuple{}
  ######tup#7205#7206#7705::Tuple{}
  ####_var0#7207#7706::Tuple{}
  ##a1#7707::Float64
  ##a2#7708::Float64
  ######a#7083#7152#7709::Tuple{}
  ######b#7084#7153#7710::Tuple{}
  ######afactor#7085#7154#7711::Float64
  ######bfactor#7086#7155#7712::Float64
  ####_var0#7156#7713::Tuple{}
  ##a1#7714::Float64
  ##a2#7715::Float64
  ##div_a#7716::Float64
  ####afactor#7093#7717::Float64
  ####bfactor#7094#7718::Float64
  ########a#7083#7087#7095#7719::Tuple{}
  ########b#7084#7088#7096#7720::Tuple{}
  ########afactor#7085#7089#7097#7721::Float64
  ########bfactor#7086#7090#7098#7722::Float64
  ######_var0#7091#7099#7723::Tuple{}
  ######types#7092#7100#7724::Tuple{Type{Float64}}
  ##exp_a#7725::Float64
  ####G#7243#7726::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7244#7727::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7245#7728::Tuple{}
  ##########x#7070#7072#7076#7246#7729::Float64
  ########_var0#7073#7077#7247#7730::Tuple{}
  ##xs#7731::Tuple{}
  ##div_a#7732::Float64
  ######tup#7652#7654#7733::Tuple{}
  ######x#7653#7655#7734::Float64
  ####_var0#7656#7735::Tuple{}
  ######types#7131#7657#7736::Tuple{Type{Float64}}
  ##sqrt_a#7737::Float64
  ##deriv#7738::Float64
  ####G#7142#7739::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7740::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7741::Tuple{}
  ##########x#7070#7072#7076#7145#7742::Float64
  ########_var0#7073#7077#7146#7743::Tuple{}
  ##a1#7744::Float64
  ##a2#7745::Float64
  ######a#7083#7152#7746::Tuple{}
  ######b#7084#7153#7747::Tuple{}
  ######afactor#7085#7154#7748::Float64
  ######bfactor#7086#7155#7749::Float64
  ####_var0#7156#7750::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7676 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.lt_float)(####fy#7643#7676::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7676::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(17) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      ##div_a#7732 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))
      $(Expr(:boundscheck, false))
      ####_var0#7656#7735 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7656#7735 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7732::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7737 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7738 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7737::Float64))
      ####G#7142#7739 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7743 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7073#7077#7146#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7207#7706 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7207#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7660#7695 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7660#7695 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7697 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7698 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7699 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7700 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7704 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7073#7077#7082#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7698::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7707 = GenSym(5)
      ##a2#7708 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7713 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7707::Float64,##a2#7708::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7677 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7678 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7679 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7680 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7684 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7678::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7134#7138#7670#7688 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7134#7138#7670#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ######_var0#7666#7674#7692 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7666#7674#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7714 = GenSym(8)
      ##a2#7715 = GenSym(9)
      ##div_a#7716 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7714::Float64,##a2#7715::Float64))
      ####afactor#7093#7717 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7715::Float64))
      ####bfactor#7094#7718 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7714::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7715::Float64,##a2#7715::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7723 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7091#7099#7723 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7716::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7725 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(10),:value)::Float64,0)::Float64
      ####G#7243#7726 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7247#7730 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7247#7730 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7725::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7744 = GenSym(15)
      ##a2#7745 = GenSym(16)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7750 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7156#7750 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7744::Float64,##a2#7745::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fy#7643#7676::Float64
  ##a#7677::Float64
  ##exp_a#7678::Float64
  ##deriv#7679::Float64
  ####G#7078#7680::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7681::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7682::Tuple{}
  ##########x#7070#7072#7076#7081#7683::Float64
  ########_var0#7073#7077#7082#7684::Tuple{}
  ##xs#7685::Tuple{}
  ##########tup#7069#7132#7136#7668#7686::Tuple{}
  ##########x#7070#7133#7137#7669#7687::Float64
  ########_var0#7134#7138#7670#7688::Tuple{}
  ##########types#7131#7135#7139#7671#7689::Tuple{Type{Float64}}
  ########tup#7662#7664#7672#7690::Tuple{}
  ########x#7663#7665#7673#7691::Int64
  ######_var0#7666#7674#7692::Tuple{}
  ########types#7658#7667#7675#7693::Tuple{Type{Int64}}
  ######tup#7205#7659#7694::Tuple{}
  ####_var0#7660#7695::Tuple{}
  ######types#7658#7661#7696::Tuple{Type{Int64}}
  ##a#7697::Float64
  ##exp_a#7698::Float64
  ##deriv#7699::Float64
  ####G#7078#7700::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7701::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7702::Tuple{}
  ##########x#7070#7072#7076#7081#7703::Float64
  ########_var0#7073#7077#7082#7704::Tuple{}
  ######tup#7205#7206#7705::Tuple{}
  ####_var0#7207#7706::Tuple{}
  ##a1#7707::Float64
  ##a2#7708::Float64
  ######a#7083#7152#7709::Tuple{}
  ######b#7084#7153#7710::Tuple{}
  ######afactor#7085#7154#7711::Float64
  ######bfactor#7086#7155#7712::Float64
  ####_var0#7156#7713::Tuple{}
  ##a1#7714::Float64
  ##a2#7715::Float64
  ##div_a#7716::Float64
  ####afactor#7093#7717::Float64
  ####bfactor#7094#7718::Float64
  ########a#7083#7087#7095#7719::Tuple{}
  ########b#7084#7088#7096#7720::Tuple{}
  ########afactor#7085#7089#7097#7721::Float64
  ########bfactor#7086#7090#7098#7722::Float64
  ######_var0#7091#7099#7723::Tuple{}
  ######types#7092#7100#7724::Tuple{Type{Float64}}
  ##exp_a#7725::Float64
  ####G#7243#7726::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7244#7727::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7245#7728::Tuple{}
  ##########x#7070#7072#7076#7246#7729::Float64
  ########_var0#7073#7077#7247#7730::Tuple{}
  ##xs#7731::Tuple{}
  ##div_a#7732::Float64
  ######tup#7652#7654#7733::Tuple{}
  ######x#7653#7655#7734::Float64
  ####_var0#7656#7735::Tuple{}
  ######types#7131#7657#7736::Tuple{Type{Float64}}
  ##sqrt_a#7737::Float64
  ##deriv#7738::Float64
  ####G#7142#7739::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7740::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7741::Tuple{}
  ##########x#7070#7072#7076#7145#7742::Float64
  ########_var0#7073#7077#7146#7743::Tuple{}
  ##a1#7744::Float64
  ##a2#7745::Float64
  ######a#7083#7152#7746::Tuple{}
  ######b#7084#7153#7747::Tuple{}
  ######afactor#7085#7154#7748::Float64
  ######bfactor#7086#7155#7749::Float64
  ####_var0#7156#7750::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7676 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.lt_float)(####fy#7643#7676::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7676::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(17) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      ##div_a#7732 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))
      $(Expr(:boundscheck, false))
      ####_var0#7656#7735 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7656#7735 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7732::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7737 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7738 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7737::Float64))
      ####G#7142#7739 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7743 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7073#7077#7146#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7207#7706 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7207#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7660#7695 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7660#7695 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7697 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7698 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7699 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7700 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7704 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7073#7077#7082#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7698::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7707 = GenSym(5)
      ##a2#7708 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7713 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7707::Float64,##a2#7708::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7677 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7678 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7679 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7680 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7684 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7678::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7134#7138#7670#7688 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7134#7138#7670#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ######_var0#7666#7674#7692 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7666#7674#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7714 = GenSym(8)
      ##a2#7715 = GenSym(9)
      ##div_a#7716 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7714::Float64,##a2#7715::Float64))
      ####afactor#7093#7717 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7715::Float64))
      ####bfactor#7094#7718 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7714::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7715::Float64,##a2#7715::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7723 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7091#7099#7723 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7716::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7725 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(10),:value)::Float64,0)::Float64
      ####G#7243#7726 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7247#7730 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7247#7730 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7725::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7744 = GenSym(15)
      ##a2#7745 = GenSym(16)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7750 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7156#7750 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7744::Float64,##a2#7745::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fy#7643#7676::Float64
  ##a#7677::Float64
  ##exp_a#7678::Float64
  ##deriv#7679::Float64
  ####G#7078#7680::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7681::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7682::Tuple{}
  ##########x#7070#7072#7076#7081#7683::Float64
  ########_var0#7073#7077#7082#7684::Tuple{}
  ##xs#7685::Tuple{}
  ##########tup#7069#7132#7136#7668#7686::Tuple{}
  ##########x#7070#7133#7137#7669#7687::Float64
  ########_var0#7134#7138#7670#7688::Tuple{}
  ##########types#7131#7135#7139#7671#7689::Tuple{Type{Float64}}
  ########tup#7662#7664#7672#7690::Tuple{}
  ########x#7663#7665#7673#7691::Int64
  ######_var0#7666#7674#7692::Tuple{}
  ########types#7658#7667#7675#7693::Tuple{Type{Int64}}
  ######tup#7205#7659#7694::Tuple{}
  ####_var0#7660#7695::Tuple{}
  ######types#7658#7661#7696::Tuple{Type{Int64}}
  ##a#7697::Float64
  ##exp_a#7698::Float64
  ##deriv#7699::Float64
  ####G#7078#7700::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7701::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7702::Tuple{}
  ##########x#7070#7072#7076#7081#7703::Float64
  ########_var0#7073#7077#7082#7704::Tuple{}
  ######tup#7205#7206#7705::Tuple{}
  ####_var0#7207#7706::Tuple{}
  ##a1#7707::Float64
  ##a2#7708::Float64
  ######a#7083#7152#7709::Tuple{}
  ######b#7084#7153#7710::Tuple{}
  ######afactor#7085#7154#7711::Float64
  ######bfactor#7086#7155#7712::Float64
  ####_var0#7156#7713::Tuple{}
  ##a1#7714::Float64
  ##a2#7715::Float64
  ##div_a#7716::Float64
  ####afactor#7093#7717::Float64
  ####bfactor#7094#7718::Float64
  ########a#7083#7087#7095#7719::Tuple{}
  ########b#7084#7088#7096#7720::Tuple{}
  ########afactor#7085#7089#7097#7721::Float64
  ########bfactor#7086#7090#7098#7722::Float64
  ######_var0#7091#7099#7723::Tuple{}
  ######types#7092#7100#7724::Tuple{Type{Float64}}
  ##exp_a#7725::Float64
  ####G#7243#7726::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7244#7727::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7245#7728::Tuple{}
  ##########x#7070#7072#7076#7246#7729::Float64
  ########_var0#7073#7077#7247#7730::Tuple{}
  ##xs#7731::Tuple{}
  ##div_a#7732::Float64
  ######tup#7652#7654#7733::Tuple{}
  ######x#7653#7655#7734::Float64
  ####_var0#7656#7735::Tuple{}
  ######types#7131#7657#7736::Tuple{Type{Float64}}
  ##sqrt_a#7737::Float64
  ##deriv#7738::Float64
  ####G#7142#7739::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7740::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7741::Tuple{}
  ##########x#7070#7072#7076#7145#7742::Float64
  ########_var0#7073#7077#7146#7743::Tuple{}
  ##a1#7744::Float64
  ##a2#7745::Float64
  ######a#7083#7152#7746::Tuple{}
  ######b#7084#7153#7747::Tuple{}
  ######afactor#7085#7154#7748::Float64
  ######bfactor#7086#7155#7749::Float64
  ####_var0#7156#7750::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7676 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.lt_float)(####fy#7643#7676::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7676::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(17) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      ##div_a#7732 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))
      $(Expr(:boundscheck, false))
      ####_var0#7656#7735 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7656#7735 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7732::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7737 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7738 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7737::Float64))
      ####G#7142#7739 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7743 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7073#7077#7146#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7207#7706 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7207#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7660#7695 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7660#7695 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7697 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7698 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7699 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7700 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7704 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7073#7077#7082#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7698::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7707 = GenSym(5)
      ##a2#7708 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7713 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7707::Float64,##a2#7708::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7677 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7678 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7679 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7680 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7684 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7678::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7134#7138#7670#7688 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7134#7138#7670#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ######_var0#7666#7674#7692 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7666#7674#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7714 = GenSym(8)
      ##a2#7715 = GenSym(9)
      ##div_a#7716 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7714::Float64,##a2#7715::Float64))
      ####afactor#7093#7717 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7715::Float64))
      ####bfactor#7094#7718 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7714::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7715::Float64,##a2#7715::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7723 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7091#7099#7723 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7716::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7725 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(10),:value)::Float64,0)::Float64
      ####G#7243#7726 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7247#7730 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7247#7730 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7725::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7744 = GenSym(15)
      ##a2#7745 = GenSym(16)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7750 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7156#7750 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7744::Float64,##a2#7745::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fy#7643#7676::Float64
  ##a#7677::Float64
  ##exp_a#7678::Float64
  ##deriv#7679::Float64
  ####G#7078#7680::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7681::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7682::Tuple{}
  ##########x#7070#7072#7076#7081#7683::Float64
  ########_var0#7073#7077#7082#7684::Tuple{}
  ##xs#7685::Tuple{}
  ##########tup#7069#7132#7136#7668#7686::Tuple{}
  ##########x#7070#7133#7137#7669#7687::Float64
  ########_var0#7134#7138#7670#7688::Tuple{}
  ##########types#7131#7135#7139#7671#7689::Tuple{Type{Float64}}
  ########tup#7662#7664#7672#7690::Tuple{}
  ########x#7663#7665#7673#7691::Int64
  ######_var0#7666#7674#7692::Tuple{}
  ########types#7658#7667#7675#7693::Tuple{Type{Int64}}
  ######tup#7205#7659#7694::Tuple{}
  ####_var0#7660#7695::Tuple{}
  ######types#7658#7661#7696::Tuple{Type{Int64}}
  ##a#7697::Float64
  ##exp_a#7698::Float64
  ##deriv#7699::Float64
  ####G#7078#7700::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7701::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7702::Tuple{}
  ##########x#7070#7072#7076#7081#7703::Float64
  ########_var0#7073#7077#7082#7704::Tuple{}
  ######tup#7205#7206#7705::Tuple{}
  ####_var0#7207#7706::Tuple{}
  ##a1#7707::Float64
  ##a2#7708::Float64
  ######a#7083#7152#7709::Tuple{}
  ######b#7084#7153#7710::Tuple{}
  ######afactor#7085#7154#7711::Float64
  ######bfactor#7086#7155#7712::Float64
  ####_var0#7156#7713::Tuple{}
  ##a1#7714::Float64
  ##a2#7715::Float64
  ##div_a#7716::Float64
  ####afactor#7093#7717::Float64
  ####bfactor#7094#7718::Float64
  ########a#7083#7087#7095#7719::Tuple{}
  ########b#7084#7088#7096#7720::Tuple{}
  ########afactor#7085#7089#7097#7721::Float64
  ########bfactor#7086#7090#7098#7722::Float64
  ######_var0#7091#7099#7723::Tuple{}
  ######types#7092#7100#7724::Tuple{Type{Float64}}
  ##exp_a#7725::Float64
  ####G#7243#7726::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7244#7727::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7245#7728::Tuple{}
  ##########x#7070#7072#7076#7246#7729::Float64
  ########_var0#7073#7077#7247#7730::Tuple{}
  ##xs#7731::Tuple{}
  ##div_a#7732::Float64
  ######tup#7652#7654#7733::Tuple{}
  ######x#7653#7655#7734::Float64
  ####_var0#7656#7735::Tuple{}
  ######types#7131#7657#7736::Tuple{Type{Float64}}
  ##sqrt_a#7737::Float64
  ##deriv#7738::Float64
  ####G#7142#7739::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7143#7740::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7144#7741::Tuple{}
  ##########x#7070#7072#7076#7145#7742::Float64
  ########_var0#7073#7077#7146#7743::Tuple{}
  ##a1#7744::Float64
  ##a2#7745::Float64
  ######a#7083#7152#7746::Tuple{}
  ######b#7084#7153#7747::Tuple{}
  ######afactor#7085#7154#7748::Float64
  ######bfactor#7086#7155#7749::Float64
  ####_var0#7156#7750::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 77:
      NewvarNode(:μ)
      NewvarNode(:λ)
      NewvarNode(symbol("#s25"))
      ####fy#7643#7676 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(0.0,####fy#7643#7676::Float64)::Bool,(Base.lt_float)(####fy#7643#7676::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7643#7676::Float64)),x::Int64)::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 78:
      GenSym(17) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.InverseGaussian{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      λ = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 79:
      ##div_a#7732 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.mul_int)(x::Int64,x::Int64)),x::Int64))))))))
      $(Expr(:boundscheck, false))
      ####_var0#7656#7735 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7656#7735 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7732::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7737 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7738 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7737::Float64))
      ####G#7142#7739 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7146#7743 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7073#7077#7146#7743 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7737::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7207#7706 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7207#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7660#7695 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7660#7695 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7697 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7698 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7699 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7697::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7700 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7704 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7073#7077#7082#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7698::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7707 = GenSym(5)
      ##a2#7708 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7713 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7156#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7707::Float64,##a2#7708::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7677 = (top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7678 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7679 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7677::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7680 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7684 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7678::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7134#7138#7670#7688 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7134#7138#7670#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ######_var0#7666#7674#7692 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7666#7674#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = (top(getfield))(GenSym(7),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7714 = GenSym(8)
      ##a2#7715 = GenSym(9)
      ##div_a#7716 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7714::Float64,##a2#7715::Float64))
      ####afactor#7093#7717 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7715::Float64))
      ####bfactor#7094#7718 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7714::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7715::Float64,##a2#7715::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7723 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7091#7099#7723 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7716::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7725 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(10),:value)::Float64,0)::Float64
      ####G#7243#7726 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7247#7730 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7073#7077#7247#7730 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7725::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7744 = GenSym(15)
      ##a2#7745 = GenSym(16)
      $(Expr(:boundscheck, false))
      ####_var0#7156#7750 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7156#7750 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7744::Float64,##a2#7745::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegaussian.jl, line 81:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





