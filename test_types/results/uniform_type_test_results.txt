____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 44:
      return (top(tuple))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 52:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  w::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      w = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,w::Float64)),12.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}
  w::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      w = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,w::Float64)),12.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7119::Tuple{}
  ######b#7094#7096#7120::Tuple{}
  ####_var0#7097#7121::Tuple{}
  ##a#7122::Float64
  ##exp_a#7123::Float64
  ##deriv#7124::Float64
  ####G#7108#7125::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7109#7126::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7110#7127::Tuple{}
  ##########x#7100#7102#7106#7111#7128::Float64
  ########_var0#7103#7107#7112#7129::Tuple{}
  ##div_a#7130::Float64
  ######tup#7113#7115#7131::Tuple{}
  ######x#7114#7116#7132::Float64
  ####_var0#7117#7133::Tuple{}
  ######types#7069#7118#7134::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7121 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7122 = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7123 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7124 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7108#7125 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7112#7129 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7112#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7123::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7130 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,12.0))
      $(Expr(:boundscheck, false))
      ####_var0#7117#7133 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7117#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7130::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  w::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      w = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,w::Float64)),12.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}
  w::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      w = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(w::Float64,w::Float64)),12.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7119::Tuple{}
  ######b#7094#7096#7120::Tuple{}
  ####_var0#7097#7121::Tuple{}
  ##a#7122::Float64
  ##exp_a#7123::Float64
  ##deriv#7124::Float64
  ####G#7108#7125::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7109#7126::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7110#7127::Tuple{}
  ##########x#7100#7102#7106#7111#7128::Float64
  ########_var0#7103#7107#7112#7129::Tuple{}
  ##div_a#7130::Float64
  ######tup#7113#7115#7131::Tuple{}
  ######x#7114#7116#7132::Float64
  ####_var0#7117#7133::Tuple{}
  ######types#7069#7118#7134::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7121 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7122 = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7123 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7124 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7108#7125 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7112#7129 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7112#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7123::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7130 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,12.0))
      $(Expr(:boundscheck, false))
      ####_var0#7117#7133 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7117#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7130::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7119::Tuple{}
  ######b#7094#7096#7120::Tuple{}
  ####_var0#7097#7121::Tuple{}
  ##a#7122::Float64
  ##exp_a#7123::Float64
  ##deriv#7124::Float64
  ####G#7108#7125::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7109#7126::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7110#7127::Tuple{}
  ##########x#7100#7102#7106#7111#7128::Float64
  ########_var0#7103#7107#7112#7129::Tuple{}
  ##div_a#7130::Float64
  ######tup#7113#7115#7131::Tuple{}
  ######x#7114#7116#7132::Float64
  ####_var0#7117#7133::Tuple{}
  ######types#7069#7118#7134::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7121 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7122 = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7123 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7124 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7108#7125 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7112#7129 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7112#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7123::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7130 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,12.0))
      $(Expr(:boundscheck, false))
      ####_var0#7117#7133 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7117#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7130::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7119::Tuple{}
  ######b#7094#7096#7120::Tuple{}
  ####_var0#7097#7121::Tuple{}
  ##a#7122::Float64
  ##exp_a#7123::Float64
  ##deriv#7124::Float64
  ####G#7108#7125::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7109#7126::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7110#7127::Tuple{}
  ##########x#7100#7102#7106#7111#7128::Float64
  ########_var0#7103#7107#7112#7129::Tuple{}
  ##div_a#7130::Float64
  ######tup#7113#7115#7131::Tuple{}
  ######x#7114#7116#7132::Float64
  ####_var0#7117#7133::Tuple{}
  ######types#7069#7118#7134::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7121 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7122 = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7123 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7124 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7108#7125 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7112#7129 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7112#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7123::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7130 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,12.0))
      $(Expr(:boundscheck, false))
      ####_var0#7117#7133 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7117#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7130::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  w::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7119::Tuple{}
  ######b#7094#7096#7120::Tuple{}
  ####_var0#7097#7121::Tuple{}
  ##a#7122::Float64
  ##exp_a#7123::Float64
  ##deriv#7124::Float64
  ####G#7108#7125::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7109#7126::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7110#7127::Tuple{}
  ##########x#7100#7102#7106#7111#7128::Float64
  ########_var0#7103#7107#7112#7129::Tuple{}
  ##div_a#7130::Float64
  ######tup#7113#7115#7131::Tuple{}
  ######x#7114#7116#7132::Float64
  ####_var0#7117#7133::Tuple{}
  ######types#7069#7118#7134::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7121 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7121 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      w = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7122 = (top(getfield))(w::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7123 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7124 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7122::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7108#7125 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7112#7129 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7112#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7123::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7130 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,12.0))
      $(Expr(:boundscheck, false))
      ####_var0#7117#7133 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7117#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7130::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 54:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 55:
      return (Distributions.getindex)(Distributions.Float64)::Array{Float64,1}
  end::Array{Float64,1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 53:
      return (Distributions.middle)((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.2,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.2,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7099#7145#7149#7153::Tuple{}
  ########x#7100#7146#7150#7154::Float64
  ######_var0#7147#7151#7155::Tuple{}
  ########types#7069#7148#7152#7156::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7155 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7147#7151#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.2))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.2,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      return (Base.box)(Base.Float64,(Base.mul_float)(-1.2,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7099#7145#7149#7153::Tuple{}
  ########x#7100#7146#7150#7154::Float64
  ######_var0#7147#7151#7155::Tuple{}
  ########types#7069#7148#7152#7156::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7155 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7147#7151#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.2))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7099#7145#7149#7153::Tuple{}
  ########x#7100#7146#7150#7154::Float64
  ######_var0#7147#7151#7155::Tuple{}
  ########types#7069#7148#7152#7156::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7155 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7147#7151#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.2))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7099#7145#7149#7153::Tuple{}
  ########x#7100#7146#7150#7154::Float64
  ######_var0#7147#7151#7155::Tuple{}
  ########types#7069#7148#7152#7156::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7155 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7147#7151#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.2))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7099#7145#7149#7153::Tuple{}
  ########x#7100#7146#7150#7154::Float64
  ######_var0#7147#7151#7155::Tuple{}
  ########types#7069#7148#7152#7156::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 60:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7155 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7147#7151#7155 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-1.2))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7093#7095#7164::Tuple{}
  ######b#7094#7096#7165::Tuple{}
  ####_var0#7097#7166::Tuple{}
  ##a#7167::Float64
  ####G#7159#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7160#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7161#7170::Tuple{}
  ##########x#7100#7102#7106#7162#7171::Float64
  ########_var0#7103#7107#7163#7172::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7166 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7167 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7167::Float64,0)::Float64
      ####G#7159#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7163#7172 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7163#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7167::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7093#7095#7164::Tuple{}
  ######b#7094#7096#7165::Tuple{}
  ####_var0#7097#7166::Tuple{}
  ##a#7167::Float64
  ####G#7159#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7160#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7161#7170::Tuple{}
  ##########x#7100#7102#7106#7162#7171::Float64
  ########_var0#7103#7107#7163#7172::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7166 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7167 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7167::Float64,0)::Float64
      ####G#7159#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7163#7172 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7163#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7167::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7093#7095#7164::Tuple{}
  ######b#7094#7096#7165::Tuple{}
  ####_var0#7097#7166::Tuple{}
  ##a#7167::Float64
  ####G#7159#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7160#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7161#7170::Tuple{}
  ##########x#7100#7102#7106#7162#7171::Float64
  ########_var0#7103#7107#7163#7172::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7166 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7167 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7167::Float64,0)::Float64
      ####G#7159#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7163#7172 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7163#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7167::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7093#7095#7164::Tuple{}
  ######b#7094#7096#7165::Tuple{}
  ####_var0#7097#7166::Tuple{}
  ##a#7167::Float64
  ####G#7159#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7160#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7161#7170::Tuple{}
  ##########x#7100#7102#7106#7162#7171::Float64
  ########_var0#7103#7107#7163#7172::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7166 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7167 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7167::Float64,0)::Float64
      ####G#7159#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7163#7172 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7163#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7167::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7093#7095#7164::Tuple{}
  ######b#7094#7096#7165::Tuple{}
  ####_var0#7097#7166::Tuple{}
  ##a#7167::Float64
  ####G#7159#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7160#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7161#7170::Tuple{}
  ##########x#7100#7102#7106#7162#7171::Float64
  ########_var0#7103#7107#7163#7172::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7166 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7097#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7167 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7167::Float64,0)::Float64
      ####G#7159#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7163#7172 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7103#7107#7163#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7167::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  ####_var0#7175#7177::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7178::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7177 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7177 = false
      2: 
      ####_var0#7175#7177::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7178 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7178 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7178::Float64,1.0))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}
  ####_var0#7175#7177::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7178::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7177 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7177 = false
      2: 
      ####_var0#7175#7177::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7178 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7178 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7178::Float64,1.0))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7175#7179::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7180::Float64
  ######a#7093#7095#7181::Tuple{}
  ######b#7094#7096#7182::Tuple{}
  ####_var0#7097#7183::Tuple{}
  ######tup#7099#7145#7184::Tuple{}
  ######x#7100#7146#7185::Float64
  ####_var0#7147#7186::Tuple{}
  ######types#7069#7148#7187::Tuple{Type{Float64}}
  ######a#7074#7076#7188::Tuple{}
  ######b#7075#7077#7189::Tuple{}
  ####_var0#7078#7190::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7183 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7097#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7179 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7179 = false
      2: 
      ####_var0#7175#7179::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7180 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7180::Float64,1.0))
      $(Expr(:boundscheck, false))
      ####_var0#7147#7186 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7147#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7078#7190 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  ####_var0#7175#7177::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7178::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7177 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7177 = false
      2: 
      ####_var0#7175#7177::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7178 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7178 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7178::Float64,1.0))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}
  ####_var0#7175#7177::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7178::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7177 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7177 = false
      2: 
      ####_var0#7175#7177::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7178 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7178 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7178::Float64,1.0))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7175#7179::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7180::Float64
  ######a#7093#7095#7181::Tuple{}
  ######b#7094#7096#7182::Tuple{}
  ####_var0#7097#7183::Tuple{}
  ######tup#7099#7145#7184::Tuple{}
  ######x#7100#7146#7185::Float64
  ####_var0#7147#7186::Tuple{}
  ######types#7069#7148#7187::Tuple{Type{Float64}}
  ######a#7074#7076#7188::Tuple{}
  ######b#7075#7077#7189::Tuple{}
  ####_var0#7078#7190::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7183 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7097#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7179 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7179 = false
      2: 
      ####_var0#7175#7179::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7180 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7180::Float64,1.0))
      $(Expr(:boundscheck, false))
      ####_var0#7147#7186 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7147#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7078#7190 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7175#7179::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7180::Float64
  ######a#7093#7095#7181::Tuple{}
  ######b#7094#7096#7182::Tuple{}
  ####_var0#7097#7183::Tuple{}
  ######tup#7099#7145#7184::Tuple{}
  ######x#7100#7146#7185::Float64
  ####_var0#7147#7186::Tuple{}
  ######types#7069#7148#7187::Tuple{Type{Float64}}
  ######a#7074#7076#7188::Tuple{}
  ######b#7075#7077#7189::Tuple{}
  ####_var0#7078#7190::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7183 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7097#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7179 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7179 = false
      2: 
      ####_var0#7175#7179::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7180 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7180::Float64,1.0))
      $(Expr(:boundscheck, false))
      ####_var0#7147#7186 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7147#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7078#7190 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7175#7179::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7180::Float64
  ######a#7093#7095#7181::Tuple{}
  ######b#7094#7096#7182::Tuple{}
  ####_var0#7097#7183::Tuple{}
  ######tup#7099#7145#7184::Tuple{}
  ######x#7100#7146#7185::Float64
  ####_var0#7147#7186::Tuple{}
  ######types#7069#7148#7187::Tuple{Type{Float64}}
  ######a#7074#7076#7188::Tuple{}
  ######b#7075#7077#7189::Tuple{}
  ####_var0#7078#7190::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7183 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7097#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7179 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7179 = false
      2: 
      ####_var0#7175#7179::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7180 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7180::Float64,1.0))
      $(Expr(:boundscheck, false))
      ####_var0#7147#7186 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7147#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7078#7190 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7175#7179::UNION{BOOL,INT64}
  ########_var0#7173#7174#7176#7180::Float64
  ######a#7093#7095#7181::Tuple{}
  ######b#7094#7096#7182::Tuple{}
  ####_var0#7097#7183::Tuple{}
  ######tup#7099#7145#7184::Tuple{}
  ######x#7100#7146#7185::Float64
  ####_var0#7147#7186::Tuple{}
  ######types#7069#7148#7187::Tuple{Type{Float64}}
  ######a#7074#7076#7188::Tuple{}
  ######b#7075#7077#7189::Tuple{}
  ####_var0#7078#7190::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 105:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7183 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7097#7183 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7175#7179 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7175#7179 = false
      2: 
      ####_var0#7175#7179::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7173#7174#7176#7180 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7173#7174#7176#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7173#7174#7176#7180::Float64,1.0))
      $(Expr(:boundscheck, false))
      ####_var0#7147#7186 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7147#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7078#7190 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######a#7093#7095#7202::Tuple{}
  ######b#7094#7096#7203::Tuple{}
  ####_var0#7097#7204::Tuple{}
  ##a#7205::Float64
  ##div_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7197#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7198#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7199#7210::Tuple{}
  ##########x#7100#7102#7106#7200#7211::Float64
  ########_var0#7103#7107#7201#7212::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7097#7204 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7097#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7206 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7205::Float64))
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7206::Float64,##a#7205::Float64))))
      ####G#7197#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7201#7212 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7103#7107#7201#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64,(top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######a#7093#7095#7202::Tuple{}
  ######b#7094#7096#7203::Tuple{}
  ####_var0#7097#7204::Tuple{}
  ##a#7205::Float64
  ##div_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7197#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7198#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7199#7210::Tuple{}
  ##########x#7100#7102#7106#7200#7211::Float64
  ########_var0#7103#7107#7201#7212::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7097#7204 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7097#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7206 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7205::Float64))
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7206::Float64,##a#7205::Float64))))
      ####G#7197#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7201#7212 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7103#7107#7201#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######a#7093#7095#7202::Tuple{}
  ######b#7094#7096#7203::Tuple{}
  ####_var0#7097#7204::Tuple{}
  ##a#7205::Float64
  ##div_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7197#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7198#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7199#7210::Tuple{}
  ##########x#7100#7102#7106#7200#7211::Float64
  ########_var0#7103#7107#7201#7212::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7097#7204 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7097#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7206 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7205::Float64))
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7206::Float64,##a#7205::Float64))))
      ####G#7197#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7201#7212 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7103#7107#7201#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######a#7093#7095#7202::Tuple{}
  ######b#7094#7096#7203::Tuple{}
  ####_var0#7097#7204::Tuple{}
  ##a#7205::Float64
  ##div_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7197#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7198#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7199#7210::Tuple{}
  ##########x#7100#7102#7106#7200#7211::Float64
  ########_var0#7103#7107#7201#7212::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7097#7204 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7097#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7206 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7205::Float64))
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7206::Float64,##a#7205::Float64))))
      ####G#7197#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7201#7212 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7103#7107#7201#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######a#7093#7095#7202::Tuple{}
  ######b#7094#7096#7203::Tuple{}
  ####_var0#7097#7204::Tuple{}
  ##a#7205::Float64
  ##div_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7197#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7198#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7199#7210::Tuple{}
  ##########x#7100#7102#7106#7200#7211::Float64
  ########_var0#7103#7107#7201#7212::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 67:
      unless (Distributions.insupport)(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7097#7204 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7097#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##a#7205 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7206 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7205::Float64))
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7206::Float64,##a#7205::Float64))))
      ####G#7197#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7201#7212 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7103#7107#7201#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7213::Tuple{}
  ##xs#7214::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(7) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),(Base.box)(Base.Float64,(Base.div_float)(GenSym(4),u::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7213::Tuple{}
  ##xs#7214::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(7) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),(Base.box)(Base.Float64,(Base.div_float)(GenSym(4),u::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7266::Tuple{}
  ######b#7094#7096#7267::Tuple{}
  ####_var0#7097#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7099#7145#7149#7225#7270::Tuple{}
  ##########x#7100#7146#7150#7226#7271::Float64
  ########_var0#7147#7151#7227#7272::Tuple{}
  ##########types#7069#7148#7152#7228#7273::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7274::Tuple{}
  ########x#7219#7222#7230#7275::Int64
  ######_var0#7223#7231#7276::Tuple{}
  ########types#7220#7224#7232#7277::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7278::Tuple{}
  ######b#7075#7077#7279::Tuple{}
  ####_var0#7078#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7099#7145#7149#7225#7282::Tuple{}
  ##########x#7100#7146#7150#7226#7283::Float64
  ########_var0#7147#7151#7227#7284::Tuple{}
  ##########types#7069#7148#7152#7228#7285::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7286::Tuple{}
  ########x#7219#7222#7230#7287::Int64
  ######_var0#7223#7231#7288::Tuple{}
  ########types#7220#7224#7232#7289::Tuple{Type{Int64}}
  ##a#7290::Float64
  ####G#7238#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7239#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7240#7293::Tuple{}
  ##########x#7100#7102#7106#7241#7294::Float64
  ########_var0#7103#7107#7242#7295::Tuple{}
  ##a1#7296::Float64
  ##a2#7297::Float64
  ##div_a#7298::Float64
  ####afactor#7253#7299::Float64
  ####bfactor#7254#7300::Float64
  ########a#7243#7247#7255#7301::Tuple{}
  ########b#7244#7248#7256#7302::Tuple{}
  ########afactor#7245#7249#7257#7303::Float64
  ########bfactor#7246#7250#7258#7304::Float64
  ######_var0#7251#7259#7305::Tuple{}
  ######types#7252#7260#7306::Tuple{Type{Float64}}
  ##exp_a#7307::Float64
  ####G#7233#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7234#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7235#7310::Tuple{}
  ##########x#7100#7102#7106#7236#7311::Float64
  ########_var0#7103#7107#7237#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ######a#7243#7261#7315::Tuple{}
  ######b#7244#7262#7316::Tuple{}
  ######afactor#7245#7263#7317::Float64
  ######bfactor#7246#7264#7318::Float64
  ####_var0#7265#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(14) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7268 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7272 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7276 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7280 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7284 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7147#7151#7227#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7288 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7223#7231#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      ##exp_a#7307 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7233#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7237#7312 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7103#7107#7237#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7307::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7290 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      ####G#7238#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7242#7295 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7103#7107#7242#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7296 = GenSym(7)
      ##a2#7297 = GenSym(8)
      ##div_a#7298 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7296::Float64,##a2#7297::Float64))
      ####afactor#7253#7299 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7297::Float64))
      ####bfactor#7254#7300 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7296::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7297::Float64,##a2#7297::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7305 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7251#7259#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7298::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      ##a1#7313 = GenSym(12)
      ##a2#7314 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7265#7319 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7265#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7313::Float64,##a2#7314::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7213::Tuple{}
  ##xs#7214::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(7) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),(Base.box)(Base.Float64,(Base.div_float)(GenSym(4),u::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7213::Tuple{}
  ##xs#7214::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(7) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),(Base.box)(Base.Float64,(Base.div_float)(GenSym(4),u::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7266::Tuple{}
  ######b#7094#7096#7267::Tuple{}
  ####_var0#7097#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7099#7145#7149#7225#7270::Tuple{}
  ##########x#7100#7146#7150#7226#7271::Float64
  ########_var0#7147#7151#7227#7272::Tuple{}
  ##########types#7069#7148#7152#7228#7273::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7274::Tuple{}
  ########x#7219#7222#7230#7275::Int64
  ######_var0#7223#7231#7276::Tuple{}
  ########types#7220#7224#7232#7277::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7278::Tuple{}
  ######b#7075#7077#7279::Tuple{}
  ####_var0#7078#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7099#7145#7149#7225#7282::Tuple{}
  ##########x#7100#7146#7150#7226#7283::Float64
  ########_var0#7147#7151#7227#7284::Tuple{}
  ##########types#7069#7148#7152#7228#7285::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7286::Tuple{}
  ########x#7219#7222#7230#7287::Int64
  ######_var0#7223#7231#7288::Tuple{}
  ########types#7220#7224#7232#7289::Tuple{Type{Int64}}
  ##a#7290::Float64
  ####G#7238#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7239#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7240#7293::Tuple{}
  ##########x#7100#7102#7106#7241#7294::Float64
  ########_var0#7103#7107#7242#7295::Tuple{}
  ##a1#7296::Float64
  ##a2#7297::Float64
  ##div_a#7298::Float64
  ####afactor#7253#7299::Float64
  ####bfactor#7254#7300::Float64
  ########a#7243#7247#7255#7301::Tuple{}
  ########b#7244#7248#7256#7302::Tuple{}
  ########afactor#7245#7249#7257#7303::Float64
  ########bfactor#7246#7250#7258#7304::Float64
  ######_var0#7251#7259#7305::Tuple{}
  ######types#7252#7260#7306::Tuple{Type{Float64}}
  ##exp_a#7307::Float64
  ####G#7233#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7234#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7235#7310::Tuple{}
  ##########x#7100#7102#7106#7236#7311::Float64
  ########_var0#7103#7107#7237#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ######a#7243#7261#7315::Tuple{}
  ######b#7244#7262#7316::Tuple{}
  ######afactor#7245#7263#7317::Float64
  ######bfactor#7246#7264#7318::Float64
  ####_var0#7265#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(14) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7268 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7272 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7276 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7280 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7284 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7147#7151#7227#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7288 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7223#7231#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      ##exp_a#7307 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7233#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7237#7312 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7103#7107#7237#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7307::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7290 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      ####G#7238#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7242#7295 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7103#7107#7242#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7296 = GenSym(7)
      ##a2#7297 = GenSym(8)
      ##div_a#7298 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7296::Float64,##a2#7297::Float64))
      ####afactor#7253#7299 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7297::Float64))
      ####bfactor#7254#7300 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7296::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7297::Float64,##a2#7297::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7305 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7251#7259#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7298::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      ##a1#7313 = GenSym(12)
      ##a2#7314 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7265#7319 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7265#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7313::Float64,##a2#7314::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7266::Tuple{}
  ######b#7094#7096#7267::Tuple{}
  ####_var0#7097#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7099#7145#7149#7225#7270::Tuple{}
  ##########x#7100#7146#7150#7226#7271::Float64
  ########_var0#7147#7151#7227#7272::Tuple{}
  ##########types#7069#7148#7152#7228#7273::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7274::Tuple{}
  ########x#7219#7222#7230#7275::Int64
  ######_var0#7223#7231#7276::Tuple{}
  ########types#7220#7224#7232#7277::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7278::Tuple{}
  ######b#7075#7077#7279::Tuple{}
  ####_var0#7078#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7099#7145#7149#7225#7282::Tuple{}
  ##########x#7100#7146#7150#7226#7283::Float64
  ########_var0#7147#7151#7227#7284::Tuple{}
  ##########types#7069#7148#7152#7228#7285::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7286::Tuple{}
  ########x#7219#7222#7230#7287::Int64
  ######_var0#7223#7231#7288::Tuple{}
  ########types#7220#7224#7232#7289::Tuple{Type{Int64}}
  ##a#7290::Float64
  ####G#7238#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7239#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7240#7293::Tuple{}
  ##########x#7100#7102#7106#7241#7294::Float64
  ########_var0#7103#7107#7242#7295::Tuple{}
  ##a1#7296::Float64
  ##a2#7297::Float64
  ##div_a#7298::Float64
  ####afactor#7253#7299::Float64
  ####bfactor#7254#7300::Float64
  ########a#7243#7247#7255#7301::Tuple{}
  ########b#7244#7248#7256#7302::Tuple{}
  ########afactor#7245#7249#7257#7303::Float64
  ########bfactor#7246#7250#7258#7304::Float64
  ######_var0#7251#7259#7305::Tuple{}
  ######types#7252#7260#7306::Tuple{Type{Float64}}
  ##exp_a#7307::Float64
  ####G#7233#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7234#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7235#7310::Tuple{}
  ##########x#7100#7102#7106#7236#7311::Float64
  ########_var0#7103#7107#7237#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ######a#7243#7261#7315::Tuple{}
  ######b#7244#7262#7316::Tuple{}
  ######afactor#7245#7263#7317::Float64
  ######bfactor#7246#7264#7318::Float64
  ####_var0#7265#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(14) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7268 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7272 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7276 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7280 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7284 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7147#7151#7227#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7288 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7223#7231#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      ##exp_a#7307 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7233#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7237#7312 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7103#7107#7237#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7307::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7290 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      ####G#7238#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7242#7295 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7103#7107#7242#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7296 = GenSym(7)
      ##a2#7297 = GenSym(8)
      ##div_a#7298 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7296::Float64,##a2#7297::Float64))
      ####afactor#7253#7299 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7297::Float64))
      ####bfactor#7254#7300 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7296::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7297::Float64,##a2#7297::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7305 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7251#7259#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7298::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      ##a1#7313 = GenSym(12)
      ##a2#7314 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7265#7319 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7265#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7313::Float64,##a2#7314::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7266::Tuple{}
  ######b#7094#7096#7267::Tuple{}
  ####_var0#7097#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7099#7145#7149#7225#7270::Tuple{}
  ##########x#7100#7146#7150#7226#7271::Float64
  ########_var0#7147#7151#7227#7272::Tuple{}
  ##########types#7069#7148#7152#7228#7273::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7274::Tuple{}
  ########x#7219#7222#7230#7275::Int64
  ######_var0#7223#7231#7276::Tuple{}
  ########types#7220#7224#7232#7277::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7278::Tuple{}
  ######b#7075#7077#7279::Tuple{}
  ####_var0#7078#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7099#7145#7149#7225#7282::Tuple{}
  ##########x#7100#7146#7150#7226#7283::Float64
  ########_var0#7147#7151#7227#7284::Tuple{}
  ##########types#7069#7148#7152#7228#7285::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7286::Tuple{}
  ########x#7219#7222#7230#7287::Int64
  ######_var0#7223#7231#7288::Tuple{}
  ########types#7220#7224#7232#7289::Tuple{Type{Int64}}
  ##a#7290::Float64
  ####G#7238#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7239#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7240#7293::Tuple{}
  ##########x#7100#7102#7106#7241#7294::Float64
  ########_var0#7103#7107#7242#7295::Tuple{}
  ##a1#7296::Float64
  ##a2#7297::Float64
  ##div_a#7298::Float64
  ####afactor#7253#7299::Float64
  ####bfactor#7254#7300::Float64
  ########a#7243#7247#7255#7301::Tuple{}
  ########b#7244#7248#7256#7302::Tuple{}
  ########afactor#7245#7249#7257#7303::Float64
  ########bfactor#7246#7250#7258#7304::Float64
  ######_var0#7251#7259#7305::Tuple{}
  ######types#7252#7260#7306::Tuple{Type{Float64}}
  ##exp_a#7307::Float64
  ####G#7233#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7234#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7235#7310::Tuple{}
  ##########x#7100#7102#7106#7236#7311::Float64
  ########_var0#7103#7107#7237#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ######a#7243#7261#7315::Tuple{}
  ######b#7244#7262#7316::Tuple{}
  ######afactor#7245#7263#7317::Float64
  ######bfactor#7246#7264#7318::Float64
  ####_var0#7265#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(14) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7268 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7272 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7276 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7280 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7284 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7147#7151#7227#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7288 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7223#7231#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      ##exp_a#7307 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7233#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7237#7312 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7103#7107#7237#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7307::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7290 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      ####G#7238#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7242#7295 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7103#7107#7242#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7296 = GenSym(7)
      ##a2#7297 = GenSym(8)
      ##div_a#7298 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7296::Float64,##a2#7297::Float64))
      ####afactor#7253#7299 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7297::Float64))
      ####bfactor#7254#7300 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7296::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7297::Float64,##a2#7297::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7305 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7251#7259#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7298::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      ##a1#7313 = GenSym(12)
      ##a2#7314 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7265#7319 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7265#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7313::Float64,##a2#7314::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7266::Tuple{}
  ######b#7094#7096#7267::Tuple{}
  ####_var0#7097#7268::Tuple{}
  ##xs#7269::Tuple{}
  ##########tup#7099#7145#7149#7225#7270::Tuple{}
  ##########x#7100#7146#7150#7226#7271::Float64
  ########_var0#7147#7151#7227#7272::Tuple{}
  ##########types#7069#7148#7152#7228#7273::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7274::Tuple{}
  ########x#7219#7222#7230#7275::Int64
  ######_var0#7223#7231#7276::Tuple{}
  ########types#7220#7224#7232#7277::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7278::Tuple{}
  ######b#7075#7077#7279::Tuple{}
  ####_var0#7078#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7099#7145#7149#7225#7282::Tuple{}
  ##########x#7100#7146#7150#7226#7283::Float64
  ########_var0#7147#7151#7227#7284::Tuple{}
  ##########types#7069#7148#7152#7228#7285::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7286::Tuple{}
  ########x#7219#7222#7230#7287::Int64
  ######_var0#7223#7231#7288::Tuple{}
  ########types#7220#7224#7232#7289::Tuple{Type{Int64}}
  ##a#7290::Float64
  ####G#7238#7291::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7239#7292::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7240#7293::Tuple{}
  ##########x#7100#7102#7106#7241#7294::Float64
  ########_var0#7103#7107#7242#7295::Tuple{}
  ##a1#7296::Float64
  ##a2#7297::Float64
  ##div_a#7298::Float64
  ####afactor#7253#7299::Float64
  ####bfactor#7254#7300::Float64
  ########a#7243#7247#7255#7301::Tuple{}
  ########b#7244#7248#7256#7302::Tuple{}
  ########afactor#7245#7249#7257#7303::Float64
  ########bfactor#7246#7250#7258#7304::Float64
  ######_var0#7251#7259#7305::Tuple{}
  ######types#7252#7260#7306::Tuple{Type{Float64}}
  ##exp_a#7307::Float64
  ####G#7233#7308::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7234#7309::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7235#7310::Tuple{}
  ##########x#7100#7102#7106#7236#7311::Float64
  ########_var0#7103#7107#7237#7312::Tuple{}
  ##a1#7313::Float64
  ##a2#7314::Float64
  ######a#7243#7261#7315::Tuple{}
  ######b#7244#7262#7316::Tuple{}
  ######afactor#7245#7263#7317::Float64
  ######bfactor#7246#7264#7318::Float64
  ####_var0#7265#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 87:
      NewvarNode(:v)
      GenSym(14) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 88:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7268 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7272 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7276 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 89:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7280 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7284 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7147#7151#7227#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7288 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7223#7231#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 91:
      ##exp_a#7307 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7233#7308 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7237#7312 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7103#7107#7237#7312 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7307::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7290 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7290::Float64,0)::Float64
      ####G#7238#7291 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7242#7295 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7103#7107#7242#7295 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7296 = GenSym(7)
      ##a2#7297 = GenSym(8)
      ##div_a#7298 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7296::Float64,##a2#7297::Float64))
      ####afactor#7253#7299 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7297::Float64))
      ####bfactor#7254#7300 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7296::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7297::Float64,##a2#7297::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7305 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7251#7259#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7298::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      GenSym(13) = (top(getfield))(GenSym(11),:value)::Float64
      ##a1#7313 = GenSym(12)
      ##a2#7314 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7265#7319 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7265#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7313::Float64,##a2#7314::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7320::Tuple{}
  ##xs#7321::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(11) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),v::Float64)::Float64), :((Base.Math.nan_dom_err)(GenSym(6),v::Float64)::Float64)))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(4),u::Float64)::Float64,u::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7320::Tuple{}
  ##xs#7321::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(11) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),v::Float64)::Float64), :((Base.Math.nan_dom_err)(GenSym(6),v::Float64)::Float64)))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(4),u::Float64)::Float64,u::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7358::Tuple{}
  ######b#7094#7096#7359::Tuple{}
  ####_var0#7097#7360::Tuple{}
  ##xs#7361::Tuple{}
  ##########tup#7099#7145#7149#7225#7362::Tuple{}
  ##########x#7100#7146#7150#7226#7363::Float64
  ########_var0#7147#7151#7227#7364::Tuple{}
  ##########types#7069#7148#7152#7228#7365::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7366::Tuple{}
  ########x#7219#7222#7230#7367::Int64
  ######_var0#7223#7231#7368::Tuple{}
  ########types#7220#7224#7232#7369::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7370::Tuple{}
  ######b#7075#7077#7371::Tuple{}
  ####_var0#7078#7372::Tuple{}
  ##xs#7373::Tuple{}
  ##########tup#7099#7145#7149#7225#7374::Tuple{}
  ##########x#7100#7146#7150#7226#7375::Float64
  ########_var0#7147#7151#7227#7376::Tuple{}
  ##########types#7069#7148#7152#7228#7377::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7378::Tuple{}
  ########x#7219#7222#7230#7379::Int64
  ######_var0#7223#7231#7380::Tuple{}
  ########types#7220#7224#7232#7381::Tuple{Type{Int64}}
  ##a#7382::Float64
  ####G#7327#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7328#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7329#7385::Tuple{}
  ##########x#7100#7102#7106#7330#7386::Float64
  ########_var0#7103#7107#7331#7387::Tuple{}
  ##a1#7388::Float64
  ##a2#7389::Float64
  ##div_a#7390::Float64
  ####afactor#7253#7391::Float64
  ####bfactor#7254#7392::Float64
  ########a#7243#7247#7255#7393::Tuple{}
  ########b#7244#7248#7256#7394::Tuple{}
  ########afactor#7245#7249#7257#7395::Float64
  ########bfactor#7246#7250#7258#7396::Float64
  ######_var0#7251#7259#7397::Tuple{}
  ######types#7252#7260#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7360 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7368 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7368 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7372 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7078#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7376 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7147#7151#7227#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7380 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7223#7231#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(11) = (Distributions.cis)(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7382 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      ####G#7327#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7331#7387 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7103#7107#7331#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7382::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7388 = GenSym(9)
      ##a2#7389 = GenSym(10)
      ##div_a#7390 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7388::Float64,##a2#7389::Float64))
      ####afactor#7253#7391 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7389::Float64))
      ####bfactor#7254#7392 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7388::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7389::Float64,##a2#7389::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7397 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7251#7259#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return GenSym(11) * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7390::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7320::Tuple{}
  ##xs#7321::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(11) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),v::Float64)::Float64), :((Base.Math.nan_dom_err)(GenSym(6),v::Float64)::Float64)))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(4),u::Float64)::Float64,u::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Uniform{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7320::Tuple{}
  ##xs#7321::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(11) = (top(getfield))(d::Distributions.Uniform{Float64},:a)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{Float64},:b)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      u = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      unless (Base.eq_float)(u::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,v::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),v::Float64)::Float64), :((Base.Math.nan_dom_err)(GenSym(6),v::Float64)::Float64)))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(4),u::Float64)::Float64,u::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7358::Tuple{}
  ######b#7094#7096#7359::Tuple{}
  ####_var0#7097#7360::Tuple{}
  ##xs#7361::Tuple{}
  ##########tup#7099#7145#7149#7225#7362::Tuple{}
  ##########x#7100#7146#7150#7226#7363::Float64
  ########_var0#7147#7151#7227#7364::Tuple{}
  ##########types#7069#7148#7152#7228#7365::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7366::Tuple{}
  ########x#7219#7222#7230#7367::Int64
  ######_var0#7223#7231#7368::Tuple{}
  ########types#7220#7224#7232#7369::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7370::Tuple{}
  ######b#7075#7077#7371::Tuple{}
  ####_var0#7078#7372::Tuple{}
  ##xs#7373::Tuple{}
  ##########tup#7099#7145#7149#7225#7374::Tuple{}
  ##########x#7100#7146#7150#7226#7375::Float64
  ########_var0#7147#7151#7227#7376::Tuple{}
  ##########types#7069#7148#7152#7228#7377::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7378::Tuple{}
  ########x#7219#7222#7230#7379::Int64
  ######_var0#7223#7231#7380::Tuple{}
  ########types#7220#7224#7232#7381::Tuple{Type{Int64}}
  ##a#7382::Float64
  ####G#7327#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7328#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7329#7385::Tuple{}
  ##########x#7100#7102#7106#7330#7386::Float64
  ########_var0#7103#7107#7331#7387::Tuple{}
  ##a1#7388::Float64
  ##a2#7389::Float64
  ##div_a#7390::Float64
  ####afactor#7253#7391::Float64
  ####bfactor#7254#7392::Float64
  ########a#7243#7247#7255#7393::Tuple{}
  ########b#7244#7248#7256#7394::Tuple{}
  ########afactor#7245#7249#7257#7395::Float64
  ########bfactor#7246#7250#7258#7396::Float64
  ######_var0#7251#7259#7397::Tuple{}
  ######types#7252#7260#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7360 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7368 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7368 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7372 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7078#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7376 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7147#7151#7227#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7380 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7223#7231#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(11) = (Distributions.cis)(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7382 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      ####G#7327#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7331#7387 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7103#7107#7331#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7382::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7388 = GenSym(9)
      ##a2#7389 = GenSym(10)
      ##div_a#7390 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7388::Float64,##a2#7389::Float64))
      ####afactor#7253#7391 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7389::Float64))
      ####bfactor#7254#7392 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7388::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7389::Float64,##a2#7389::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7397 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7251#7259#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return GenSym(11) * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7390::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7358::Tuple{}
  ######b#7094#7096#7359::Tuple{}
  ####_var0#7097#7360::Tuple{}
  ##xs#7361::Tuple{}
  ##########tup#7099#7145#7149#7225#7362::Tuple{}
  ##########x#7100#7146#7150#7226#7363::Float64
  ########_var0#7147#7151#7227#7364::Tuple{}
  ##########types#7069#7148#7152#7228#7365::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7366::Tuple{}
  ########x#7219#7222#7230#7367::Int64
  ######_var0#7223#7231#7368::Tuple{}
  ########types#7220#7224#7232#7369::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7370::Tuple{}
  ######b#7075#7077#7371::Tuple{}
  ####_var0#7078#7372::Tuple{}
  ##xs#7373::Tuple{}
  ##########tup#7099#7145#7149#7225#7374::Tuple{}
  ##########x#7100#7146#7150#7226#7375::Float64
  ########_var0#7147#7151#7227#7376::Tuple{}
  ##########types#7069#7148#7152#7228#7377::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7378::Tuple{}
  ########x#7219#7222#7230#7379::Int64
  ######_var0#7223#7231#7380::Tuple{}
  ########types#7220#7224#7232#7381::Tuple{Type{Int64}}
  ##a#7382::Float64
  ####G#7327#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7328#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7329#7385::Tuple{}
  ##########x#7100#7102#7106#7330#7386::Float64
  ########_var0#7103#7107#7331#7387::Tuple{}
  ##a1#7388::Float64
  ##a2#7389::Float64
  ##div_a#7390::Float64
  ####afactor#7253#7391::Float64
  ####bfactor#7254#7392::Float64
  ########a#7243#7247#7255#7393::Tuple{}
  ########b#7244#7248#7256#7394::Tuple{}
  ########afactor#7245#7249#7257#7395::Float64
  ########bfactor#7246#7250#7258#7396::Float64
  ######_var0#7251#7259#7397::Tuple{}
  ######types#7252#7260#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7360 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7368 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7368 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7372 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7078#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7376 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7147#7151#7227#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7380 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7223#7231#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(11) = (Distributions.cis)(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7382 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      ####G#7327#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7331#7387 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7103#7107#7331#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7382::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7388 = GenSym(9)
      ##a2#7389 = GenSym(10)
      ##div_a#7390 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7388::Float64,##a2#7389::Float64))
      ####afactor#7253#7391 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7389::Float64))
      ####bfactor#7254#7392 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7388::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7389::Float64,##a2#7389::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7397 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7251#7259#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return GenSym(11) * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7390::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7358::Tuple{}
  ######b#7094#7096#7359::Tuple{}
  ####_var0#7097#7360::Tuple{}
  ##xs#7361::Tuple{}
  ##########tup#7099#7145#7149#7225#7362::Tuple{}
  ##########x#7100#7146#7150#7226#7363::Float64
  ########_var0#7147#7151#7227#7364::Tuple{}
  ##########types#7069#7148#7152#7228#7365::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7366::Tuple{}
  ########x#7219#7222#7230#7367::Int64
  ######_var0#7223#7231#7368::Tuple{}
  ########types#7220#7224#7232#7369::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7370::Tuple{}
  ######b#7075#7077#7371::Tuple{}
  ####_var0#7078#7372::Tuple{}
  ##xs#7373::Tuple{}
  ##########tup#7099#7145#7149#7225#7374::Tuple{}
  ##########x#7100#7146#7150#7226#7375::Float64
  ########_var0#7147#7151#7227#7376::Tuple{}
  ##########types#7069#7148#7152#7228#7377::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7378::Tuple{}
  ########x#7219#7222#7230#7379::Int64
  ######_var0#7223#7231#7380::Tuple{}
  ########types#7220#7224#7232#7381::Tuple{Type{Int64}}
  ##a#7382::Float64
  ####G#7327#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7328#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7329#7385::Tuple{}
  ##########x#7100#7102#7106#7330#7386::Float64
  ########_var0#7103#7107#7331#7387::Tuple{}
  ##a1#7388::Float64
  ##a2#7389::Float64
  ##div_a#7390::Float64
  ####afactor#7253#7391::Float64
  ####bfactor#7254#7392::Float64
  ########a#7243#7247#7255#7393::Tuple{}
  ########b#7244#7248#7256#7394::Tuple{}
  ########afactor#7245#7249#7257#7395::Float64
  ########bfactor#7246#7250#7258#7396::Float64
  ######_var0#7251#7259#7397::Tuple{}
  ######types#7252#7260#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7360 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7368 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7368 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7372 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7078#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7376 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7147#7151#7227#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7380 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7223#7231#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(11) = (Distributions.cis)(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7382 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      ####G#7327#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7331#7387 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7103#7107#7331#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7382::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7388 = GenSym(9)
      ##a2#7389 = GenSym(10)
      ##div_a#7390 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7388::Float64,##a2#7389::Float64))
      ####afactor#7253#7391 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7389::Float64))
      ####bfactor#7254#7392 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7388::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7389::Float64,##a2#7389::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7397 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7251#7259#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return GenSym(11) * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7390::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7093#7095#7358::Tuple{}
  ######b#7094#7096#7359::Tuple{}
  ####_var0#7097#7360::Tuple{}
  ##xs#7361::Tuple{}
  ##########tup#7099#7145#7149#7225#7362::Tuple{}
  ##########x#7100#7146#7150#7226#7363::Float64
  ########_var0#7147#7151#7227#7364::Tuple{}
  ##########types#7069#7148#7152#7228#7365::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7366::Tuple{}
  ########x#7219#7222#7230#7367::Int64
  ######_var0#7223#7231#7368::Tuple{}
  ########types#7220#7224#7232#7369::Tuple{Type{Int64}}
  _var0::Bool
  ######a#7074#7076#7370::Tuple{}
  ######b#7075#7077#7371::Tuple{}
  ####_var0#7078#7372::Tuple{}
  ##xs#7373::Tuple{}
  ##########tup#7099#7145#7149#7225#7374::Tuple{}
  ##########x#7100#7146#7150#7226#7375::Float64
  ########_var0#7147#7151#7227#7376::Tuple{}
  ##########types#7069#7148#7152#7228#7377::Tuple{Type{Float64}}
  ########tup#7218#7221#7229#7378::Tuple{}
  ########x#7219#7222#7230#7379::Int64
  ######_var0#7223#7231#7380::Tuple{}
  ########types#7220#7224#7232#7381::Tuple{Type{Int64}}
  ##a#7382::Float64
  ####G#7327#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7098#7104#7328#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7099#7101#7105#7329#7385::Tuple{}
  ##########x#7100#7102#7106#7330#7386::Float64
  ########_var0#7103#7107#7331#7387::Tuple{}
  ##a1#7388::Float64
  ##a2#7389::Float64
  ##div_a#7390::Float64
  ####afactor#7253#7391::Float64
  ####bfactor#7254#7392::Float64
  ########a#7243#7247#7255#7393::Tuple{}
  ########b#7244#7248#7256#7394::Tuple{}
  ########afactor#7245#7249#7257#7395::Float64
  ########bfactor#7246#7250#7258#7396::Float64
  ######_var0#7251#7259#7397::Tuple{}
  ######types#7252#7260#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 95:
      NewvarNode(:v)
      GenSym(12) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Uniform{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 96:
      $(Expr(:boundscheck, false))
      ####_var0#7097#7360 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7097#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7147#7151#7227#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7368 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7223#7231#7368 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 97:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 12
      _var0 = (top(getfield))((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 13
      12: 
      _var0 = false
      13: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 98:
      $(Expr(:boundscheck, false))
      ####_var0#7078#7372 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7078#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7227#7376 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7147#7151#7227#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ######_var0#7223#7231#7380 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7223#7231#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      v = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/uniform.jl, line 99:
      GenSym(11) = (Distributions.cis)(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7382 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7382::Float64,0)::Float64
      ####G#7327#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7103#7107#7331#7387 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7103#7107#7331#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7382::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7388 = GenSym(9)
      ##a2#7389 = GenSym(10)
      ##div_a#7390 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7388::Float64,##a2#7389::Float64))
      ####afactor#7253#7391 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7389::Float64))
      ####bfactor#7254#7392 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7388::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7389::Float64,##a2#7389::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7251#7259#7397 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7251#7259#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return GenSym(11) * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7390::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




