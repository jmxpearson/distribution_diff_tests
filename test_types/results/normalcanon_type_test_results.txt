____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{Float64},:η)::Float64,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{Float64},:η)::Float64,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:η)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{Float64},:η)::Float64,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{Float64},:η)::Float64,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:η)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:η)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:η)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:η)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 36:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7120::Float64
  ##div_a#7121::Float64
  ##deriv#7122::Float64
  ####G#7115#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7125::Tuple{}
  ##########x#7107#7109#7113#7118#7126::Float64
  ########_var0#7110#7114#7119#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      ##a#7120 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7120::Float64))
      ##deriv#7122 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7121::Float64,##a#7120::Float64))))
      ####G#7115#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7127 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7119#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7120::Float64
  ##div_a#7121::Float64
  ##deriv#7122::Float64
  ####G#7115#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7125::Tuple{}
  ##########x#7107#7109#7113#7118#7126::Float64
  ########_var0#7110#7114#7119#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      ##a#7120 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7120::Float64))
      ##deriv#7122 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7121::Float64,##a#7120::Float64))))
      ####G#7115#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7127 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7119#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7120::Float64
  ##div_a#7121::Float64
  ##deriv#7122::Float64
  ####G#7115#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7125::Tuple{}
  ##########x#7107#7109#7113#7118#7126::Float64
  ########_var0#7110#7114#7119#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      ##a#7120 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7120::Float64))
      ##deriv#7122 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7121::Float64,##a#7120::Float64))))
      ####G#7115#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7127 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7119#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7120::Float64
  ##div_a#7121::Float64
  ##deriv#7122::Float64
  ####G#7115#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7125::Tuple{}
  ##########x#7107#7109#7113#7118#7126::Float64
  ########_var0#7110#7114#7119#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      ##a#7120 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7120::Float64))
      ##deriv#7122 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7121::Float64,##a#7120::Float64))))
      ####G#7115#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7127 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7119#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7120::Float64
  ##div_a#7121::Float64
  ##deriv#7122::Float64
  ####G#7115#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7125::Tuple{}
  ##########x#7107#7109#7113#7118#7126::Float64
  ########_var0#7110#7114#7119#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 43:
      ##a#7120 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7120::Float64))
      ##deriv#7122 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7121::Float64,##a#7120::Float64))))
      ####G#7115#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7127 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7119#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 38:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 37:
      return (top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 40:
      return 0.0
  end::Float64




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 41:
      return 0.0
  end::Float64




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      GenSym(0) = (top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      GenSym(0) = (top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7159::Float64
  ####G#7141#7160::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7142#7161::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7143#7162::Tuple{}
  ##########x#7107#7109#7113#7144#7163::Float64
  ########_var0#7110#7114#7145#7164::Tuple{}
  ######tup#7146#7148#7165::Tuple{}
  ####_var0#7149#7166::Tuple{}
  ######types#7147#7150#7167::Tuple{Type{Float64}}
  ########tup#7106#7151#7155#7168::Tuple{}
  ########x#7107#7152#7156#7169::Float64
  ######_var0#7153#7157#7170::Tuple{}
  ########types#7147#7154#7158#7171::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      ##a#7159 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7159::Float64,0)::Float64
      ####G#7141#7160 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7145#7164 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7145#7164 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7159::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7149#7166 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7149#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7170 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7153#7157#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(top(getfield))(GenSym(2),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      GenSym(0) = (top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      GenSym(0) = (top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7159::Float64
  ####G#7141#7160::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7142#7161::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7143#7162::Tuple{}
  ##########x#7107#7109#7113#7144#7163::Float64
  ########_var0#7110#7114#7145#7164::Tuple{}
  ######tup#7146#7148#7165::Tuple{}
  ####_var0#7149#7166::Tuple{}
  ######types#7147#7150#7167::Tuple{Type{Float64}}
  ########tup#7106#7151#7155#7168::Tuple{}
  ########x#7107#7152#7156#7169::Float64
  ######_var0#7153#7157#7170::Tuple{}
  ########types#7147#7154#7158#7171::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      ##a#7159 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7159::Float64,0)::Float64
      ####G#7141#7160 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7145#7164 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7145#7164 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7159::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7149#7166 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7149#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7170 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7153#7157#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(top(getfield))(GenSym(2),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7159::Float64
  ####G#7141#7160::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7142#7161::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7143#7162::Tuple{}
  ##########x#7107#7109#7113#7144#7163::Float64
  ########_var0#7110#7114#7145#7164::Tuple{}
  ######tup#7146#7148#7165::Tuple{}
  ####_var0#7149#7166::Tuple{}
  ######types#7147#7150#7167::Tuple{Type{Float64}}
  ########tup#7106#7151#7155#7168::Tuple{}
  ########x#7107#7152#7156#7169::Float64
  ######_var0#7153#7157#7170::Tuple{}
  ########types#7147#7154#7158#7171::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      ##a#7159 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7159::Float64,0)::Float64
      ####G#7141#7160 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7145#7164 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7145#7164 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7159::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7149#7166 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7149#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7170 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7153#7157#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(top(getfield))(GenSym(2),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7159::Float64
  ####G#7141#7160::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7142#7161::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7143#7162::Tuple{}
  ##########x#7107#7109#7113#7144#7163::Float64
  ########_var0#7110#7114#7145#7164::Tuple{}
  ######tup#7146#7148#7165::Tuple{}
  ####_var0#7149#7166::Tuple{}
  ######types#7147#7150#7167::Tuple{Type{Float64}}
  ########tup#7106#7151#7155#7168::Tuple{}
  ########x#7107#7152#7156#7169::Float64
  ######_var0#7153#7157#7170::Tuple{}
  ########types#7147#7154#7158#7171::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      ##a#7159 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7159::Float64,0)::Float64
      ####G#7141#7160 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7145#7164 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7145#7164 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7159::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7149#7166 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7149#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7170 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7153#7157#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(top(getfield))(GenSym(2),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7159::Float64
  ####G#7141#7160::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7142#7161::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7143#7162::Tuple{}
  ##########x#7107#7109#7113#7144#7163::Float64
  ########_var0#7110#7114#7145#7164::Tuple{}
  ######tup#7146#7148#7165::Tuple{}
  ####_var0#7149#7166::Tuple{}
  ######types#7147#7150#7167::Tuple{Type{Float64}}
  ########tup#7106#7151#7155#7168::Tuple{}
  ########x#7107#7152#7156#7169::Float64
  ######_var0#7153#7157#7170::Tuple{}
  ########types#7147#7154#7158#7171::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 46:
      ##a#7159 = (top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7159::Float64,0)::Float64
      ####G#7141#7160 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7145#7164 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7145#7164 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7159::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7149#7166 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7149#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7153#7157#7170 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7153#7157#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)),(top(getfield))(GenSym(2),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  cf::Distributions.NormalCanon{Float64}
  ####r#7182#7188::UInt64
  ####rabs#7183#7189::Int64
  ####idx#7184#7190::Int64
  ####x#7185#7191::Float64
  ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7193::Float64
  ##_var0#7194::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7174#7180#7186#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7174#7180#7186#7192 = false
      3: 
      ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7172#7173#7175#7181#7187#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####r#7182#7188 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7193::Float64),0x000fffffffffffff))
      ####rabs#7183#7189 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7188::UInt64,1))))
      ####idx#7184#7190 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7189::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7191 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7188::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7189::Int64)),####rabs#7183#7189::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7189::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7189::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::UInt64)::Bool)) goto 5
      ##_var0#7194 = ####x#7185#7191::Float64
      goto 6
      5: 
      ##_var0#7194 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7190::Int64,####rabs#7183#7189::Int64,####x#7185#7191::Float64)::Float64
      goto 6
      ##_var0#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(cf::Distributions.NormalCanon{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)(##_var0#7194::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(cf::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64))))
  end::Float64

---- integer, float ----

Variables:
  cf::Distributions.NormalCanon{Float64}
  ####r#7182#7188::UInt64
  ####rabs#7183#7189::Int64
  ####idx#7184#7190::Int64
  ####x#7185#7191::Float64
  ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7193::Float64
  ##_var0#7194::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7174#7180#7186#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7174#7180#7186#7192 = false
      3: 
      ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7172#7173#7175#7181#7187#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####r#7182#7188 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7193::Float64),0x000fffffffffffff))
      ####rabs#7183#7189 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7188::UInt64,1))))
      ####idx#7184#7190 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7189::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7191 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7188::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7189::Int64)),####rabs#7183#7189::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7189::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7189::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::UInt64)::Bool)) goto 5
      ##_var0#7194 = ####x#7185#7191::Float64
      goto 6
      5: 
      ##_var0#7194 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7190::Int64,####rabs#7183#7189::Int64,####x#7185#7191::Float64)::Float64
      goto 6
      ##_var0#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(cf::Distributions.NormalCanon{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)(##_var0#7194::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(cf::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7200#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7214::Tuple{}
  ##########x#7107#7109#7113#7203#7215::Float64
  ########_var0#7110#7114#7204#7216::Tuple{}
  ####r#7182#7217::UInt64
  ####rabs#7183#7218::Int64
  ####idx#7184#7219::Int64
  ####x#7185#7220::Float64
  ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7222::Float64
  ##_var0#7223::Float64
  ##a#7224::Float64
  ##div_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7115#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7229::Tuple{}
  ##########x#7107#7109#7113#7118#7230::Float64
  ########_var0#7110#7114#7119#7231::Tuple{}
  ######a#7205#7207#7232::Tuple{}
  ######b#7206#7208#7233::Tuple{}
  ####_var0#7209#7234::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7174#7180#7186#7221 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7174#7180#7186#7221 = false
      4: 
      ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7222 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7172#7173#7175#7181#7187#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####r#7182#7217 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7222::Float64),0x000fffffffffffff))
      ####rabs#7183#7218 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7217::UInt64,1))))
      ####idx#7184#7219 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7218::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7220 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7217::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7218::Int64)),####rabs#7183#7218::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7218::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7218::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::UInt64)::Bool)) goto 6
      ##_var0#7223 = ####x#7185#7220::Float64
      goto 7
      6: 
      ##_var0#7223 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7219::Int64,####rabs#7183#7218::Int64,####x#7185#7220::Float64)::Float64
      goto 7
      ##_var0#7223 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7223::Float64
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7200#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7216 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7204#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7224 = (top(getfield))(GenSym(3),:value)::Float64
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7224::Float64))
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7225::Float64,##a#7224::Float64))))
      ####G#7115#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7231 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7110#7114#7119#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7234 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7209#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  cf::Distributions.NormalCanon{Float64}
  ####r#7182#7188::UInt64
  ####rabs#7183#7189::Int64
  ####idx#7184#7190::Int64
  ####x#7185#7191::Float64
  ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7193::Float64
  ##_var0#7194::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7174#7180#7186#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7174#7180#7186#7192 = false
      3: 
      ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7172#7173#7175#7181#7187#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####r#7182#7188 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7193::Float64),0x000fffffffffffff))
      ####rabs#7183#7189 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7188::UInt64,1))))
      ####idx#7184#7190 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7189::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7191 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7188::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7189::Int64)),####rabs#7183#7189::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7189::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7189::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::UInt64)::Bool)) goto 5
      ##_var0#7194 = ####x#7185#7191::Float64
      goto 6
      5: 
      ##_var0#7194 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7190::Int64,####rabs#7183#7189::Int64,####x#7185#7191::Float64)::Float64
      goto 6
      ##_var0#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(cf::Distributions.NormalCanon{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)(##_var0#7194::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(cf::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64))))
  end::Float64

---- float, float ----

Variables:
  cf::Distributions.NormalCanon{Float64}
  ####r#7182#7188::UInt64
  ####rabs#7183#7189::Int64
  ####idx#7184#7190::Int64
  ####x#7185#7191::Float64
  ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7193::Float64
  ##_var0#7194::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7174#7180#7186#7192 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7174#7180#7186#7192 = false
      3: 
      ########_var0#7174#7180#7186#7192::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7193 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7172#7173#7175#7181#7187#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####r#7182#7188 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7193::Float64),0x000fffffffffffff))
      ####rabs#7183#7189 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7188::UInt64,1))))
      ####idx#7184#7190 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7189::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7191 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7188::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7189::Int64)),####rabs#7183#7189::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7189::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7189::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7190::Int64,1)))::UInt64)::Bool)) goto 5
      ##_var0#7194 = ####x#7185#7191::Float64
      goto 6
      5: 
      ##_var0#7194 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7190::Int64,####rabs#7183#7189::Int64,####x#7185#7191::Float64)::Float64
      goto 6
      ##_var0#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(cf::Distributions.NormalCanon{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.div_float)(##_var0#7194::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(cf::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64))))
  end::Float64

---- float, dual ----

Variables:
  cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7200#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7214::Tuple{}
  ##########x#7107#7109#7113#7203#7215::Float64
  ########_var0#7110#7114#7204#7216::Tuple{}
  ####r#7182#7217::UInt64
  ####rabs#7183#7218::Int64
  ####idx#7184#7219::Int64
  ####x#7185#7220::Float64
  ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7222::Float64
  ##_var0#7223::Float64
  ##a#7224::Float64
  ##div_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7115#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7229::Tuple{}
  ##########x#7107#7109#7113#7118#7230::Float64
  ########_var0#7110#7114#7119#7231::Tuple{}
  ######a#7205#7207#7232::Tuple{}
  ######b#7206#7208#7233::Tuple{}
  ####_var0#7209#7234::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7174#7180#7186#7221 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7174#7180#7186#7221 = false
      4: 
      ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7222 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7172#7173#7175#7181#7187#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####r#7182#7217 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7222::Float64),0x000fffffffffffff))
      ####rabs#7183#7218 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7217::UInt64,1))))
      ####idx#7184#7219 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7218::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7220 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7217::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7218::Int64)),####rabs#7183#7218::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7218::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7218::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::UInt64)::Bool)) goto 6
      ##_var0#7223 = ####x#7185#7220::Float64
      goto 7
      6: 
      ##_var0#7223 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7219::Int64,####rabs#7183#7218::Int64,####x#7185#7220::Float64)::Float64
      goto 7
      ##_var0#7223 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7223::Float64
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7200#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7216 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7204#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7224 = (top(getfield))(GenSym(3),:value)::Float64
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7224::Float64))
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7225::Float64,##a#7224::Float64))))
      ####G#7115#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7231 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7110#7114#7119#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7234 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7209#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7200#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7214::Tuple{}
  ##########x#7107#7109#7113#7203#7215::Float64
  ########_var0#7110#7114#7204#7216::Tuple{}
  ####r#7182#7217::UInt64
  ####rabs#7183#7218::Int64
  ####idx#7184#7219::Int64
  ####x#7185#7220::Float64
  ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7222::Float64
  ##_var0#7223::Float64
  ##a#7224::Float64
  ##div_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7115#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7229::Tuple{}
  ##########x#7107#7109#7113#7118#7230::Float64
  ########_var0#7110#7114#7119#7231::Tuple{}
  ######a#7205#7207#7232::Tuple{}
  ######b#7206#7208#7233::Tuple{}
  ####_var0#7209#7234::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7174#7180#7186#7221 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7174#7180#7186#7221 = false
      4: 
      ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7222 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7172#7173#7175#7181#7187#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####r#7182#7217 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7222::Float64),0x000fffffffffffff))
      ####rabs#7183#7218 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7217::UInt64,1))))
      ####idx#7184#7219 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7218::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7220 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7217::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7218::Int64)),####rabs#7183#7218::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7218::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7218::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::UInt64)::Bool)) goto 6
      ##_var0#7223 = ####x#7185#7220::Float64
      goto 7
      6: 
      ##_var0#7223 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7219::Int64,####rabs#7183#7218::Int64,####x#7185#7220::Float64)::Float64
      goto 7
      ##_var0#7223 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7223::Float64
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7200#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7216 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7204#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7224 = (top(getfield))(GenSym(3),:value)::Float64
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7224::Float64))
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7225::Float64,##a#7224::Float64))))
      ####G#7115#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7231 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7110#7114#7119#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7234 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7209#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7200#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7214::Tuple{}
  ##########x#7107#7109#7113#7203#7215::Float64
  ########_var0#7110#7114#7204#7216::Tuple{}
  ####r#7182#7217::UInt64
  ####rabs#7183#7218::Int64
  ####idx#7184#7219::Int64
  ####x#7185#7220::Float64
  ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7222::Float64
  ##_var0#7223::Float64
  ##a#7224::Float64
  ##div_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7115#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7229::Tuple{}
  ##########x#7107#7109#7113#7118#7230::Float64
  ########_var0#7110#7114#7119#7231::Tuple{}
  ######a#7205#7207#7232::Tuple{}
  ######b#7206#7208#7233::Tuple{}
  ####_var0#7209#7234::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7174#7180#7186#7221 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7174#7180#7186#7221 = false
      4: 
      ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7222 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7172#7173#7175#7181#7187#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####r#7182#7217 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7222::Float64),0x000fffffffffffff))
      ####rabs#7183#7218 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7217::UInt64,1))))
      ####idx#7184#7219 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7218::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7220 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7217::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7218::Int64)),####rabs#7183#7218::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7218::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7218::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::UInt64)::Bool)) goto 6
      ##_var0#7223 = ####x#7185#7220::Float64
      goto 7
      6: 
      ##_var0#7223 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7219::Int64,####rabs#7183#7218::Int64,####x#7185#7220::Float64)::Float64
      goto 7
      ##_var0#7223 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7223::Float64
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7200#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7216 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7204#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7224 = (top(getfield))(GenSym(3),:value)::Float64
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7224::Float64))
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7225::Float64,##a#7224::Float64))))
      ####G#7115#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7231 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7110#7114#7119#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7234 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7209#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7200#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7214::Tuple{}
  ##########x#7107#7109#7113#7203#7215::Float64
  ########_var0#7110#7114#7204#7216::Tuple{}
  ####r#7182#7217::UInt64
  ####rabs#7183#7218::Int64
  ####idx#7184#7219::Int64
  ####x#7185#7220::Float64
  ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
  ############_var0#7172#7173#7175#7181#7187#7222::Float64
  ##_var0#7223::Float64
  ##a#7224::Float64
  ##div_a#7225::Float64
  ##deriv#7226::Float64
  ####G#7115#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7116#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7117#7229::Tuple{}
  ##########x#7107#7109#7113#7118#7230::Float64
  ########_var0#7110#7114#7119#7231::Tuple{}
  ######a#7205#7207#7232::Tuple{}
  ######b#7206#7208#7233::Tuple{}
  ####_var0#7209#7234::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 70:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7174#7180#7186#7221 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7174#7180#7186#7221 = false
      4: 
      ########_var0#7174#7180#7186#7221::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7172#7173#7175#7181#7187#7222 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7172#7173#7175#7181#7187#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####r#7182#7217 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7172#7173#7175#7181#7187#7222::Float64),0x000fffffffffffff))
      ####rabs#7183#7218 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7182#7217::UInt64,1))))
      ####idx#7184#7219 = (Base.box)(Int64,(Base.and_int)(####rabs#7183#7218::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7185#7220 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7182#7217::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7183#7218::Int64)),####rabs#7183#7218::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7183#7218::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7183#7218::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7184#7219::Int64,1)))::UInt64)::Bool)) goto 6
      ##_var0#7223 = ####x#7185#7220::Float64
      goto 7
      6: 
      ##_var0#7223 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7184#7219::Int64,####rabs#7183#7218::Int64,####x#7185#7220::Float64)::Float64
      goto 7
      ##_var0#7223 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7223::Float64
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7200#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7216 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7110#7114#7204#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7224 = (top(getfield))(GenSym(3),:value)::Float64
      ##div_a#7225 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7224::Float64))
      ##deriv#7226 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7225::Float64,##a#7224::Float64))))
      ####G#7115#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7119#7231 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7110#7114#7119#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7225::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7209#7234 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7209#7234 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(cf::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}
  x::Int64
  ##xs#7235::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-0.5,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64,2.5066282746310007)),GenSym(2)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NormalCanon{Float64}
  x::Int64
  ##xs#7235::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-0.5,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64,2.5066282746310007)),GenSym(2)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######tup#7146#7243#7272::Tuple{}
  ####_var0#7244#7273::Tuple{}
  ######types#7242#7245#7274::Tuple{Type{Int64}}
  ##a#7275::Float64
  ####G#7246#7276::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7247#7277::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7248#7278::Tuple{}
  ##########x#7107#7109#7113#7249#7279::Float64
  ########_var0#7110#7114#7250#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7106#7151#7155#7256#7282::Tuple{}
  ##########x#7107#7152#7156#7257#7283::Float64
  ########_var0#7153#7157#7258#7284::Tuple{}
  ##########types#7147#7154#7158#7259#7285::Tuple{Type{Float64}}
  ####a1#7260#7286::Float64
  ####a2#7261#7287::Float64
  ########a#6995#7251#7262#7288::Tuple{}
  ########b#6996#7252#7263#7289::Tuple{}
  ########afactor#6997#7253#7264#7290::Float64
  ########bfactor#6998#7254#7265#7291::Float64
  ######_var0#7255#7266#7292::Tuple{}
  ##exp_a#7293::Float64
  ####G#7267#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7268#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7269#7296::Tuple{}
  ##########x#7107#7109#7113#7270#7297::Float64
  ########_var0#7110#7114#7271#7298::Tuple{}
  ##sqrt_a#7299::Float64
  ##deriv#7300::Float64
  ####G#7200#7301::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7302::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7303::Tuple{}
  ##########x#7107#7109#7113#7203#7304::Float64
  ########_var0#7110#7114#7204#7305::Tuple{}
  ##div_a#7306::Float64
  ######tup#7236#7238#7307::Tuple{}
  ######x#7237#7239#7308::Irrational{:sqrt2π}
  ####_var0#7240#7309::Tuple{}
  ######types#7147#7241#7310::Tuple{Type{Float64}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#6995#7251#7313::Tuple{}
  ######b#6996#7252#7314::Tuple{}
  ######afactor#6997#7253#7315::Float64
  ######bfactor#6998#7254#7316::Float64
  ####_var0#7255#7317::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      ##sqrt_a#7299 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7300 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7299::Float64))
      ####G#7200#7301 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7305 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7110#7114#7204#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7299::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7306 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(5),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7240#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7240#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7244#7273 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7244#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7275 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7246#7276 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7250#7280 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7110#7114#7250#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7275::Float64,##a#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7153#7157#7258#7284 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7153#7157#7258#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ####a1#7260#7286 = GenSym(1)
      ####a2#7261#7287 = GenSym(2)
      $(Expr(:boundscheck, false))
      ######_var0#7255#7266#7292 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7255#7266#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7260#7286::Float64,####a2#7261#7287::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7293 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7267#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7271#7298 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7110#7114#7271#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7293::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7311 = GenSym(8)
      ##a2#7312 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7255#7317 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7255#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NormalCanon{Float64}
  x::Int64
  ##xs#7235::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-0.5,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64,2.5066282746310007)),GenSym(2)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NormalCanon{Float64}
  x::Int64
  ##xs#7235::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.NormalCanon{Float64},:μ)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-0.5,(top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.NormalCanon{Float64},:λ)::Float64))::Float64,2.5066282746310007)),GenSym(2)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######tup#7146#7243#7272::Tuple{}
  ####_var0#7244#7273::Tuple{}
  ######types#7242#7245#7274::Tuple{Type{Int64}}
  ##a#7275::Float64
  ####G#7246#7276::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7247#7277::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7248#7278::Tuple{}
  ##########x#7107#7109#7113#7249#7279::Float64
  ########_var0#7110#7114#7250#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7106#7151#7155#7256#7282::Tuple{}
  ##########x#7107#7152#7156#7257#7283::Float64
  ########_var0#7153#7157#7258#7284::Tuple{}
  ##########types#7147#7154#7158#7259#7285::Tuple{Type{Float64}}
  ####a1#7260#7286::Float64
  ####a2#7261#7287::Float64
  ########a#6995#7251#7262#7288::Tuple{}
  ########b#6996#7252#7263#7289::Tuple{}
  ########afactor#6997#7253#7264#7290::Float64
  ########bfactor#6998#7254#7265#7291::Float64
  ######_var0#7255#7266#7292::Tuple{}
  ##exp_a#7293::Float64
  ####G#7267#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7268#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7269#7296::Tuple{}
  ##########x#7107#7109#7113#7270#7297::Float64
  ########_var0#7110#7114#7271#7298::Tuple{}
  ##sqrt_a#7299::Float64
  ##deriv#7300::Float64
  ####G#7200#7301::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7302::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7303::Tuple{}
  ##########x#7107#7109#7113#7203#7304::Float64
  ########_var0#7110#7114#7204#7305::Tuple{}
  ##div_a#7306::Float64
  ######tup#7236#7238#7307::Tuple{}
  ######x#7237#7239#7308::Irrational{:sqrt2π}
  ####_var0#7240#7309::Tuple{}
  ######types#7147#7241#7310::Tuple{Type{Float64}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#6995#7251#7313::Tuple{}
  ######b#6996#7252#7314::Tuple{}
  ######afactor#6997#7253#7315::Float64
  ######bfactor#6998#7254#7316::Float64
  ####_var0#7255#7317::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      ##sqrt_a#7299 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7300 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7299::Float64))
      ####G#7200#7301 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7305 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7110#7114#7204#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7299::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7306 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(5),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7240#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7240#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7244#7273 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7244#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7275 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7246#7276 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7250#7280 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7110#7114#7250#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7275::Float64,##a#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7153#7157#7258#7284 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7153#7157#7258#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ####a1#7260#7286 = GenSym(1)
      ####a2#7261#7287 = GenSym(2)
      $(Expr(:boundscheck, false))
      ######_var0#7255#7266#7292 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7255#7266#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7260#7286::Float64,####a2#7261#7287::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7293 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7267#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7271#7298 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7110#7114#7271#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7293::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7311 = GenSym(8)
      ##a2#7312 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7255#7317 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7255#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######tup#7146#7243#7272::Tuple{}
  ####_var0#7244#7273::Tuple{}
  ######types#7242#7245#7274::Tuple{Type{Int64}}
  ##a#7275::Float64
  ####G#7246#7276::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7247#7277::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7248#7278::Tuple{}
  ##########x#7107#7109#7113#7249#7279::Float64
  ########_var0#7110#7114#7250#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7106#7151#7155#7256#7282::Tuple{}
  ##########x#7107#7152#7156#7257#7283::Float64
  ########_var0#7153#7157#7258#7284::Tuple{}
  ##########types#7147#7154#7158#7259#7285::Tuple{Type{Float64}}
  ####a1#7260#7286::Float64
  ####a2#7261#7287::Float64
  ########a#6995#7251#7262#7288::Tuple{}
  ########b#6996#7252#7263#7289::Tuple{}
  ########afactor#6997#7253#7264#7290::Float64
  ########bfactor#6998#7254#7265#7291::Float64
  ######_var0#7255#7266#7292::Tuple{}
  ##exp_a#7293::Float64
  ####G#7267#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7268#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7269#7296::Tuple{}
  ##########x#7107#7109#7113#7270#7297::Float64
  ########_var0#7110#7114#7271#7298::Tuple{}
  ##sqrt_a#7299::Float64
  ##deriv#7300::Float64
  ####G#7200#7301::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7302::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7303::Tuple{}
  ##########x#7107#7109#7113#7203#7304::Float64
  ########_var0#7110#7114#7204#7305::Tuple{}
  ##div_a#7306::Float64
  ######tup#7236#7238#7307::Tuple{}
  ######x#7237#7239#7308::Irrational{:sqrt2π}
  ####_var0#7240#7309::Tuple{}
  ######types#7147#7241#7310::Tuple{Type{Float64}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#6995#7251#7313::Tuple{}
  ######b#6996#7252#7314::Tuple{}
  ######afactor#6997#7253#7315::Float64
  ######bfactor#6998#7254#7316::Float64
  ####_var0#7255#7317::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      ##sqrt_a#7299 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7300 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7299::Float64))
      ####G#7200#7301 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7305 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7110#7114#7204#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7299::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7306 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(5),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7240#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7240#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7244#7273 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7244#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7275 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7246#7276 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7250#7280 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7110#7114#7250#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7275::Float64,##a#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7153#7157#7258#7284 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7153#7157#7258#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ####a1#7260#7286 = GenSym(1)
      ####a2#7261#7287 = GenSym(2)
      $(Expr(:boundscheck, false))
      ######_var0#7255#7266#7292 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7255#7266#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7260#7286::Float64,####a2#7261#7287::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7293 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7267#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7271#7298 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7110#7114#7271#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7293::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7311 = GenSym(8)
      ##a2#7312 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7255#7317 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7255#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######tup#7146#7243#7272::Tuple{}
  ####_var0#7244#7273::Tuple{}
  ######types#7242#7245#7274::Tuple{Type{Int64}}
  ##a#7275::Float64
  ####G#7246#7276::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7247#7277::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7248#7278::Tuple{}
  ##########x#7107#7109#7113#7249#7279::Float64
  ########_var0#7110#7114#7250#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7106#7151#7155#7256#7282::Tuple{}
  ##########x#7107#7152#7156#7257#7283::Float64
  ########_var0#7153#7157#7258#7284::Tuple{}
  ##########types#7147#7154#7158#7259#7285::Tuple{Type{Float64}}
  ####a1#7260#7286::Float64
  ####a2#7261#7287::Float64
  ########a#6995#7251#7262#7288::Tuple{}
  ########b#6996#7252#7263#7289::Tuple{}
  ########afactor#6997#7253#7264#7290::Float64
  ########bfactor#6998#7254#7265#7291::Float64
  ######_var0#7255#7266#7292::Tuple{}
  ##exp_a#7293::Float64
  ####G#7267#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7268#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7269#7296::Tuple{}
  ##########x#7107#7109#7113#7270#7297::Float64
  ########_var0#7110#7114#7271#7298::Tuple{}
  ##sqrt_a#7299::Float64
  ##deriv#7300::Float64
  ####G#7200#7301::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7302::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7303::Tuple{}
  ##########x#7107#7109#7113#7203#7304::Float64
  ########_var0#7110#7114#7204#7305::Tuple{}
  ##div_a#7306::Float64
  ######tup#7236#7238#7307::Tuple{}
  ######x#7237#7239#7308::Irrational{:sqrt2π}
  ####_var0#7240#7309::Tuple{}
  ######types#7147#7241#7310::Tuple{Type{Float64}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#6995#7251#7313::Tuple{}
  ######b#6996#7252#7314::Tuple{}
  ######afactor#6997#7253#7315::Float64
  ######bfactor#6998#7254#7316::Float64
  ####_var0#7255#7317::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      ##sqrt_a#7299 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7300 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7299::Float64))
      ####G#7200#7301 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7305 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7110#7114#7204#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7299::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7306 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(5),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7240#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7240#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7244#7273 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7244#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7275 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7246#7276 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7250#7280 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7110#7114#7250#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7275::Float64,##a#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7153#7157#7258#7284 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7153#7157#7258#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ####a1#7260#7286 = GenSym(1)
      ####a2#7261#7287 = GenSym(2)
      $(Expr(:boundscheck, false))
      ######_var0#7255#7266#7292 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7255#7266#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7260#7286::Float64,####a2#7261#7287::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7293 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7267#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7271#7298 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7110#7114#7271#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7293::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7311 = GenSym(8)
      ##a2#7312 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7255#7317 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7255#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ######tup#7146#7243#7272::Tuple{}
  ####_var0#7244#7273::Tuple{}
  ######types#7242#7245#7274::Tuple{Type{Int64}}
  ##a#7275::Float64
  ####G#7246#7276::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7247#7277::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7248#7278::Tuple{}
  ##########x#7107#7109#7113#7249#7279::Float64
  ########_var0#7110#7114#7250#7280::Tuple{}
  ##xs#7281::Tuple{}
  ##########tup#7106#7151#7155#7256#7282::Tuple{}
  ##########x#7107#7152#7156#7257#7283::Float64
  ########_var0#7153#7157#7258#7284::Tuple{}
  ##########types#7147#7154#7158#7259#7285::Tuple{Type{Float64}}
  ####a1#7260#7286::Float64
  ####a2#7261#7287::Float64
  ########a#6995#7251#7262#7288::Tuple{}
  ########b#6996#7252#7263#7289::Tuple{}
  ########afactor#6997#7253#7264#7290::Float64
  ########bfactor#6998#7254#7265#7291::Float64
  ######_var0#7255#7266#7292::Tuple{}
  ##exp_a#7293::Float64
  ####G#7267#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7268#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7269#7296::Tuple{}
  ##########x#7107#7109#7113#7270#7297::Float64
  ########_var0#7110#7114#7271#7298::Tuple{}
  ##sqrt_a#7299::Float64
  ##deriv#7300::Float64
  ####G#7200#7301::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7105#7111#7201#7302::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7106#7108#7112#7202#7303::Tuple{}
  ##########x#7107#7109#7113#7203#7304::Float64
  ########_var0#7110#7114#7204#7305::Tuple{}
  ##div_a#7306::Float64
  ######tup#7236#7238#7307::Tuple{}
  ######x#7237#7239#7308::Irrational{:sqrt2π}
  ####_var0#7240#7309::Tuple{}
  ######types#7147#7241#7310::Tuple{Type{Float64}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ######a#6995#7251#7313::Tuple{}
  ######b#6996#7252#7314::Tuple{}
  ######afactor#6997#7253#7315::Float64
  ######bfactor#6998#7254#7316::Float64
  ####_var0#7255#7317::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normalcanon.jl, line 51:
      ##sqrt_a#7299 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7300 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7299::Float64))
      ####G#7200#7301 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7204#7305 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7110#7114#7204#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7299::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7306 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(5),:value)::Float64,2.5066282746310007))
      $(Expr(:boundscheck, false))
      ####_var0#7240#7309 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7240#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7306::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7244#7273 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7244#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7275 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####G#7246#7276 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7250#7280 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7110#7114#7250#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7275::Float64,##a#7275::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7153#7157#7258#7284 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7153#7157#7258#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.NormalCanon{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ####a1#7260#7286 = GenSym(1)
      ####a2#7261#7287 = GenSym(2)
      $(Expr(:boundscheck, false))
      ######_var0#7255#7266#7292 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7255#7266#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7260#7286::Float64,####a2#7261#7287::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7293 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7267#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7110#7114#7271#7298 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7110#7114#7271#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7293::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7311 = GenSym(8)
      ##a2#7312 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7255#7317 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7255#7317 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7311::Float64,##a2#7312::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





