____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64,(top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 48:
      return (top(tuple))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 53:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64
      return (Base.box)(Int64,(Base.mul_int)(GenSym(0),GenSym(0)))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7087::Float64
  ####G#7082#7088::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7089::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7090::Tuple{}
  ##########x#7074#7076#7080#7085#7091::Float64
  ########_var0#7077#7081#7086#7092::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      ##a#7087 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7082#7088 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7092 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7086#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7087::Float64,##a#7087::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7087::Float64
  ####G#7082#7088::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7089::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7090::Tuple{}
  ##########x#7074#7076#7080#7085#7091::Float64
  ########_var0#7077#7081#7086#7092::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      ##a#7087 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7082#7088 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7092 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7086#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7087::Float64,##a#7087::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7087::Float64
  ####G#7082#7088::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7089::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7090::Tuple{}
  ##########x#7074#7076#7080#7085#7091::Float64
  ########_var0#7077#7081#7086#7092::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      ##a#7087 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7082#7088 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7092 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7086#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7087::Float64,##a#7087::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7087::Float64
  ####G#7082#7088::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7089::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7090::Tuple{}
  ##########x#7074#7076#7080#7085#7091::Float64
  ########_var0#7077#7081#7086#7092::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      ##a#7087 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7082#7088 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7092 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7086#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7087::Float64,##a#7087::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7087::Float64
  ####G#7082#7088::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7089::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7090::Tuple{}
  ##########x#7074#7076#7080#7085#7091::Float64
  ########_var0#7077#7081#7086#7092::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 57:
      ##a#7087 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7082#7088 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7092 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7086#7092 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7087::Float64,##a#7087::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 55:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 54:
      return (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 59:
      return 0.0
  end::Float64




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 60:
      return 0.0
  end::Float64




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7105::Float64
  ####G#7097#7106::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7098#7107::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7099#7108::Tuple{}
  ##########x#7074#7076#7080#7100#7109::Float64
  ########_var0#7077#7081#7101#7110::Tuple{}
  ########types#7102#7103#7104#7111::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      ##a#7105 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7105::Float64,0)::Float64
      ####G#7097#7106 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7101#7110 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7101#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7105::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0))))))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0)))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7105::Float64
  ####G#7097#7106::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7098#7107::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7099#7108::Tuple{}
  ##########x#7074#7076#7080#7100#7109::Float64
  ########_var0#7077#7081#7101#7110::Tuple{}
  ########types#7102#7103#7104#7111::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      ##a#7105 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7105::Float64,0)::Float64
      ####G#7097#7106 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7101#7110 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7101#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7105::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0))))))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7105::Float64
  ####G#7097#7106::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7098#7107::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7099#7108::Tuple{}
  ##########x#7074#7076#7080#7100#7109::Float64
  ########_var0#7077#7081#7101#7110::Tuple{}
  ########types#7102#7103#7104#7111::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      ##a#7105 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7105::Float64,0)::Float64
      ####G#7097#7106 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7101#7110 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7101#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7105::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0))))))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7105::Float64
  ####G#7097#7106::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7098#7107::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7099#7108::Tuple{}
  ##########x#7074#7076#7080#7100#7109::Float64
  ########_var0#7077#7081#7101#7110::Tuple{}
  ########types#7102#7103#7104#7111::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      ##a#7105 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7105::Float64,0)::Float64
      ####G#7097#7106 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7101#7110 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7101#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7105::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0))))))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7105::Float64
  ####G#7097#7106::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7098#7107::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7099#7108::Tuple{}
  ##########x#7074#7076#7080#7100#7109::Float64
  ########_var0#7077#7081#7101#7110::Tuple{}
  ########types#7102#7103#7104#7111::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 62:
      ##a#7105 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7105::Float64,0)::Float64
      ####G#7097#7106 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7101#7110 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7101#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7105::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.8378770664093456,1.0))))))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}
  ####r#7122#7128::UInt64
  ####rabs#7123#7129::Int64
  ####idx#7124#7130::Int64
  ####x#7125#7131::Float64
  ########_var0#7114#7120#7126#7132::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7133::Float64
  ##_var0#7134::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7132 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7132 = false
      2: 
      ########_var0#7114#7120#7126#7132::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7133 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7128 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7133::Float64),0x000fffffffffffff))
      ####rabs#7123#7129 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7128::UInt64,1))))
      ####idx#7124#7130 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7129::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7131 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7128::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7129::Int64)),####rabs#7123#7129::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7130::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7129::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7129::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7130::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7134 = ####x#7125#7131::Float64
      goto 5
      4: 
      ##_var0#7134 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7130::Int64,####rabs#7123#7129::Int64,####x#7125#7131::Float64)::Float64
      goto 5
      ##_var0#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64)),##_var0#7134::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}
  ####r#7122#7140::UInt64
  ####rabs#7123#7141::Int64
  ####idx#7124#7142::Int64
  ####x#7125#7143::Float64
  ########_var0#7114#7120#7126#7144::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7145::Float64
  ##_var0#7146::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7144 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7144 = false
      2: 
      ########_var0#7114#7120#7126#7144::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7145 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7145 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7140 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7145::Float64),0x000fffffffffffff))
      ####rabs#7123#7141 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7140::UInt64,1))))
      ####idx#7124#7142 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7141::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7143 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7140::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7141::Int64)),####rabs#7123#7141::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7142::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7141::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7141::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7142::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7146 = ####x#7125#7143::Float64
      goto 5
      4: 
      ##_var0#7146 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7142::Int64,####rabs#7123#7141::Int64,####x#7125#7143::Float64)::Float64
      goto 5
      ##_var0#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,##_var0#7146::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7122#7156::UInt64
  ####rabs#7123#7157::Int64
  ####idx#7124#7158::Int64
  ####x#7125#7159::Float64
  ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7161::Float64
  ##_var0#7162::Float64
  ######tup#7073#7147#7163::Tuple{}
  ######x#7074#7148#7164::Float64
  ####_var0#7149#7165::Tuple{}
  ######types#7102#7150#7166::Tuple{Type{Float64}}
  ######a#7151#7153#7167::Tuple{}
  ######b#7152#7154#7168::Tuple{}
  ####_var0#7155#7169::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7160 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7160 = false
      2: 
      ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7161 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7156 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7161::Float64),0x000fffffffffffff))
      ####rabs#7123#7157 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7156::UInt64,1))))
      ####idx#7124#7158 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7157::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7159 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7156::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7157::Int64)),####rabs#7123#7157::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7157::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7157::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7162 = ####x#7125#7159::Float64
      goto 5
      4: 
      ##_var0#7162 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7158::Int64,####rabs#7123#7157::Int64,####x#7125#7159::Float64)::Float64
      goto 5
      ##_var0#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7162::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7149#7165 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7149#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7169 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}
  ####r#7122#7140::UInt64
  ####rabs#7123#7141::Int64
  ####idx#7124#7142::Int64
  ####x#7125#7143::Float64
  ########_var0#7114#7120#7126#7144::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7145::Float64
  ##_var0#7146::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7144 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7144 = false
      2: 
      ########_var0#7114#7120#7126#7144::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7145 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7145 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7140 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7145::Float64),0x000fffffffffffff))
      ####rabs#7123#7141 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7140::UInt64,1))))
      ####idx#7124#7142 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7141::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7143 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7140::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7141::Int64)),####rabs#7123#7141::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7142::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7141::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7141::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7142::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7146 = ####x#7125#7143::Float64
      goto 5
      4: 
      ##_var0#7146 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7142::Int64,####rabs#7123#7141::Int64,####x#7125#7143::Float64)::Float64
      goto 5
      ##_var0#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,##_var0#7146::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}
  ####r#7122#7140::UInt64
  ####rabs#7123#7141::Int64
  ####idx#7124#7142::Int64
  ####x#7125#7143::Float64
  ########_var0#7114#7120#7126#7144::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7145::Float64
  ##_var0#7146::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7144 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7144 = false
      2: 
      ########_var0#7114#7120#7126#7144::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7145 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7145 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7140 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7145::Float64),0x000fffffffffffff))
      ####rabs#7123#7141 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7140::UInt64,1))))
      ####idx#7124#7142 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7141::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7143 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7140::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7141::Int64)),####rabs#7123#7141::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7142::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7141::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7141::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7142::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7146 = ####x#7125#7143::Float64
      goto 5
      4: 
      ##_var0#7146 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7142::Int64,####rabs#7123#7141::Int64,####x#7125#7143::Float64)::Float64
      goto 5
      ##_var0#7146 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,##_var0#7146::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7122#7156::UInt64
  ####rabs#7123#7157::Int64
  ####idx#7124#7158::Int64
  ####x#7125#7159::Float64
  ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7161::Float64
  ##_var0#7162::Float64
  ######tup#7073#7147#7163::Tuple{}
  ######x#7074#7148#7164::Float64
  ####_var0#7149#7165::Tuple{}
  ######types#7102#7150#7166::Tuple{Type{Float64}}
  ######a#7151#7153#7167::Tuple{}
  ######b#7152#7154#7168::Tuple{}
  ####_var0#7155#7169::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7160 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7160 = false
      2: 
      ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7161 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7156 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7161::Float64),0x000fffffffffffff))
      ####rabs#7123#7157 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7156::UInt64,1))))
      ####idx#7124#7158 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7157::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7159 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7156::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7157::Int64)),####rabs#7123#7157::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7157::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7157::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7162 = ####x#7125#7159::Float64
      goto 5
      4: 
      ##_var0#7162 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7158::Int64,####rabs#7123#7157::Int64,####x#7125#7159::Float64)::Float64
      goto 5
      ##_var0#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7162::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7149#7165 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7149#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7169 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7122#7156::UInt64
  ####rabs#7123#7157::Int64
  ####idx#7124#7158::Int64
  ####x#7125#7159::Float64
  ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7161::Float64
  ##_var0#7162::Float64
  ######tup#7073#7147#7163::Tuple{}
  ######x#7074#7148#7164::Float64
  ####_var0#7149#7165::Tuple{}
  ######types#7102#7150#7166::Tuple{Type{Float64}}
  ######a#7151#7153#7167::Tuple{}
  ######b#7152#7154#7168::Tuple{}
  ####_var0#7155#7169::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7160 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7160 = false
      2: 
      ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7161 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7156 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7161::Float64),0x000fffffffffffff))
      ####rabs#7123#7157 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7156::UInt64,1))))
      ####idx#7124#7158 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7157::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7159 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7156::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7157::Int64)),####rabs#7123#7157::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7157::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7157::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7162 = ####x#7125#7159::Float64
      goto 5
      4: 
      ##_var0#7162 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7158::Int64,####rabs#7123#7157::Int64,####x#7125#7159::Float64)::Float64
      goto 5
      ##_var0#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7162::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7149#7165 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7149#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7169 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7122#7156::UInt64
  ####rabs#7123#7157::Int64
  ####idx#7124#7158::Int64
  ####x#7125#7159::Float64
  ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7161::Float64
  ##_var0#7162::Float64
  ######tup#7073#7147#7163::Tuple{}
  ######x#7074#7148#7164::Float64
  ####_var0#7149#7165::Tuple{}
  ######types#7102#7150#7166::Tuple{Type{Float64}}
  ######a#7151#7153#7167::Tuple{}
  ######b#7152#7154#7168::Tuple{}
  ####_var0#7155#7169::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7160 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7160 = false
      2: 
      ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7161 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7156 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7161::Float64),0x000fffffffffffff))
      ####rabs#7123#7157 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7156::UInt64,1))))
      ####idx#7124#7158 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7157::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7159 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7156::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7157::Int64)),####rabs#7123#7157::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7157::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7157::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7162 = ####x#7125#7159::Float64
      goto 5
      4: 
      ##_var0#7162 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7158::Int64,####rabs#7123#7157::Int64,####x#7125#7159::Float64)::Float64
      goto 5
      ##_var0#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7162::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7149#7165 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7149#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7169 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7122#7156::UInt64
  ####rabs#7123#7157::Int64
  ####idx#7124#7158::Int64
  ####x#7125#7159::Float64
  ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
  ############_var0#7112#7113#7115#7121#7127#7161::Float64
  ##_var0#7162::Float64
  ######tup#7073#7147#7163::Tuple{}
  ######x#7074#7148#7164::Float64
  ####_var0#7149#7165::Tuple{}
  ######types#7102#7150#7166::Tuple{Type{Float64}}
  ######a#7151#7153#7167::Tuple{}
  ######b#7152#7154#7168::Tuple{}
  ####_var0#7155#7169::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 77:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7114#7120#7126#7160 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7114#7120#7126#7160 = false
      2: 
      ########_var0#7114#7120#7126#7160::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7112#7113#7115#7121#7127#7161 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7112#7113#7115#7121#7127#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7122#7156 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7112#7113#7115#7121#7127#7161::Float64),0x000fffffffffffff))
      ####rabs#7123#7157 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7122#7156::UInt64,1))))
      ####idx#7124#7158 = (Base.box)(Int64,(Base.and_int)(####rabs#7123#7157::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7125#7159 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7122#7156::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7123#7157::Int64)),####rabs#7123#7157::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7123#7157::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7123#7157::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7124#7158::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7162 = ####x#7125#7159::Float64
      goto 5
      4: 
      ##_var0#7162 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7124#7158::Int64,####rabs#7123#7157::Int64,####x#7125#7159::Float64)::Float64
      goto 5
      ##_var0#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7162::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7149#7165 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7149#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7169 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64
      GenSym(1) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.sub_int)(x::Int64,(top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0)))))
      GenSym(3) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(1),GenSym(1))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),0.3989422804014327)),(Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0)))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      GenSym(1) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)),GenSym(0)))
      GenSym(3) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(1),GenSym(1))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),0.3989422804014327)),GenSym(0)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.normpdf)((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      GenSym(1) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)),GenSym(0)))
      GenSym(3) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(1),GenSym(1))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),0.3989422804014327)),GenSym(0)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64
      GenSym(1) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)),GenSym(0)))
      GenSym(3) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(1),GenSym(1))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),0.3989422804014327)),GenSym(0)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.normpdf)((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.normpdf)((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.normpdf)((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.normpdf)((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}
  t::Int64
  ##xs#7261::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      GenSym(0) = (Base.power_by_squaring)((top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64,2)::Int64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,(top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))))),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}
  t::Int64
  ##xs#7262::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))))),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7290::Float64
  ##exp_a#7291::Float64
  ##deriv#7292::Float64
  ####G#7273#7293::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7294::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7295::Tuple{}
  ##########x#7074#7076#7080#7276#7296::Float64
  ########_var0#7077#7081#7277#7297::Tuple{}
  ##xs#7298::Tuple{}
  ##########tup#7073#7147#7278#7282#7299::Tuple{}
  ##########x#7074#7148#7279#7283#7300::Float64
  ########_var0#7149#7280#7284#7301::Tuple{}
  ##########types#7102#7150#7281#7285#7302::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7303::Tuple{}
  ########x#7264#7266#7287#7304::Int64
  ######_var0#7267#7288#7305::Tuple{}
  ########types#7171#7268#7289#7306::Tuple{Type{Int64}}
  ########tup#7263#7265#7269#7307::Tuple{}
  ########x#7264#7266#7270#7308::Int64
  ######_var0#7267#7271#7309::Tuple{}
  ########types#7171#7268#7272#7310::Tuple{Type{Int64}}
  ######a#7151#7153#7311::Tuple{}
  ######b#7152#7154#7312::Tuple{}
  ####_var0#7155#7313::Tuple{}
  ##exp_a#7314::Float64
  ####G#7215#7315::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7216#7316::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7217#7317::Tuple{}
  ##########x#7074#7076#7080#7218#7318::Float64
  ########_var0#7077#7081#7219#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      $(Expr(:boundscheck, false))
      ######_var0#7267#7271#7309 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7267#7271#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7290 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7291 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7292 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7293 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7297 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7291::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7301 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7305 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7313 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7314 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7215#7315 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7219#7319 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7219#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7314::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}
  t::Int64
  ##xs#7262::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))))),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}
  t::Int64
  ##xs#7262::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))))),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7290::Float64
  ##exp_a#7291::Float64
  ##deriv#7292::Float64
  ####G#7273#7293::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7294::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7295::Tuple{}
  ##########x#7074#7076#7080#7276#7296::Float64
  ########_var0#7077#7081#7277#7297::Tuple{}
  ##xs#7298::Tuple{}
  ##########tup#7073#7147#7278#7282#7299::Tuple{}
  ##########x#7074#7148#7279#7283#7300::Float64
  ########_var0#7149#7280#7284#7301::Tuple{}
  ##########types#7102#7150#7281#7285#7302::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7303::Tuple{}
  ########x#7264#7266#7287#7304::Int64
  ######_var0#7267#7288#7305::Tuple{}
  ########types#7171#7268#7289#7306::Tuple{Type{Int64}}
  ########tup#7263#7265#7269#7307::Tuple{}
  ########x#7264#7266#7270#7308::Int64
  ######_var0#7267#7271#7309::Tuple{}
  ########types#7171#7268#7272#7310::Tuple{Type{Int64}}
  ######a#7151#7153#7311::Tuple{}
  ######b#7152#7154#7312::Tuple{}
  ####_var0#7155#7313::Tuple{}
  ##exp_a#7314::Float64
  ####G#7215#7315::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7216#7316::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7217#7317::Tuple{}
  ##########x#7074#7076#7080#7218#7318::Float64
  ########_var0#7077#7081#7219#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      $(Expr(:boundscheck, false))
      ######_var0#7267#7271#7309 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7267#7271#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7290 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7291 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7292 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7293 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7297 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7291::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7301 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7305 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7313 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7314 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7215#7315 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7219#7319 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7219#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7314::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7290::Float64
  ##exp_a#7291::Float64
  ##deriv#7292::Float64
  ####G#7273#7293::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7294::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7295::Tuple{}
  ##########x#7074#7076#7080#7276#7296::Float64
  ########_var0#7077#7081#7277#7297::Tuple{}
  ##xs#7298::Tuple{}
  ##########tup#7073#7147#7278#7282#7299::Tuple{}
  ##########x#7074#7148#7279#7283#7300::Float64
  ########_var0#7149#7280#7284#7301::Tuple{}
  ##########types#7102#7150#7281#7285#7302::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7303::Tuple{}
  ########x#7264#7266#7287#7304::Int64
  ######_var0#7267#7288#7305::Tuple{}
  ########types#7171#7268#7289#7306::Tuple{Type{Int64}}
  ########tup#7263#7265#7269#7307::Tuple{}
  ########x#7264#7266#7270#7308::Int64
  ######_var0#7267#7271#7309::Tuple{}
  ########types#7171#7268#7272#7310::Tuple{Type{Int64}}
  ######a#7151#7153#7311::Tuple{}
  ######b#7152#7154#7312::Tuple{}
  ####_var0#7155#7313::Tuple{}
  ##exp_a#7314::Float64
  ####G#7215#7315::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7216#7316::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7217#7317::Tuple{}
  ##########x#7074#7076#7080#7218#7318::Float64
  ########_var0#7077#7081#7219#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      $(Expr(:boundscheck, false))
      ######_var0#7267#7271#7309 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7267#7271#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7290 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7291 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7292 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7293 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7297 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7291::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7301 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7305 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7313 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7314 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7215#7315 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7219#7319 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7219#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7314::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7290::Float64
  ##exp_a#7291::Float64
  ##deriv#7292::Float64
  ####G#7273#7293::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7294::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7295::Tuple{}
  ##########x#7074#7076#7080#7276#7296::Float64
  ########_var0#7077#7081#7277#7297::Tuple{}
  ##xs#7298::Tuple{}
  ##########tup#7073#7147#7278#7282#7299::Tuple{}
  ##########x#7074#7148#7279#7283#7300::Float64
  ########_var0#7149#7280#7284#7301::Tuple{}
  ##########types#7102#7150#7281#7285#7302::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7303::Tuple{}
  ########x#7264#7266#7287#7304::Int64
  ######_var0#7267#7288#7305::Tuple{}
  ########types#7171#7268#7289#7306::Tuple{Type{Int64}}
  ########tup#7263#7265#7269#7307::Tuple{}
  ########x#7264#7266#7270#7308::Int64
  ######_var0#7267#7271#7309::Tuple{}
  ########types#7171#7268#7272#7310::Tuple{Type{Int64}}
  ######a#7151#7153#7311::Tuple{}
  ######b#7152#7154#7312::Tuple{}
  ####_var0#7155#7313::Tuple{}
  ##exp_a#7314::Float64
  ####G#7215#7315::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7216#7316::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7217#7317::Tuple{}
  ##########x#7074#7076#7080#7218#7318::Float64
  ########_var0#7077#7081#7219#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      $(Expr(:boundscheck, false))
      ######_var0#7267#7271#7309 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7267#7271#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7290 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7291 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7292 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7293 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7297 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7291::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7301 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7305 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7313 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7314 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7215#7315 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7219#7319 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7219#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7314::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7290::Float64
  ##exp_a#7291::Float64
  ##deriv#7292::Float64
  ####G#7273#7293::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7294::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7295::Tuple{}
  ##########x#7074#7076#7080#7276#7296::Float64
  ########_var0#7077#7081#7277#7297::Tuple{}
  ##xs#7298::Tuple{}
  ##########tup#7073#7147#7278#7282#7299::Tuple{}
  ##########x#7074#7148#7279#7283#7300::Float64
  ########_var0#7149#7280#7284#7301::Tuple{}
  ##########types#7102#7150#7281#7285#7302::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7303::Tuple{}
  ########x#7264#7266#7287#7304::Int64
  ######_var0#7267#7288#7305::Tuple{}
  ########types#7171#7268#7289#7306::Tuple{Type{Int64}}
  ########tup#7263#7265#7269#7307::Tuple{}
  ########x#7264#7266#7270#7308::Int64
  ######_var0#7267#7271#7309::Tuple{}
  ########types#7171#7268#7272#7310::Tuple{Type{Int64}}
  ######a#7151#7153#7311::Tuple{}
  ######b#7152#7154#7312::Tuple{}
  ####_var0#7155#7313::Tuple{}
  ##exp_a#7314::Float64
  ####G#7215#7315::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7216#7316::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7217#7317::Tuple{}
  ##########x#7074#7076#7080#7218#7318::Float64
  ########_var0#7077#7081#7219#7319::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 71:
      $(Expr(:boundscheck, false))
      ######_var0#7267#7271#7309 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7267#7271#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7290 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7291 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7292 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7290::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7293 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7297 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7291::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7301 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7305 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      $(Expr(:boundscheck, false))
      ####_var0#7155#7313 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7155#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7314 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7215#7315 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7219#7319 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7219#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7314::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Normal{Int64}
  t::Int64
  ##xs#7324::Tuple{}
  ##xs#7325::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(1) = (top(getfield))(d::Distributions.Normal{Int64},:μ)::Int64
      GenSym(2) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      GenSym(0) = (Base.power_by_squaring)((top(getfield))(d::Distributions.Normal{Int64},:σ)::Int64,2)::Int64
      GenSym(3) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.mul_int)(GenSym(1),(top(getfield))(GenSym(2),:re)::Int64))), :((Base.box)(Int64,(Base.mul_int)(GenSym(1),(top(getfield))(GenSym(2),:im)::Int64)))))
      return (Distributions.exp)((Base.Complex)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:re)::Int64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0))))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))))),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:im)::Int64)))::Complex{Float64})::Complex{Float64}
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Normal{Float64}
  t::Int64
  ##xs#7326::Tuple{}
  ##xs#7327::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      GenSym(2) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:im)::Int64)))))))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:re)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))))), :((top(getfield))(GenSym(2),:im)::Float64))))::Complex{Float64}
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7406::Float64
  ##exp_a#7407::Float64
  ##deriv#7408::Float64
  ####G#7273#7409::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7410::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7411::Tuple{}
  ##########x#7074#7076#7080#7276#7412::Float64
  ########_var0#7077#7081#7277#7413::Tuple{}
  ##xs#7414::Tuple{}
  ##########tup#7073#7147#7278#7282#7415::Tuple{}
  ##########x#7074#7148#7279#7283#7416::Float64
  ########_var0#7149#7280#7284#7417::Tuple{}
  ##########types#7102#7150#7281#7285#7418::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7419::Tuple{}
  ########x#7264#7266#7287#7420::Int64
  ######_var0#7267#7288#7421::Tuple{}
  ########types#7171#7268#7289#7422::Tuple{Type{Int64}}
  ##xs#7423::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))) * (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7406 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7407 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7408 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7409 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7413 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7413 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7417 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7421 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.exp)(GenSym(1) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Normal{Float64}
  t::Int64
  ##xs#7326::Tuple{}
  ##xs#7327::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      GenSym(2) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:im)::Int64)))))))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:re)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))))), :((top(getfield))(GenSym(2),:im)::Float64))))::Complex{Float64}
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Normal{Float64}
  t::Int64
  ##xs#7326::Tuple{}
  ##xs#7327::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.Normal{Float64},:μ)::Float64
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64)))
      GenSym(2) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(1),:im)::Int64)))))))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:re)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Normal{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))))), :((top(getfield))(GenSym(2),:im)::Float64))))::Complex{Float64}
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7406::Float64
  ##exp_a#7407::Float64
  ##deriv#7408::Float64
  ####G#7273#7409::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7410::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7411::Tuple{}
  ##########x#7074#7076#7080#7276#7412::Float64
  ########_var0#7077#7081#7277#7413::Tuple{}
  ##xs#7414::Tuple{}
  ##########tup#7073#7147#7278#7282#7415::Tuple{}
  ##########x#7074#7148#7279#7283#7416::Float64
  ########_var0#7149#7280#7284#7417::Tuple{}
  ##########types#7102#7150#7281#7285#7418::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7419::Tuple{}
  ########x#7264#7266#7287#7420::Int64
  ######_var0#7267#7288#7421::Tuple{}
  ########types#7171#7268#7289#7422::Tuple{Type{Int64}}
  ##xs#7423::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))) * (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7406 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7407 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7408 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7409 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7413 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7413 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7417 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7421 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.exp)(GenSym(1) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7406::Float64
  ##exp_a#7407::Float64
  ##deriv#7408::Float64
  ####G#7273#7409::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7410::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7411::Tuple{}
  ##########x#7074#7076#7080#7276#7412::Float64
  ########_var0#7077#7081#7277#7413::Tuple{}
  ##xs#7414::Tuple{}
  ##########tup#7073#7147#7278#7282#7415::Tuple{}
  ##########x#7074#7148#7279#7283#7416::Float64
  ########_var0#7149#7280#7284#7417::Tuple{}
  ##########types#7102#7150#7281#7285#7418::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7419::Tuple{}
  ########x#7264#7266#7287#7420::Int64
  ######_var0#7267#7288#7421::Tuple{}
  ########types#7171#7268#7289#7422::Tuple{Type{Int64}}
  ##xs#7423::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))) * (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7406 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7407 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7408 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7409 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7413 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7413 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7417 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7421 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.exp)(GenSym(1) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7406::Float64
  ##exp_a#7407::Float64
  ##deriv#7408::Float64
  ####G#7273#7409::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7410::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7411::Tuple{}
  ##########x#7074#7076#7080#7276#7412::Float64
  ########_var0#7077#7081#7277#7413::Tuple{}
  ##xs#7414::Tuple{}
  ##########tup#7073#7147#7278#7282#7415::Tuple{}
  ##########x#7074#7148#7279#7283#7416::Float64
  ########_var0#7149#7280#7284#7417::Tuple{}
  ##########types#7102#7150#7281#7285#7418::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7419::Tuple{}
  ########x#7264#7266#7287#7420::Int64
  ######_var0#7267#7288#7421::Tuple{}
  ########types#7171#7268#7289#7422::Tuple{Type{Int64}}
  ##xs#7423::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))) * (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7406 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7407 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7408 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7409 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7413 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7413 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7417 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7421 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.exp)(GenSym(1) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ##a#7406::Float64
  ##exp_a#7407::Float64
  ##deriv#7408::Float64
  ####G#7273#7409::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7274#7410::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7275#7411::Tuple{}
  ##########x#7074#7076#7080#7276#7412::Float64
  ########_var0#7077#7081#7277#7413::Tuple{}
  ##xs#7414::Tuple{}
  ##########tup#7073#7147#7278#7282#7415::Tuple{}
  ##########x#7074#7148#7279#7283#7416::Float64
  ########_var0#7149#7280#7284#7417::Tuple{}
  ##########types#7102#7150#7281#7285#7418::Tuple{Type{Float64}}
  ########tup#7263#7265#7286#7419::Tuple{}
  ########x#7264#7266#7287#7420::Int64
  ######_var0#7267#7288#7421::Tuple{}
  ########types#7171#7268#7289#7422::Tuple{Type{Int64}}
  ##xs#7423::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/normal.jl, line 72:
      GenSym(1) = $(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,t::Int64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(t::Int64,0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))) * (top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7406 = (top(getfield))((top(getfield))(d::Distributions.Normal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7407 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7408 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7406::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7273#7409 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7277#7413 = (top(tuple))()::Tuple{}
      goto 2
      ########_var0#7077#7081#7277#7413 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7149#7280#7284#7417 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7149#7280#7284#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      $(Expr(:boundscheck, false))
      ######_var0#7267#7288#7421 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7267#7288#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Distributions.exp)(GenSym(1) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




