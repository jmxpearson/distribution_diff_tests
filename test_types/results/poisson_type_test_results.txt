____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 39:
      return (top(tuple))((top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 39:
      return (top(tuple))((top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 39:
      return (top(tuple))((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 46:
      return (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 46:
      return (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 46:
      return (top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 55:
      return (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 55:
      return (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 55:
      return (top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 48:
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64)))::Int64
  end::Int64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 48:
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64)))::Int64
  end::Int64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 48:
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)))::Int64
  end::Int64




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}
  λ::Float64
  ######fy#1708#7064#7065::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 51:
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 52:
      ######fy#1708#7064#7065 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.trunc_llvm)(λ::Float64)),λ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.sub_float)(λ::Float64,λ::Float64)),######fy#1708#7064#7065::Float64)::Bool,(Base.ne_float)(######fy#1708#7064#7065::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,######fy#1708#7064#7065::Float64))::Bool)))) goto 0
      GenSym(0) = (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)(λ::Float64)))::Int64
      return (top(vect))((Base.box)(Int64,(Base.sub_int)(GenSym(0),1)),(Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)(λ::Float64)))::Int64)::Array{Int64,1}
      0: 
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)(λ::Float64)))::Int64)::Array{Int64,1}
  end::Array{Int64,1}

----float----

Variables:
  d::Distributions.Poisson{Float64}
  λ::Float64
  ######fy#1708#7064#7065::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 51:
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 52:
      ######fy#1708#7064#7065 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.trunc_llvm)(λ::Float64)),λ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.sub_float)(λ::Float64,λ::Float64)),######fy#1708#7064#7065::Float64)::Bool,(Base.ne_float)(######fy#1708#7064#7065::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,######fy#1708#7064#7065::Float64))::Bool)))) goto 0
      GenSym(0) = (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)(λ::Float64)))::Int64
      return (top(vect))((Base.box)(Int64,(Base.sub_int)(GenSym(0),1)),(Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)(λ::Float64)))::Int64)::Array{Int64,1}
      0: 
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)(λ::Float64)))::Int64)::Array{Int64,1}
  end::Array{Int64,1}

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 51:
      λ = (top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 52:
      unless (Distributions.isinteger)(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ANY goto 0
      GenSym(0) = (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)))::Int64
      return (top(vect))((Base.box)(Int64,(Base.sub_int)(GenSym(0),1)),(Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)))::Int64)::Array{Int64,1}
      0: 
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)))::Int64)::Array{Int64,1}
  end::Array{Int64,1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(24) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(25) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(26) = (top(ccall))((top(tuple))("qpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64,0,GenSym(24),0,GenSym(25),0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(26)))
  end::Int64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(24) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(25) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(26) = (top(ccall))((top(tuple))("qpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64,0,GenSym(24),0,GenSym(25),0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(26)))
  end::Int64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.poisinvcdf)((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 57:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 57:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##sqrt_a#7110::Float64
  ##deriv#7111::Float64
  ####G#7087#7112::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7088#7113::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7089#7114::Tuple{}
  ##########x#7079#7081#7085#7090#7115::Float64
  ########_var0#7082#7086#7091#7116::Tuple{}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ##div_a#7119::Float64
  ####afactor#7102#7120::Float64
  ####bfactor#7103#7121::Float64
  ########a#7092#7096#7104#7122::Tuple{}
  ########b#7093#7097#7105#7123::Tuple{}
  ########afactor#7094#7098#7106#7124::Float64
  ########bfactor#7095#7099#7107#7125::Float64
  ######_var0#7100#7108#7126::Tuple{}
  ######types#7101#7109#7127::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 57:
      ##sqrt_a#7110 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7111 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7110::Float64))
      ####G#7087#7112 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7091#7116 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7082#7086#7091#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7110::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ##a1#7117 = GenSym(1)
      ##a2#7118 = GenSym(2)
      ##div_a#7119 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7117::Float64,##a2#7118::Float64))
      ####afactor#7102#7120 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7118::Float64))
      ####bfactor#7103#7121 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7117::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7118::Float64,##a2#7118::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7100#7108#7126 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7100#7108#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7119::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7131::Float64
  ##a2#7132::Float64
  ##div_a#7133::Float64
  ####afactor#7102#7134::Float64
  ####bfactor#7103#7135::Float64
  ########a#7092#7096#7104#7136::Tuple{}
  ########b#7093#7097#7105#7137::Tuple{}
  ########afactor#7094#7098#7106#7138::Float64
  ########bfactor#7095#7099#7107#7139::Float64
  ######_var0#7100#7108#7140::Tuple{}
  ######types#7101#7109#7141::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 59:
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7131 = GenSym(0)
      ##a2#7132 = GenSym(1)
      ##div_a#7133 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7131::Float64,##a2#7132::Float64))
      ####afactor#7102#7134 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7132::Float64))
      ####bfactor#7103#7135 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7131::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7132::Float64,##a2#7132::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7100#7108#7140 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7100#7108#7140 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7133::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}
  λ::Float64
  s::Float64
  λk::Float64
  #s25::Int64
  k::Int64
  ##xs#7142::Tuple{Float64}
  ##xs#7143::Tuple{}
  ##xs#7144::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 62:
      NewvarNode(:s)
      NewvarNode(:λk)
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 63:
      unless (Base.eq_float)(λ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 64:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 65:
      unless (Base.lt_float)(λ::Float64,50.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 66:
      s = (Base.box)(Float64,(Base.sitofp)(Float64,0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 67:
      λk = (Base.box)(Float64,(Base.sitofp)(Float64,1)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 68:
      GenSym(0) = $(Expr(:new, UnitRange{Int64}, 1, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.sle_int)(1,100)::Bool,100,(Base.box)(Int64,(Base.sub_int)(1,1)))::Int64)))
      #s25 = (top(getfield))(GenSym(0),:start)::Int64
      unless (Base.box)(Base.Bool,(Base.not_int)(#s25::Int64 === (Base.box)(Base.Int,(Base.add_int)((top(getfield))(GenSym(0),:stop)::Int64,1))::Bool)) goto 2
      3: 
      GenSym(15) = #s25::Int64
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(#s25::Int64,1))
      k = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 69:
      λk = (Base.box)(Base.Float64,(Base.mul_float)(λk::Float64,λ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 70:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),1.0))
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(5),0)::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),1.0))
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      s = (Base.box)(Base.Float64,(Base.add_float)(s::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(λk::Float64,(Base.Math.nan_dom_err)(GenSym(7),GenSym(5))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),GenSym(2))::Float64))))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s25::Int64 === (Base.box)(Base.Int,(Base.add_int)((top(getfield))(GenSym(0),:stop)::Int64,1))::Bool)))) goto 3
      2: 
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 72:
      GenSym(11) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,λ::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(λ::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.Math.nan_dom_err)(GenSym(11),λ::Float64)::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),s::Float64))))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 74:
      GenSym(12) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),3.141592653589793)),2.718281828459045)),λ::Float64))
      GenSym(14) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64)),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,12)),λ::Float64)))))),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,24)),λ::Float64)),λ::Float64)))))),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,19)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,360)),λ::Float64)),λ::Float64)),λ::Float64))))))
      6: 
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}
  λ::Float64
  s::Float64
  λk::Float64
  #s25::Int64
  k::Int64
  ##xs#7142::Tuple{Float64}
  ##xs#7143::Tuple{}
  ##xs#7144::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 62:
      NewvarNode(:s)
      NewvarNode(:λk)
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 63:
      unless (Base.eq_float)(λ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 64:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 65:
      unless (Base.lt_float)(λ::Float64,50.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 66:
      s = (Base.box)(Float64,(Base.sitofp)(Float64,0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 67:
      λk = (Base.box)(Float64,(Base.sitofp)(Float64,1)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 68:
      GenSym(0) = $(Expr(:new, UnitRange{Int64}, 1, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.sle_int)(1,100)::Bool,100,(Base.box)(Int64,(Base.sub_int)(1,1)))::Int64)))
      #s25 = (top(getfield))(GenSym(0),:start)::Int64
      unless (Base.box)(Base.Bool,(Base.not_int)(#s25::Int64 === (Base.box)(Base.Int,(Base.add_int)((top(getfield))(GenSym(0),:stop)::Int64,1))::Bool)) goto 2
      3: 
      GenSym(15) = #s25::Int64
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(#s25::Int64,1))
      k = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 69:
      λk = (Base.box)(Base.Float64,(Base.mul_float)(λk::Float64,λ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 70:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),1.0))
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(5),0)::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),1.0))
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      s = (Base.box)(Base.Float64,(Base.add_float)(s::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(λk::Float64,(Base.Math.nan_dom_err)(GenSym(7),GenSym(5))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),GenSym(2))::Float64))))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s25::Int64 === (Base.box)(Base.Int,(Base.add_int)((top(getfield))(GenSym(0),:stop)::Int64,1))::Bool)))) goto 3
      2: 
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 72:
      GenSym(11) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,λ::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(λ::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.Math.nan_dom_err)(GenSym(11),λ::Float64)::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),s::Float64))))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 74:
      GenSym(12) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),3.141592653589793)),2.718281828459045)),λ::Float64))
      GenSym(14) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64)),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,12)),λ::Float64)))))),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,24)),λ::Float64)),λ::Float64)))))),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,19)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,360)),λ::Float64)),λ::Float64)),λ::Float64))))))
      6: 
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  s::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  λk::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  k::Int64
  _var0::Bool
  ##a1#7244::Float64
  ##a2#7245::Float64
  ######a#7092#7149#7246::Tuple{}
  ######b#7093#7150#7247::Tuple{}
  ######afactor#7094#7151#7248::Float64
  ######bfactor#7095#7152#7249::Float64
  ####_var0#7153#7250::Tuple{}
  ######tup#7078#7155#7251::Tuple{}
  ######x#7079#7156#7252::Float64
  ####_var0#7157#7253::Tuple{}
  ######types#7154#7158#7254::Tuple{Type{Float64}}
  ##div_a#7255::Float64
  ######tup#7159#7161#7256::Tuple{}
  ######x#7160#7162#7257::Float64
  ####_var0#7163#7258::Tuple{}
  ######types#7154#7164#7259::Tuple{Type{Float64}}
  ######a#7165#7167#7260::Tuple{}
  ######b#7166#7168#7261::Tuple{}
  ####_var0#7169#7262::Tuple{}
  ######tup#7175#7179#7263::Tuple{}
  ####_var0#7180#7264::Tuple{}
  ##exp_a#7265::Float64
  ####G#7181#7266::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7182#7267::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7183#7268::Tuple{}
  ##########x#7079#7081#7085#7184#7269::Float64
  ########_var0#7082#7086#7185#7270::Tuple{}
  ##a1#7271::Float64
  ##a2#7272::Float64
  ######a#7092#7149#7273::Tuple{}
  ######b#7093#7150#7274::Tuple{}
  ######afactor#7094#7151#7275::Float64
  ######bfactor#7095#7152#7276::Float64
  ####_var0#7153#7277::Tuple{}
  ##a#7278::Float64
  ####G#7170#7279::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7171#7280::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7172#7281::Tuple{}
  ##########x#7079#7081#7085#7173#7282::Float64
  ########_var0#7082#7086#7174#7283::Tuple{}
  ######tup#7175#7176#7284::Tuple{}
  ####_var0#7177#7285::Tuple{}
  ######types#7154#7178#7286::Tuple{Type{Float64}}
  ##a1#7287::Float64
  ##a2#7288::Float64
  ######a#7092#7149#7289::Tuple{}
  ######b#7093#7150#7290::Tuple{}
  ######afactor#7094#7151#7291::Float64
  ######bfactor#7095#7152#7292::Float64
  ####_var0#7153#7293::Tuple{}
  ######a#7165#7167#7294::Tuple{}
  ######b#7166#7168#7295::Tuple{}
  ####_var0#7169#7296::Tuple{}
  ##xs#7297::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7194#7197#7201#7233#7298::Tuple{}
  ##########x#7195#7198#7202#7234#7299::Int64
  ########_var0#7199#7203#7235#7300::Tuple{}
  ##########types#7196#7200#7204#7236#7301::Tuple{Type{Int64}}
  ####a1#7237#7302::Float64
  ####a2#7238#7303::Float64
  ########a#7092#7149#7239#7304::Tuple{}
  ########b#7093#7150#7240#7305::Tuple{}
  ########afactor#7094#7151#7241#7306::Float64
  ########bfactor#7095#7152#7242#7307::Float64
  ######_var0#7153#7243#7308::Tuple{}
  ##a#7309::Float64
  ##div_a#7310::Float64
  ##deriv#7311::Float64
  ####G#7205#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7206#7313::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7207#7314::Tuple{}
  ##########x#7079#7081#7085#7208#7315::Float64
  ########_var0#7082#7086#7209#7316::Tuple{}
  ##xs#7317::Tuple{}
  ##########tup#7194#7197#7201#7215#7318::Tuple{}
  ##########x#7195#7198#7202#7216#7319::Int64
  ########_var0#7199#7203#7217#7320::Tuple{}
  ##########types#7196#7200#7204#7218#7321::Tuple{Type{Int64}}
  ####a1#7219#7322::Float64
  ####a2#7220#7323::Float64
  ########a#7092#7149#7221#7324::Tuple{}
  ########b#7093#7150#7222#7325::Tuple{}
  ########afactor#7094#7151#7223#7326::Float64
  ########bfactor#7095#7152#7224#7327::Float64
  ######_var0#7153#7225#7328::Tuple{}
  ##a#7329::Float64
  ##div_a#7330::Float64
  ##deriv#7331::Float64
  ####G#7205#7332::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7206#7333::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7207#7334::Tuple{}
  ##########x#7079#7081#7085#7208#7335::Float64
  ########_var0#7082#7086#7209#7336::Tuple{}
  ########tup#7194#7197#7201#7337::Tuple{}
  ########x#7195#7198#7202#7338::Int64
  ######_var0#7199#7203#7339::Tuple{}
  ########types#7196#7200#7204#7340::Tuple{Type{Int64}}
  ##a#7341::Float64
  ##div_a#7342::Float64
  ##deriv#7343::Float64
  ####G#7205#7344::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7206#7345::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7207#7346::Tuple{}
  ##########x#7079#7081#7085#7208#7347::Float64
  ########_var0#7082#7086#7209#7348::Tuple{}
  ##xs#7349::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7350::Float64
  ####G#7170#7351::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7171#7352::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7172#7353::Tuple{}
  ##########x#7079#7081#7085#7173#7354::Float64
  ########_var0#7082#7086#7174#7355::Tuple{}
  ########tup#7078#7155#7186#7356::Tuple{}
  ########x#7079#7156#7187#7357::Float64
  ######_var0#7157#7188#7358::Tuple{}
  ########types#7154#7158#7189#7359::Tuple{Type{Float64}}
  ######a#7210#7212#7360::Tuple{}
  ######b#7211#7213#7361::Tuple{}
  ####_var0#7214#7362::Tuple{}
  ######a#7210#7212#7363::Tuple{}
  ######b#7211#7213#7364::Tuple{}
  ####_var0#7214#7365::Tuple{}
  ######a#7210#7212#7366::Tuple{}
  ######b#7211#7213#7367::Tuple{}
  ####_var0#7214#7368::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 62:
      NewvarNode(:s)
      NewvarNode(:λk)
      λ = (top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 63:
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(2),:value)::Float64)::Bool goto 10
      _var0 = (top(getfield))((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 11
      10: 
      _var0 = false
      11: 
      unless _var0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 64:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 65:
      unless (Base.lt_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,50.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 66:
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 67:
      λk = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 68:
      GenSym(0) = $(Expr(:new, UnitRange{Int64}, 1, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.sle_int)(1,100)::Bool,100,(Base.box)(Int64,(Base.sub_int)(1,1)))::Int64)))
      #s25 = (top(getfield))(GenSym(0),:start)::Int64
      unless (Base.box)(Base.Bool,(Base.not_int)(#s25::Int64 === (Base.box)(Base.Int,(Base.add_int)((top(getfield))(GenSym(0),:stop)::Int64,1))::Bool)) goto 2
      3: 
      GenSym(37) = #s25::Int64
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(#s25::Int64,1))
      k = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 69:
      GenSym(3) = (top(getfield))(λk::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7244 = GenSym(3)
      ##a2#7245 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7153#7250 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7153#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      λk = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7244::Float64,##a2#7245::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 70:
      GenSym(8) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),1.0))
      GenSym(10) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7157#7253 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7157#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,k::Int64)),1.0))
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(5),0)::Float64
      ##div_a#7255 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λk::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(7),GenSym(5))::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7163#7258 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7163#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7169#7262 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7169#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      s = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      4: 
      unless (Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.not_int)(#s25::Int64 === (Base.box)(Base.Int,(Base.add_int)((top(getfield))(GenSym(0),:stop)::Int64,1))::Bool)))) goto 3
      2: 
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 72:
      ##a#7278 = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7278::Float64,0)::Float64
      ####G#7170#7279 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7174#7283 = (top(tuple))()::Tuple{}
      goto 42
      ########_var0#7082#7086#7174#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(18) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(17),##a#7278::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7177#7285 = (top(tuple))()::Tuple{}
      goto 44
      ####_var0#7177#7285 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      GenSym(19) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(20) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(18),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7287 = GenSym(19)
      ##a2#7288 = GenSym(20)
      $(Expr(:boundscheck, false))
      ####_var0#7153#7293 = (top(tuple))()::Tuple{}
      goto 46
      ####_var0#7153#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      46: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7287::Float64,##a2#7288::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7180#7264 = (top(tuple))()::Tuple{}
      goto 36
      ####_var0#7180#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      ##exp_a#7265 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7181#7266 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7185#7270 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7082#7086#7185#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7265::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))(s::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7271 = GenSym(14)
      ##a2#7272 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7153#7277 = (top(tuple))()::Tuple{}
      goto 40
      ####_var0#7153#7277 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7271::Float64,##a2#7272::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7169#7296 = (top(tuple))()::Tuple{}
      goto 48
      ####_var0#7169#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      48: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(21),:value)::Float64,(top(getfield))(GenSym(22),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 74:
      GenSym(30) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),3.141592653589793)),2.718281828459045)),λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7350 = (top(getfield))(GenSym(30),:value)::Float64
      GenSym(32) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7350::Float64,0)::Float64
      ####G#7170#7351 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7174#7355 = (top(tuple))()::Tuple{}
      goto 65
      ########_var0#7082#7086#7174#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      65: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(32),##a#7350::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7157#7188#7358 = (top(tuple))()::Tuple{}
      goto 67
      ######_var0#7157#7188#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      67: 
      $(Expr(:boundscheck, false))
      ######_var0#7199#7203#7339 = (top(tuple))()::Tuple{}
      goto 60
      ######_var0#7199#7203#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      60: 
      ##a#7341 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,12))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7342 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a#7341::Float64))
      ##deriv#7343 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7342::Float64,##a#7341::Float64))))
      ####G#7205#7344 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7209#7348 = (top(tuple))()::Tuple{}
      goto 62
      ########_var0#7082#7086#7209#7348 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      62: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7342::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7214#7362 = (top(tuple))()::Tuple{}
      goto 69
      ####_var0#7214#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      69: 
      $(Expr(:boundscheck, false))
      ########_var0#7199#7203#7217#7320 = (top(tuple))()::Tuple{}
      goto 55
      ########_var0#7199#7203#7217#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      55: 
      GenSym(27) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,24))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(28) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7219#7322 = GenSym(27)
      ####a2#7220#7323 = GenSym(28)
      $(Expr(:boundscheck, false))
      ######_var0#7153#7225#7328 = (top(tuple))()::Tuple{}
      goto 56
      ######_var0#7153#7225#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      56: 
      GenSym(29) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7219#7322::Float64,####a2#7220#7323::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7329 = (top(getfield))(GenSym(29),:value)::Float64
      ##div_a#7330 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a#7329::Float64))
      ##deriv#7331 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7330::Float64,##a#7329::Float64))))
      ####G#7205#7332 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7209#7336 = (top(tuple))()::Tuple{}
      goto 58
      ########_var0#7082#7086#7209#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      58: 
      GenSym(35) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7330::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7214#7365 = (top(tuple))()::Tuple{}
      goto 71
      ####_var0#7214#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      71: 
      $(Expr(:boundscheck, false))
      ########_var0#7199#7203#7235#7300 = (top(tuple))()::Tuple{}
      goto 50
      ########_var0#7199#7203#7235#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      50: 
      GenSym(23) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,360))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(24) = (top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7237#7302 = GenSym(23)
      ####a2#7238#7303 = GenSym(24)
      $(Expr(:boundscheck, false))
      ######_var0#7153#7243#7308 = (top(tuple))()::Tuple{}
      goto 51
      ######_var0#7153#7243#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7237#7302::Float64,####a2#7238#7303::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(25),λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7309 = (top(getfield))(GenSym(26),:value)::Float64
      ##div_a#7310 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,19)),##a#7309::Float64))
      ##deriv#7311 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7310::Float64,##a#7309::Float64))))
      ####G#7205#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7209#7316 = (top(tuple))()::Tuple{}
      goto 53
      ########_var0#7082#7086#7209#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      53: 
      GenSym(36) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7214#7368 = (top(tuple))()::Tuple{}
      goto 73
      ####_var0#7214#7368 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      73: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(33),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(34),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(35),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(36),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      6: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 86:
      GenSym(39) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(39)))
  end::Int64

----float----

Variables:
  d::Distributions.Poisson{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 86:
      GenSym(39) = (top(ccall))((top(tuple))("rpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(39)))
  end::Int64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 86:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:poisrand)::F)((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64,0,GenSym(2),0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dpois",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64,0,GenSym(2),0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.poispdf)((top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64




____________________________
mgf
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}
  t::Int64
  λ::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 97:
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 98:
      GenSym(1) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(GenSym(1),1.0)))),0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Poisson{Float64}
  t::Int64
  λ::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 97:
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 98:
      GenSym(1) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(GenSym(1),1.0)))),0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7078#7155#7374::Tuple{}
  ######x#7079#7156#7375::Float64
  ####_var0#7157#7376::Tuple{}
  ######types#7154#7158#7377::Tuple{Type{Float64}}
  ##exp_a#7378::Float64
  ####G#7181#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7077#7083#7182#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7078#7080#7084#7183#7381::Tuple{}
  ##########x#7079#7081#7085#7184#7382::Float64
  ########_var0#7082#7086#7185#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 97:
      λ = (top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 98:
      GenSym(1) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7157#7376 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7157#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##exp_a#7378 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(GenSym(1),1.0))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7181#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7082#7086#7185#7383 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7082#7086#7185#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.Poisson{Float64}
  t::Int64
  λ::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 102:
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 103:
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64), :((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))
      GenSym(7) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(6),:re)::Float64,1.0))), :((top(getfield))(GenSym(6),:im)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

----float----

Variables:
  d::Distributions.Poisson{Float64}
  t::Int64
  λ::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 102:
      λ = (top(getfield))(d::Distributions.Poisson{Float64},:λ)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 103:
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64), :((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))
      GenSym(7) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(6),:re)::Float64,1.0))), :((top(getfield))(GenSym(6),:im)::Float64)))
      return (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(λ::Float64,(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 102:
      λ = (top(getfield))(d::Distributions.Poisson{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:λ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/poisson.jl, line 103:
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64), :((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))
      return (Distributions.exp)(λ::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(6),:re)::Float64,1.0))), :((top(getfield))(GenSym(6),:im)::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




