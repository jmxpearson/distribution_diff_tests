____________________________
ntrials
____________________________

----float----


----dual----





____________________________
succprob
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 44:
      return (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 44:
      return (top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
failprob
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 45:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7064#7066#7069::Tuple{}
  ######b#7065#7067#7070::Tuple{}
  ####_var0#7068#7071::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 45:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7071 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7068#7071 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
params
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 46:
      return (top(tuple))((top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 46:
      return (top(tuple))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 51:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7091::Float64
  ##a2#7092::Float64
  ##div_a#7093::Float64
  ####afactor#7083#7094::Float64
  ####bfactor#7084#7095::Float64
  ########a#7073#7077#7085#7096::Tuple{}
  ########b#7074#7078#7086#7097::Tuple{}
  ########afactor#7075#7079#7087#7098::Float64
  ########bfactor#7076#7080#7088#7099::Float64
  ######_var0#7081#7089#7100::Tuple{}
  ######types#7082#7090#7101::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 51:
      GenSym(0) = (Distributions.failprob)(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7091 = GenSym(1)
      ##a2#7092 = GenSym(2)
      ##div_a#7093 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7091::Float64,##a2#7092::Float64))
      ####afactor#7083#7094 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7092::Float64))
      ####bfactor#7084#7095 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7091::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7092::Float64,##a2#7092::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7089#7100 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7081#7089#7100 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7093::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 57:
      GenSym(0) = (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0)))))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7123::Float64
  ####G#7118#7124::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7119#7125::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7120#7126::Tuple{}
  ##########x#7110#7112#7116#7121#7127::Float64
  ########_var0#7113#7117#7122#7128::Tuple{}
  ######a#7064#7066#7129::Tuple{}
  ######b#7065#7067#7130::Tuple{}
  ####_var0#7068#7131::Tuple{}
  ##a1#7132::Float64
  ##a2#7133::Float64
  ##div_a#7134::Float64
  ####afactor#7083#7135::Float64
  ####bfactor#7084#7136::Float64
  ########a#7073#7077#7085#7137::Tuple{}
  ########b#7074#7078#7086#7138::Tuple{}
  ########afactor#7075#7079#7087#7139::Float64
  ########bfactor#7076#7080#7088#7140::Float64
  ######_var0#7081#7089#7141::Tuple{}
  ######types#7082#7090#7142::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 57:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7131 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7068#7131 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ##a#7123 = (top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7118#7124 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7122#7128 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7113#7117#7122#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7123::Float64,##a#7123::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ##a1#7132 = GenSym(1)
      ##a2#7133 = GenSym(2)
      ##div_a#7134 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7132::Float64,##a2#7133::Float64))
      ####afactor#7083#7135 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7133::Float64))
      ####bfactor#7084#7136 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7132::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7133::Float64,##a2#7133::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7089#7141 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7089#7141 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7134::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 55:
      return 0
  end::Int64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 55:
      return 0
  end::Int64




____________________________
modes
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))(0)::Array{Int64,1}
  end::Array{Int64,1}

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))(0)::Array{Int64,1}
  end::Array{Int64,1}




____________________________
median
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 53:
      GenSym(0) = (Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log1p",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64
      GenSym(4) = (Base.mod)(0.6931471805599453,GenSym(3))::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.rint_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(0.6931471805599453,GenSym(4))),GenSym(3))))))),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7146#7147#7160::Tuple{}
  ####_var0#7148#7161::Tuple{}
  ##a#7162::Float64
  ####G#7149#7163::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7150#7164::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7151#7165::Tuple{}
  ##########x#7110#7112#7116#7152#7166::Float64
  ########_var0#7113#7117#7153#7167::Tuple{}
  ##########s#7156#7157#7158#7159#7168::Tuple{ASCIIString,ASCIIString,Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 53:
      $(Expr(:boundscheck, false))
      ####_var0#7148#7161 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7148#7161 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7162 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log1p",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7162::Float64,0)::Float64
      ####G#7149#7163 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7153#7167 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7113#7117#7153#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7162::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return -((Base.convert)(ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.round)(($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, 0.6931471805599453, :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) - (Base.throw)(((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:call)::ANY)((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:ErrorException)::ANY,((top(getfield))((top(getfield))(Base.Main,:Base)::ANY,:string)::ANY)("mod"," not defined for ",ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ANY)::ANY)::UNION{})::UNION{} / GenSym(2)::UNION{})::UNION{})::UNION{})::UNION{} - 1::UNION{}
  end::UNION{}




____________________________
skewness
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7064#7066#7189::Tuple{}
  ######b#7065#7067#7190::Tuple{}
  ####_var0#7068#7191::Tuple{}
  ##sqrt_a#7192::Float64
  ##deriv#7193::Float64
  ####G#7184#7194::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7185#7195::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7186#7196::Tuple{}
  ##########x#7110#7112#7116#7187#7197::Float64
  ########_var0#7113#7117#7188#7198::Tuple{}
  ########tup#7173#7176#7180#7199::Tuple{}
  ########x#7174#7177#7181#7200::Int64
  ######_var0#7178#7182#7201::Tuple{}
  ########types#7175#7179#7183#7202::Tuple{Type{Int64}}
  ######a#7064#7066#7203::Tuple{}
  ######b#7065#7067#7204::Tuple{}
  ####_var0#7068#7205::Tuple{}
  ##a1#7206::Float64
  ##a2#7207::Float64
  ##div_a#7208::Float64
  ####afactor#7083#7209::Float64
  ####bfactor#7084#7210::Float64
  ########a#7073#7077#7085#7211::Tuple{}
  ########b#7074#7078#7086#7212::Tuple{}
  ########afactor#7075#7079#7087#7213::Float64
  ########bfactor#7076#7080#7088#7214::Float64
  ######_var0#7081#7089#7215::Tuple{}
  ######types#7082#7090#7216::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 59:
      $(Expr(:boundscheck, false))
      ######_var0#7178#7182#7201 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7178#7182#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7068#7205 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7068#7205 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7068#7191 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7068#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##sqrt_a#7192 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7193 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7192::Float64))
      ####G#7184#7194 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7188#7198 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7113#7117#7188#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7192::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ##a1#7206 = GenSym(1)
      ##a2#7207 = GenSym(2)
      ##div_a#7208 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7206::Float64,##a2#7207::Float64))
      ####afactor#7083#7209 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7207::Float64))
      ####bfactor#7084#7210 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7206::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7207::Float64,##a2#7207::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7089#7215 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7081#7089#7215 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7208::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 61:
      GenSym(0) = (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,6)),(Base.box)(Float64,(Base.sitofp)(Float64,1)))),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))))))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7064#7066#7222::Tuple{}
  ######b#7065#7067#7223::Tuple{}
  ####_var0#7068#7224::Tuple{}
  ##a#7225::Float64
  ####G#7118#7226::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7119#7227::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7120#7228::Tuple{}
  ##########x#7110#7112#7116#7121#7229::Float64
  ########_var0#7113#7117#7122#7230::Tuple{}
  ##a1#7231::Float64
  ##a2#7232::Float64
  ##div_a#7233::Float64
  ####afactor#7083#7234::Float64
  ####bfactor#7084#7235::Float64
  ########a#7073#7077#7085#7236::Tuple{}
  ########b#7074#7078#7086#7237::Tuple{}
  ########afactor#7075#7079#7087#7238::Float64
  ########bfactor#7076#7080#7088#7239::Float64
  ######_var0#7081#7089#7240::Tuple{}
  ######types#7082#7090#7241::Tuple{Type{Float64}}
  ########tup#7173#7176#7180#7242::Tuple{}
  ########x#7174#7177#7181#7243::Int64
  ######_var0#7178#7182#7244::Tuple{}
  ########types#7175#7179#7183#7245::Tuple{Type{Int64}}
  ######a#7217#7219#7246::Tuple{}
  ######b#7218#7220#7247::Tuple{}
  ####_var0#7221#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 61:
      $(Expr(:boundscheck, false))
      ######_var0#7178#7182#7244 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7178#7182#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##a#7225 = (top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####G#7118#7226 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7122#7230 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7113#7117#7122#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a#7225::Float64,##a#7225::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7068#7224 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7068#7224 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7231 = GenSym(1)
      ##a2#7232 = GenSym(2)
      ##div_a#7233 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7231::Float64,##a2#7232::Float64))
      ####afactor#7083#7234 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7232::Float64))
      ####bfactor#7084#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7231::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7232::Float64,##a2#7232::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7089#7240 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7081#7089#7240 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7233::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7221#7248 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7221#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,6))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}
  _var0::Float64
  _var1::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 63:
      GenSym(3) = (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64
      unless (Base.lt_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(3))::Bool goto 5
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      _var1 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64))
      goto 6
      5: 
      _var1 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      6: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.neg_float)(_var1::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))
      unless (Base.lt_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)),GenSym(0))::Bool goto 2
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      _var0 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      goto 3
      2: 
      _var0 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      3: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(6),_var0::Float64)),(top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####T#7249#7250::Type{Float64}
  ####T#7249#7251::Type{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 63:
      ####T#7249#7251 = Float64
      GenSym(1) = -((StatsFuns.xlogx)((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{})::UNION{}
      GenSym(0) = (Distributions.failprob)(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ####T#7249#7250 = Float64
      return (GenSym(1) - (StatsFuns.xlogx)(GenSym(0))::UNION{})::UNION{} / (top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::UNION{}
  end::UNION{}




____________________________
rand
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}
  ####ri#7262#7267::UInt64
  ####idx#7263#7268::UInt64
  ####x#7264#7269::Float64
  ########_var0#7254#7260#7265#7270::UNION{BOOL,INT64}
  ############_var0#7252#7253#7255#7261#7266#7271::Float64
  ##_var0#7272::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 137:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7254#7260#7265#7270 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7254#7260#7265#7270 = false
      4: 
      ########_var0#7254#7260#7265#7270::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(4) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(3) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7252#7253#7255#7261#7266#7271 = (Base.arrayref)(GenSym(4),GenSym(3))::Float64
      goto 5
      ############_var0#7252#7253#7255#7261#7266#7271 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7262#7267 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7252#7253#7255#7261#7266#7271::Float64),0x000fffffffffffff))
      ####idx#7263#7268 = (Base.box)(UInt64,(Base.and_int)(####ri#7262#7267::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7264#7269 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7262#7267::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7263#7268::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7262#7267::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7263#7268::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7272 = ####x#7264#7269::Float64
      goto 7
      6: 
      ##_var0#7272 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7263#7268::UInt64,####x#7264#7269::Float64)::Float64
      goto 7
      ##_var0#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = (Base.box)(Base.Float64,(Base.neg_float)(##_var0#7272::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log1p",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)(GenSym(5),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))))::Int64
  end::Int64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7146#7147#7279::Tuple{}
  ####_var0#7148#7280::Tuple{}
  ##a#7281::Float64
  ####G#7149#7282::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7150#7283::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7151#7284::Tuple{}
  ##########x#7110#7112#7116#7152#7285::Float64
  ########_var0#7113#7117#7153#7286::Tuple{}
  ####ri#7262#7287::UInt64
  ####idx#7263#7288::UInt64
  ####x#7264#7289::Float64
  ########_var0#7254#7260#7265#7290::UNION{BOOL,INT64}
  ############_var0#7252#7253#7255#7261#7266#7291::Float64
  ##_var0#7292::Float64
  ##a#7293::Float64
  ##div_a#7294::Float64
  ##deriv#7295::Float64
  ####G#7274#7296::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7275#7297::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7276#7298::Tuple{}
  ##########x#7110#7112#7116#7277#7299::Float64
  ########_var0#7113#7117#7278#7300::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 137:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ########_var0#7254#7260#7265#7290 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ########_var0#7254#7260#7265#7290 = false
      6: 
      ########_var0#7254#7260#7265#7290::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7252#7253#7255#7261#7266#7291 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ############_var0#7252#7253#7255#7261#7266#7291 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ####ri#7262#7287 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7252#7253#7255#7261#7266#7291::Float64),0x000fffffffffffff))
      ####idx#7263#7288 = (Base.box)(UInt64,(Base.and_int)(####ri#7262#7287::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7264#7289 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7262#7287::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7263#7288::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7262#7287::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7263#7288::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 8
      ##_var0#7292 = ####x#7264#7289::Float64
      goto 9
      8: 
      ##_var0#7292 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7263#7288::UInt64,####x#7264#7289::Float64)::Float64
      goto 9
      ##_var0#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(##_var0#7292::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7148#7280 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7148#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##a#7281 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log1p",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7281::Float64,0)::Float64
      ####G#7149#7282 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7153#7286 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7113#7117#7153#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7281::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7293 = (top(getfield))(GenSym(5),:value)::Float64
      ##div_a#7294 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(4),##a#7293::Float64))
      ##deriv#7295 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7294::Float64,##a#7293::Float64))))
      ####G#7274#7296 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7278#7300 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7113#7117#7278#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7294::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(GenSym(6),:value)::Float64)))::Int64
  end::Int64




____________________________
pdf
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}
  x::Int64
  p::ANY

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 69:
      NewvarNode(:p)
      unless (Base.sle_int)(0,x::Int64)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 70:
      p = (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 71:
      unless (Base.lt_float)(p::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Float64,(Base.sitofp)(Float64,10)))))::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.neg_float)(p::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log1p",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(p::Float64,GenSym(4)))
      0: 
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),p::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,x::Int64))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 73:
      return (Distributions.zero)(p::UNION{})::UNION{}
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  p::ANY
  ##div_a#7326::Float64
  ######tup#7304#7307#7327::Tuple{}
  ######x#7305#7308#7328::Int64
  ####_var0#7309#7329::Tuple{}
  ######types#7306#7310#7330::Tuple{Type{Float64}}
  ######tup#7146#7147#7331::Tuple{}
  ####_var0#7148#7332::Tuple{}
  ##a#7333::Float64
  ####G#7149#7334::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7150#7335::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7151#7336::Tuple{}
  ##########x#7110#7112#7116#7152#7337::Float64
  ########_var0#7113#7117#7153#7338::Tuple{}
  ######tup#7173#7176#7339::Tuple{}
  ######x#7174#7177#7340::Int64
  ####_var0#7178#7341::Tuple{}
  ######types#7175#7179#7342::Tuple{Type{Int64}}
  ##exp_a#7343::Float64
  ####G#7311#7344::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7312#7345::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7313#7346::Tuple{}
  ##########x#7110#7112#7116#7314#7347::Float64
  ########_var0#7113#7117#7315#7348::Tuple{}
  ##a1#7349::Float64
  ##a2#7350::Float64
  ######a#7073#7316#7351::Tuple{}
  ######b#7074#7317#7352::Tuple{}
  ######afactor#7075#7318#7353::Float64
  ######bfactor#7076#7319#7354::Float64
  ####_var0#7320#7355::Tuple{}
  ######a#7064#7066#7356::Tuple{}
  ######b#7065#7067#7357::Tuple{}
  ####_var0#7068#7358::Tuple{}
  ##a#7359::Float64
  ##exp_a#7360::Float64
  ##deriv#7361::Float64
  ####G#7321#7362::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7108#7114#7322#7363::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7109#7111#7115#7323#7364::Tuple{}
  ##########x#7110#7112#7116#7324#7365::Float64
  ########_var0#7113#7117#7325#7366::Tuple{}
  ##a1#7367::Float64
  ##a2#7368::Float64
  ######a#7073#7316#7369::Tuple{}
  ######b#7074#7317#7370::Tuple{}
  ######afactor#7075#7318#7371::Float64
  ######bfactor#7076#7319#7372::Float64
  ####_var0#7320#7373::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 69:
      NewvarNode(:p)
      unless (Base.sle_int)(0,x::Int64)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 70:
      p = (top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 71:
      ##div_a#7326 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,10))))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7329 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7309#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      unless (Base.lt_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7326::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7148#7332 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7148#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##a#7333 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log1p",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7333::Float64,0)::Float64
      ####G#7149#7334 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7153#7338 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7113#7117#7153#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7333::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7178#7341 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7178#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##exp_a#7343 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(2),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7311#7344 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7315#7348 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7113#7117#7315#7348 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7343::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7349 = GenSym(5)
      ##a2#7350 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7320#7355 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7320#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7349::Float64,##a2#7350::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7068#7358 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7068#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7359 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7360 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,x::Int64)))::ANY)::Float64
      ##deriv#7361 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(x::Int64,1))))))::Float64))
      ####G#7321#7362 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7113#7117#7325#7366 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7113#7117#7325#7366 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7360::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7367 = GenSym(8)
      ##a2#7368 = GenSym(9)
      $(Expr(:boundscheck, false))
      ####_var0#7320#7373 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7320#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7367::Float64,##a2#7368::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 73:
      return (Distributions.zero)(p::UNION{})::UNION{}
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}
  t::Int64
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 124:
      p = (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 125:
      GenSym(1) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(p::Float64,(Base.box)(Base.Float64,(Base.add_float)(GenSym(1),p::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########types#7306#7374#7375#7376::Tuple{Type{Float64}}
  ##a1#7377::Float64
  ##a2#7378::Float64
  ##div_a#7379::Float64
  ####afactor#7083#7380::Float64
  ####bfactor#7084#7381::Float64
  ########a#7073#7077#7085#7382::Tuple{}
  ########b#7074#7078#7086#7383::Tuple{}
  ########afactor#7075#7079#7087#7384::Float64
  ########bfactor#7076#7080#7088#7385::Float64
  ######_var0#7081#7089#7386::Tuple{}
  ######types#7082#7090#7387::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 124:
      p = (top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 125:
      GenSym(1) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.neg_int)(t::Int64)))),0)::Float64
      GenSym(2) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(1)))), :((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7377 = GenSym(2)
      ##a2#7378 = GenSym(3)
      ##div_a#7379 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7377::Float64,##a2#7378::Float64))
      ####afactor#7083#7380 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7378::Float64))
      ####bfactor#7084#7381 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7377::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7378::Float64,##a2#7378::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7081#7089#7386 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7081#7089#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7379::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----float----

Variables:
  d::Distributions.Geometric{Float64}
  t::Int64
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 129:
      p = (top(getfield))(d::Distributions.Geometric{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 131:
      GenSym(0) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(1) = (Distributions.exp)($(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(GenSym(0),0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(GenSym(0),0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))))::UNION{COMPLEX{FLOAT64},COMPLEX{INT64}} - (Base.box)(Float64,(Base.sitofp)(Float64,1))::Complex{Float64}
      GenSym(2) = (Base.inv)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(p::Float64,(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64))))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(2),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(2),:im)::Float64)))))
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 129:
      p = (top(getfield))(d::Distributions.Geometric{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/geometric.jl, line 131:
      GenSym(0) = (Base.box)(Int64,(Base.neg_int)(t::Int64))
      GenSym(1) = ((Distributions.exp)($(Expr(:new, Complex{Int64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(GenSym(0),0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)(GenSym(0),0)::Bool,(Base.box)(Int64,(Base.neg_int)(0)),0)::Int64)::Int64))))::UNION{COMPLEX{FLOAT64},COMPLEX{INT64}} - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} + p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * ((Base.conj)(GenSym(1))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} / (Base.abs2)(GenSym(1))::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




