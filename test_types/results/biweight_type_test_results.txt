____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7077#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7094::Tuple{}
  ##########x#7069#7071#7075#7080#7095::Float64
  ########_var0#7072#7076#7081#7096::Tuple{}
  ##div_a#7097::Float64
  ######tup#7082#7085#7098::Tuple{}
  ######x#7083#7086#7099::Float64
  ####_var0#7087#7100::Tuple{}
  ######types#7084#7088#7101::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7072#7076#7081#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7100 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7100 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7077#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7094::Tuple{}
  ##########x#7069#7071#7075#7080#7095::Float64
  ########_var0#7072#7076#7081#7096::Tuple{}
  ##div_a#7097::Float64
  ######tup#7082#7085#7098::Tuple{}
  ######x#7083#7086#7099::Float64
  ####_var0#7087#7100::Tuple{}
  ######types#7084#7088#7101::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7072#7076#7081#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7100 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7100 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7077#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7094::Tuple{}
  ##########x#7069#7071#7075#7080#7095::Float64
  ########_var0#7072#7076#7081#7096::Tuple{}
  ##div_a#7097::Float64
  ######tup#7082#7085#7098::Tuple{}
  ######x#7083#7086#7099::Float64
  ####_var0#7087#7100::Tuple{}
  ######types#7084#7088#7101::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7072#7076#7081#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7100 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7100 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7077#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7094::Tuple{}
  ##########x#7069#7071#7075#7080#7095::Float64
  ########_var0#7072#7076#7081#7096::Tuple{}
  ##div_a#7097::Float64
  ######tup#7082#7085#7098::Tuple{}
  ######x#7083#7086#7099::Float64
  ####_var0#7087#7100::Tuple{}
  ######types#7084#7088#7101::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7072#7076#7081#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7100 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7100 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7077#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7094::Tuple{}
  ##########x#7069#7071#7075#7080#7095::Float64
  ########_var0#7072#7076#7081#7096::Tuple{}
  ##div_a#7097::Float64
  ######tup#7082#7085#7098::Tuple{}
  ######x#7083#7086#7099::Float64
  ####_var0#7087#7100::Tuple{}
  ######types#7084#7088#7101::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7072#7076#7081#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7097 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7100 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7100 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7097::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7068#7112#7116#7120::Tuple{}
  ########x#7069#7113#7117#7121::Float64
  ######_var0#7114#7118#7122::Tuple{}
  ########types#7084#7115#7119#7123::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7122 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7114#7118#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7068#7112#7116#7120::Tuple{}
  ########x#7069#7113#7117#7121::Float64
  ######_var0#7114#7118#7122::Tuple{}
  ########types#7084#7115#7119#7123::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7122 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7114#7118#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7068#7112#7116#7120::Tuple{}
  ########x#7069#7113#7117#7121::Float64
  ######_var0#7114#7118#7122::Tuple{}
  ########types#7084#7115#7119#7123::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7122 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7114#7118#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7068#7112#7116#7120::Tuple{}
  ########x#7069#7113#7117#7121::Float64
  ######_var0#7114#7118#7122::Tuple{}
  ########types#7084#7115#7119#7123::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7122 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7114#7118#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7068#7112#7116#7120::Tuple{}
  ########x#7069#7113#7117#7121::Float64
  ######_var0#7114#7118#7122::Tuple{}
  ########types#7084#7115#7119#7123::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7122 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7114#7118#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7126#7130::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7131::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7130 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7130 = false
      2: 
      ####_var0#7126#7130::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7131 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7131 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7131::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7126#7130::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7131::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7130 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7130 = false
      2: 
      ####_var0#7126#7130::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7131 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7131 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7131::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7126#7358::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7359::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7358 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7358 = false
      2: 
      ####_var0#7126#7358::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7359 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7359::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7126#7130::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7131::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7130 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7130 = false
      2: 
      ####_var0#7126#7130::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7131 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7131 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7131::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7126#7130::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7131::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7130 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7130 = false
      2: 
      ####_var0#7126#7130::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7131 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7131 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7131::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7126#7358::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7359::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7358 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7358 = false
      2: 
      ####_var0#7126#7358::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7359 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7359::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7126#7358::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7359::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7358 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7358 = false
      2: 
      ####_var0#7126#7358::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7359 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7359::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7126#7358::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7359::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7358 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7358 = false
      2: 
      ####_var0#7126#7358::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7359 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7359::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7126#7358::UNION{BOOL,INT64}
  ########_var0#7124#7125#7127#7359::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7126#7358 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7126#7358 = false
      2: 
      ####_var0#7126#7358::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7124#7125#7127#7359 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7124#7125#7127#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7124#7125#7127#7359::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7260#7269#7360::Tuple{}
  ####_var0#7270#7361::Tuple{}
  ######types#7268#7271#7362::Tuple{Type{Int64}}
  ########tup#7260#7264#7266#7363::Tuple{}
  ######_var0#7265#7267#7364::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7147#7368::Float64
  ####bfactor#7148#7369::Float64
  ########a#7137#7141#7149#7370::Tuple{}
  ########b#7138#7142#7150#7371::Tuple{}
  ########afactor#7139#7143#7151#7372::Float64
  ########bfactor#7140#7144#7152#7373::Float64
  ######_var0#7145#7153#7374::Tuple{}
  ######types#7146#7154#7375::Tuple{Type{Float64}}
  ##a#7376::Float64
  ##exp_a#7377::Float64
  ##deriv#7378::Float64
  ####G#7077#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7381::Tuple{}
  ##########x#7069#7071#7075#7080#7382::Float64
  ########_var0#7072#7076#7081#7383::Tuple{}
  ######tup#7260#7269#7384::Tuple{}
  ####_var0#7270#7385::Tuple{}
  ######types#7268#7271#7386::Tuple{Type{Int64}}
  ##a#7387::Float64
  ##exp_a#7388::Float64
  ##deriv#7389::Float64
  ####G#7077#7390::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7391::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7392::Tuple{}
  ##########x#7069#7071#7075#7080#7393::Float64
  ########_var0#7072#7076#7081#7394::Tuple{}
  ########tup#7068#7112#7116#7395::Tuple{}
  ########x#7069#7113#7117#7396::Float64
  ######_var0#7114#7118#7397::Tuple{}
  ########types#7084#7115#7119#7398::Tuple{Type{Float64}}
  ##a1#7399::Float64
  ##a2#7400::Float64
  ##div_a#7401::Float64
  ####afactor#7147#7402::Float64
  ####bfactor#7148#7403::Float64
  ########a#7137#7141#7149#7404::Tuple{}
  ########b#7138#7142#7150#7405::Tuple{}
  ########afactor#7139#7143#7151#7406::Float64
  ########bfactor#7140#7144#7152#7407::Float64
  ######_var0#7145#7153#7408::Tuple{}
  ######types#7146#7154#7409::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7270#7361 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7270#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7265#7267#7364 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7265#7267#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7365 = GenSym(2)
      ##a2#7366 = GenSym(3)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7147#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7148#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7374 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7145#7153#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7376 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7377 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7378 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7383 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7081#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7377::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7270#7385 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7270#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7387 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7388 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7389 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7390 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7394 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7072#7076#7081#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7397 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7114#7118#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7399 = GenSym(6)
      ##a2#7400 = GenSym(7)
      ##div_a#7401 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7399::Float64,##a2#7400::Float64))
      ####afactor#7147#7402 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7400::Float64))
      ####bfactor#7148#7403 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7399::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7400::Float64,##a2#7400::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7408 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7145#7153#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7401::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7260#7269#7360::Tuple{}
  ####_var0#7270#7361::Tuple{}
  ######types#7268#7271#7362::Tuple{Type{Int64}}
  ########tup#7260#7264#7266#7363::Tuple{}
  ######_var0#7265#7267#7364::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7147#7368::Float64
  ####bfactor#7148#7369::Float64
  ########a#7137#7141#7149#7370::Tuple{}
  ########b#7138#7142#7150#7371::Tuple{}
  ########afactor#7139#7143#7151#7372::Float64
  ########bfactor#7140#7144#7152#7373::Float64
  ######_var0#7145#7153#7374::Tuple{}
  ######types#7146#7154#7375::Tuple{Type{Float64}}
  ##a#7376::Float64
  ##exp_a#7377::Float64
  ##deriv#7378::Float64
  ####G#7077#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7381::Tuple{}
  ##########x#7069#7071#7075#7080#7382::Float64
  ########_var0#7072#7076#7081#7383::Tuple{}
  ######tup#7260#7269#7384::Tuple{}
  ####_var0#7270#7385::Tuple{}
  ######types#7268#7271#7386::Tuple{Type{Int64}}
  ##a#7387::Float64
  ##exp_a#7388::Float64
  ##deriv#7389::Float64
  ####G#7077#7390::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7391::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7392::Tuple{}
  ##########x#7069#7071#7075#7080#7393::Float64
  ########_var0#7072#7076#7081#7394::Tuple{}
  ########tup#7068#7112#7116#7395::Tuple{}
  ########x#7069#7113#7117#7396::Float64
  ######_var0#7114#7118#7397::Tuple{}
  ########types#7084#7115#7119#7398::Tuple{Type{Float64}}
  ##a1#7399::Float64
  ##a2#7400::Float64
  ##div_a#7401::Float64
  ####afactor#7147#7402::Float64
  ####bfactor#7148#7403::Float64
  ########a#7137#7141#7149#7404::Tuple{}
  ########b#7138#7142#7150#7405::Tuple{}
  ########afactor#7139#7143#7151#7406::Float64
  ########bfactor#7140#7144#7152#7407::Float64
  ######_var0#7145#7153#7408::Tuple{}
  ######types#7146#7154#7409::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7270#7361 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7270#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7265#7267#7364 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7265#7267#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7365 = GenSym(2)
      ##a2#7366 = GenSym(3)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7147#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7148#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7374 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7145#7153#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7376 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7377 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7378 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7383 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7081#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7377::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7270#7385 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7270#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7387 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7388 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7389 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7390 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7394 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7072#7076#7081#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7397 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7114#7118#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7399 = GenSym(6)
      ##a2#7400 = GenSym(7)
      ##div_a#7401 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7399::Float64,##a2#7400::Float64))
      ####afactor#7147#7402 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7400::Float64))
      ####bfactor#7148#7403 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7399::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7400::Float64,##a2#7400::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7408 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7145#7153#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7401::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7260#7269#7360::Tuple{}
  ####_var0#7270#7361::Tuple{}
  ######types#7268#7271#7362::Tuple{Type{Int64}}
  ########tup#7260#7264#7266#7363::Tuple{}
  ######_var0#7265#7267#7364::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7147#7368::Float64
  ####bfactor#7148#7369::Float64
  ########a#7137#7141#7149#7370::Tuple{}
  ########b#7138#7142#7150#7371::Tuple{}
  ########afactor#7139#7143#7151#7372::Float64
  ########bfactor#7140#7144#7152#7373::Float64
  ######_var0#7145#7153#7374::Tuple{}
  ######types#7146#7154#7375::Tuple{Type{Float64}}
  ##a#7376::Float64
  ##exp_a#7377::Float64
  ##deriv#7378::Float64
  ####G#7077#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7381::Tuple{}
  ##########x#7069#7071#7075#7080#7382::Float64
  ########_var0#7072#7076#7081#7383::Tuple{}
  ######tup#7260#7269#7384::Tuple{}
  ####_var0#7270#7385::Tuple{}
  ######types#7268#7271#7386::Tuple{Type{Int64}}
  ##a#7387::Float64
  ##exp_a#7388::Float64
  ##deriv#7389::Float64
  ####G#7077#7390::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7391::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7392::Tuple{}
  ##########x#7069#7071#7075#7080#7393::Float64
  ########_var0#7072#7076#7081#7394::Tuple{}
  ########tup#7068#7112#7116#7395::Tuple{}
  ########x#7069#7113#7117#7396::Float64
  ######_var0#7114#7118#7397::Tuple{}
  ########types#7084#7115#7119#7398::Tuple{Type{Float64}}
  ##a1#7399::Float64
  ##a2#7400::Float64
  ##div_a#7401::Float64
  ####afactor#7147#7402::Float64
  ####bfactor#7148#7403::Float64
  ########a#7137#7141#7149#7404::Tuple{}
  ########b#7138#7142#7150#7405::Tuple{}
  ########afactor#7139#7143#7151#7406::Float64
  ########bfactor#7140#7144#7152#7407::Float64
  ######_var0#7145#7153#7408::Tuple{}
  ######types#7146#7154#7409::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7270#7361 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7270#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7265#7267#7364 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7265#7267#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7365 = GenSym(2)
      ##a2#7366 = GenSym(3)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7147#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7148#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7374 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7145#7153#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7376 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7377 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7378 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7383 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7081#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7377::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7270#7385 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7270#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7387 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7388 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7389 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7390 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7394 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7072#7076#7081#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7397 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7114#7118#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7399 = GenSym(6)
      ##a2#7400 = GenSym(7)
      ##div_a#7401 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7399::Float64,##a2#7400::Float64))
      ####afactor#7147#7402 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7400::Float64))
      ####bfactor#7148#7403 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7399::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7400::Float64,##a2#7400::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7408 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7145#7153#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7401::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7260#7269#7360::Tuple{}
  ####_var0#7270#7361::Tuple{}
  ######types#7268#7271#7362::Tuple{Type{Int64}}
  ########tup#7260#7264#7266#7363::Tuple{}
  ######_var0#7265#7267#7364::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7147#7368::Float64
  ####bfactor#7148#7369::Float64
  ########a#7137#7141#7149#7370::Tuple{}
  ########b#7138#7142#7150#7371::Tuple{}
  ########afactor#7139#7143#7151#7372::Float64
  ########bfactor#7140#7144#7152#7373::Float64
  ######_var0#7145#7153#7374::Tuple{}
  ######types#7146#7154#7375::Tuple{Type{Float64}}
  ##a#7376::Float64
  ##exp_a#7377::Float64
  ##deriv#7378::Float64
  ####G#7077#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7381::Tuple{}
  ##########x#7069#7071#7075#7080#7382::Float64
  ########_var0#7072#7076#7081#7383::Tuple{}
  ######tup#7260#7269#7384::Tuple{}
  ####_var0#7270#7385::Tuple{}
  ######types#7268#7271#7386::Tuple{Type{Int64}}
  ##a#7387::Float64
  ##exp_a#7388::Float64
  ##deriv#7389::Float64
  ####G#7077#7390::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7391::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7392::Tuple{}
  ##########x#7069#7071#7075#7080#7393::Float64
  ########_var0#7072#7076#7081#7394::Tuple{}
  ########tup#7068#7112#7116#7395::Tuple{}
  ########x#7069#7113#7117#7396::Float64
  ######_var0#7114#7118#7397::Tuple{}
  ########types#7084#7115#7119#7398::Tuple{Type{Float64}}
  ##a1#7399::Float64
  ##a2#7400::Float64
  ##div_a#7401::Float64
  ####afactor#7147#7402::Float64
  ####bfactor#7148#7403::Float64
  ########a#7137#7141#7149#7404::Tuple{}
  ########b#7138#7142#7150#7405::Tuple{}
  ########afactor#7139#7143#7151#7406::Float64
  ########bfactor#7140#7144#7152#7407::Float64
  ######_var0#7145#7153#7408::Tuple{}
  ######types#7146#7154#7409::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7270#7361 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7270#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7265#7267#7364 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7265#7267#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7365 = GenSym(2)
      ##a2#7366 = GenSym(3)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7147#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7148#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7374 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7145#7153#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7376 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7377 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7378 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7383 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7081#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7377::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7270#7385 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7270#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7387 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7388 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7389 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7390 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7394 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7072#7076#7081#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7397 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7114#7118#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7399 = GenSym(6)
      ##a2#7400 = GenSym(7)
      ##div_a#7401 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7399::Float64,##a2#7400::Float64))
      ####afactor#7147#7402 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7400::Float64))
      ####bfactor#7148#7403 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7399::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7400::Float64,##a2#7400::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7408 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7145#7153#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7401::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7260#7269#7360::Tuple{}
  ####_var0#7270#7361::Tuple{}
  ######types#7268#7271#7362::Tuple{Type{Int64}}
  ########tup#7260#7264#7266#7363::Tuple{}
  ######_var0#7265#7267#7364::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7147#7368::Float64
  ####bfactor#7148#7369::Float64
  ########a#7137#7141#7149#7370::Tuple{}
  ########b#7138#7142#7150#7371::Tuple{}
  ########afactor#7139#7143#7151#7372::Float64
  ########bfactor#7140#7144#7152#7373::Float64
  ######_var0#7145#7153#7374::Tuple{}
  ######types#7146#7154#7375::Tuple{Type{Float64}}
  ##a#7376::Float64
  ##exp_a#7377::Float64
  ##deriv#7378::Float64
  ####G#7077#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7381::Tuple{}
  ##########x#7069#7071#7075#7080#7382::Float64
  ########_var0#7072#7076#7081#7383::Tuple{}
  ######tup#7260#7269#7384::Tuple{}
  ####_var0#7270#7385::Tuple{}
  ######types#7268#7271#7386::Tuple{Type{Int64}}
  ##a#7387::Float64
  ##exp_a#7388::Float64
  ##deriv#7389::Float64
  ####G#7077#7390::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7391::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7392::Tuple{}
  ##########x#7069#7071#7075#7080#7393::Float64
  ########_var0#7072#7076#7081#7394::Tuple{}
  ########tup#7068#7112#7116#7395::Tuple{}
  ########x#7069#7113#7117#7396::Float64
  ######_var0#7114#7118#7397::Tuple{}
  ########types#7084#7115#7119#7398::Tuple{Type{Float64}}
  ##a1#7399::Float64
  ##a2#7400::Float64
  ##div_a#7401::Float64
  ####afactor#7147#7402::Float64
  ####bfactor#7148#7403::Float64
  ########a#7137#7141#7149#7404::Tuple{}
  ########b#7138#7142#7150#7405::Tuple{}
  ########afactor#7139#7143#7151#7406::Float64
  ########bfactor#7140#7144#7152#7407::Float64
  ######_var0#7145#7153#7408::Tuple{}
  ######types#7146#7154#7409::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7270#7361 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7270#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7265#7267#7364 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7265#7267#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7365 = GenSym(2)
      ##a2#7366 = GenSym(3)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7147#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7148#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7374 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7145#7153#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7376 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7377 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7378 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7376::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7383 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7081#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7377::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7270#7385 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7270#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7387 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7388 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7389 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7387::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7390 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7394 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7072#7076#7081#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7397 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7114#7118#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7399 = GenSym(6)
      ##a2#7400 = GenSym(7)
      ##div_a#7401 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7399::Float64,##a2#7400::Float64))
      ####afactor#7147#7402 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7400::Float64))
      ####bfactor#7148#7403 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7399::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7400::Float64,##a2#7400::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7408 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7145#7153#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7401::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7410::Float64
  ##xs#7411::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7410 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7410::Float64)::Bool,(Base.ne_float)(##fy#7410::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7410::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7410::Float64
  ##xs#7411::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7410 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7410::Float64)::Bool,(Base.ne_float)(##fy#7410::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7410::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7441::Tuple{}
  ######x#7415#7417#7442::Int64
  ####_var0#7418#7443::Tuple{}
  ######types#7268#7419#7444::Tuple{Type{Int64}}
  ##a#7445::Float64
  ##exp_a#7446::Float64
  ##deriv#7447::Float64
  ####G#7077#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7450::Tuple{}
  ##########x#7069#7071#7075#7080#7451::Float64
  ########_var0#7072#7076#7081#7452::Tuple{}
  ####fy#7420#7453::Float64
  _var0::Bool
  ##a#7454::Float64
  ##exp_a#7455::Float64
  ##deriv#7456::Float64
  ####G#7077#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7459::Tuple{}
  ##########x#7069#7071#7075#7080#7460::Float64
  ########_var0#7072#7076#7081#7461::Tuple{}
  ##a#7462::Float64
  ####G#7436#7463::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7437#7464::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7438#7465::Tuple{}
  ##########x#7069#7071#7075#7439#7466::Float64
  ########_var0#7072#7076#7440#7467::Tuple{}
  ##a#7468::Float64
  ##div_a#7469::Float64
  ##deriv#7470::Float64
  ####G#7431#7471::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7472::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7473::Tuple{}
  ##########x#7069#7071#7075#7434#7474::Float64
  ########_var0#7072#7076#7435#7475::Tuple{}
  ######a#7167#7169#7476::Tuple{}
  ######b#7168#7170#7477::Tuple{}
  ####_var0#7171#7478::Tuple{}
  ##a1#7479::Float64
  ##a2#7480::Float64
  ######a#7137#7162#7481::Tuple{}
  ######b#7138#7163#7482::Tuple{}
  ######afactor#7139#7164#7483::Float64
  ######bfactor#7140#7165#7484::Float64
  ####_var0#7166#7485::Tuple{}
  ##a#7486::Float64
  ####G#7426#7487::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7427#7488::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7428#7489::Tuple{}
  ##########x#7069#7071#7075#7429#7490::Float64
  ########_var0#7072#7076#7430#7491::Tuple{}
  ########tup#7068#7112#7116#7492::Tuple{}
  ########x#7069#7113#7117#7493::Float64
  ######_var0#7114#7118#7494::Tuple{}
  ########types#7084#7115#7119#7495::Tuple{Type{Float64}}
  ######a#7167#7169#7496::Tuple{}
  ######b#7168#7170#7497::Tuple{}
  ####_var0#7171#7498::Tuple{}
  ######tup#7414#7416#7499::Tuple{}
  ######x#7415#7417#7500::Int64
  ####_var0#7418#7501::Tuple{}
  ######types#7268#7419#7502::Tuple{Type{Int64}}
  ##exp_a#7503::Float64
  ####G#7421#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7422#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7423#7506::Tuple{}
  ##########x#7069#7071#7075#7424#7507::Float64
  ########_var0#7072#7076#7425#7508::Tuple{}
  ##xs#7509::Tuple{}
  ##########tup#7068#7112#7116#7202#7510::Tuple{}
  ##########x#7069#7113#7117#7203#7511::Float64
  ########_var0#7114#7118#7204#7512::Tuple{}
  ##########types#7084#7115#7119#7205#7513::Tuple{Type{Float64}}
  ####a1#7206#7514::Float64
  ####a2#7207#7515::Float64
  ########a#7137#7162#7208#7516::Tuple{}
  ########b#7138#7163#7209#7517::Tuple{}
  ########afactor#7139#7164#7210#7518::Float64
  ########bfactor#7140#7165#7211#7519::Float64
  ######_var0#7166#7212#7520::Tuple{}
  ##a1#7521::Float64
  ##a2#7522::Float64
  ##div_a#7523::Float64
  ####afactor#7147#7524::Float64
  ####bfactor#7148#7525::Float64
  ########a#7137#7141#7149#7526::Tuple{}
  ########b#7138#7142#7150#7527::Tuple{}
  ########afactor#7139#7143#7151#7528::Float64
  ########bfactor#7140#7144#7152#7529::Float64
  ######_var0#7145#7153#7530::Tuple{}
  ######types#7146#7154#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7443 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7445 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7446 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7447 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7452 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7446::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7453 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7453::Float64)::Bool,(Base.ne_float)(####fy#7420#7453::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7453::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7501 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7418#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7503 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7421#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7425#7508 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7072#7076#7425#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7503::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7486 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      ####G#7426#7487 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7430#7491 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7072#7076#7430#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7494 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7114#7118#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7468 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7469 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7468::Float64))
      ##deriv#7470 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7469::Float64,##a#7468::Float64))))
      ####G#7431#7471 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7475 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7072#7076#7435#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7469::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7478 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7171#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7462 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      ####G#7436#7463 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7440#7467 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7440#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7479 = GenSym(4)
      ##a2#7480 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7485 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7166#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7479::Float64,##a2#7480::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7498 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7171#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7114#7118#7204#7512 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7114#7118#7204#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7206#7514 = GenSym(12)
      ####a2#7207#7515 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7166#7212#7520 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7166#7212#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7206#7514::Float64,####a2#7207#7515::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7454 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7455 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7456 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7461 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7072#7076#7081#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7521 = GenSym(16)
      ##a2#7522 = GenSym(17)
      ##div_a#7523 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7521::Float64,##a2#7522::Float64))
      ####afactor#7147#7524 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7522::Float64))
      ####bfactor#7148#7525 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7521::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7522::Float64,##a2#7522::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7530 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7145#7153#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7410::Float64
  ##xs#7411::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7410 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7410::Float64)::Bool,(Base.ne_float)(##fy#7410::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7410::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7410::Float64
  ##xs#7411::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7410 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7410::Float64)::Bool,(Base.ne_float)(##fy#7410::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7410::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7441::Tuple{}
  ######x#7415#7417#7442::Int64
  ####_var0#7418#7443::Tuple{}
  ######types#7268#7419#7444::Tuple{Type{Int64}}
  ##a#7445::Float64
  ##exp_a#7446::Float64
  ##deriv#7447::Float64
  ####G#7077#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7450::Tuple{}
  ##########x#7069#7071#7075#7080#7451::Float64
  ########_var0#7072#7076#7081#7452::Tuple{}
  ####fy#7420#7453::Float64
  _var0::Bool
  ##a#7454::Float64
  ##exp_a#7455::Float64
  ##deriv#7456::Float64
  ####G#7077#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7459::Tuple{}
  ##########x#7069#7071#7075#7080#7460::Float64
  ########_var0#7072#7076#7081#7461::Tuple{}
  ##a#7462::Float64
  ####G#7436#7463::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7437#7464::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7438#7465::Tuple{}
  ##########x#7069#7071#7075#7439#7466::Float64
  ########_var0#7072#7076#7440#7467::Tuple{}
  ##a#7468::Float64
  ##div_a#7469::Float64
  ##deriv#7470::Float64
  ####G#7431#7471::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7472::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7473::Tuple{}
  ##########x#7069#7071#7075#7434#7474::Float64
  ########_var0#7072#7076#7435#7475::Tuple{}
  ######a#7167#7169#7476::Tuple{}
  ######b#7168#7170#7477::Tuple{}
  ####_var0#7171#7478::Tuple{}
  ##a1#7479::Float64
  ##a2#7480::Float64
  ######a#7137#7162#7481::Tuple{}
  ######b#7138#7163#7482::Tuple{}
  ######afactor#7139#7164#7483::Float64
  ######bfactor#7140#7165#7484::Float64
  ####_var0#7166#7485::Tuple{}
  ##a#7486::Float64
  ####G#7426#7487::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7427#7488::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7428#7489::Tuple{}
  ##########x#7069#7071#7075#7429#7490::Float64
  ########_var0#7072#7076#7430#7491::Tuple{}
  ########tup#7068#7112#7116#7492::Tuple{}
  ########x#7069#7113#7117#7493::Float64
  ######_var0#7114#7118#7494::Tuple{}
  ########types#7084#7115#7119#7495::Tuple{Type{Float64}}
  ######a#7167#7169#7496::Tuple{}
  ######b#7168#7170#7497::Tuple{}
  ####_var0#7171#7498::Tuple{}
  ######tup#7414#7416#7499::Tuple{}
  ######x#7415#7417#7500::Int64
  ####_var0#7418#7501::Tuple{}
  ######types#7268#7419#7502::Tuple{Type{Int64}}
  ##exp_a#7503::Float64
  ####G#7421#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7422#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7423#7506::Tuple{}
  ##########x#7069#7071#7075#7424#7507::Float64
  ########_var0#7072#7076#7425#7508::Tuple{}
  ##xs#7509::Tuple{}
  ##########tup#7068#7112#7116#7202#7510::Tuple{}
  ##########x#7069#7113#7117#7203#7511::Float64
  ########_var0#7114#7118#7204#7512::Tuple{}
  ##########types#7084#7115#7119#7205#7513::Tuple{Type{Float64}}
  ####a1#7206#7514::Float64
  ####a2#7207#7515::Float64
  ########a#7137#7162#7208#7516::Tuple{}
  ########b#7138#7163#7209#7517::Tuple{}
  ########afactor#7139#7164#7210#7518::Float64
  ########bfactor#7140#7165#7211#7519::Float64
  ######_var0#7166#7212#7520::Tuple{}
  ##a1#7521::Float64
  ##a2#7522::Float64
  ##div_a#7523::Float64
  ####afactor#7147#7524::Float64
  ####bfactor#7148#7525::Float64
  ########a#7137#7141#7149#7526::Tuple{}
  ########b#7138#7142#7150#7527::Tuple{}
  ########afactor#7139#7143#7151#7528::Float64
  ########bfactor#7140#7144#7152#7529::Float64
  ######_var0#7145#7153#7530::Tuple{}
  ######types#7146#7154#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7443 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7445 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7446 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7447 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7452 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7446::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7453 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7453::Float64)::Bool,(Base.ne_float)(####fy#7420#7453::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7453::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7501 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7418#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7503 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7421#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7425#7508 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7072#7076#7425#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7503::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7486 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      ####G#7426#7487 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7430#7491 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7072#7076#7430#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7494 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7114#7118#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7468 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7469 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7468::Float64))
      ##deriv#7470 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7469::Float64,##a#7468::Float64))))
      ####G#7431#7471 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7475 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7072#7076#7435#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7469::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7478 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7171#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7462 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      ####G#7436#7463 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7440#7467 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7440#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7479 = GenSym(4)
      ##a2#7480 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7485 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7166#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7479::Float64,##a2#7480::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7498 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7171#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7114#7118#7204#7512 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7114#7118#7204#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7206#7514 = GenSym(12)
      ####a2#7207#7515 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7166#7212#7520 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7166#7212#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7206#7514::Float64,####a2#7207#7515::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7454 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7455 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7456 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7461 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7072#7076#7081#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7521 = GenSym(16)
      ##a2#7522 = GenSym(17)
      ##div_a#7523 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7521::Float64,##a2#7522::Float64))
      ####afactor#7147#7524 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7522::Float64))
      ####bfactor#7148#7525 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7521::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7522::Float64,##a2#7522::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7530 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7145#7153#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7441::Tuple{}
  ######x#7415#7417#7442::Int64
  ####_var0#7418#7443::Tuple{}
  ######types#7268#7419#7444::Tuple{Type{Int64}}
  ##a#7445::Float64
  ##exp_a#7446::Float64
  ##deriv#7447::Float64
  ####G#7077#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7450::Tuple{}
  ##########x#7069#7071#7075#7080#7451::Float64
  ########_var0#7072#7076#7081#7452::Tuple{}
  ####fy#7420#7453::Float64
  _var0::Bool
  ##a#7454::Float64
  ##exp_a#7455::Float64
  ##deriv#7456::Float64
  ####G#7077#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7459::Tuple{}
  ##########x#7069#7071#7075#7080#7460::Float64
  ########_var0#7072#7076#7081#7461::Tuple{}
  ##a#7462::Float64
  ####G#7436#7463::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7437#7464::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7438#7465::Tuple{}
  ##########x#7069#7071#7075#7439#7466::Float64
  ########_var0#7072#7076#7440#7467::Tuple{}
  ##a#7468::Float64
  ##div_a#7469::Float64
  ##deriv#7470::Float64
  ####G#7431#7471::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7472::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7473::Tuple{}
  ##########x#7069#7071#7075#7434#7474::Float64
  ########_var0#7072#7076#7435#7475::Tuple{}
  ######a#7167#7169#7476::Tuple{}
  ######b#7168#7170#7477::Tuple{}
  ####_var0#7171#7478::Tuple{}
  ##a1#7479::Float64
  ##a2#7480::Float64
  ######a#7137#7162#7481::Tuple{}
  ######b#7138#7163#7482::Tuple{}
  ######afactor#7139#7164#7483::Float64
  ######bfactor#7140#7165#7484::Float64
  ####_var0#7166#7485::Tuple{}
  ##a#7486::Float64
  ####G#7426#7487::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7427#7488::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7428#7489::Tuple{}
  ##########x#7069#7071#7075#7429#7490::Float64
  ########_var0#7072#7076#7430#7491::Tuple{}
  ########tup#7068#7112#7116#7492::Tuple{}
  ########x#7069#7113#7117#7493::Float64
  ######_var0#7114#7118#7494::Tuple{}
  ########types#7084#7115#7119#7495::Tuple{Type{Float64}}
  ######a#7167#7169#7496::Tuple{}
  ######b#7168#7170#7497::Tuple{}
  ####_var0#7171#7498::Tuple{}
  ######tup#7414#7416#7499::Tuple{}
  ######x#7415#7417#7500::Int64
  ####_var0#7418#7501::Tuple{}
  ######types#7268#7419#7502::Tuple{Type{Int64}}
  ##exp_a#7503::Float64
  ####G#7421#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7422#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7423#7506::Tuple{}
  ##########x#7069#7071#7075#7424#7507::Float64
  ########_var0#7072#7076#7425#7508::Tuple{}
  ##xs#7509::Tuple{}
  ##########tup#7068#7112#7116#7202#7510::Tuple{}
  ##########x#7069#7113#7117#7203#7511::Float64
  ########_var0#7114#7118#7204#7512::Tuple{}
  ##########types#7084#7115#7119#7205#7513::Tuple{Type{Float64}}
  ####a1#7206#7514::Float64
  ####a2#7207#7515::Float64
  ########a#7137#7162#7208#7516::Tuple{}
  ########b#7138#7163#7209#7517::Tuple{}
  ########afactor#7139#7164#7210#7518::Float64
  ########bfactor#7140#7165#7211#7519::Float64
  ######_var0#7166#7212#7520::Tuple{}
  ##a1#7521::Float64
  ##a2#7522::Float64
  ##div_a#7523::Float64
  ####afactor#7147#7524::Float64
  ####bfactor#7148#7525::Float64
  ########a#7137#7141#7149#7526::Tuple{}
  ########b#7138#7142#7150#7527::Tuple{}
  ########afactor#7139#7143#7151#7528::Float64
  ########bfactor#7140#7144#7152#7529::Float64
  ######_var0#7145#7153#7530::Tuple{}
  ######types#7146#7154#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7443 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7445 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7446 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7447 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7452 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7446::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7453 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7453::Float64)::Bool,(Base.ne_float)(####fy#7420#7453::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7453::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7501 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7418#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7503 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7421#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7425#7508 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7072#7076#7425#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7503::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7486 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      ####G#7426#7487 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7430#7491 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7072#7076#7430#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7494 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7114#7118#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7468 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7469 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7468::Float64))
      ##deriv#7470 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7469::Float64,##a#7468::Float64))))
      ####G#7431#7471 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7475 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7072#7076#7435#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7469::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7478 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7171#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7462 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      ####G#7436#7463 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7440#7467 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7440#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7479 = GenSym(4)
      ##a2#7480 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7485 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7166#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7479::Float64,##a2#7480::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7498 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7171#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7114#7118#7204#7512 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7114#7118#7204#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7206#7514 = GenSym(12)
      ####a2#7207#7515 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7166#7212#7520 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7166#7212#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7206#7514::Float64,####a2#7207#7515::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7454 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7455 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7456 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7461 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7072#7076#7081#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7521 = GenSym(16)
      ##a2#7522 = GenSym(17)
      ##div_a#7523 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7521::Float64,##a2#7522::Float64))
      ####afactor#7147#7524 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7522::Float64))
      ####bfactor#7148#7525 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7521::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7522::Float64,##a2#7522::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7530 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7145#7153#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7441::Tuple{}
  ######x#7415#7417#7442::Int64
  ####_var0#7418#7443::Tuple{}
  ######types#7268#7419#7444::Tuple{Type{Int64}}
  ##a#7445::Float64
  ##exp_a#7446::Float64
  ##deriv#7447::Float64
  ####G#7077#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7450::Tuple{}
  ##########x#7069#7071#7075#7080#7451::Float64
  ########_var0#7072#7076#7081#7452::Tuple{}
  ####fy#7420#7453::Float64
  _var0::Bool
  ##a#7454::Float64
  ##exp_a#7455::Float64
  ##deriv#7456::Float64
  ####G#7077#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7459::Tuple{}
  ##########x#7069#7071#7075#7080#7460::Float64
  ########_var0#7072#7076#7081#7461::Tuple{}
  ##a#7462::Float64
  ####G#7436#7463::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7437#7464::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7438#7465::Tuple{}
  ##########x#7069#7071#7075#7439#7466::Float64
  ########_var0#7072#7076#7440#7467::Tuple{}
  ##a#7468::Float64
  ##div_a#7469::Float64
  ##deriv#7470::Float64
  ####G#7431#7471::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7472::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7473::Tuple{}
  ##########x#7069#7071#7075#7434#7474::Float64
  ########_var0#7072#7076#7435#7475::Tuple{}
  ######a#7167#7169#7476::Tuple{}
  ######b#7168#7170#7477::Tuple{}
  ####_var0#7171#7478::Tuple{}
  ##a1#7479::Float64
  ##a2#7480::Float64
  ######a#7137#7162#7481::Tuple{}
  ######b#7138#7163#7482::Tuple{}
  ######afactor#7139#7164#7483::Float64
  ######bfactor#7140#7165#7484::Float64
  ####_var0#7166#7485::Tuple{}
  ##a#7486::Float64
  ####G#7426#7487::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7427#7488::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7428#7489::Tuple{}
  ##########x#7069#7071#7075#7429#7490::Float64
  ########_var0#7072#7076#7430#7491::Tuple{}
  ########tup#7068#7112#7116#7492::Tuple{}
  ########x#7069#7113#7117#7493::Float64
  ######_var0#7114#7118#7494::Tuple{}
  ########types#7084#7115#7119#7495::Tuple{Type{Float64}}
  ######a#7167#7169#7496::Tuple{}
  ######b#7168#7170#7497::Tuple{}
  ####_var0#7171#7498::Tuple{}
  ######tup#7414#7416#7499::Tuple{}
  ######x#7415#7417#7500::Int64
  ####_var0#7418#7501::Tuple{}
  ######types#7268#7419#7502::Tuple{Type{Int64}}
  ##exp_a#7503::Float64
  ####G#7421#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7422#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7423#7506::Tuple{}
  ##########x#7069#7071#7075#7424#7507::Float64
  ########_var0#7072#7076#7425#7508::Tuple{}
  ##xs#7509::Tuple{}
  ##########tup#7068#7112#7116#7202#7510::Tuple{}
  ##########x#7069#7113#7117#7203#7511::Float64
  ########_var0#7114#7118#7204#7512::Tuple{}
  ##########types#7084#7115#7119#7205#7513::Tuple{Type{Float64}}
  ####a1#7206#7514::Float64
  ####a2#7207#7515::Float64
  ########a#7137#7162#7208#7516::Tuple{}
  ########b#7138#7163#7209#7517::Tuple{}
  ########afactor#7139#7164#7210#7518::Float64
  ########bfactor#7140#7165#7211#7519::Float64
  ######_var0#7166#7212#7520::Tuple{}
  ##a1#7521::Float64
  ##a2#7522::Float64
  ##div_a#7523::Float64
  ####afactor#7147#7524::Float64
  ####bfactor#7148#7525::Float64
  ########a#7137#7141#7149#7526::Tuple{}
  ########b#7138#7142#7150#7527::Tuple{}
  ########afactor#7139#7143#7151#7528::Float64
  ########bfactor#7140#7144#7152#7529::Float64
  ######_var0#7145#7153#7530::Tuple{}
  ######types#7146#7154#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7443 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7445 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7446 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7447 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7452 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7446::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7453 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7453::Float64)::Bool,(Base.ne_float)(####fy#7420#7453::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7453::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7501 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7418#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7503 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7421#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7425#7508 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7072#7076#7425#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7503::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7486 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      ####G#7426#7487 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7430#7491 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7072#7076#7430#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7494 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7114#7118#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7468 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7469 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7468::Float64))
      ##deriv#7470 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7469::Float64,##a#7468::Float64))))
      ####G#7431#7471 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7475 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7072#7076#7435#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7469::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7478 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7171#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7462 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      ####G#7436#7463 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7440#7467 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7440#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7479 = GenSym(4)
      ##a2#7480 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7485 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7166#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7479::Float64,##a2#7480::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7498 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7171#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7114#7118#7204#7512 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7114#7118#7204#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7206#7514 = GenSym(12)
      ####a2#7207#7515 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7166#7212#7520 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7166#7212#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7206#7514::Float64,####a2#7207#7515::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7454 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7455 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7456 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7461 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7072#7076#7081#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7521 = GenSym(16)
      ##a2#7522 = GenSym(17)
      ##div_a#7523 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7521::Float64,##a2#7522::Float64))
      ####afactor#7147#7524 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7522::Float64))
      ####bfactor#7148#7525 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7521::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7522::Float64,##a2#7522::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7530 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7145#7153#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7441::Tuple{}
  ######x#7415#7417#7442::Int64
  ####_var0#7418#7443::Tuple{}
  ######types#7268#7419#7444::Tuple{Type{Int64}}
  ##a#7445::Float64
  ##exp_a#7446::Float64
  ##deriv#7447::Float64
  ####G#7077#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7450::Tuple{}
  ##########x#7069#7071#7075#7080#7451::Float64
  ########_var0#7072#7076#7081#7452::Tuple{}
  ####fy#7420#7453::Float64
  _var0::Bool
  ##a#7454::Float64
  ##exp_a#7455::Float64
  ##deriv#7456::Float64
  ####G#7077#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7459::Tuple{}
  ##########x#7069#7071#7075#7080#7460::Float64
  ########_var0#7072#7076#7081#7461::Tuple{}
  ##a#7462::Float64
  ####G#7436#7463::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7437#7464::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7438#7465::Tuple{}
  ##########x#7069#7071#7075#7439#7466::Float64
  ########_var0#7072#7076#7440#7467::Tuple{}
  ##a#7468::Float64
  ##div_a#7469::Float64
  ##deriv#7470::Float64
  ####G#7431#7471::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7472::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7473::Tuple{}
  ##########x#7069#7071#7075#7434#7474::Float64
  ########_var0#7072#7076#7435#7475::Tuple{}
  ######a#7167#7169#7476::Tuple{}
  ######b#7168#7170#7477::Tuple{}
  ####_var0#7171#7478::Tuple{}
  ##a1#7479::Float64
  ##a2#7480::Float64
  ######a#7137#7162#7481::Tuple{}
  ######b#7138#7163#7482::Tuple{}
  ######afactor#7139#7164#7483::Float64
  ######bfactor#7140#7165#7484::Float64
  ####_var0#7166#7485::Tuple{}
  ##a#7486::Float64
  ####G#7426#7487::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7427#7488::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7428#7489::Tuple{}
  ##########x#7069#7071#7075#7429#7490::Float64
  ########_var0#7072#7076#7430#7491::Tuple{}
  ########tup#7068#7112#7116#7492::Tuple{}
  ########x#7069#7113#7117#7493::Float64
  ######_var0#7114#7118#7494::Tuple{}
  ########types#7084#7115#7119#7495::Tuple{Type{Float64}}
  ######a#7167#7169#7496::Tuple{}
  ######b#7168#7170#7497::Tuple{}
  ####_var0#7171#7498::Tuple{}
  ######tup#7414#7416#7499::Tuple{}
  ######x#7415#7417#7500::Int64
  ####_var0#7418#7501::Tuple{}
  ######types#7268#7419#7502::Tuple{Type{Int64}}
  ##exp_a#7503::Float64
  ####G#7421#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7422#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7423#7506::Tuple{}
  ##########x#7069#7071#7075#7424#7507::Float64
  ########_var0#7072#7076#7425#7508::Tuple{}
  ##xs#7509::Tuple{}
  ##########tup#7068#7112#7116#7202#7510::Tuple{}
  ##########x#7069#7113#7117#7203#7511::Float64
  ########_var0#7114#7118#7204#7512::Tuple{}
  ##########types#7084#7115#7119#7205#7513::Tuple{Type{Float64}}
  ####a1#7206#7514::Float64
  ####a2#7207#7515::Float64
  ########a#7137#7162#7208#7516::Tuple{}
  ########b#7138#7163#7209#7517::Tuple{}
  ########afactor#7139#7164#7210#7518::Float64
  ########bfactor#7140#7165#7211#7519::Float64
  ######_var0#7166#7212#7520::Tuple{}
  ##a1#7521::Float64
  ##a2#7522::Float64
  ##div_a#7523::Float64
  ####afactor#7147#7524::Float64
  ####bfactor#7148#7525::Float64
  ########a#7137#7141#7149#7526::Tuple{}
  ########b#7138#7142#7150#7527::Tuple{}
  ########afactor#7139#7143#7151#7528::Float64
  ########bfactor#7140#7144#7152#7529::Float64
  ######_var0#7145#7153#7530::Tuple{}
  ######types#7146#7154#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7443 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7445 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7446 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7447 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7445::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7452 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7446::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7453 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7453::Float64)::Bool,(Base.ne_float)(####fy#7420#7453::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7453::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7501 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7418#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7503 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7421#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7425#7508 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7072#7076#7425#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7503::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7486 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7486::Float64,0)::Float64
      ####G#7426#7487 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7430#7491 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7072#7076#7430#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7494 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7114#7118#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7468 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7469 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7468::Float64))
      ##deriv#7470 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7469::Float64,##a#7468::Float64))))
      ####G#7431#7471 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7475 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7072#7076#7435#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7469::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7478 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7171#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7462 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7462::Float64,0)::Float64
      ####G#7436#7463 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7440#7467 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7072#7076#7440#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7479 = GenSym(4)
      ##a2#7480 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7485 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7166#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7479::Float64,##a2#7480::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7498 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7171#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7114#7118#7204#7512 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7114#7118#7204#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7206#7514 = GenSym(12)
      ####a2#7207#7515 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7166#7212#7520 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7166#7212#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7206#7514::Float64,####a2#7207#7515::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7454 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7455 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7456 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7454::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7461 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7072#7076#7081#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7455::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7521 = GenSym(16)
      ##a2#7522 = GenSym(17)
      ##div_a#7523 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7521::Float64,##a2#7522::Float64))
      ####afactor#7147#7524 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7522::Float64))
      ####bfactor#7148#7525 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7521::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7522::Float64,##a2#7522::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7145#7153#7530 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7145#7153#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7532::Float64
  ##xs#7533::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7532::Float64)::Bool,(Base.ne_float)(##fy#7532::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7532::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7532::Float64
  ##xs#7533::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7532::Float64)::Bool,(Base.ne_float)(##fy#7532::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7532::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7610::Tuple{}
  ######x#7415#7417#7611::Int64
  ####_var0#7418#7612::Tuple{}
  ######types#7268#7419#7613::Tuple{Type{Int64}}
  ##a#7614::Float64
  ##exp_a#7615::Float64
  ##deriv#7616::Float64
  ####G#7077#7617::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7618::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7619::Tuple{}
  ##########x#7069#7071#7075#7080#7620::Float64
  ########_var0#7072#7076#7081#7621::Tuple{}
  ####fy#7420#7622::Float64
  _var0::Bool
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7077#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7628::Tuple{}
  ##########x#7069#7071#7075#7080#7629::Float64
  ########_var0#7072#7076#7081#7630::Tuple{}
  ##a#7631::Float64
  ####G#7549#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7550#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7551#7634::Tuple{}
  ##########x#7069#7071#7075#7552#7635::Float64
  ########_var0#7072#7076#7553#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7431#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7642::Tuple{}
  ##########x#7069#7071#7075#7434#7643::Float64
  ########_var0#7072#7076#7435#7644::Tuple{}
  ######a#7132#7134#7645::Tuple{}
  ######b#7133#7135#7646::Tuple{}
  ####_var0#7136#7647::Tuple{}
  ##a1#7648::Float64
  ##a2#7649::Float64
  ######a#7137#7162#7650::Tuple{}
  ######b#7138#7163#7651::Tuple{}
  ######afactor#7139#7164#7652::Float64
  ######bfactor#7140#7165#7653::Float64
  ####_var0#7166#7654::Tuple{}
  ##a#7655::Float64
  ####G#7544#7656::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7545#7657::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7546#7658::Tuple{}
  ##########x#7069#7071#7075#7547#7659::Float64
  ########_var0#7072#7076#7548#7660::Tuple{}
  ########tup#7068#7112#7116#7661::Tuple{}
  ########x#7069#7113#7117#7662::Float64
  ######_var0#7114#7118#7663::Tuple{}
  ########types#7084#7115#7119#7664::Tuple{Type{Float64}}
  ######a#7167#7169#7665::Tuple{}
  ######b#7168#7170#7666::Tuple{}
  ####_var0#7171#7667::Tuple{}
  ######tup#7414#7416#7668::Tuple{}
  ######x#7415#7417#7669::Int64
  ####_var0#7418#7670::Tuple{}
  ######types#7268#7419#7671::Tuple{Type{Int64}}
  ##xs#7672::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7612 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7612 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7614 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7615 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7616 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7617 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7621 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7615::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7622 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7622::Float64)::Bool,(Base.ne_float)(####fy#7420#7622::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7622::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7670 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7418#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7655 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      ####G#7544#7656 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7548#7660 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7072#7076#7548#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7655::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7663 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7114#7118#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7431#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7644 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7072#7076#7435#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7136#7647 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7136#7647 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7631 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7549#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7553#7636 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7072#7076#7553#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7648 = GenSym(6)
      ##a2#7649 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7654 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7166#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7648::Float64,##a2#7649::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7667 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7171#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7630 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7072#7076#7081#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7532::Float64
  ##xs#7533::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7532::Float64)::Bool,(Base.ne_float)(##fy#7532::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7532::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7532::Float64
  ##xs#7533::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7532::Float64)::Bool,(Base.ne_float)(##fy#7532::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7532::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7610::Tuple{}
  ######x#7415#7417#7611::Int64
  ####_var0#7418#7612::Tuple{}
  ######types#7268#7419#7613::Tuple{Type{Int64}}
  ##a#7614::Float64
  ##exp_a#7615::Float64
  ##deriv#7616::Float64
  ####G#7077#7617::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7618::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7619::Tuple{}
  ##########x#7069#7071#7075#7080#7620::Float64
  ########_var0#7072#7076#7081#7621::Tuple{}
  ####fy#7420#7622::Float64
  _var0::Bool
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7077#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7628::Tuple{}
  ##########x#7069#7071#7075#7080#7629::Float64
  ########_var0#7072#7076#7081#7630::Tuple{}
  ##a#7631::Float64
  ####G#7549#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7550#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7551#7634::Tuple{}
  ##########x#7069#7071#7075#7552#7635::Float64
  ########_var0#7072#7076#7553#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7431#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7642::Tuple{}
  ##########x#7069#7071#7075#7434#7643::Float64
  ########_var0#7072#7076#7435#7644::Tuple{}
  ######a#7132#7134#7645::Tuple{}
  ######b#7133#7135#7646::Tuple{}
  ####_var0#7136#7647::Tuple{}
  ##a1#7648::Float64
  ##a2#7649::Float64
  ######a#7137#7162#7650::Tuple{}
  ######b#7138#7163#7651::Tuple{}
  ######afactor#7139#7164#7652::Float64
  ######bfactor#7140#7165#7653::Float64
  ####_var0#7166#7654::Tuple{}
  ##a#7655::Float64
  ####G#7544#7656::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7545#7657::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7546#7658::Tuple{}
  ##########x#7069#7071#7075#7547#7659::Float64
  ########_var0#7072#7076#7548#7660::Tuple{}
  ########tup#7068#7112#7116#7661::Tuple{}
  ########x#7069#7113#7117#7662::Float64
  ######_var0#7114#7118#7663::Tuple{}
  ########types#7084#7115#7119#7664::Tuple{Type{Float64}}
  ######a#7167#7169#7665::Tuple{}
  ######b#7168#7170#7666::Tuple{}
  ####_var0#7171#7667::Tuple{}
  ######tup#7414#7416#7668::Tuple{}
  ######x#7415#7417#7669::Int64
  ####_var0#7418#7670::Tuple{}
  ######types#7268#7419#7671::Tuple{Type{Int64}}
  ##xs#7672::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7612 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7612 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7614 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7615 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7616 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7617 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7621 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7615::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7622 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7622::Float64)::Bool,(Base.ne_float)(####fy#7420#7622::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7622::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7670 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7418#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7655 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      ####G#7544#7656 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7548#7660 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7072#7076#7548#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7655::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7663 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7114#7118#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7431#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7644 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7072#7076#7435#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7136#7647 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7136#7647 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7631 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7549#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7553#7636 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7072#7076#7553#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7648 = GenSym(6)
      ##a2#7649 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7654 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7166#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7648::Float64,##a2#7649::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7667 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7171#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7630 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7072#7076#7081#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7610::Tuple{}
  ######x#7415#7417#7611::Int64
  ####_var0#7418#7612::Tuple{}
  ######types#7268#7419#7613::Tuple{Type{Int64}}
  ##a#7614::Float64
  ##exp_a#7615::Float64
  ##deriv#7616::Float64
  ####G#7077#7617::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7618::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7619::Tuple{}
  ##########x#7069#7071#7075#7080#7620::Float64
  ########_var0#7072#7076#7081#7621::Tuple{}
  ####fy#7420#7622::Float64
  _var0::Bool
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7077#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7628::Tuple{}
  ##########x#7069#7071#7075#7080#7629::Float64
  ########_var0#7072#7076#7081#7630::Tuple{}
  ##a#7631::Float64
  ####G#7549#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7550#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7551#7634::Tuple{}
  ##########x#7069#7071#7075#7552#7635::Float64
  ########_var0#7072#7076#7553#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7431#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7642::Tuple{}
  ##########x#7069#7071#7075#7434#7643::Float64
  ########_var0#7072#7076#7435#7644::Tuple{}
  ######a#7132#7134#7645::Tuple{}
  ######b#7133#7135#7646::Tuple{}
  ####_var0#7136#7647::Tuple{}
  ##a1#7648::Float64
  ##a2#7649::Float64
  ######a#7137#7162#7650::Tuple{}
  ######b#7138#7163#7651::Tuple{}
  ######afactor#7139#7164#7652::Float64
  ######bfactor#7140#7165#7653::Float64
  ####_var0#7166#7654::Tuple{}
  ##a#7655::Float64
  ####G#7544#7656::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7545#7657::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7546#7658::Tuple{}
  ##########x#7069#7071#7075#7547#7659::Float64
  ########_var0#7072#7076#7548#7660::Tuple{}
  ########tup#7068#7112#7116#7661::Tuple{}
  ########x#7069#7113#7117#7662::Float64
  ######_var0#7114#7118#7663::Tuple{}
  ########types#7084#7115#7119#7664::Tuple{Type{Float64}}
  ######a#7167#7169#7665::Tuple{}
  ######b#7168#7170#7666::Tuple{}
  ####_var0#7171#7667::Tuple{}
  ######tup#7414#7416#7668::Tuple{}
  ######x#7415#7417#7669::Int64
  ####_var0#7418#7670::Tuple{}
  ######types#7268#7419#7671::Tuple{Type{Int64}}
  ##xs#7672::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7612 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7612 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7614 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7615 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7616 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7617 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7621 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7615::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7622 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7622::Float64)::Bool,(Base.ne_float)(####fy#7420#7622::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7622::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7670 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7418#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7655 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      ####G#7544#7656 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7548#7660 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7072#7076#7548#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7655::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7663 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7114#7118#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7431#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7644 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7072#7076#7435#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7136#7647 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7136#7647 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7631 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7549#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7553#7636 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7072#7076#7553#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7648 = GenSym(6)
      ##a2#7649 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7654 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7166#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7648::Float64,##a2#7649::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7667 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7171#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7630 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7072#7076#7081#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7610::Tuple{}
  ######x#7415#7417#7611::Int64
  ####_var0#7418#7612::Tuple{}
  ######types#7268#7419#7613::Tuple{Type{Int64}}
  ##a#7614::Float64
  ##exp_a#7615::Float64
  ##deriv#7616::Float64
  ####G#7077#7617::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7618::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7619::Tuple{}
  ##########x#7069#7071#7075#7080#7620::Float64
  ########_var0#7072#7076#7081#7621::Tuple{}
  ####fy#7420#7622::Float64
  _var0::Bool
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7077#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7628::Tuple{}
  ##########x#7069#7071#7075#7080#7629::Float64
  ########_var0#7072#7076#7081#7630::Tuple{}
  ##a#7631::Float64
  ####G#7549#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7550#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7551#7634::Tuple{}
  ##########x#7069#7071#7075#7552#7635::Float64
  ########_var0#7072#7076#7553#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7431#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7642::Tuple{}
  ##########x#7069#7071#7075#7434#7643::Float64
  ########_var0#7072#7076#7435#7644::Tuple{}
  ######a#7132#7134#7645::Tuple{}
  ######b#7133#7135#7646::Tuple{}
  ####_var0#7136#7647::Tuple{}
  ##a1#7648::Float64
  ##a2#7649::Float64
  ######a#7137#7162#7650::Tuple{}
  ######b#7138#7163#7651::Tuple{}
  ######afactor#7139#7164#7652::Float64
  ######bfactor#7140#7165#7653::Float64
  ####_var0#7166#7654::Tuple{}
  ##a#7655::Float64
  ####G#7544#7656::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7545#7657::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7546#7658::Tuple{}
  ##########x#7069#7071#7075#7547#7659::Float64
  ########_var0#7072#7076#7548#7660::Tuple{}
  ########tup#7068#7112#7116#7661::Tuple{}
  ########x#7069#7113#7117#7662::Float64
  ######_var0#7114#7118#7663::Tuple{}
  ########types#7084#7115#7119#7664::Tuple{Type{Float64}}
  ######a#7167#7169#7665::Tuple{}
  ######b#7168#7170#7666::Tuple{}
  ####_var0#7171#7667::Tuple{}
  ######tup#7414#7416#7668::Tuple{}
  ######x#7415#7417#7669::Int64
  ####_var0#7418#7670::Tuple{}
  ######types#7268#7419#7671::Tuple{Type{Int64}}
  ##xs#7672::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7612 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7612 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7614 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7615 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7616 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7617 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7621 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7615::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7622 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7622::Float64)::Bool,(Base.ne_float)(####fy#7420#7622::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7622::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7670 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7418#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7655 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      ####G#7544#7656 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7548#7660 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7072#7076#7548#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7655::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7663 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7114#7118#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7431#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7644 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7072#7076#7435#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7136#7647 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7136#7647 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7631 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7549#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7553#7636 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7072#7076#7553#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7648 = GenSym(6)
      ##a2#7649 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7654 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7166#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7648::Float64,##a2#7649::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7667 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7171#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7630 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7072#7076#7081#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7414#7416#7610::Tuple{}
  ######x#7415#7417#7611::Int64
  ####_var0#7418#7612::Tuple{}
  ######types#7268#7419#7613::Tuple{Type{Int64}}
  ##a#7614::Float64
  ##exp_a#7615::Float64
  ##deriv#7616::Float64
  ####G#7077#7617::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7618::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7619::Tuple{}
  ##########x#7069#7071#7075#7080#7620::Float64
  ########_var0#7072#7076#7081#7621::Tuple{}
  ####fy#7420#7622::Float64
  _var0::Bool
  ##a#7623::Float64
  ##exp_a#7624::Float64
  ##deriv#7625::Float64
  ####G#7077#7626::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7078#7627::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7079#7628::Tuple{}
  ##########x#7069#7071#7075#7080#7629::Float64
  ########_var0#7072#7076#7081#7630::Tuple{}
  ##a#7631::Float64
  ####G#7549#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7550#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7551#7634::Tuple{}
  ##########x#7069#7071#7075#7552#7635::Float64
  ########_var0#7072#7076#7553#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7431#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7432#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7433#7642::Tuple{}
  ##########x#7069#7071#7075#7434#7643::Float64
  ########_var0#7072#7076#7435#7644::Tuple{}
  ######a#7132#7134#7645::Tuple{}
  ######b#7133#7135#7646::Tuple{}
  ####_var0#7136#7647::Tuple{}
  ##a1#7648::Float64
  ##a2#7649::Float64
  ######a#7137#7162#7650::Tuple{}
  ######b#7138#7163#7651::Tuple{}
  ######afactor#7139#7164#7652::Float64
  ######bfactor#7140#7165#7653::Float64
  ####_var0#7166#7654::Tuple{}
  ##a#7655::Float64
  ####G#7544#7656::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7067#7073#7545#7657::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7068#7070#7074#7546#7658::Tuple{}
  ##########x#7069#7071#7075#7547#7659::Float64
  ########_var0#7072#7076#7548#7660::Tuple{}
  ########tup#7068#7112#7116#7661::Tuple{}
  ########x#7069#7113#7117#7662::Float64
  ######_var0#7114#7118#7663::Tuple{}
  ########types#7084#7115#7119#7664::Tuple{Type{Float64}}
  ######a#7167#7169#7665::Tuple{}
  ######b#7168#7170#7666::Tuple{}
  ####_var0#7171#7667::Tuple{}
  ######tup#7414#7416#7668::Tuple{}
  ######x#7415#7417#7669::Int64
  ####_var0#7418#7670::Tuple{}
  ######types#7268#7419#7671::Tuple{Type{Int64}}
  ##xs#7672::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7418#7612 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7418#7612 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7614 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7615 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7616 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7614::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7617 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7621 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7072#7076#7081#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7615::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7420#7622 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7420#7622::Float64)::Bool,(Base.ne_float)(####fy#7420#7622::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7420#7622::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7418#7670 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7418#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7655 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7655::Float64,0)::Float64
      ####G#7544#7656 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7548#7660 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7072#7076#7548#7660 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7655::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7114#7118#7663 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7114#7118#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7431#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7435#7644 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7072#7076#7435#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7136#7647 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7136#7647 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7631 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7549#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7553#7636 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7072#7076#7553#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7648 = GenSym(6)
      ##a2#7649 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7166#7654 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7166#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7648::Float64,##a2#7649::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7171#7667 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7171#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7624 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7625 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7623::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7077#7626 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7072#7076#7081#7630 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7072#7076#7081#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7624::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




