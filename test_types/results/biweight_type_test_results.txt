____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 17:
      return (top(tuple))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 20:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7126::Float64
  ##exp_a#7127::Float64
  ##deriv#7128::Float64
  ####G#7114#7129::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7130::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7131::Tuple{}
  ##########x#7106#7108#7112#7117#7132::Float64
  ########_var0#7109#7113#7118#7133::Tuple{}
  ##div_a#7134::Float64
  ######tup#7119#7122#7135::Tuple{}
  ######x#7120#7123#7136::Float64
  ####_var0#7124#7137::Tuple{}
  ######types#7121#7125#7138::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7126 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7127 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7128 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7129 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7133 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7109#7113#7118#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7127::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7134 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7124#7137 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7124#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7134::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,7.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7126::Float64
  ##exp_a#7127::Float64
  ##deriv#7128::Float64
  ####G#7114#7129::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7130::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7131::Tuple{}
  ##########x#7106#7108#7112#7117#7132::Float64
  ########_var0#7109#7113#7118#7133::Tuple{}
  ##div_a#7134::Float64
  ######tup#7119#7122#7135::Tuple{}
  ######x#7120#7123#7136::Float64
  ####_var0#7124#7137::Tuple{}
  ######types#7121#7125#7138::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7126 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7127 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7128 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7129 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7133 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7109#7113#7118#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7127::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7134 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7124#7137 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7124#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7134::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7126::Float64
  ##exp_a#7127::Float64
  ##deriv#7128::Float64
  ####G#7114#7129::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7130::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7131::Tuple{}
  ##########x#7106#7108#7112#7117#7132::Float64
  ########_var0#7109#7113#7118#7133::Tuple{}
  ##div_a#7134::Float64
  ######tup#7119#7122#7135::Tuple{}
  ######x#7120#7123#7136::Float64
  ####_var0#7124#7137::Tuple{}
  ######types#7121#7125#7138::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7126 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7127 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7128 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7129 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7133 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7109#7113#7118#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7127::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7134 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7124#7137 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7124#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7134::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7126::Float64
  ##exp_a#7127::Float64
  ##deriv#7128::Float64
  ####G#7114#7129::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7130::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7131::Tuple{}
  ##########x#7106#7108#7112#7117#7132::Float64
  ########_var0#7109#7113#7118#7133::Tuple{}
  ##div_a#7134::Float64
  ######tup#7119#7122#7135::Tuple{}
  ######x#7120#7123#7136::Float64
  ####_var0#7124#7137::Tuple{}
  ######types#7121#7125#7138::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7126 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7127 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7128 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7129 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7133 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7109#7113#7118#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7127::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7134 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7124#7137 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7124#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7134::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7126::Float64
  ##exp_a#7127::Float64
  ##deriv#7128::Float64
  ####G#7114#7129::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7130::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7131::Tuple{}
  ##########x#7106#7108#7112#7117#7132::Float64
  ########_var0#7109#7113#7118#7133::Tuple{}
  ##div_a#7134::Float64
  ######tup#7119#7122#7135::Tuple{}
  ######x#7120#7123#7136::Float64
  ####_var0#7124#7137::Tuple{}
  ######types#7121#7125#7138::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 24:
      ##a#7126 = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7127 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7128 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7126::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7129 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7133 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7109#7113#7118#7133 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7127::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7134 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,7.0))
      $(Expr(:boundscheck, false))
      ####_var0#7124#7137 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7124#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7134::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 22:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 21:
      return (top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 25:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7105#7149#7153#7157::Tuple{}
  ########x#7106#7150#7154#7158::Float64
  ######_var0#7151#7155#7159::Tuple{}
  ########types#7121#7152#7156#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7159 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7151#7155#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.9523809523809526,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7105#7149#7153#7157::Tuple{}
  ########x#7106#7150#7154#7158::Float64
  ######_var0#7151#7155#7159::Tuple{}
  ########types#7121#7152#7156#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7159 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7151#7155#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7105#7149#7153#7157::Tuple{}
  ########x#7106#7150#7154#7158::Float64
  ######_var0#7151#7155#7159::Tuple{}
  ########types#7121#7152#7156#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7159 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7151#7155#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7105#7149#7153#7157::Tuple{}
  ########x#7106#7150#7154#7158::Float64
  ######_var0#7151#7155#7159::Tuple{}
  ########types#7121#7152#7156#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7159 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7151#7155#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7105#7149#7153#7157::Tuple{}
  ########x#7106#7150#7154#7158::Float64
  ######_var0#7151#7155#7159::Tuple{}
  ########types#7121#7152#7156#7160::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7159 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7151#7155#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.9523809523809526))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7163#7167::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7168::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7167 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7167 = false
      2: 
      ####_var0#7163#7167::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7168 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7168::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7163#7167::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7168::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7167 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7167 = false
      2: 
      ####_var0#7163#7167::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7168 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7168::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7163#7395::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7396::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7395 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7395 = false
      2: 
      ####_var0#7163#7395::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7396 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7396::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7163#7167::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7168::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7167 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7167 = false
      2: 
      ####_var0#7163#7167::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7168 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7168::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  ####_var0#7163#7167::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7168::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7167 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7167 = false
      2: 
      ####_var0#7163#7167::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7168 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7168::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{Float64},GenSym(2),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7163#7395::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7396::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7395 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7395 = false
      2: 
      ####_var0#7163#7395::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7396 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7396::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7163#7395::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7396::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7395 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7395 = false
      2: 
      ####_var0#7163#7395::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7396 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7396::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7163#7395::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7396::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7395 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7395 = false
      2: 
      ####_var0#7163#7395::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7396 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7396::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7163#7395::UNION{BOOL,INT64}
  ########_var0#7161#7162#7164#7396::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7163#7395 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7163#7395 = false
      2: 
      ####_var0#7163#7395::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7161#7162#7164#7396 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7161#7162#7164#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7161#7162#7164#7396::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7297#7306#7397::Tuple{}
  ####_var0#7307#7398::Tuple{}
  ######types#7305#7308#7399::Tuple{Type{Int64}}
  ########tup#7297#7301#7303#7400::Tuple{}
  ######_var0#7302#7304#7401::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7402::Float64
  ##a2#7403::Float64
  ##div_a#7404::Float64
  ####afactor#7184#7405::Float64
  ####bfactor#7185#7406::Float64
  ########a#7174#7178#7186#7407::Tuple{}
  ########b#7175#7179#7187#7408::Tuple{}
  ########afactor#7176#7180#7188#7409::Float64
  ########bfactor#7177#7181#7189#7410::Float64
  ######_var0#7182#7190#7411::Tuple{}
  ######types#7183#7191#7412::Tuple{Type{Float64}}
  ##a#7413::Float64
  ##exp_a#7414::Float64
  ##deriv#7415::Float64
  ####G#7114#7416::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7417::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7418::Tuple{}
  ##########x#7106#7108#7112#7117#7419::Float64
  ########_var0#7109#7113#7118#7420::Tuple{}
  ######tup#7297#7306#7421::Tuple{}
  ####_var0#7307#7422::Tuple{}
  ######types#7305#7308#7423::Tuple{Type{Int64}}
  ##a#7424::Float64
  ##exp_a#7425::Float64
  ##deriv#7426::Float64
  ####G#7114#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7429::Tuple{}
  ##########x#7106#7108#7112#7117#7430::Float64
  ########_var0#7109#7113#7118#7431::Tuple{}
  ########tup#7105#7149#7153#7432::Tuple{}
  ########x#7106#7150#7154#7433::Float64
  ######_var0#7151#7155#7434::Tuple{}
  ########types#7121#7152#7156#7435::Tuple{Type{Float64}}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7184#7439::Float64
  ####bfactor#7185#7440::Float64
  ########a#7174#7178#7186#7441::Tuple{}
  ########b#7175#7179#7187#7442::Tuple{}
  ########afactor#7176#7180#7188#7443::Float64
  ########bfactor#7177#7181#7189#7444::Float64
  ######_var0#7182#7190#7445::Tuple{}
  ######types#7183#7191#7446::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7307#7398 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7307#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7302#7304#7401 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7302#7304#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7402 = GenSym(2)
      ##a2#7403 = GenSym(3)
      ##div_a#7404 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7402::Float64,##a2#7403::Float64))
      ####afactor#7184#7405 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7403::Float64))
      ####bfactor#7185#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7402::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7403::Float64,##a2#7403::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7411 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7182#7190#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7404::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7413 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7414 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7415 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7416 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7420 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7118#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7414::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7307#7422 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7307#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7424 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7425 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7426 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7431 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7109#7113#7118#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7425::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7434 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7151#7155#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(6)
      ##a2#7437 = GenSym(7)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7184#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7185#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7445 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7182#7190#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  x::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,u::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.9375,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),(top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7297#7306#7397::Tuple{}
  ####_var0#7307#7398::Tuple{}
  ######types#7305#7308#7399::Tuple{Type{Int64}}
  ########tup#7297#7301#7303#7400::Tuple{}
  ######_var0#7302#7304#7401::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7402::Float64
  ##a2#7403::Float64
  ##div_a#7404::Float64
  ####afactor#7184#7405::Float64
  ####bfactor#7185#7406::Float64
  ########a#7174#7178#7186#7407::Tuple{}
  ########b#7175#7179#7187#7408::Tuple{}
  ########afactor#7176#7180#7188#7409::Float64
  ########bfactor#7177#7181#7189#7410::Float64
  ######_var0#7182#7190#7411::Tuple{}
  ######types#7183#7191#7412::Tuple{Type{Float64}}
  ##a#7413::Float64
  ##exp_a#7414::Float64
  ##deriv#7415::Float64
  ####G#7114#7416::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7417::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7418::Tuple{}
  ##########x#7106#7108#7112#7117#7419::Float64
  ########_var0#7109#7113#7118#7420::Tuple{}
  ######tup#7297#7306#7421::Tuple{}
  ####_var0#7307#7422::Tuple{}
  ######types#7305#7308#7423::Tuple{Type{Int64}}
  ##a#7424::Float64
  ##exp_a#7425::Float64
  ##deriv#7426::Float64
  ####G#7114#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7429::Tuple{}
  ##########x#7106#7108#7112#7117#7430::Float64
  ########_var0#7109#7113#7118#7431::Tuple{}
  ########tup#7105#7149#7153#7432::Tuple{}
  ########x#7106#7150#7154#7433::Float64
  ######_var0#7151#7155#7434::Tuple{}
  ########types#7121#7152#7156#7435::Tuple{Type{Float64}}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7184#7439::Float64
  ####bfactor#7185#7440::Float64
  ########a#7174#7178#7186#7441::Tuple{}
  ########b#7175#7179#7187#7442::Tuple{}
  ########afactor#7176#7180#7188#7443::Float64
  ########bfactor#7177#7181#7189#7444::Float64
  ######_var0#7182#7190#7445::Tuple{}
  ######types#7183#7191#7446::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7307#7398 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7307#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7302#7304#7401 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7302#7304#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7402 = GenSym(2)
      ##a2#7403 = GenSym(3)
      ##div_a#7404 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7402::Float64,##a2#7403::Float64))
      ####afactor#7184#7405 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7403::Float64))
      ####bfactor#7185#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7402::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7403::Float64,##a2#7403::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7411 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7182#7190#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7404::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7413 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7414 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7415 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7416 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7420 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7118#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7414::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7307#7422 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7307#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7424 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7425 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7426 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7431 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7109#7113#7118#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7425::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7434 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7151#7155#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(6)
      ##a2#7437 = GenSym(7)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7184#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7185#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7445 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7182#7190#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7297#7306#7397::Tuple{}
  ####_var0#7307#7398::Tuple{}
  ######types#7305#7308#7399::Tuple{Type{Int64}}
  ########tup#7297#7301#7303#7400::Tuple{}
  ######_var0#7302#7304#7401::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7402::Float64
  ##a2#7403::Float64
  ##div_a#7404::Float64
  ####afactor#7184#7405::Float64
  ####bfactor#7185#7406::Float64
  ########a#7174#7178#7186#7407::Tuple{}
  ########b#7175#7179#7187#7408::Tuple{}
  ########afactor#7176#7180#7188#7409::Float64
  ########bfactor#7177#7181#7189#7410::Float64
  ######_var0#7182#7190#7411::Tuple{}
  ######types#7183#7191#7412::Tuple{Type{Float64}}
  ##a#7413::Float64
  ##exp_a#7414::Float64
  ##deriv#7415::Float64
  ####G#7114#7416::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7417::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7418::Tuple{}
  ##########x#7106#7108#7112#7117#7419::Float64
  ########_var0#7109#7113#7118#7420::Tuple{}
  ######tup#7297#7306#7421::Tuple{}
  ####_var0#7307#7422::Tuple{}
  ######types#7305#7308#7423::Tuple{Type{Int64}}
  ##a#7424::Float64
  ##exp_a#7425::Float64
  ##deriv#7426::Float64
  ####G#7114#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7429::Tuple{}
  ##########x#7106#7108#7112#7117#7430::Float64
  ########_var0#7109#7113#7118#7431::Tuple{}
  ########tup#7105#7149#7153#7432::Tuple{}
  ########x#7106#7150#7154#7433::Float64
  ######_var0#7151#7155#7434::Tuple{}
  ########types#7121#7152#7156#7435::Tuple{Type{Float64}}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7184#7439::Float64
  ####bfactor#7185#7440::Float64
  ########a#7174#7178#7186#7441::Tuple{}
  ########b#7175#7179#7187#7442::Tuple{}
  ########afactor#7176#7180#7188#7443::Float64
  ########bfactor#7177#7181#7189#7444::Float64
  ######_var0#7182#7190#7445::Tuple{}
  ######types#7183#7191#7446::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7307#7398 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7307#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7302#7304#7401 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7302#7304#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7402 = GenSym(2)
      ##a2#7403 = GenSym(3)
      ##div_a#7404 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7402::Float64,##a2#7403::Float64))
      ####afactor#7184#7405 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7403::Float64))
      ####bfactor#7185#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7402::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7403::Float64,##a2#7403::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7411 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7182#7190#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7404::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7413 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7414 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7415 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7416 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7420 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7118#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7414::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7307#7422 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7307#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7424 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7425 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7426 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7431 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7109#7113#7118#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7425::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7434 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7151#7155#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(6)
      ##a2#7437 = GenSym(7)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7184#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7185#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7445 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7182#7190#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7297#7306#7397::Tuple{}
  ####_var0#7307#7398::Tuple{}
  ######types#7305#7308#7399::Tuple{Type{Int64}}
  ########tup#7297#7301#7303#7400::Tuple{}
  ######_var0#7302#7304#7401::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7402::Float64
  ##a2#7403::Float64
  ##div_a#7404::Float64
  ####afactor#7184#7405::Float64
  ####bfactor#7185#7406::Float64
  ########a#7174#7178#7186#7407::Tuple{}
  ########b#7175#7179#7187#7408::Tuple{}
  ########afactor#7176#7180#7188#7409::Float64
  ########bfactor#7177#7181#7189#7410::Float64
  ######_var0#7182#7190#7411::Tuple{}
  ######types#7183#7191#7412::Tuple{Type{Float64}}
  ##a#7413::Float64
  ##exp_a#7414::Float64
  ##deriv#7415::Float64
  ####G#7114#7416::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7417::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7418::Tuple{}
  ##########x#7106#7108#7112#7117#7419::Float64
  ########_var0#7109#7113#7118#7420::Tuple{}
  ######tup#7297#7306#7421::Tuple{}
  ####_var0#7307#7422::Tuple{}
  ######types#7305#7308#7423::Tuple{Type{Int64}}
  ##a#7424::Float64
  ##exp_a#7425::Float64
  ##deriv#7426::Float64
  ####G#7114#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7429::Tuple{}
  ##########x#7106#7108#7112#7117#7430::Float64
  ########_var0#7109#7113#7118#7431::Tuple{}
  ########tup#7105#7149#7153#7432::Tuple{}
  ########x#7106#7150#7154#7433::Float64
  ######_var0#7151#7155#7434::Tuple{}
  ########types#7121#7152#7156#7435::Tuple{Type{Float64}}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7184#7439::Float64
  ####bfactor#7185#7440::Float64
  ########a#7174#7178#7186#7441::Tuple{}
  ########b#7175#7179#7187#7442::Tuple{}
  ########afactor#7176#7180#7188#7443::Float64
  ########bfactor#7177#7181#7189#7444::Float64
  ######_var0#7182#7190#7445::Tuple{}
  ######types#7183#7191#7446::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7307#7398 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7307#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7302#7304#7401 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7302#7304#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7402 = GenSym(2)
      ##a2#7403 = GenSym(3)
      ##div_a#7404 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7402::Float64,##a2#7403::Float64))
      ####afactor#7184#7405 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7403::Float64))
      ####bfactor#7185#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7402::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7403::Float64,##a2#7403::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7411 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7182#7190#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7404::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7413 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7414 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7415 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7416 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7420 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7118#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7414::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7307#7422 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7307#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7424 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7425 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7426 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7431 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7109#7113#7118#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7425::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7434 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7151#7155#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(6)
      ##a2#7437 = GenSym(7)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7184#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7185#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7445 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7182#7190#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7297#7306#7397::Tuple{}
  ####_var0#7307#7398::Tuple{}
  ######types#7305#7308#7399::Tuple{Type{Int64}}
  ########tup#7297#7301#7303#7400::Tuple{}
  ######_var0#7302#7304#7401::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7402::Float64
  ##a2#7403::Float64
  ##div_a#7404::Float64
  ####afactor#7184#7405::Float64
  ####bfactor#7185#7406::Float64
  ########a#7174#7178#7186#7407::Tuple{}
  ########b#7175#7179#7187#7408::Tuple{}
  ########afactor#7176#7180#7188#7409::Float64
  ########bfactor#7177#7181#7189#7410::Float64
  ######_var0#7182#7190#7411::Tuple{}
  ######types#7183#7191#7412::Tuple{Type{Float64}}
  ##a#7413::Float64
  ##exp_a#7414::Float64
  ##deriv#7415::Float64
  ####G#7114#7416::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7417::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7418::Tuple{}
  ##########x#7106#7108#7112#7117#7419::Float64
  ########_var0#7109#7113#7118#7420::Tuple{}
  ######tup#7297#7306#7421::Tuple{}
  ####_var0#7307#7422::Tuple{}
  ######types#7305#7308#7423::Tuple{Type{Int64}}
  ##a#7424::Float64
  ##exp_a#7425::Float64
  ##deriv#7426::Float64
  ####G#7114#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7429::Tuple{}
  ##########x#7106#7108#7112#7117#7430::Float64
  ########_var0#7109#7113#7118#7431::Tuple{}
  ########tup#7105#7149#7153#7432::Tuple{}
  ########x#7106#7150#7154#7433::Float64
  ######_var0#7151#7155#7434::Tuple{}
  ########types#7121#7152#7156#7435::Tuple{Type{Float64}}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7184#7439::Float64
  ####bfactor#7185#7440::Float64
  ########a#7174#7178#7186#7441::Tuple{}
  ########b#7175#7179#7187#7442::Tuple{}
  ########afactor#7176#7180#7188#7443::Float64
  ########bfactor#7177#7181#7189#7444::Float64
  ######_var0#7182#7190#7445::Tuple{}
  ######types#7183#7191#7446::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 30:
      $(Expr(:boundscheck, false))
      ####_var0#7307#7398 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7307#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7302#7304#7401 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7302#7304#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7402 = GenSym(2)
      ##a2#7403 = GenSym(3)
      ##div_a#7404 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7402::Float64,##a2#7403::Float64))
      ####afactor#7184#7405 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7403::Float64))
      ####bfactor#7185#7406 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7402::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7403::Float64,##a2#7403::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7411 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7182#7190#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7404::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 31:
      unless (Base.le_float)(1.0,(top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7413 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7414 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7415 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7413::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7416 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7420 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7118#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7414::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7307#7422 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7307#7422 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7424 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7425 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7426 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7424::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7431 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7109#7113#7118#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7425::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7434 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7151#7155#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,0.9375))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(6)
      ##a2#7437 = GenSym(7)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7184#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7185#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7445 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7182#7190#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7447::Float64
  ##xs#7448::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7447 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7447::Float64)::Bool,(Base.ne_float)(##fy#7447::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7447::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7447::Float64
  ##xs#7448::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7447 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7447::Float64)::Bool,(Base.ne_float)(##fy#7447::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7447::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7478::Tuple{}
  ######x#7452#7454#7479::Int64
  ####_var0#7455#7480::Tuple{}
  ######types#7305#7456#7481::Tuple{Type{Int64}}
  ##a#7482::Float64
  ##exp_a#7483::Float64
  ##deriv#7484::Float64
  ####G#7114#7485::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7486::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7487::Tuple{}
  ##########x#7106#7108#7112#7117#7488::Float64
  ########_var0#7109#7113#7118#7489::Tuple{}
  ####fy#7457#7490::Float64
  _var0::Bool
  ##a#7491::Float64
  ##exp_a#7492::Float64
  ##deriv#7493::Float64
  ####G#7114#7494::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7495::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7496::Tuple{}
  ##########x#7106#7108#7112#7117#7497::Float64
  ########_var0#7109#7113#7118#7498::Tuple{}
  ##a#7499::Float64
  ####G#7473#7500::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7474#7501::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7475#7502::Tuple{}
  ##########x#7106#7108#7112#7476#7503::Float64
  ########_var0#7109#7113#7477#7504::Tuple{}
  ##a#7505::Float64
  ##div_a#7506::Float64
  ##deriv#7507::Float64
  ####G#7468#7508::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7509::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7510::Tuple{}
  ##########x#7106#7108#7112#7471#7511::Float64
  ########_var0#7109#7113#7472#7512::Tuple{}
  ######a#7204#7206#7513::Tuple{}
  ######b#7205#7207#7514::Tuple{}
  ####_var0#7208#7515::Tuple{}
  ##a1#7516::Float64
  ##a2#7517::Float64
  ######a#7174#7199#7518::Tuple{}
  ######b#7175#7200#7519::Tuple{}
  ######afactor#7176#7201#7520::Float64
  ######bfactor#7177#7202#7521::Float64
  ####_var0#7203#7522::Tuple{}
  ##a#7523::Float64
  ####G#7463#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7464#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7465#7526::Tuple{}
  ##########x#7106#7108#7112#7466#7527::Float64
  ########_var0#7109#7113#7467#7528::Tuple{}
  ########tup#7105#7149#7153#7529::Tuple{}
  ########x#7106#7150#7154#7530::Float64
  ######_var0#7151#7155#7531::Tuple{}
  ########types#7121#7152#7156#7532::Tuple{Type{Float64}}
  ######a#7204#7206#7533::Tuple{}
  ######b#7205#7207#7534::Tuple{}
  ####_var0#7208#7535::Tuple{}
  ######tup#7451#7453#7536::Tuple{}
  ######x#7452#7454#7537::Int64
  ####_var0#7455#7538::Tuple{}
  ######types#7305#7456#7539::Tuple{Type{Int64}}
  ##exp_a#7540::Float64
  ####G#7458#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7459#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7460#7543::Tuple{}
  ##########x#7106#7108#7112#7461#7544::Float64
  ########_var0#7109#7113#7462#7545::Tuple{}
  ##xs#7546::Tuple{}
  ##########tup#7105#7149#7153#7239#7547::Tuple{}
  ##########x#7106#7150#7154#7240#7548::Float64
  ########_var0#7151#7155#7241#7549::Tuple{}
  ##########types#7121#7152#7156#7242#7550::Tuple{Type{Float64}}
  ####a1#7243#7551::Float64
  ####a2#7244#7552::Float64
  ########a#7174#7199#7245#7553::Tuple{}
  ########b#7175#7200#7246#7554::Tuple{}
  ########afactor#7176#7201#7247#7555::Float64
  ########bfactor#7177#7202#7248#7556::Float64
  ######_var0#7203#7249#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7184#7561::Float64
  ####bfactor#7185#7562::Float64
  ########a#7174#7178#7186#7563::Tuple{}
  ########b#7175#7179#7187#7564::Tuple{}
  ########afactor#7176#7180#7188#7565::Float64
  ########bfactor#7177#7181#7189#7566::Float64
  ######_var0#7182#7190#7567::Tuple{}
  ######types#7183#7191#7568::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7480 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7482 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7483 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7484 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7485 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7489 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7483::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7490 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7490::Float64)::Bool,(Base.ne_float)(####fy#7457#7490::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7490::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7538 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7455#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7540 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7458#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7462#7545 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7109#7113#7462#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7463#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7467#7528 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7109#7113#7467#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7531 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7151#7155#7531 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7505 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7506 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7505::Float64))
      ##deriv#7507 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7506::Float64,##a#7505::Float64))))
      ####G#7468#7508 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7512 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7109#7113#7472#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7506::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7515 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7208#7515 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7499 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      ####G#7473#7500 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7477#7504 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7477#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7516 = GenSym(4)
      ##a2#7517 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7522 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7203#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7516::Float64,##a2#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7535 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7208#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7151#7155#7241#7549 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7151#7155#7241#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7243#7551 = GenSym(12)
      ####a2#7244#7552 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7203#7249#7557 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7203#7249#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7243#7551::Float64,####a2#7244#7552::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7491 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7492 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7493 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7494 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7498 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7109#7113#7118#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7492::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7558 = GenSym(16)
      ##a2#7559 = GenSym(17)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7184#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7185#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7567 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7182#7190#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7447::Float64
  ##xs#7448::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7447 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7447::Float64)::Bool,(Base.ne_float)(##fy#7447::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7447::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7447::Float64
  ##xs#7448::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      ##fy#7447 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7447::Float64)::Bool,(Base.ne_float)(##fy#7447::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7447::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(15.0,GenSym(5))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(-3.0,GenSym(3))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),GenSym(1))))))),(Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7478::Tuple{}
  ######x#7452#7454#7479::Int64
  ####_var0#7455#7480::Tuple{}
  ######types#7305#7456#7481::Tuple{Type{Int64}}
  ##a#7482::Float64
  ##exp_a#7483::Float64
  ##deriv#7484::Float64
  ####G#7114#7485::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7486::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7487::Tuple{}
  ##########x#7106#7108#7112#7117#7488::Float64
  ########_var0#7109#7113#7118#7489::Tuple{}
  ####fy#7457#7490::Float64
  _var0::Bool
  ##a#7491::Float64
  ##exp_a#7492::Float64
  ##deriv#7493::Float64
  ####G#7114#7494::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7495::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7496::Tuple{}
  ##########x#7106#7108#7112#7117#7497::Float64
  ########_var0#7109#7113#7118#7498::Tuple{}
  ##a#7499::Float64
  ####G#7473#7500::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7474#7501::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7475#7502::Tuple{}
  ##########x#7106#7108#7112#7476#7503::Float64
  ########_var0#7109#7113#7477#7504::Tuple{}
  ##a#7505::Float64
  ##div_a#7506::Float64
  ##deriv#7507::Float64
  ####G#7468#7508::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7509::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7510::Tuple{}
  ##########x#7106#7108#7112#7471#7511::Float64
  ########_var0#7109#7113#7472#7512::Tuple{}
  ######a#7204#7206#7513::Tuple{}
  ######b#7205#7207#7514::Tuple{}
  ####_var0#7208#7515::Tuple{}
  ##a1#7516::Float64
  ##a2#7517::Float64
  ######a#7174#7199#7518::Tuple{}
  ######b#7175#7200#7519::Tuple{}
  ######afactor#7176#7201#7520::Float64
  ######bfactor#7177#7202#7521::Float64
  ####_var0#7203#7522::Tuple{}
  ##a#7523::Float64
  ####G#7463#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7464#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7465#7526::Tuple{}
  ##########x#7106#7108#7112#7466#7527::Float64
  ########_var0#7109#7113#7467#7528::Tuple{}
  ########tup#7105#7149#7153#7529::Tuple{}
  ########x#7106#7150#7154#7530::Float64
  ######_var0#7151#7155#7531::Tuple{}
  ########types#7121#7152#7156#7532::Tuple{Type{Float64}}
  ######a#7204#7206#7533::Tuple{}
  ######b#7205#7207#7534::Tuple{}
  ####_var0#7208#7535::Tuple{}
  ######tup#7451#7453#7536::Tuple{}
  ######x#7452#7454#7537::Int64
  ####_var0#7455#7538::Tuple{}
  ######types#7305#7456#7539::Tuple{Type{Int64}}
  ##exp_a#7540::Float64
  ####G#7458#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7459#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7460#7543::Tuple{}
  ##########x#7106#7108#7112#7461#7544::Float64
  ########_var0#7109#7113#7462#7545::Tuple{}
  ##xs#7546::Tuple{}
  ##########tup#7105#7149#7153#7239#7547::Tuple{}
  ##########x#7106#7150#7154#7240#7548::Float64
  ########_var0#7151#7155#7241#7549::Tuple{}
  ##########types#7121#7152#7156#7242#7550::Tuple{Type{Float64}}
  ####a1#7243#7551::Float64
  ####a2#7244#7552::Float64
  ########a#7174#7199#7245#7553::Tuple{}
  ########b#7175#7200#7246#7554::Tuple{}
  ########afactor#7176#7201#7247#7555::Float64
  ########bfactor#7177#7202#7248#7556::Float64
  ######_var0#7203#7249#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7184#7561::Float64
  ####bfactor#7185#7562::Float64
  ########a#7174#7178#7186#7563::Tuple{}
  ########b#7175#7179#7187#7564::Tuple{}
  ########afactor#7176#7180#7188#7565::Float64
  ########bfactor#7177#7181#7189#7566::Float64
  ######_var0#7182#7190#7567::Tuple{}
  ######types#7183#7191#7568::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7480 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7482 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7483 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7484 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7485 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7489 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7483::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7490 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7490::Float64)::Bool,(Base.ne_float)(####fy#7457#7490::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7490::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7538 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7455#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7540 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7458#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7462#7545 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7109#7113#7462#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7463#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7467#7528 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7109#7113#7467#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7531 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7151#7155#7531 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7505 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7506 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7505::Float64))
      ##deriv#7507 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7506::Float64,##a#7505::Float64))))
      ####G#7468#7508 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7512 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7109#7113#7472#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7506::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7515 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7208#7515 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7499 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      ####G#7473#7500 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7477#7504 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7477#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7516 = GenSym(4)
      ##a2#7517 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7522 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7203#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7516::Float64,##a2#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7535 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7208#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7151#7155#7241#7549 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7151#7155#7241#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7243#7551 = GenSym(12)
      ####a2#7244#7552 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7203#7249#7557 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7203#7249#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7243#7551::Float64,####a2#7244#7552::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7491 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7492 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7493 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7494 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7498 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7109#7113#7118#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7492::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7558 = GenSym(16)
      ##a2#7559 = GenSym(17)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7184#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7185#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7567 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7182#7190#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7478::Tuple{}
  ######x#7452#7454#7479::Int64
  ####_var0#7455#7480::Tuple{}
  ######types#7305#7456#7481::Tuple{Type{Int64}}
  ##a#7482::Float64
  ##exp_a#7483::Float64
  ##deriv#7484::Float64
  ####G#7114#7485::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7486::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7487::Tuple{}
  ##########x#7106#7108#7112#7117#7488::Float64
  ########_var0#7109#7113#7118#7489::Tuple{}
  ####fy#7457#7490::Float64
  _var0::Bool
  ##a#7491::Float64
  ##exp_a#7492::Float64
  ##deriv#7493::Float64
  ####G#7114#7494::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7495::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7496::Tuple{}
  ##########x#7106#7108#7112#7117#7497::Float64
  ########_var0#7109#7113#7118#7498::Tuple{}
  ##a#7499::Float64
  ####G#7473#7500::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7474#7501::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7475#7502::Tuple{}
  ##########x#7106#7108#7112#7476#7503::Float64
  ########_var0#7109#7113#7477#7504::Tuple{}
  ##a#7505::Float64
  ##div_a#7506::Float64
  ##deriv#7507::Float64
  ####G#7468#7508::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7509::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7510::Tuple{}
  ##########x#7106#7108#7112#7471#7511::Float64
  ########_var0#7109#7113#7472#7512::Tuple{}
  ######a#7204#7206#7513::Tuple{}
  ######b#7205#7207#7514::Tuple{}
  ####_var0#7208#7515::Tuple{}
  ##a1#7516::Float64
  ##a2#7517::Float64
  ######a#7174#7199#7518::Tuple{}
  ######b#7175#7200#7519::Tuple{}
  ######afactor#7176#7201#7520::Float64
  ######bfactor#7177#7202#7521::Float64
  ####_var0#7203#7522::Tuple{}
  ##a#7523::Float64
  ####G#7463#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7464#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7465#7526::Tuple{}
  ##########x#7106#7108#7112#7466#7527::Float64
  ########_var0#7109#7113#7467#7528::Tuple{}
  ########tup#7105#7149#7153#7529::Tuple{}
  ########x#7106#7150#7154#7530::Float64
  ######_var0#7151#7155#7531::Tuple{}
  ########types#7121#7152#7156#7532::Tuple{Type{Float64}}
  ######a#7204#7206#7533::Tuple{}
  ######b#7205#7207#7534::Tuple{}
  ####_var0#7208#7535::Tuple{}
  ######tup#7451#7453#7536::Tuple{}
  ######x#7452#7454#7537::Int64
  ####_var0#7455#7538::Tuple{}
  ######types#7305#7456#7539::Tuple{Type{Int64}}
  ##exp_a#7540::Float64
  ####G#7458#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7459#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7460#7543::Tuple{}
  ##########x#7106#7108#7112#7461#7544::Float64
  ########_var0#7109#7113#7462#7545::Tuple{}
  ##xs#7546::Tuple{}
  ##########tup#7105#7149#7153#7239#7547::Tuple{}
  ##########x#7106#7150#7154#7240#7548::Float64
  ########_var0#7151#7155#7241#7549::Tuple{}
  ##########types#7121#7152#7156#7242#7550::Tuple{Type{Float64}}
  ####a1#7243#7551::Float64
  ####a2#7244#7552::Float64
  ########a#7174#7199#7245#7553::Tuple{}
  ########b#7175#7200#7246#7554::Tuple{}
  ########afactor#7176#7201#7247#7555::Float64
  ########bfactor#7177#7202#7248#7556::Float64
  ######_var0#7203#7249#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7184#7561::Float64
  ####bfactor#7185#7562::Float64
  ########a#7174#7178#7186#7563::Tuple{}
  ########b#7175#7179#7187#7564::Tuple{}
  ########afactor#7176#7180#7188#7565::Float64
  ########bfactor#7177#7181#7189#7566::Float64
  ######_var0#7182#7190#7567::Tuple{}
  ######types#7183#7191#7568::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7480 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7482 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7483 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7484 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7485 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7489 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7483::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7490 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7490::Float64)::Bool,(Base.ne_float)(####fy#7457#7490::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7490::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7538 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7455#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7540 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7458#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7462#7545 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7109#7113#7462#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7463#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7467#7528 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7109#7113#7467#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7531 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7151#7155#7531 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7505 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7506 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7505::Float64))
      ##deriv#7507 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7506::Float64,##a#7505::Float64))))
      ####G#7468#7508 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7512 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7109#7113#7472#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7506::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7515 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7208#7515 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7499 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      ####G#7473#7500 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7477#7504 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7477#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7516 = GenSym(4)
      ##a2#7517 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7522 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7203#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7516::Float64,##a2#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7535 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7208#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7151#7155#7241#7549 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7151#7155#7241#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7243#7551 = GenSym(12)
      ####a2#7244#7552 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7203#7249#7557 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7203#7249#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7243#7551::Float64,####a2#7244#7552::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7491 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7492 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7493 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7494 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7498 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7109#7113#7118#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7492::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7558 = GenSym(16)
      ##a2#7559 = GenSym(17)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7184#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7185#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7567 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7182#7190#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7478::Tuple{}
  ######x#7452#7454#7479::Int64
  ####_var0#7455#7480::Tuple{}
  ######types#7305#7456#7481::Tuple{Type{Int64}}
  ##a#7482::Float64
  ##exp_a#7483::Float64
  ##deriv#7484::Float64
  ####G#7114#7485::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7486::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7487::Tuple{}
  ##########x#7106#7108#7112#7117#7488::Float64
  ########_var0#7109#7113#7118#7489::Tuple{}
  ####fy#7457#7490::Float64
  _var0::Bool
  ##a#7491::Float64
  ##exp_a#7492::Float64
  ##deriv#7493::Float64
  ####G#7114#7494::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7495::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7496::Tuple{}
  ##########x#7106#7108#7112#7117#7497::Float64
  ########_var0#7109#7113#7118#7498::Tuple{}
  ##a#7499::Float64
  ####G#7473#7500::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7474#7501::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7475#7502::Tuple{}
  ##########x#7106#7108#7112#7476#7503::Float64
  ########_var0#7109#7113#7477#7504::Tuple{}
  ##a#7505::Float64
  ##div_a#7506::Float64
  ##deriv#7507::Float64
  ####G#7468#7508::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7509::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7510::Tuple{}
  ##########x#7106#7108#7112#7471#7511::Float64
  ########_var0#7109#7113#7472#7512::Tuple{}
  ######a#7204#7206#7513::Tuple{}
  ######b#7205#7207#7514::Tuple{}
  ####_var0#7208#7515::Tuple{}
  ##a1#7516::Float64
  ##a2#7517::Float64
  ######a#7174#7199#7518::Tuple{}
  ######b#7175#7200#7519::Tuple{}
  ######afactor#7176#7201#7520::Float64
  ######bfactor#7177#7202#7521::Float64
  ####_var0#7203#7522::Tuple{}
  ##a#7523::Float64
  ####G#7463#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7464#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7465#7526::Tuple{}
  ##########x#7106#7108#7112#7466#7527::Float64
  ########_var0#7109#7113#7467#7528::Tuple{}
  ########tup#7105#7149#7153#7529::Tuple{}
  ########x#7106#7150#7154#7530::Float64
  ######_var0#7151#7155#7531::Tuple{}
  ########types#7121#7152#7156#7532::Tuple{Type{Float64}}
  ######a#7204#7206#7533::Tuple{}
  ######b#7205#7207#7534::Tuple{}
  ####_var0#7208#7535::Tuple{}
  ######tup#7451#7453#7536::Tuple{}
  ######x#7452#7454#7537::Int64
  ####_var0#7455#7538::Tuple{}
  ######types#7305#7456#7539::Tuple{Type{Int64}}
  ##exp_a#7540::Float64
  ####G#7458#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7459#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7460#7543::Tuple{}
  ##########x#7106#7108#7112#7461#7544::Float64
  ########_var0#7109#7113#7462#7545::Tuple{}
  ##xs#7546::Tuple{}
  ##########tup#7105#7149#7153#7239#7547::Tuple{}
  ##########x#7106#7150#7154#7240#7548::Float64
  ########_var0#7151#7155#7241#7549::Tuple{}
  ##########types#7121#7152#7156#7242#7550::Tuple{Type{Float64}}
  ####a1#7243#7551::Float64
  ####a2#7244#7552::Float64
  ########a#7174#7199#7245#7553::Tuple{}
  ########b#7175#7200#7246#7554::Tuple{}
  ########afactor#7176#7201#7247#7555::Float64
  ########bfactor#7177#7202#7248#7556::Float64
  ######_var0#7203#7249#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7184#7561::Float64
  ####bfactor#7185#7562::Float64
  ########a#7174#7178#7186#7563::Tuple{}
  ########b#7175#7179#7187#7564::Tuple{}
  ########afactor#7176#7180#7188#7565::Float64
  ########bfactor#7177#7181#7189#7566::Float64
  ######_var0#7182#7190#7567::Tuple{}
  ######types#7183#7191#7568::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7480 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7482 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7483 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7484 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7485 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7489 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7483::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7490 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7490::Float64)::Bool,(Base.ne_float)(####fy#7457#7490::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7490::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7538 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7455#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7540 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7458#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7462#7545 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7109#7113#7462#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7463#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7467#7528 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7109#7113#7467#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7531 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7151#7155#7531 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7505 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7506 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7505::Float64))
      ##deriv#7507 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7506::Float64,##a#7505::Float64))))
      ####G#7468#7508 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7512 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7109#7113#7472#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7506::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7515 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7208#7515 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7499 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      ####G#7473#7500 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7477#7504 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7477#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7516 = GenSym(4)
      ##a2#7517 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7522 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7203#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7516::Float64,##a2#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7535 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7208#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7151#7155#7241#7549 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7151#7155#7241#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7243#7551 = GenSym(12)
      ####a2#7244#7552 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7203#7249#7557 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7203#7249#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7243#7551::Float64,####a2#7244#7552::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7491 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7492 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7493 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7494 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7498 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7109#7113#7118#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7492::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7558 = GenSym(16)
      ##a2#7559 = GenSym(17)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7184#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7185#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7567 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7182#7190#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7478::Tuple{}
  ######x#7452#7454#7479::Int64
  ####_var0#7455#7480::Tuple{}
  ######types#7305#7456#7481::Tuple{Type{Int64}}
  ##a#7482::Float64
  ##exp_a#7483::Float64
  ##deriv#7484::Float64
  ####G#7114#7485::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7486::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7487::Tuple{}
  ##########x#7106#7108#7112#7117#7488::Float64
  ########_var0#7109#7113#7118#7489::Tuple{}
  ####fy#7457#7490::Float64
  _var0::Bool
  ##a#7491::Float64
  ##exp_a#7492::Float64
  ##deriv#7493::Float64
  ####G#7114#7494::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7495::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7496::Tuple{}
  ##########x#7106#7108#7112#7117#7497::Float64
  ########_var0#7109#7113#7118#7498::Tuple{}
  ##a#7499::Float64
  ####G#7473#7500::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7474#7501::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7475#7502::Tuple{}
  ##########x#7106#7108#7112#7476#7503::Float64
  ########_var0#7109#7113#7477#7504::Tuple{}
  ##a#7505::Float64
  ##div_a#7506::Float64
  ##deriv#7507::Float64
  ####G#7468#7508::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7509::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7510::Tuple{}
  ##########x#7106#7108#7112#7471#7511::Float64
  ########_var0#7109#7113#7472#7512::Tuple{}
  ######a#7204#7206#7513::Tuple{}
  ######b#7205#7207#7514::Tuple{}
  ####_var0#7208#7515::Tuple{}
  ##a1#7516::Float64
  ##a2#7517::Float64
  ######a#7174#7199#7518::Tuple{}
  ######b#7175#7200#7519::Tuple{}
  ######afactor#7176#7201#7520::Float64
  ######bfactor#7177#7202#7521::Float64
  ####_var0#7203#7522::Tuple{}
  ##a#7523::Float64
  ####G#7463#7524::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7464#7525::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7465#7526::Tuple{}
  ##########x#7106#7108#7112#7466#7527::Float64
  ########_var0#7109#7113#7467#7528::Tuple{}
  ########tup#7105#7149#7153#7529::Tuple{}
  ########x#7106#7150#7154#7530::Float64
  ######_var0#7151#7155#7531::Tuple{}
  ########types#7121#7152#7156#7532::Tuple{Type{Float64}}
  ######a#7204#7206#7533::Tuple{}
  ######b#7205#7207#7534::Tuple{}
  ####_var0#7208#7535::Tuple{}
  ######tup#7451#7453#7536::Tuple{}
  ######x#7452#7454#7537::Int64
  ####_var0#7455#7538::Tuple{}
  ######types#7305#7456#7539::Tuple{Type{Int64}}
  ##exp_a#7540::Float64
  ####G#7458#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7459#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7460#7543::Tuple{}
  ##########x#7106#7108#7112#7461#7544::Float64
  ########_var0#7109#7113#7462#7545::Tuple{}
  ##xs#7546::Tuple{}
  ##########tup#7105#7149#7153#7239#7547::Tuple{}
  ##########x#7106#7150#7154#7240#7548::Float64
  ########_var0#7151#7155#7241#7549::Tuple{}
  ##########types#7121#7152#7156#7242#7550::Tuple{Type{Float64}}
  ####a1#7243#7551::Float64
  ####a2#7244#7552::Float64
  ########a#7174#7199#7245#7553::Tuple{}
  ########b#7175#7200#7246#7554::Tuple{}
  ########afactor#7176#7201#7247#7555::Float64
  ########bfactor#7177#7202#7248#7556::Float64
  ######_var0#7203#7249#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7184#7561::Float64
  ####bfactor#7185#7562::Float64
  ########a#7174#7178#7186#7563::Tuple{}
  ########b#7175#7179#7187#7564::Tuple{}
  ########afactor#7176#7180#7188#7565::Float64
  ########bfactor#7177#7181#7189#7566::Float64
  ######_var0#7182#7190#7567::Tuple{}
  ######types#7183#7191#7568::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 51:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7480 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 52:
      ##a#7482 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7483 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7484 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7482::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7485 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7489 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7483::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 53:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7490 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7490::Float64)::Bool,(Base.ne_float)(####fy#7457#7490::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7490::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7538 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7455#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##exp_a#7540 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7458#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7462#7545 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7109#7113#7462#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7523 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7523::Float64,0)::Float64
      ####G#7463#7524 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7467#7528 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7109#7113#7467#7528 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7531 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7151#7155#7531 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##a#7505 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7506 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7505::Float64))
      ##deriv#7507 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7506::Float64,##a#7505::Float64))))
      ####G#7468#7508 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7512 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7109#7113#7472#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7506::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7515 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7208#7515 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      ##a#7499 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7499::Float64,0)::Float64
      ####G#7473#7500 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7477#7504 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7109#7113#7477#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7516 = GenSym(4)
      ##a2#7517 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7522 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7203#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7516::Float64,##a2#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7535 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7208#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ########_var0#7151#7155#7241#7549 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7151#7155#7241#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,15.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(8), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7243#7551 = GenSym(12)
      ####a2#7244#7552 = GenSym(13)
      $(Expr(:boundscheck, false))
      ######_var0#7203#7249#7557 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7203#7249#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7243#7551::Float64,####a2#7244#7552::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7491 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7492 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7493 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7491::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7494 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7498 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7109#7113#7118#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7492::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      GenSym(17) = (top(getfield))(GenSym(15),:value)::Float64
      ##a1#7558 = GenSym(16)
      ##a2#7559 = GenSym(17)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7184#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7185#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7190#7567 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7182#7190#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7569::Float64
  ##xs#7570::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7569 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7569::Float64)::Bool,(Base.ne_float)(##fy#7569::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7569::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7569::Float64
  ##xs#7570::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7569 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7569::Float64)::Bool,(Base.ne_float)(##fy#7569::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7569::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7647::Tuple{}
  ######x#7452#7454#7648::Int64
  ####_var0#7455#7649::Tuple{}
  ######types#7305#7456#7650::Tuple{Type{Int64}}
  ##a#7651::Float64
  ##exp_a#7652::Float64
  ##deriv#7653::Float64
  ####G#7114#7654::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7655::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7656::Tuple{}
  ##########x#7106#7108#7112#7117#7657::Float64
  ########_var0#7109#7113#7118#7658::Tuple{}
  ####fy#7457#7659::Float64
  _var0::Bool
  ##a#7660::Float64
  ##exp_a#7661::Float64
  ##deriv#7662::Float64
  ####G#7114#7663::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7664::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7665::Tuple{}
  ##########x#7106#7108#7112#7117#7666::Float64
  ########_var0#7109#7113#7118#7667::Tuple{}
  ##a#7668::Float64
  ####G#7586#7669::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7587#7670::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7588#7671::Tuple{}
  ##########x#7106#7108#7112#7589#7672::Float64
  ########_var0#7109#7113#7590#7673::Tuple{}
  ##a#7674::Float64
  ##div_a#7675::Float64
  ##deriv#7676::Float64
  ####G#7468#7677::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7678::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7679::Tuple{}
  ##########x#7106#7108#7112#7471#7680::Float64
  ########_var0#7109#7113#7472#7681::Tuple{}
  ######a#7169#7171#7682::Tuple{}
  ######b#7170#7172#7683::Tuple{}
  ####_var0#7173#7684::Tuple{}
  ##a1#7685::Float64
  ##a2#7686::Float64
  ######a#7174#7199#7687::Tuple{}
  ######b#7175#7200#7688::Tuple{}
  ######afactor#7176#7201#7689::Float64
  ######bfactor#7177#7202#7690::Float64
  ####_var0#7203#7691::Tuple{}
  ##a#7692::Float64
  ####G#7581#7693::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7582#7694::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7583#7695::Tuple{}
  ##########x#7106#7108#7112#7584#7696::Float64
  ########_var0#7109#7113#7585#7697::Tuple{}
  ########tup#7105#7149#7153#7698::Tuple{}
  ########x#7106#7150#7154#7699::Float64
  ######_var0#7151#7155#7700::Tuple{}
  ########types#7121#7152#7156#7701::Tuple{Type{Float64}}
  ######a#7204#7206#7702::Tuple{}
  ######b#7205#7207#7703::Tuple{}
  ####_var0#7208#7704::Tuple{}
  ######tup#7451#7453#7705::Tuple{}
  ######x#7452#7454#7706::Int64
  ####_var0#7455#7707::Tuple{}
  ######types#7305#7456#7708::Tuple{Type{Int64}}
  ##xs#7709::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7649 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7651 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7652 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7653 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7654 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7658 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7658 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7652::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7659 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7659::Float64)::Bool,(Base.ne_float)(####fy#7457#7659::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7659::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7707 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7455#7707 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7692 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      ####G#7581#7693 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7585#7697 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7109#7113#7585#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7692::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7700 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7151#7155#7700 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7674 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7675 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7674::Float64))
      ##deriv#7676 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7675::Float64,##a#7674::Float64))))
      ####G#7468#7677 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7681 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7109#7113#7472#7681 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7675::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7173#7684 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7173#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7668 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      ####G#7586#7669 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7590#7673 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7109#7113#7590#7673 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7668::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7685 = GenSym(6)
      ##a2#7686 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7691 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7203#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7685::Float64,##a2#7686::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7704 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7660 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7661 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7662 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7663 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7667 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7109#7113#7118#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7661::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7569::Float64
  ##xs#7570::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7569 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7569::Float64)::Bool,(Base.ne_float)(##fy#7569::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7569::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Biweight{Float64}
  t::Int64
  a::Float64
  a2::Float64
  ##fy#7569::Float64
  ##xs#7570::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      a2 = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      ##fy#7569 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7569::Float64)::Bool,(Base.ne_float)(##fy#7569::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7569::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Biweight{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.div_float)(3.0,a::Float64)))),(Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-15.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.box)(Base.Float64,(Base.mul_float)(a2::Float64,a2::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7647::Tuple{}
  ######x#7452#7454#7648::Int64
  ####_var0#7455#7649::Tuple{}
  ######types#7305#7456#7650::Tuple{Type{Int64}}
  ##a#7651::Float64
  ##exp_a#7652::Float64
  ##deriv#7653::Float64
  ####G#7114#7654::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7655::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7656::Tuple{}
  ##########x#7106#7108#7112#7117#7657::Float64
  ########_var0#7109#7113#7118#7658::Tuple{}
  ####fy#7457#7659::Float64
  _var0::Bool
  ##a#7660::Float64
  ##exp_a#7661::Float64
  ##deriv#7662::Float64
  ####G#7114#7663::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7664::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7665::Tuple{}
  ##########x#7106#7108#7112#7117#7666::Float64
  ########_var0#7109#7113#7118#7667::Tuple{}
  ##a#7668::Float64
  ####G#7586#7669::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7587#7670::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7588#7671::Tuple{}
  ##########x#7106#7108#7112#7589#7672::Float64
  ########_var0#7109#7113#7590#7673::Tuple{}
  ##a#7674::Float64
  ##div_a#7675::Float64
  ##deriv#7676::Float64
  ####G#7468#7677::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7678::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7679::Tuple{}
  ##########x#7106#7108#7112#7471#7680::Float64
  ########_var0#7109#7113#7472#7681::Tuple{}
  ######a#7169#7171#7682::Tuple{}
  ######b#7170#7172#7683::Tuple{}
  ####_var0#7173#7684::Tuple{}
  ##a1#7685::Float64
  ##a2#7686::Float64
  ######a#7174#7199#7687::Tuple{}
  ######b#7175#7200#7688::Tuple{}
  ######afactor#7176#7201#7689::Float64
  ######bfactor#7177#7202#7690::Float64
  ####_var0#7203#7691::Tuple{}
  ##a#7692::Float64
  ####G#7581#7693::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7582#7694::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7583#7695::Tuple{}
  ##########x#7106#7108#7112#7584#7696::Float64
  ########_var0#7109#7113#7585#7697::Tuple{}
  ########tup#7105#7149#7153#7698::Tuple{}
  ########x#7106#7150#7154#7699::Float64
  ######_var0#7151#7155#7700::Tuple{}
  ########types#7121#7152#7156#7701::Tuple{Type{Float64}}
  ######a#7204#7206#7702::Tuple{}
  ######b#7205#7207#7703::Tuple{}
  ####_var0#7208#7704::Tuple{}
  ######tup#7451#7453#7705::Tuple{}
  ######x#7452#7454#7706::Int64
  ####_var0#7455#7707::Tuple{}
  ######types#7305#7456#7708::Tuple{Type{Int64}}
  ##xs#7709::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7649 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7651 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7652 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7653 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7654 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7658 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7658 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7652::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7659 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7659::Float64)::Bool,(Base.ne_float)(####fy#7457#7659::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7659::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7707 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7455#7707 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7692 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      ####G#7581#7693 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7585#7697 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7109#7113#7585#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7692::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7700 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7151#7155#7700 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7674 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7675 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7674::Float64))
      ##deriv#7676 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7675::Float64,##a#7674::Float64))))
      ####G#7468#7677 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7681 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7109#7113#7472#7681 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7675::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7173#7684 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7173#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7668 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      ####G#7586#7669 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7590#7673 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7109#7113#7590#7673 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7668::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7685 = GenSym(6)
      ##a2#7686 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7691 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7203#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7685::Float64,##a2#7686::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7704 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7660 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7661 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7662 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7663 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7667 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7109#7113#7118#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7661::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7647::Tuple{}
  ######x#7452#7454#7648::Int64
  ####_var0#7455#7649::Tuple{}
  ######types#7305#7456#7650::Tuple{Type{Int64}}
  ##a#7651::Float64
  ##exp_a#7652::Float64
  ##deriv#7653::Float64
  ####G#7114#7654::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7655::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7656::Tuple{}
  ##########x#7106#7108#7112#7117#7657::Float64
  ########_var0#7109#7113#7118#7658::Tuple{}
  ####fy#7457#7659::Float64
  _var0::Bool
  ##a#7660::Float64
  ##exp_a#7661::Float64
  ##deriv#7662::Float64
  ####G#7114#7663::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7664::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7665::Tuple{}
  ##########x#7106#7108#7112#7117#7666::Float64
  ########_var0#7109#7113#7118#7667::Tuple{}
  ##a#7668::Float64
  ####G#7586#7669::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7587#7670::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7588#7671::Tuple{}
  ##########x#7106#7108#7112#7589#7672::Float64
  ########_var0#7109#7113#7590#7673::Tuple{}
  ##a#7674::Float64
  ##div_a#7675::Float64
  ##deriv#7676::Float64
  ####G#7468#7677::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7678::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7679::Tuple{}
  ##########x#7106#7108#7112#7471#7680::Float64
  ########_var0#7109#7113#7472#7681::Tuple{}
  ######a#7169#7171#7682::Tuple{}
  ######b#7170#7172#7683::Tuple{}
  ####_var0#7173#7684::Tuple{}
  ##a1#7685::Float64
  ##a2#7686::Float64
  ######a#7174#7199#7687::Tuple{}
  ######b#7175#7200#7688::Tuple{}
  ######afactor#7176#7201#7689::Float64
  ######bfactor#7177#7202#7690::Float64
  ####_var0#7203#7691::Tuple{}
  ##a#7692::Float64
  ####G#7581#7693::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7582#7694::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7583#7695::Tuple{}
  ##########x#7106#7108#7112#7584#7696::Float64
  ########_var0#7109#7113#7585#7697::Tuple{}
  ########tup#7105#7149#7153#7698::Tuple{}
  ########x#7106#7150#7154#7699::Float64
  ######_var0#7151#7155#7700::Tuple{}
  ########types#7121#7152#7156#7701::Tuple{Type{Float64}}
  ######a#7204#7206#7702::Tuple{}
  ######b#7205#7207#7703::Tuple{}
  ####_var0#7208#7704::Tuple{}
  ######tup#7451#7453#7705::Tuple{}
  ######x#7452#7454#7706::Int64
  ####_var0#7455#7707::Tuple{}
  ######types#7305#7456#7708::Tuple{Type{Int64}}
  ##xs#7709::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7649 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7651 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7652 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7653 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7654 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7658 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7658 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7652::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7659 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7659::Float64)::Bool,(Base.ne_float)(####fy#7457#7659::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7659::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7707 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7455#7707 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7692 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      ####G#7581#7693 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7585#7697 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7109#7113#7585#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7692::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7700 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7151#7155#7700 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7674 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7675 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7674::Float64))
      ##deriv#7676 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7675::Float64,##a#7674::Float64))))
      ####G#7468#7677 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7681 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7109#7113#7472#7681 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7675::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7173#7684 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7173#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7668 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      ####G#7586#7669 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7590#7673 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7109#7113#7590#7673 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7668::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7685 = GenSym(6)
      ##a2#7686 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7691 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7203#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7685::Float64,##a2#7686::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7704 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7660 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7661 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7662 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7663 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7667 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7109#7113#7118#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7661::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7647::Tuple{}
  ######x#7452#7454#7648::Int64
  ####_var0#7455#7649::Tuple{}
  ######types#7305#7456#7650::Tuple{Type{Int64}}
  ##a#7651::Float64
  ##exp_a#7652::Float64
  ##deriv#7653::Float64
  ####G#7114#7654::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7655::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7656::Tuple{}
  ##########x#7106#7108#7112#7117#7657::Float64
  ########_var0#7109#7113#7118#7658::Tuple{}
  ####fy#7457#7659::Float64
  _var0::Bool
  ##a#7660::Float64
  ##exp_a#7661::Float64
  ##deriv#7662::Float64
  ####G#7114#7663::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7664::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7665::Tuple{}
  ##########x#7106#7108#7112#7117#7666::Float64
  ########_var0#7109#7113#7118#7667::Tuple{}
  ##a#7668::Float64
  ####G#7586#7669::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7587#7670::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7588#7671::Tuple{}
  ##########x#7106#7108#7112#7589#7672::Float64
  ########_var0#7109#7113#7590#7673::Tuple{}
  ##a#7674::Float64
  ##div_a#7675::Float64
  ##deriv#7676::Float64
  ####G#7468#7677::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7678::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7679::Tuple{}
  ##########x#7106#7108#7112#7471#7680::Float64
  ########_var0#7109#7113#7472#7681::Tuple{}
  ######a#7169#7171#7682::Tuple{}
  ######b#7170#7172#7683::Tuple{}
  ####_var0#7173#7684::Tuple{}
  ##a1#7685::Float64
  ##a2#7686::Float64
  ######a#7174#7199#7687::Tuple{}
  ######b#7175#7200#7688::Tuple{}
  ######afactor#7176#7201#7689::Float64
  ######bfactor#7177#7202#7690::Float64
  ####_var0#7203#7691::Tuple{}
  ##a#7692::Float64
  ####G#7581#7693::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7582#7694::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7583#7695::Tuple{}
  ##########x#7106#7108#7112#7584#7696::Float64
  ########_var0#7109#7113#7585#7697::Tuple{}
  ########tup#7105#7149#7153#7698::Tuple{}
  ########x#7106#7150#7154#7699::Float64
  ######_var0#7151#7155#7700::Tuple{}
  ########types#7121#7152#7156#7701::Tuple{Type{Float64}}
  ######a#7204#7206#7702::Tuple{}
  ######b#7205#7207#7703::Tuple{}
  ####_var0#7208#7704::Tuple{}
  ######tup#7451#7453#7705::Tuple{}
  ######x#7452#7454#7706::Int64
  ####_var0#7455#7707::Tuple{}
  ######types#7305#7456#7708::Tuple{Type{Int64}}
  ##xs#7709::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7649 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7651 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7652 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7653 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7654 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7658 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7658 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7652::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7659 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7659::Float64)::Bool,(Base.ne_float)(####fy#7457#7659::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7659::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7707 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7455#7707 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7692 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      ####G#7581#7693 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7585#7697 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7109#7113#7585#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7692::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7700 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7151#7155#7700 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7674 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7675 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7674::Float64))
      ##deriv#7676 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7675::Float64,##a#7674::Float64))))
      ####G#7468#7677 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7681 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7109#7113#7472#7681 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7675::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7173#7684 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7173#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7668 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      ####G#7586#7669 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7590#7673 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7109#7113#7590#7673 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7668::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7685 = GenSym(6)
      ##a2#7686 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7691 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7203#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7685::Float64,##a2#7686::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7704 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7660 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7661 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7662 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7663 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7667 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7109#7113#7118#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7661::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7451#7453#7647::Tuple{}
  ######x#7452#7454#7648::Int64
  ####_var0#7455#7649::Tuple{}
  ######types#7305#7456#7650::Tuple{Type{Int64}}
  ##a#7651::Float64
  ##exp_a#7652::Float64
  ##deriv#7653::Float64
  ####G#7114#7654::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7655::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7656::Tuple{}
  ##########x#7106#7108#7112#7117#7657::Float64
  ########_var0#7109#7113#7118#7658::Tuple{}
  ####fy#7457#7659::Float64
  _var0::Bool
  ##a#7660::Float64
  ##exp_a#7661::Float64
  ##deriv#7662::Float64
  ####G#7114#7663::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7115#7664::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7116#7665::Tuple{}
  ##########x#7106#7108#7112#7117#7666::Float64
  ########_var0#7109#7113#7118#7667::Tuple{}
  ##a#7668::Float64
  ####G#7586#7669::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7587#7670::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7588#7671::Tuple{}
  ##########x#7106#7108#7112#7589#7672::Float64
  ########_var0#7109#7113#7590#7673::Tuple{}
  ##a#7674::Float64
  ##div_a#7675::Float64
  ##deriv#7676::Float64
  ####G#7468#7677::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7469#7678::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7470#7679::Tuple{}
  ##########x#7106#7108#7112#7471#7680::Float64
  ########_var0#7109#7113#7472#7681::Tuple{}
  ######a#7169#7171#7682::Tuple{}
  ######b#7170#7172#7683::Tuple{}
  ####_var0#7173#7684::Tuple{}
  ##a1#7685::Float64
  ##a2#7686::Float64
  ######a#7174#7199#7687::Tuple{}
  ######b#7175#7200#7688::Tuple{}
  ######afactor#7176#7201#7689::Float64
  ######bfactor#7177#7202#7690::Float64
  ####_var0#7203#7691::Tuple{}
  ##a#7692::Float64
  ####G#7581#7693::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7104#7110#7582#7694::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7105#7107#7111#7583#7695::Tuple{}
  ##########x#7106#7108#7112#7584#7696::Float64
  ########_var0#7109#7113#7585#7697::Tuple{}
  ########tup#7105#7149#7153#7698::Tuple{}
  ########x#7106#7150#7154#7699::Float64
  ######_var0#7151#7155#7700::Tuple{}
  ########types#7121#7152#7156#7701::Tuple{Type{Float64}}
  ######a#7204#7206#7702::Tuple{}
  ######b#7205#7207#7703::Tuple{}
  ####_var0#7208#7704::Tuple{}
  ######tup#7451#7453#7705::Tuple{}
  ######x#7452#7454#7706::Int64
  ####_var0#7455#7707::Tuple{}
  ######types#7305#7456#7708::Tuple{Type{Int64}}
  ##xs#7709::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 58:
      $(Expr(:boundscheck, false))
      ####_var0#7455#7649 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7455#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 59:
      ##a#7651 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7652 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7653 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7651::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7654 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7658 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7109#7113#7118#7658 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      a2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7652::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/biweight.jl, line 60:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 6
      ####fy#7457#7659 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7457#7659::Float64)::Bool,(Base.ne_float)(####fy#7457#7659::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7457#7659::Float64))::Bool))
      goto 7
      6: 
      _var0 = false
      7: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7455#7707 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7455#7707 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(14) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Biweight{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7692 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7692::Float64,0)::Float64
      ####G#7581#7693 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7585#7697 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7109#7113#7585#7697 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(11),##a#7692::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7151#7155#7700 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7151#7155#7700 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7674 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7675 = (Base.box)(Base.Float64,(Base.div_float)(3.0,##a#7674::Float64))
      ##deriv#7676 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7675::Float64,##a#7674::Float64))))
      ####G#7468#7677 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7472#7681 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7109#7113#7472#7681 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7675::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7173#7684 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7173#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7668 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7668::Float64,0)::Float64
      ####G#7586#7669 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7590#7673 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7109#7113#7590#7673 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7668::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(4),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7685 = GenSym(6)
      ##a2#7686 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7203#7691 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7203#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7685::Float64,##a2#7686::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7208#7704 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7208#7704 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = (-15.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(12),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7660 = (top(getfield))(a2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7661 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7662 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7660::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7114#7663 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7109#7113#7118#7667 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7109#7113#7118#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7661::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




