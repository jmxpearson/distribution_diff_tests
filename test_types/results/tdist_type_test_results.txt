____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 39:
      return (top(tuple))((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 39:
      return (top(tuple))((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 39:
      return (top(tuple))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 44:
      unless (Base.lt_float)(1.0,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return Distributions.NaN
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 44:
      unless (Base.lt_float)(1.0,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return Distributions.NaN
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 44:
      unless (Base.lt_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}
  ν::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 49:
      ν = (top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 50:
      unless (Base.lt_float)(2.0,ν::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(ν::Float64,(Base.box)(Base.Float64,(Base.sub_float)(ν::Float64,2.0))))
      0: 
      unless (Base.lt_float)(1.0,ν::Float64)::Bool goto 1
      return Distributions.Inf
      1: 
      return Distributions.NaN
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}
  ν::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 49:
      ν = (top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 50:
      unless (Base.lt_float)(2.0,ν::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(ν::Float64,(Base.box)(Base.Float64,(Base.sub_float)(ν::Float64,2.0))))
      0: 
      unless (Base.lt_float)(1.0,ν::Float64)::Bool goto 1
      return Distributions.Inf
      1: 
      return Distributions.NaN
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7069#7070#7089::Tuple{Type{Float64}}
  ##a1#7090::Float64
  ##a2#7091::Float64
  ##div_a#7092::Float64
  ####afactor#7081#7093::Float64
  ####bfactor#7082#7094::Float64
  ########a#7071#7075#7083#7095::Tuple{}
  ########b#7072#7076#7084#7096::Tuple{}
  ########afactor#7073#7077#7085#7097::Float64
  ########bfactor#7074#7078#7086#7098::Float64
  ######_var0#7079#7087#7099::Tuple{}
  ######types#7080#7088#7100::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 49:
      ν = (top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 50:
      unless (Base.lt_float)(2.0,(top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(0) = (top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7090 = GenSym(0)
      ##a2#7091 = GenSym(1)
      ##div_a#7092 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7090::Float64,##a2#7091::Float64))
      ####afactor#7081#7093 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7091::Float64))
      ####bfactor#7082#7094 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7090::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7091::Float64,##a2#7091::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7079#7087#7099 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7079#7087#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      unless (Base.lt_float)(1.0,(top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 1
      return Distributions.Inf
      1: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 46:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 46:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 46:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Float64,(Base.sitofp)(Float64,0)))::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Float64,(Base.sitofp)(Float64,0)))::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 45:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 45:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 45:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 54:
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return Distributions.NaN
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 54:
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return Distributions.NaN
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 54:
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}
  ν::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 57:
      ν = (top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 58:
      unless (Base.lt_float)(4.0,ν::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)(ν::Float64,4.0))))
      0: 
      unless (Base.lt_float)(2.0,ν::Float64)::Bool goto 1
      return Distributions.Inf
      1: 
      return Distributions.NaN
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}
  ν::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 57:
      ν = (top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 58:
      unless (Base.lt_float)(4.0,ν::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)(ν::Float64,4.0))))
      0: 
      unless (Base.lt_float)(2.0,ν::Float64)::Bool goto 1
      return Distributions.Inf
      1: 
      return Distributions.NaN
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7069#7070#7122::Tuple{Type{Float64}}
  ##a#7123::Float64
  ##div_a#7124::Float64
  ##deriv#7125::Float64
  ####G#7117#7126::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7127::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7128::Tuple{}
  ##########x#7109#7111#7115#7120#7129::Float64
  ########_var0#7112#7116#7121#7130::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 57:
      ν = (top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 58:
      unless (Base.lt_float)(4.0,(top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7123 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##div_a#7124 = (Base.box)(Base.Float64,(Base.div_float)(6.0,##a#7123::Float64))
      ##deriv#7125 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7124::Float64,##a#7123::Float64))))
      ####G#7117#7126 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7130 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7112#7116#7121#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7124::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      unless (Base.lt_float)(2.0,(top(getfield))(ν::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 1
      return Distributions.Inf
      1: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}
  h::Float64
  h1::Float64
  ##xs#7133::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 63:
      h = (Base.box)(Base.Float64,(Base.mul_float)(0.5,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 64:
      h1 = (Base.box)(Base.Float64,(Base.add_float)(h::Float64,0.5)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 65:
      GenSym(11) = (Distributions.digamma)(h1::Float64)::Float64
      GenSym(10) = (Distributions.digamma)(h::Float64)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,h::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.5,0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(h::Float64,0.5))
      GenSym(2) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(h1::Float64,(Base.box)(Base.Float64,(Base.sub_float)(GenSym(11),GenSym(10))))),(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(6),h::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(4),0.5)::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}
  h::Float64
  h1::Float64
  ##xs#7133::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 63:
      h = (Base.box)(Base.Float64,(Base.mul_float)(0.5,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 64:
      h1 = (Base.box)(Base.Float64,(Base.add_float)(h::Float64,0.5)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 65:
      GenSym(11) = (Distributions.digamma)(h1::Float64)::Float64
      GenSym(10) = (Distributions.digamma)(h::Float64)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,h::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.5,0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.add_float)(h::Float64,0.5))
      GenSym(2) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(h1::Float64,(Base.box)(Base.Float64,(Base.sub_float)(GenSym(11),GenSym(10))))),(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(6),h::Float64)::Float64,(Base.Math.nan_dom_err)(GenSym(4),0.5)::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  h::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  h1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7108#7136#7140#7201::Tuple{}
  ########x#7109#7137#7141#7202::Float64
  ######_var0#7138#7142#7203::Tuple{}
  ########types#7069#7139#7143#7204::Tuple{Type{Float64}}
  ######types#7069#7144#7205::Tuple{Type{Float64}}
  ##a#7206::Float64
  ####G#7163#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7164#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7165#7209::Tuple{}
  ##########x#7109#7111#7115#7166#7210::Float64
  ########_var0#7112#7116#7167#7211::Tuple{}
  ########tup#7108#7136#7140#7212::Tuple{}
  ########x#7109#7137#7141#7213::Float64
  ######_var0#7138#7142#7214::Tuple{}
  ########types#7069#7139#7143#7215::Tuple{Type{Float64}}
  ##a#7216::Float64
  ####G#7148#7217::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7149#7218::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7150#7219::Tuple{}
  ##########x#7109#7111#7115#7151#7220::Float64
  ########_var0#7112#7116#7152#7221::Tuple{}
  ##a#7222::Float64
  ####G#7148#7223::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7149#7224::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7150#7225::Tuple{}
  ##########x#7109#7111#7115#7151#7226::Float64
  ########_var0#7112#7116#7152#7227::Tuple{}
  ######a#7153#7155#7228::Tuple{}
  ######b#7154#7156#7229::Tuple{}
  ####_var0#7157#7230::Tuple{}
  ##a1#7231::Float64
  ##a2#7232::Float64
  ######a#7071#7158#7233::Tuple{}
  ######b#7072#7159#7234::Tuple{}
  ######afactor#7073#7160#7235::Float64
  ######bfactor#7074#7161#7236::Float64
  ####_var0#7162#7237::Tuple{}
  ##xs#7238::Tuple{}
  ########a#7190#7192#7195#7239::Tuple{}
  ########b#7191#7193#7196#7240::Tuple{}
  ######_var0#7194#7197#7241::Tuple{}
  ########a#7190#7192#7198#7242::Tuple{}
  ########b#7191#7193#7199#7243::Tuple{}
  ######_var0#7194#7200#7244::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 63:
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7203 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7138#7142#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      h = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 64:
      h1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(h::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :((top(getfield))(h::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 65:
      ##a#7222 = (top(getfield))(h1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (ForwardDiff.digamma)(##a#7222::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7222::Float64)::Float64
      ####G#7148#7223 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7152#7227 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7112#7116#7152#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##a#7216 = (top(getfield))(h::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7216::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7216::Float64)::Float64
      ####G#7148#7217 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7152#7221 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7152#7221 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7157#7230 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7157#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = (top(getfield))(h1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(4), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(3), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7231 = GenSym(5)
      ##a2#7232 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7162#7237 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7162#7237 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7231::Float64,##a2#7232::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7206 = (top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      ####G#7163#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7167#7211 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7167#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7206::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7214 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7138#7142#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(8) = (Distributions.lbeta)(h::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7194#7197#7241 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7194#7197#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7194#7200#7244 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7194#7200#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(2),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 73:
      return (top(ccall))((top(tuple))("rt",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 73:
      return (top(ccall))((top(tuple))("rt",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 73:
      return ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:tdistrand)::F)((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
  end::Float64




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dt",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0,GenSym(2),0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.TDist{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dt",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0,GenSym(2),0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.tdistpdf)((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64




____________________________
mgf
____________________________

----integer----


----float----


----dual----





____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.TDist{Float64}
  t::Int64
  h::Float64
  q::Float64
  t2::Int64
  ##xs#7254::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 76:
      NewvarNode(:h)
      NewvarNode(:q)
      NewvarNode(:t2)
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, Complex{Float64}, 1.0, :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 77:
      h = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0.5)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 78:
      q = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0.25)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 79:
      t2 = (Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 80:
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(q::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t2::Int64))))
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,q::Float64,0)::Float64
      GenSym(6) = (Distributions.besselk)(h::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64)))))))::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,h::Float64,0)::Float64
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),q::Float64)))::Float64)),GenSym(6))),(Base.Math.nan_dom_err)(GenSym(1),h::Float64)::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
  end::Complex{Float64}

----float----

Variables:
  d::Distributions.TDist{Float64}
  t::Int64
  h::Float64
  q::Float64
  t2::Int64
  ##xs#7254::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 76:
      NewvarNode(:h)
      NewvarNode(:q)
      NewvarNode(:t2)
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, Complex{Float64}, 1.0, :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 77:
      h = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0.5)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 78:
      q = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64,0.25)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 79:
      t2 = (Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 80:
      GenSym(2) = (Base.box)(Base.Float64,(Base.mul_float)(q::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t2::Int64))))
      GenSym(5) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,q::Float64,0)::Float64
      GenSym(6) = (Distributions.besselk)(h::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(d::Distributions.TDist{Float64},:ν)::Float64))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64)))))))::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,h::Float64,0)::Float64
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.nan_dom_err)(GenSym(5),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),q::Float64)))::Float64)),GenSym(6))),(Base.Math.nan_dom_err)(GenSym(1),h::Float64)::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  h::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  q::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t2::Int64
  ######tup#7108#7136#7302::Tuple{}
  ######x#7109#7137#7303::Float64
  ####_var0#7138#7304::Tuple{}
  ######types#7069#7139#7305::Tuple{Type{Float64}}
  ######tup#7108#7136#7306::Tuple{}
  ######x#7109#7137#7307::Float64
  ####_var0#7138#7308::Tuple{}
  ######types#7069#7139#7309::Tuple{Type{Float64}}
  ##a#7310::Float64
  ####G#7297#7311::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7298#7312::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7299#7313::Tuple{}
  ##########x#7109#7111#7115#7300#7314::Float64
  ########_var0#7112#7116#7301#7315::Tuple{}
  ##sqrt_a#7316::Float64
  ##deriv#7317::Float64
  ####G#7284#7318::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7285#7319::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7286#7320::Tuple{}
  ##########x#7109#7111#7115#7287#7321::Float64
  ########_var0#7112#7116#7288#7322::Tuple{}
  ######tup#7258#7261#7323::Tuple{}
  ######x#7259#7262#7324::Int64
  ####_var0#7263#7325::Tuple{}
  ######types#7260#7264#7326::Tuple{Type{Int64}}
  ######tup#7258#7261#7327::Tuple{}
  ######x#7259#7262#7328::Int64
  ####_var0#7263#7329::Tuple{}
  ######types#7260#7264#7330::Tuple{Type{Int64}}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ##exp_a#7333::Float64
  ##powval#7334::Float64
  ##logval#7335::Float64
  ##new_bs#7336::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7270#7337::Float64
  ####exp_a#7271#7338::Float64
  ####deriv#7272#7339::Float64
  ######G#7265#7273#7340::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7107#7113#7266#7274#7341::Tuple{Type{Float64},Type{Float64}}
  ############tup#7108#7110#7114#7267#7275#7342::Tuple{}
  ############x#7109#7111#7115#7268#7276#7343::Float64
  ##########_var0#7112#7116#7269#7277#7344::Tuple{}
  ######a#7071#7278#7345::Tuple{}
  ######b#7072#7279#7346::Tuple{}
  ######afactor#7073#7280#7347::Float64
  ######bfactor#7074#7281#7348::Float64
  ####_var0#7282#7349::Tuple{}
  ######types#7080#7283#7350::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7351::Tuple{}
  ##########tup#7258#7261#7289#7293#7352::Tuple{}
  ##########x#7259#7262#7290#7294#7353::Int64
  ########_var0#7263#7291#7295#7354::Tuple{}
  ##########types#7260#7264#7292#7296#7355::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 76:
      NewvarNode(:h)
      NewvarNode(:q)
      NewvarNode(:t2)
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, Complex{Float64}, 1.0, :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 77:
      $(Expr(:boundscheck, false))
      ####_var0#7138#7304 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7138#7304 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      h = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 78:
      $(Expr(:boundscheck, false))
      ####_var0#7138#7308 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7138#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      q = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.25))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 79:
      t2 = (Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/tdist.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7263#7329 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7263#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(q::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t2::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7331"))
      NewvarNode(symbol("##a2#7332"))
      NewvarNode(symbol("##exp_a#7333"))
      NewvarNode(symbol("##powval#7334"))
      NewvarNode(symbol("##logval#7335"))
      NewvarNode(symbol("##new_bs#7336"))
      unless (top(getfield))((top(getfield))(q::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 19
      GenSym(9) = (top(getfield))(q::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7270#7337 = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7270#7337::Float64,0,GenSym(9),0)::Float64
      ####exp_a#7271#7338 = (Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(####a#7270#7337::Float64,GenSym(9))))::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(9),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(16) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7270#7337::Float64,0,GenSym(13),0)::Float64
      ####deriv#7272#7339 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(Base.Math.nan_dom_err)(GenSym(16),(Base.box)(Base.Float64,(Base.add_float)(####a#7270#7337::Float64,GenSym(13))))::Float64))
      ######G#7265#7273#7340 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7112#7116#7269#7277#7344 = (top(tuple))()::Tuple{}
      goto 18
      ##########_var0#7112#7116#7269#7277#7344 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7271#7338::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 21
      19: 
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(q::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7331 = GenSym(7)
      ##a2#7332 = GenSym(8)
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7331::Float64,0,##a2#7332::Float64,0)::Float64
      ##exp_a#7333 = (Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a1#7331::Float64,##a2#7332::Float64)))::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7332::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(23) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7331::Float64,0,GenSym(20),0)::Float64
      ##powval#7334 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7332::Float64,(Base.Math.nan_dom_err)(GenSym(23),(Base.box)(Base.Float64,(Base.add_float)(##a1#7331::Float64,GenSym(20))))::Float64))
      GenSym(25) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7331::Float64,0)::Float64
      ##logval#7335 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7333::Float64,(Base.Math.nan_dom_err)(GenSym(25),##a1#7331::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7282#7349 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7282#7349 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##new_bs#7336 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7333::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      21: 
      GenSym(26) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##sqrt_a#7316 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))((top(getfield))(d::Distributions.TDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ν)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::ANY)::Float64
      ##deriv#7317 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7316::Float64))
      ####G#7284#7318 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7288#7322 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7112#7116#7288#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7316::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7263#7325 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7263#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = (Distributions.besselk)(h::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(5),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.flipsign_int)(t::Int64,t::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY
      $(Expr(:boundscheck, false))
      ########_var0#7263#7291#7295#7354 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7263#7291#7295#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(26),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * GenSym(27)::ANY
      ##a#7310 = (top(getfield))(h::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7310::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7310::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7310::Float64,0)::Float64
      ####G#7297#7311 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7301#7315 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7112#7116#7301#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return (Distributions.complex)(GenSym(28) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7310::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::ANY)::ANY
  end::ANY




