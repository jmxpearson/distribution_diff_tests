____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 70:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 70:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 70:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,0.5772156649015329))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 93:
      unless (Base.lt_float)(ξ::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,ξ::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,1.0)))),ξ::Float64))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 96:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,0.5772156649015329))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 93:
      unless (Base.lt_float)(ξ::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,ξ::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,1.0)))),ξ::Float64))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 96:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7128::Tuple{}
  ######_var0#7068#7070#7129::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7071#7074#7130::Tuple{}
  ######x#7072#7075#7131::Irrational{:γ}
  ####_var0#7076#7132::Tuple{}
  ######types#7073#7077#7133::Tuple{Type{Irrational{:γ}}}
  ######a#7078#7080#7134::Tuple{}
  ######b#7079#7081#7135::Tuple{}
  ####_var0#7082#7136::Tuple{}
  ######tup#7066#7084#7137::Tuple{}
  ####_var0#7085#7138::Tuple{}
  ######types#7083#7086#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ####G#7099#7141::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7100#7142::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7101#7143::Tuple{}
  ##########x#7091#7093#7097#7102#7144::Float64
  ########_var0#7094#7098#7103#7145::Tuple{}
  ######types#7083#7104#7146::Tuple{Type{Float64}}
  ##a1#7147::Float64
  ##a2#7148::Float64
  ######a#7105#7109#7149::Tuple{}
  ######b#7106#7110#7150::Tuple{}
  ######afactor#7107#7111#7151::Float64
  ######bfactor#7108#7112#7152::Float64
  ####_var0#7113#7153::Tuple{}
  ##a1#7154::Float64
  ##a2#7155::Float64
  ##div_a#7156::Float64
  ####afactor#7120#7157::Float64
  ####bfactor#7121#7158::Float64
  ########a#7105#7114#7122#7159::Tuple{}
  ########b#7106#7115#7123#7160::Tuple{}
  ########afactor#7107#7116#7124#7161::Float64
  ########bfactor#7108#7117#7125#7162::Float64
  ######_var0#7118#7126#7163::Tuple{}
  ######types#7119#7127#7164::Tuple{Type{Float64}}
  ######a#7078#7080#7165::Tuple{}
  ######b#7079#7081#7166::Tuple{}
  ####_var0#7082#7167::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7129 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7132 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7076#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      $(Expr(:boundscheck, false))
      ####_var0#7082#7136 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7082#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 93:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7085#7138 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7085#7138 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7140::Float64,0)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7140::Float64)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7140::Float64,0)::Float64
      ####G#7099#7141 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7103#7145 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7094#7098#7103#7145 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(8),##a#7140::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(9),:value)::Float64,1.0))), :((top(getfield))(GenSym(9),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7147 = GenSym(10)
      ##a2#7148 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7153 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7113#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7147::Float64,##a2#7148::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7154 = GenSym(13)
      ##a2#7155 = GenSym(14)
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7154::Float64,##a2#7155::Float64))
      ####afactor#7120#7157 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7155::Float64))
      ####bfactor#7121#7158 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7154::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7155::Float64,##a2#7155::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7163 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7118#7126#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7167 = (top(tuple))()::Tuple{}
      goto 28
      ####_var0#7082#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(27) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(28) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(29) = GenSym(26)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(27)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(31)
      #s25 = GenSym(32)
      GenSym(33) = GenSym(28)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(33)
      #s25 = GenSym(34) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64)),6.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 115:
      unless (Base.lt_float)(ξ::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(22) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(20),0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(1.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(16) = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(16),0,2.0,0)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,ξ::Float64,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(22),GenSym(20))::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(GenSym(16),2.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,2.0)))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 118:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(27) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(28) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(29) = GenSym(26)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(27)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(31)
      #s25 = GenSym(32)
      GenSym(33) = GenSym(28)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(33)
      #s25 = GenSym(34) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64)),6.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 115:
      unless (Base.lt_float)(ξ::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(22) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(20),0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(1.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(16) = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(16),0,2.0,0)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,ξ::Float64,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(22),GenSym(20))::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(GenSym(16),2.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,2.0)))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 118:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7216::Tuple{}
  ######_var0#7068#7070#7217::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7218::Float64
  ##exp_a#7219::Float64
  ##deriv#7220::Float64
  ####G#7175#7221::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7222::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7223::Tuple{}
  ##########x#7091#7093#7097#7178#7224::Float64
  ########_var0#7094#7098#7179#7225::Tuple{}
  ######tup#7090#7180#7226::Tuple{}
  ######x#7091#7181#7227::Float64
  ####_var0#7182#7228::Tuple{}
  ######types#7083#7183#7229::Tuple{Type{Float64}}
  ##div_a#7230::Float64
  ######tup#7184#7186#7231::Tuple{}
  ######x#7185#7187#7232::Float64
  ####_var0#7188#7233::Tuple{}
  ######types#7083#7189#7234::Tuple{Type{Float64}}
  ##a#7235::Float64
  ##exp_a#7236::Float64
  ##deriv#7237::Float64
  ####G#7175#7238::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7239::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7240::Tuple{}
  ##########x#7091#7093#7097#7178#7241::Float64
  ########_var0#7094#7098#7179#7242::Tuple{}
  ##a#7243::Float64
  ##exp_a#7244::Float64
  ##deriv#7245::Float64
  ####G#7175#7246::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7247::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7248::Tuple{}
  ##########x#7091#7093#7097#7178#7249::Float64
  ########_var0#7094#7098#7179#7250::Tuple{}
  ######a#7211#7213#7251::Tuple{}
  ######b#7212#7214#7252::Tuple{}
  ####_var0#7215#7253::Tuple{}
  ##a#7254::Float64
  ##exp_a#7255::Float64
  ##deriv#7256::Float64
  ####G#7175#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7258::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7259::Tuple{}
  ##########x#7091#7093#7097#7178#7260::Float64
  ########_var0#7094#7098#7179#7261::Tuple{}
  ##a1#7262::Float64
  ##a2#7263::Float64
  ######a#7105#7109#7264::Tuple{}
  ######b#7106#7110#7265::Tuple{}
  ######afactor#7107#7111#7266::Float64
  ######bfactor#7108#7112#7267::Float64
  ####_var0#7113#7268::Tuple{}
  ##a1#7269::Float64
  ##a2#7270::Float64
  ##div_a#7271::Float64
  ####afactor#7120#7272::Float64
  ####bfactor#7121#7273::Float64
  ########a#7105#7114#7122#7274::Tuple{}
  ########b#7106#7115#7123#7275::Tuple{}
  ########afactor#7107#7116#7124#7276::Float64
  ########bfactor#7108#7117#7125#7277::Float64
  ######_var0#7118#7126#7278::Tuple{}
  ######types#7119#7127#7279::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      GenSym(46) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(47) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(48) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(49) = GenSym(46)
      GenSym(50) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(49)
      #s25 = GenSym(50)
      GenSym(51) = GenSym(47)
      GenSym(52) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(51)
      #s25 = GenSym(52)
      GenSym(53) = GenSym(48)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(53)
      #s25 = GenSym(54) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7217 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7217 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      ##a#7218 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7218::Float64,0,2.0,0)::Float64
      ##exp_a#7219 = (Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7218::Float64,2.0)))::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7218::Float64,0,GenSym(10),0)::Float64
      ##deriv#7220 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a#7218::Float64,GenSym(10))))::Float64))
      ####G#7175#7221 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7225 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7094#7098#7179#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7219::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7182#7228 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7182#7228 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##div_a#7230 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(14),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7188#7233 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7188#7233 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7230::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 115:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      ##a#7254 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7254::Float64,0,2.0,0)::Float64
      ##exp_a#7255 = (Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(##a#7254::Float64,2.0)))::Float64
      GenSym(35) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(38) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7254::Float64,0,GenSym(35),0)::Float64
      ##deriv#7256 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(38),(Base.box)(Base.Float64,(Base.add_float)(##a#7254::Float64,GenSym(35))))::Float64))
      ####G#7175#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7261 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7094#7098#7179#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(30) = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2.0)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1.0)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7243 = (top(getfield))(GenSym(22),:value)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7243::Float64,0,2.0,0)::Float64
      ##exp_a#7244 = (Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(##a#7243::Float64,2.0)))::Float64
      GenSym(26) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7243::Float64,0,GenSym(26),0)::Float64
      ##deriv#7245 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(##a#7243::Float64,GenSym(26))))::Float64))
      ####G#7175#7246 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7250 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7094#7098#7179#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7244::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7215#7253 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7215#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(40) = (top(getfield))(GenSym(39),:value)::Float64
      GenSym(41) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(30),:value)::Float64,(top(getfield))(GenSym(31),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7262 = GenSym(40)
      ##a2#7263 = GenSym(41)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7268 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7113#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(42) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7262::Float64,##a2#7263::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7235 = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7235::Float64,0,2.0,0)::Float64
      ##exp_a#7236 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a#7235::Float64,2.0)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7235::Float64,0,GenSym(18),0)::Float64
      ##deriv#7237 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a#7235::Float64,GenSym(18))))::Float64))
      ####G#7175#7238 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7242 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7094#7098#7179#7242 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(43) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7236::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(44) = (top(getfield))(GenSym(42),:value)::Float64
      GenSym(45) = (top(getfield))(GenSym(43),:value)::Float64
      ##a1#7269 = GenSym(44)
      ##a2#7270 = GenSym(45)
      ##div_a#7271 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7269::Float64,##a2#7270::Float64))
      ####afactor#7120#7272 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7270::Float64))
      ####bfactor#7121#7273 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7269::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7270::Float64,##a2#7270::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7278 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7118#7126#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7271::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 118:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 103:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      return μ::Float64
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 106:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)(1.0,ξ::Float64))
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),GenSym(4))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 103:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      return μ::Float64
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 106:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)(1.0,ξ::Float64))
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),GenSym(4))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7296::Tuple{}
  ######_var0#7068#7070#7297::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7298::Tuple{}
  ####_var0#7068#7299::Tuple{}
  ########types#7083#7280#7281#7300::Tuple{Type{Float64}}
  ##a1#7301::Float64
  ##a2#7302::Float64
  ##exp_a#7303::Float64
  ##powval#7304::Float64
  ##logval#7305::Float64
  ##new_bs#7306::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7282#7307::Float64
  ####exp_a#7283#7308::Float64
  ####deriv#7284#7309::Float64
  ######G#7175#7285#7310::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7089#7095#7176#7286#7311::Tuple{Type{Float64},Type{Float64}}
  ############tup#7090#7092#7096#7177#7287#7312::Tuple{}
  ############x#7091#7093#7097#7178#7288#7313::Float64
  ##########_var0#7094#7098#7179#7289#7314::Tuple{}
  ######a#7105#7290#7315::Tuple{}
  ######b#7106#7291#7316::Tuple{}
  ######afactor#7107#7292#7317::Float64
  ######bfactor#7108#7293#7318::Float64
  ####_var0#7294#7319::Tuple{}
  ######types#7119#7295#7320::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7083#7104#7321::Tuple{Type{Float64}}
  ##a1#7322::Float64
  ##a2#7323::Float64
  ######a#7105#7109#7324::Tuple{}
  ######b#7106#7110#7325::Tuple{}
  ######afactor#7107#7111#7326::Float64
  ######bfactor#7108#7112#7327::Float64
  ####_var0#7113#7328::Tuple{}
  ##a1#7329::Float64
  ##a2#7330::Float64
  ##div_a#7331::Float64
  ####afactor#7120#7332::Float64
  ####bfactor#7121#7333::Float64
  ########a#7105#7114#7122#7334::Tuple{}
  ########b#7106#7115#7123#7335::Tuple{}
  ########afactor#7107#7116#7124#7336::Float64
  ########bfactor#7108#7117#7125#7337::Float64
  ######_var0#7118#7126#7338::Tuple{}
  ######types#7119#7127#7339::Tuple{Type{Float64}}
  ######a#7078#7080#7340::Tuple{}
  ######b#7079#7081#7341::Tuple{}
  ####_var0#7082#7342::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(33) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(34) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(35) = GenSym(32)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(33)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(37)
      #s25 = GenSym(38)
      GenSym(39) = GenSym(34)
      GenSym(40) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(39)
      #s25 = GenSym(40) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 103:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 10
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7297 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7068#7070#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      10: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      11: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      return μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 106:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7299 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7068#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7301"))
      NewvarNode(symbol("##a2#7302"))
      NewvarNode(symbol("##exp_a#7303"))
      NewvarNode(symbol("##powval#7304"))
      NewvarNode(symbol("##logval#7305"))
      NewvarNode(symbol("##new_bs#7306"))
      unless (top(getfield))((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 17
      GenSym(8) = (top(getfield))(GenSym(4),:value)::Float64
      ####a#7282#7307 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7282#7307::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7283#7308 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7282#7307::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7282#7307::Float64,0,GenSym(12),0)::Float64
      ####deriv#7284#7309 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7282#7307::Float64,GenSym(12))))::Float64))
      ######G#7175#7285#7310 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7094#7098#7179#7289#7314 = (top(tuple))()::Tuple{}
      goto 16
      ##########_var0#7094#7098#7179#7289#7314 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7283#7308::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 19
      17: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7301 = GenSym(6)
      ##a2#7302 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7301::Float64,0,##a2#7302::Float64,0)::Float64
      ##exp_a#7303 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7301::Float64,##a2#7302::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7302::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7301::Float64,0,GenSym(19),0)::Float64
      ##powval#7304 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7302::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7301::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7301::Float64,0)::Float64
      ##logval#7305 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7303::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7301::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7294#7319 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7294#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##new_bs#7306 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7303::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      19: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(26) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7322 = GenSym(26)
      ##a2#7323 = GenSym(27)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7328 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7113#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7322::Float64,##a2#7323::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(29) = (top(getfield))(GenSym(28),:value)::Float64
      GenSym(30) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7329 = GenSym(29)
      ##a2#7330 = GenSym(30)
      ##div_a#7331 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7329::Float64,##a2#7330::Float64))
      ####afactor#7120#7332 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7330::Float64))
      ####bfactor#7121#7333 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7329::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7330::Float64,##a2#7330::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7338 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7118#7126#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7331::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7342 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7082#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(31),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 81:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 84:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(12) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(12),0,GenSym(11),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(GenSym(12),GenSym(11))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 81:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 84:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(12) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(12),0,GenSym(11),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(GenSym(12),GenSym(11))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7353::Tuple{}
  ######_var0#7068#7070#7354::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7090#7180#7355::Tuple{}
  ######x#7091#7181#7356::Float64
  ####_var0#7182#7357::Tuple{}
  ######types#7083#7183#7358::Tuple{Type{Float64}}
  ######a#7211#7213#7359::Tuple{}
  ######b#7212#7214#7360::Tuple{}
  ####_var0#7215#7361::Tuple{}
  ######tup#7066#7067#7362::Tuple{}
  ####_var0#7068#7363::Tuple{}
  ##a#7364::Float64
  ##exp_a#7365::Float64
  ##deriv#7366::Float64
  ####G#7348#7367::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7349#7368::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7350#7369::Tuple{}
  ##########x#7091#7093#7097#7351#7370::Float64
  ########_var0#7094#7098#7352#7371::Tuple{}
  ######types#7083#7104#7372::Tuple{Type{Float64}}
  ##a1#7373::Float64
  ##a2#7374::Float64
  ######a#7105#7109#7375::Tuple{}
  ######b#7106#7110#7376::Tuple{}
  ######afactor#7107#7111#7377::Float64
  ######bfactor#7108#7112#7378::Float64
  ####_var0#7113#7379::Tuple{}
  ##a1#7380::Float64
  ##a2#7381::Float64
  ##div_a#7382::Float64
  ####afactor#7120#7383::Float64
  ####bfactor#7121#7384::Float64
  ########a#7105#7114#7122#7385::Tuple{}
  ########b#7106#7115#7123#7386::Tuple{}
  ########afactor#7107#7116#7124#7387::Float64
  ########bfactor#7108#7117#7125#7388::Float64
  ######_var0#7118#7126#7389::Tuple{}
  ######types#7119#7127#7390::Tuple{Type{Float64}}
  ######a#7078#7080#7391::Tuple{}
  ######b#7079#7081#7392::Tuple{}
  ####_var0#7082#7393::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      GenSym(24) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(27)
      #s25 = GenSym(28)
      GenSym(29) = GenSym(25)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(26)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(31)
      #s25 = GenSym(32) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 81:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 10
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7354 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7068#7070#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      10: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      11: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7182#7357 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7182#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7215#7361 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7215#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 84:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7068#7363 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7068#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(11) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      ##a#7364 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(11),0,##a#7364::Float64,0)::Float64
      ##exp_a#7365 = (Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(GenSym(11),##a#7364::Float64)))::Float64
      GenSym(16) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      ##deriv#7366 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7365::Float64,(Base.Math.nan_dom_err)(GenSym(16),GenSym(11))::Float64))
      ####G#7348#7367 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7352#7371 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7094#7098#7352#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7365::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(17),:value)::Float64,1.0))), :((top(getfield))(GenSym(17),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7373 = GenSym(18)
      ##a2#7374 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7379 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7113#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7373::Float64,##a2#7374::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(20),:value)::Float64
      GenSym(22) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7380 = GenSym(21)
      ##a2#7381 = GenSym(22)
      ##div_a#7382 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7380::Float64,##a2#7381::Float64))
      ####afactor#7120#7383 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7381::Float64))
      ####bfactor#7121#7384 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7380::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7381::Float64,##a2#7381::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7389 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7118#7126#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7382::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7393 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7082#7393 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(23),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7416::Tuple{}
  ##xs#7417::Tuple{}
  ######fx#1710#1711#7418::Float64
  ####fy#1712#7419::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      GenSym(8) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 130:
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      ####fy#1712#7419 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(28) = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(ξ::Float64,####fy#1712#7419::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(ξ::Float64,####fy#1712#7419::Float64)::Bool,(Base.lt_float)(####fy#1712#7419::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#1712#7419::Float64)),0)::Bool))))
      ######fx#1710#1711#7418 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(29) = ((top(getfield))(Base.Intrinsics,:select_value)::I)(GenSym(28),(Base.box)(Float64,(Base.sitofp)(Float64,-1)),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#1710#1711#7418::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#1710#1711#7418::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#1710#1711#7418::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#1710#1711#7418::Float64)))::Bool)))))),(Base.box)(Float64,(Base.sitofp)(Float64,1)),ξ::Float64)::Float64)::Float64
      GenSym(27) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,3.0,0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(21) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(20) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      GenSym(24) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(21),0,GenSym(20),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g1::Float64)),g2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(27),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,3.0)))::Float64)))))),(Base.Math.nan_dom_err)(GenSym(24),(Base.box)(Base.Float64,(Base.add_float)(GenSym(21),GenSym(20))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 133:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7416::Tuple{}
  ##xs#7417::Tuple{}
  ######fx#1710#1711#7418::Float64
  ####fy#1712#7419::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      GenSym(8) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 130:
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      ####fy#1712#7419 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(28) = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(ξ::Float64,####fy#1712#7419::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(ξ::Float64,####fy#1712#7419::Float64)::Bool,(Base.lt_float)(####fy#1712#7419::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#1712#7419::Float64)),0)::Bool))))
      ######fx#1710#1711#7418 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(29) = ((top(getfield))(Base.Intrinsics,:select_value)::I)(GenSym(28),(Base.box)(Float64,(Base.sitofp)(Float64,-1)),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#1710#1711#7418::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#1710#1711#7418::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#1710#1711#7418::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#1710#1711#7418::Float64)))::Bool)))))),(Base.box)(Float64,(Base.sitofp)(Float64,1)),ξ::Float64)::Float64)::Float64
      GenSym(27) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,3.0,0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(21) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(20) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      GenSym(24) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(21),0,GenSym(20),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g1::Float64)),g2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(27),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,3.0)))::Float64)))))),(Base.Math.nan_dom_err)(GenSym(24),(Base.box)(Base.Float64,(Base.add_float)(GenSym(21),GenSym(20))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 133:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7066#7067#7069#7462::Tuple{}
  ######_var0#7068#7070#7463::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7464::Tuple{}
  ##a#7465::Float64
  ##exp_a#7466::Float64
  ##deriv#7467::Float64
  ####G#7175#7468::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7469::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7470::Tuple{}
  ##########x#7091#7093#7097#7178#7471::Float64
  ########_var0#7094#7098#7179#7472::Tuple{}
  ######a#7211#7213#7473::Tuple{}
  ######b#7212#7214#7474::Tuple{}
  ####_var0#7215#7475::Tuple{}
  ##a#7476::Float64
  ##exp_a#7477::Float64
  ##deriv#7478::Float64
  ####G#7175#7479::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7480::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7481::Tuple{}
  ##########x#7091#7093#7097#7178#7482::Float64
  ########_var0#7094#7098#7179#7483::Tuple{}
  ##a#7484::Float64
  ##exp_a#7485::Float64
  ##deriv#7486::Float64
  ####G#7175#7487::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7488::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7489::Tuple{}
  ##########x#7091#7093#7097#7178#7490::Float64
  ########_var0#7094#7098#7179#7491::Tuple{}
  ########tup#7090#7180#7190#7492::Tuple{}
  ########x#7091#7181#7191#7493::Float64
  ######_var0#7182#7192#7494::Tuple{}
  ########types#7083#7183#7193#7495::Tuple{Type{Float64}}
  ##xs#7496::Tuple{}
  ##########tup#7090#7180#7190#7451#7497::Tuple{}
  ##########x#7091#7181#7191#7452#7498::Float64
  ########_var0#7182#7192#7453#7499::Tuple{}
  ##########types#7083#7183#7193#7454#7500::Tuple{Type{Float64}}
  ####a1#7455#7501::Float64
  ####a2#7456#7502::Float64
  ########a#7105#7109#7457#7503::Tuple{}
  ########b#7106#7110#7458#7504::Tuple{}
  ########afactor#7107#7111#7459#7505::Float64
  ########bfactor#7108#7112#7460#7506::Float64
  ######_var0#7113#7461#7507::Tuple{}
  ######a#7211#7213#7508::Tuple{}
  ######b#7212#7214#7509::Tuple{}
  ####_var0#7215#7510::Tuple{}
  ######a#7078#7080#7511::Tuple{}
  ######b#7079#7081#7512::Tuple{}
  ####_var0#7082#7513::Tuple{}
  ##a1#7514::Float64
  ##a2#7515::Float64
  ######a#7105#7109#7516::Tuple{}
  ######b#7106#7110#7517::Tuple{}
  ######afactor#7107#7111#7518::Float64
  ######bfactor#7108#7112#7519::Float64
  ####_var0#7113#7520::Tuple{}
  ##a1#7521::Float64
  ##a2#7522::Float64
  ##div_a#7523::Float64
  ####afactor#7120#7524::Float64
  ####bfactor#7121#7525::Float64
  ########a#7105#7114#7122#7526::Tuple{}
  ########b#7106#7115#7123#7527::Tuple{}
  ########afactor#7107#7116#7124#7528::Float64
  ########bfactor#7108#7117#7125#7529::Float64
  ######_var0#7118#7126#7530::Tuple{}
  ######types#7119#7127#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(42) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(43) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(44) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(45) = GenSym(42)
      GenSym(46) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(45)
      #s25 = GenSym(46)
      GenSym(47) = GenSym(43)
      GenSym(48) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(47)
      #s25 = GenSym(48)
      GenSym(49) = GenSym(44)
      GenSym(50) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(49)
      #s25 = GenSym(50) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7463 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      g1 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      g2 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 130:
      g3 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},3)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      GenSym(35) = (Distributions.sign)(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7182#7192#7453#7499 = (top(tuple))()::Tuple{}
      goto 31
      ########_var0#7182#7192#7453#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(32) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(33) = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7455#7501 = GenSym(32)
      ####a2#7456#7502 = GenSym(33)
      $(Expr(:boundscheck, false))
      ######_var0#7113#7461#7507 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7113#7461#7507 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7455#7501::Float64,####a2#7456#7502::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7215#7510 = (top(tuple))()::Tuple{}
      goto 34
      ####_var0#7215#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      ##a#7484 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7484::Float64,0,3.0,0)::Float64
      ##exp_a#7485 = (Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a#7484::Float64,3.0)))::Float64
      GenSym(27) = (Base.box)(Base.Float64,(Base.sub_float)(3.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7484::Float64,0,GenSym(27),0)::Float64
      ##deriv#7486 = (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(##a#7484::Float64,GenSym(27))))::Float64))
      ####G#7175#7487 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7491 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7094#7098#7179#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7485::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7192#7494 = (top(tuple))()::Tuple{}
      goto 29
      ######_var0#7182#7192#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7082#7513 = (top(tuple))()::Tuple{}
      goto 36
      ####_var0#7082#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      GenSym(36) = (top(getfield))(GenSym(35),:value)::Float64
      GenSym(37) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(34),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(31),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7514 = GenSym(36)
      ##a2#7515 = GenSym(37)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7520 = (top(tuple))()::Tuple{}
      goto 38
      ####_var0#7113#7520 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(38) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7514::Float64,##a2#7515::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7465 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7465::Float64,0,2.0,0)::Float64
      ##exp_a#7466 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7465::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7465::Float64,0,GenSym(11),0)::Float64
      ##deriv#7467 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7465::Float64,GenSym(11))))::Float64))
      ####G#7175#7468 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7472 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7094#7098#7179#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7466::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7215#7475 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7215#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      ##a#7476 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7476::Float64,0,GenSym(16),0)::Float64
      ##exp_a#7477 = (Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a#7476::Float64,GenSym(16))))::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(16),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(23) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7476::Float64,0,GenSym(20),0)::Float64
      ##deriv#7478 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(16),(Base.Math.nan_dom_err)(GenSym(23),(Base.box)(Base.Float64,(Base.add_float)(##a#7476::Float64,GenSym(20))))::Float64))
      ####G#7175#7479 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7483 = (top(tuple))()::Tuple{}
      goto 25
      ########_var0#7094#7098#7179#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7477::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(40) = (top(getfield))(GenSym(38),:value)::Float64
      GenSym(41) = (top(getfield))(GenSym(39),:value)::Float64
      ##a1#7521 = GenSym(40)
      ##a2#7522 = GenSym(41)
      ##div_a#7523 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7521::Float64,##a2#7522::Float64))
      ####afactor#7120#7524 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7522::Float64))
      ####bfactor#7121#7525 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7521::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7522::Float64,##a2#7522::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7530 = (top(tuple))()::Tuple{}
      goto 40
      ######_var0#7118#7126#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 133:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7535::Tuple{}
  ##xs#7536::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(29) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(30)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(34)
      #s25 = GenSym(35)
      GenSym(36) = GenSym(31)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(36)
      #s25 = GenSym(37) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,12)),(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 146:
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,4.0,0)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(19),0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g1::Float64)),g3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,g2::Float64)),(Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,4.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(GenSym(19),2.0)))::Float64)),3.0))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 149:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7535::Tuple{}
  ##xs#7536::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(29) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(30)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(34)
      #s25 = GenSym(35)
      GenSym(36) = GenSym(31)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(36)
      #s25 = GenSym(37) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,12)),(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 146:
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,4.0,0)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(19),0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g1::Float64)),g3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,g2::Float64)),(Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,4.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(GenSym(19),2.0)))::Float64)),3.0))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 149:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7066#7067#7069#7537::Tuple{}
  ######_var0#7068#7070#7538::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7539::Float64
  ##exp_a#7540::Float64
  ##deriv#7541::Float64
  ####G#7175#7542::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7543::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7544::Tuple{}
  ##########x#7091#7093#7097#7178#7545::Float64
  ########_var0#7094#7098#7179#7546::Tuple{}
  ######a#7211#7213#7547::Tuple{}
  ######b#7212#7214#7548::Tuple{}
  ####_var0#7215#7549::Tuple{}
  ##a#7550::Float64
  ##exp_a#7551::Float64
  ##deriv#7552::Float64
  ####G#7175#7553::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7554::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7555::Tuple{}
  ##########x#7091#7093#7097#7178#7556::Float64
  ########_var0#7094#7098#7179#7557::Tuple{}
  ##a#7558::Float64
  ##exp_a#7559::Float64
  ##deriv#7560::Float64
  ####G#7175#7561::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7562::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7563::Tuple{}
  ##########x#7091#7093#7097#7178#7564::Float64
  ########_var0#7094#7098#7179#7565::Tuple{}
  ########tup#7090#7180#7190#7566::Tuple{}
  ########x#7091#7181#7191#7567::Float64
  ######_var0#7182#7192#7568::Tuple{}
  ########types#7083#7183#7193#7569::Tuple{Type{Float64}}
  ##a#7570::Float64
  ##exp_a#7571::Float64
  ##deriv#7572::Float64
  ####G#7175#7573::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7176#7574::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7177#7575::Tuple{}
  ##########x#7091#7093#7097#7178#7576::Float64
  ########_var0#7094#7098#7179#7577::Tuple{}
  ##xs#7578::Tuple{}
  ##########tup#7090#7180#7190#7451#7579::Tuple{}
  ##########x#7091#7181#7191#7452#7580::Float64
  ########_var0#7182#7192#7453#7581::Tuple{}
  ##########types#7083#7183#7193#7454#7582::Tuple{Type{Float64}}
  ####a1#7455#7583::Float64
  ####a2#7456#7584::Float64
  ########a#7105#7109#7457#7585::Tuple{}
  ########b#7106#7110#7458#7586::Tuple{}
  ########afactor#7107#7111#7459#7587::Float64
  ########bfactor#7108#7112#7460#7588::Float64
  ######_var0#7113#7461#7589::Tuple{}
  ##xs#7590::Tuple{}
  ##########tup#7090#7180#7190#7451#7591::Tuple{}
  ##########x#7091#7181#7191#7452#7592::Float64
  ########_var0#7182#7192#7453#7593::Tuple{}
  ##########types#7083#7183#7193#7454#7594::Tuple{Type{Float64}}
  ####a1#7455#7595::Float64
  ####a2#7456#7596::Float64
  ########a#7105#7109#7457#7597::Tuple{}
  ########b#7106#7110#7458#7598::Tuple{}
  ########afactor#7107#7111#7459#7599::Float64
  ########bfactor#7108#7112#7460#7600::Float64
  ######_var0#7113#7461#7601::Tuple{}
  ######a#7211#7213#7602::Tuple{}
  ######b#7212#7214#7603::Tuple{}
  ####_var0#7215#7604::Tuple{}
  ######a#7078#7080#7605::Tuple{}
  ######b#7079#7081#7606::Tuple{}
  ####_var0#7082#7607::Tuple{}
  ######a#7211#7213#7608::Tuple{}
  ######b#7212#7214#7609::Tuple{}
  ####_var0#7215#7610::Tuple{}
  ##a1#7611::Float64
  ##a2#7612::Float64
  ##div_a#7613::Float64
  ####afactor#7120#7614::Float64
  ####bfactor#7121#7615::Float64
  ########a#7105#7114#7122#7616::Tuple{}
  ########b#7106#7115#7123#7617::Tuple{}
  ########afactor#7107#7116#7124#7618::Float64
  ########bfactor#7108#7117#7125#7619::Float64
  ######_var0#7118#7126#7620::Tuple{}
  ######types#7119#7127#7621::Tuple{Type{Float64}}
  ######types#7083#7104#7622::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(45) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(46) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(47) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(48) = GenSym(45)
      GenSym(49) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(48)
      #s25 = GenSym(49)
      GenSym(50) = GenSym(46)
      GenSym(51) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(50)
      #s25 = GenSym(51)
      GenSym(52) = GenSym(47)
      GenSym(53) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(52)
      #s25 = GenSym(53) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7538 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,12)),(Base.box)(Float64,(Base.sitofp)(Float64,5))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      g1 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      g2 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      g3 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},3)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 146:
      g4 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},4)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      $(Expr(:boundscheck, false))
      ########_var0#7182#7192#7453#7593 = (top(tuple))()::Tuple{}
      goto 33
      ########_var0#7182#7192#7453#7593 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(37) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(38) = (top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7455#7595 = GenSym(37)
      ####a2#7456#7596 = GenSym(38)
      $(Expr(:boundscheck, false))
      ######_var0#7113#7461#7601 = (top(tuple))()::Tuple{}
      goto 34
      ######_var0#7113#7461#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7455#7595::Float64,####a2#7456#7596::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7215#7604 = (top(tuple))()::Tuple{}
      goto 36
      ####_var0#7215#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      ##a#7570 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7570::Float64,0,2.0,0)::Float64
      ##exp_a#7571 = (Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(##a#7570::Float64,2.0)))::Float64
      GenSym(30) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7570::Float64,0,GenSym(30),0)::Float64
      ##deriv#7572 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(##a#7570::Float64,GenSym(30))))::Float64))
      ####G#7175#7573 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7577 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7094#7098#7179#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7571::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7182#7192#7453#7581 = (top(tuple))()::Tuple{}
      goto 30
      ########_var0#7182#7192#7453#7581 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(35) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(36) = (top(getfield))(GenSym(34),:value)::Float64
      ####a1#7455#7583 = GenSym(35)
      ####a2#7456#7584 = GenSym(36)
      $(Expr(:boundscheck, false))
      ######_var0#7113#7461#7589 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7113#7461#7589 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(40) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7455#7583::Float64,####a2#7456#7584::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7607 = (top(tuple))()::Tuple{}
      goto 38
      ####_var0#7082#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      ##a#7558 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7558::Float64,0,4.0,0)::Float64
      ##exp_a#7559 = (Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a#7558::Float64,4.0)))::Float64
      GenSym(22) = (Base.box)(Base.Float64,(Base.sub_float)(4.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7558::Float64,0,GenSym(22),0)::Float64
      ##deriv#7560 = (Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(##a#7558::Float64,GenSym(22))))::Float64))
      ####G#7175#7561 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7565 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7094#7098#7179#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7559::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7182#7192#7568 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7182#7192#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      $(Expr(:boundscheck, false))
      ####_var0#7215#7610 = (top(tuple))()::Tuple{}
      goto 40
      ####_var0#7215#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      ##a#7539 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7539::Float64,0,2.0,0)::Float64
      ##exp_a#7540 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(##a#7539::Float64,2.0)))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7539::Float64,0,GenSym(7),0)::Float64
      ##deriv#7541 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7539::Float64,GenSym(7))))::Float64))
      ####G#7175#7542 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7546 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7094#7098#7179#7546 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7215#7549 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7215#7549 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##a#7550 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7550::Float64,0,2.0,0)::Float64
      ##exp_a#7551 = (Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7550::Float64,2.0)))::Float64
      GenSym(15) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7550::Float64,0,GenSym(15),0)::Float64
      ##deriv#7552 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7550::Float64,GenSym(15))))::Float64))
      ####G#7175#7553 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7179#7557 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7094#7098#7179#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(41) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7551::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(42) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(39),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(40),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(26),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(43) = (top(getfield))(GenSym(41),:value)::Float64
      ##a1#7611 = GenSym(42)
      ##a2#7612 = GenSym(43)
      ##div_a#7613 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7611::Float64,##a2#7612::Float64))
      ####afactor#7120#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7612::Float64))
      ####bfactor#7121#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7611::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7612::Float64,##a2#7612::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7620 = (top(tuple))()::Tuple{}
      goto 42
      ######_var0#7118#7126#7620 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      GenSym(44) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(44),:value)::Float64,3.0))), :((top(getfield))(GenSym(44),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 149:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  ##xs#7623::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 154:
      GenSym(6) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 155:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),σ::Float64)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,ξ::Float64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  ##xs#7623::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 154:
      GenSym(6) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 155:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),σ::Float64)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,ξ::Float64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7071#7074#7629#7637::Tuple{}
  ########x#7072#7075#7630#7638::Irrational{:γ}
  ######_var0#7076#7631#7639::Tuple{}
  ########types#7073#7077#7632#7640::Tuple{Type{Irrational{:γ}}}
  ##a#7641::Float64
  ####G#7624#7642::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7625#7643::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7626#7644::Tuple{}
  ##########x#7091#7093#7097#7627#7645::Float64
  ########_var0#7094#7098#7628#7646::Tuple{}
  ##xs#7647::Tuple{}
  ########a#7078#7080#7633#7648::Tuple{}
  ########b#7079#7081#7634#7649::Tuple{}
  ######_var0#7082#7635#7650::Tuple{}
  ########types#7083#7280#7636#7651::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 154:
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(9)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(10)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 155:
      ##a#7641 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7641::Float64,0)::Float64
      ####G#7624#7642 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7628#7646 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7094#7098#7628#7646 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7641::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7076#7631#7639 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7076#7631#7639 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7082#7635#7650 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7082#7635#7650 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  u::Float64
  rd::Float64
  ####_var0#7654#7656::UNION{BOOL,INT64}
  ########_var0#7652#7653#7655#7657::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 260:
      NewvarNode(:rd)
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(19)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(20)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7654#7656 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7654#7656 = false
      9: 
      ####_var0#7654#7656::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7652#7653#7655#7657 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7652#7653#7655#7657 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7652#7653#7655#7657::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 265:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 268:
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64)),(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64)),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.div_float)(GenSym(17),ξ::Float64))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 271:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,rd::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  u::Float64
  rd::Float64
  ####_var0#7654#7656::UNION{BOOL,INT64}
  ########_var0#7652#7653#7655#7657::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 260:
      NewvarNode(:rd)
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(19)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(20)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7654#7656 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7654#7656 = false
      9: 
      ####_var0#7654#7656::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7652#7653#7655#7657 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7652#7653#7655#7657 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7652#7653#7655#7657::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 265:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 268:
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64)),(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64)),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.div_float)(GenSym(17),ξ::Float64))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 271:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,rd::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::Float64
  rd::ANY
  ####_var0#7654#7663::UNION{BOOL,INT64}
  ########_var0#7652#7653#7655#7664::Float64
  ########tup#7066#7067#7069#7665::Tuple{}
  ######_var0#7068#7070#7666::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7667::Tuple{}
  ####_var0#7068#7668::Tuple{}
  ######tup#7090#7180#7669::Tuple{}
  ######x#7091#7181#7670::Float64
  ####_var0#7182#7671::Tuple{}
  ######types#7083#7183#7672::Tuple{Type{Float64}}
  ##a#7673::Float64
  ####G#7658#7674::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7659#7675::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7660#7676::Tuple{}
  ##########x#7091#7093#7097#7661#7677::Float64
  ########_var0#7094#7098#7662#7678::Tuple{}
  ##a1#7679::Float64
  ##a2#7680::Float64
  ##div_a#7681::Float64
  ####afactor#7120#7682::Float64
  ####bfactor#7121#7683::Float64
  ########a#7105#7114#7122#7684::Tuple{}
  ########b#7106#7115#7123#7685::Tuple{}
  ########afactor#7107#7116#7124#7686::Float64
  ########bfactor#7108#7117#7125#7687::Float64
  ######_var0#7118#7126#7688::Tuple{}
  ######types#7119#7127#7689::Tuple{Type{Float64}}
  ######a#7078#7080#7690::Tuple{}
  ######b#7079#7081#7691::Tuple{}
  ####_var0#7082#7692::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 260:
      NewvarNode(:rd)
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(23)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28)
      GenSym(29) = GenSym(24)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(29)
      #s25 = GenSym(30) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7654#7663 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7654#7663 = false
      9: 
      ####_var0#7654#7663::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7652#7653#7655#7664 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7652#7653#7655#7664 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7652#7653#7655#7664::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 265:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 15
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7666 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7068#7070#7666 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 16
      15: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      16: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 268:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7668 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7068#7668 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7182#7671 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7182#7671 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##a#7673 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7673::Float64,0)::Float64
      (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7673::Float64,0)::Float64
      ####G#7658#7674 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7662#7678 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7094#7098#7662#7678 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(18), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(20) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7679 = GenSym(19)
      ##a2#7680 = GenSym(20)
      ##div_a#7681 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7679::Float64,##a2#7680::Float64))
      ####afactor#7120#7682 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7680::Float64))
      ####bfactor#7121#7683 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7679::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7680::Float64,##a2#7680::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7688 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7118#7126#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      rd = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7681::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 271:
      GenSym(21) = σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * rd::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7082#7692 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7082#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  z::Float64
  t::Float64
  ####fy#2548#7695::Float64
  ####fy#2548#7696::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 198:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7695 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7695::Float64)::Bool,(Base.ne_float)(####fy#2548#7695::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7695::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7696 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7696::Float64)::Bool,(Base.ne_float)(####fy#2548#7696::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7696::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{Float64},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(21)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(22)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 205:
      t = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(z::Float64)),0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      GenSym(8) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(t::Float64,GenSym(8))),σ::Float64))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 208:
      unless (Base.eq_float)((Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64)),-1.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 211:
      GenSym(10) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64))))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),ξ::Float64))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,GenSym(9),0)::Float64
      t = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),GenSym(9))))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 212:
      GenSym(15) = (Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,1.0))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,t::Float64,0,GenSym(15),0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(t::Float64,GenSym(15))))::Float64,GenSym(19))),σ::Float64))
      6: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  z::Float64
  t::Float64
  ####fy#2548#7695::Float64
  ####fy#2548#7696::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 198:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7695 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7695::Float64)::Bool,(Base.ne_float)(####fy#2548#7695::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7695::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7696 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7696::Float64)::Bool,(Base.ne_float)(####fy#2548#7696::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7696::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{Float64},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(21)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(22)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 205:
      t = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(z::Float64)),0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      GenSym(8) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(t::Float64,GenSym(8))),σ::Float64))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 208:
      unless (Base.eq_float)((Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64)),-1.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 211:
      GenSym(10) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64))))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),ξ::Float64))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,GenSym(9),0)::Float64
      t = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),GenSym(9))))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 212:
      GenSym(15) = (Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,1.0))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,t::Float64,0,GenSym(15),0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(t::Float64,GenSym(15))))::Float64,GenSym(19))),σ::Float64))
      6: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#2548#7741::Float64
  ####fy#2548#7742::Float64
  ######tup#7066#7195#7743::Tuple{}
  ####_var0#7196#7744::Tuple{}
  ######types#7194#7197#7745::Tuple{Type{Int64}}
  ##a1#7746::Float64
  ##a2#7747::Float64
  ##div_a#7748::Float64
  ####afactor#7120#7749::Float64
  ####bfactor#7121#7750::Float64
  ########a#7105#7114#7122#7751::Tuple{}
  ########b#7106#7115#7123#7752::Tuple{}
  ########afactor#7107#7116#7124#7753::Float64
  ########bfactor#7108#7117#7125#7754::Float64
  ######_var0#7118#7126#7755::Tuple{}
  ######types#7119#7127#7756::Tuple{Type{Float64}}
  ########tup#7066#7067#7069#7757::Tuple{}
  ######_var0#7068#7070#7758::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7759::Tuple{}
  ####_var0#7068#7760::Tuple{}
  ##exp_a#7761::Float64
  ####G#7731#7762::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7732#7763::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7733#7764::Tuple{}
  ##########x#7091#7093#7097#7734#7765::Float64
  ########_var0#7094#7098#7735#7766::Tuple{}
  ######tup#7066#7067#7767::Tuple{}
  ####_var0#7068#7768::Tuple{}
  ##exp_a#7769::Float64
  ####G#7731#7770::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7732#7771::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7733#7772::Tuple{}
  ##########x#7091#7093#7097#7734#7773::Float64
  ########_var0#7094#7098#7735#7774::Tuple{}
  ##a1#7775::Float64
  ##a2#7776::Float64
  ######a#7105#7109#7777::Tuple{}
  ######b#7106#7110#7778::Tuple{}
  ######afactor#7107#7111#7779::Float64
  ######bfactor#7108#7112#7780::Float64
  ####_var0#7113#7781::Tuple{}
  ##a1#7782::Float64
  ##a2#7783::Float64
  ##div_a#7784::Float64
  ####afactor#7120#7785::Float64
  ####bfactor#7121#7786::Float64
  ########a#7105#7114#7122#7787::Tuple{}
  ########b#7106#7115#7123#7788::Tuple{}
  ########afactor#7107#7116#7124#7789::Float64
  ########bfactor#7108#7117#7125#7790::Float64
  ######_var0#7118#7126#7791::Tuple{}
  ######types#7119#7127#7792::Tuple{Type{Float64}}
  ##a1#7793::Float64
  ##a2#7794::Float64
  ######a#7105#7109#7795::Tuple{}
  ######b#7106#7110#7796::Tuple{}
  ######afactor#7107#7111#7797::Float64
  ######bfactor#7108#7112#7798::Float64
  ####_var0#7113#7799::Tuple{}
  _var1::Bool
  ##a#7800::Float64
  ##div_a#7801::Float64
  ##deriv#7802::Float64
  ####G#7736#7803::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7737#7804::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7738#7805::Tuple{}
  ##########x#7091#7093#7097#7739#7806::Float64
  ########_var0#7094#7098#7740#7807::Tuple{}
  ##a1#7808::Float64
  ##a2#7809::Float64
  ######a#7105#7109#7810::Tuple{}
  ######b#7106#7110#7811::Tuple{}
  ######afactor#7107#7111#7812::Float64
  ######bfactor#7108#7112#7813::Float64
  ####_var0#7113#7814::Tuple{}
  ########types#7083#7280#7281#7815::Tuple{Type{Float64}}
  ##a1#7816::Float64
  ##a2#7817::Float64
  ##exp_a#7818::Float64
  ##powval#7819::Float64
  ##logval#7820::Float64
  ##new_bs#7821::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7282#7822::Float64
  ####exp_a#7283#7823::Float64
  ####deriv#7284#7824::Float64
  ######G#7175#7285#7825::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7089#7095#7176#7286#7826::Tuple{Type{Float64},Type{Float64}}
  ############tup#7090#7092#7096#7177#7287#7827::Tuple{}
  ############x#7091#7093#7097#7178#7288#7828::Float64
  ##########_var0#7094#7098#7179#7289#7829::Tuple{}
  ######a#7105#7290#7830::Tuple{}
  ######b#7106#7291#7831::Tuple{}
  ######afactor#7107#7292#7832::Float64
  ######bfactor#7108#7293#7833::Float64
  ####_var0#7294#7834::Tuple{}
  ######types#7119#7295#7835::Tuple{Type{Float64}}
  _var2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7836::Tuple{}
  ####_var0#7068#7837::Tuple{}
  ##exp_a#7838::Float64
  ####G#7731#7839::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7732#7840::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7733#7841::Tuple{}
  ##########x#7091#7093#7097#7734#7842::Float64
  ########_var0#7094#7098#7735#7843::Tuple{}
  ######types#7083#7280#7844::Tuple{Type{Float64}}
  ##a1#7845::Float64
  ##a2#7846::Float64
  ##exp_a#7847::Float64
  ##powval#7848::Float64
  ##logval#7849::Float64
  ##new_bs#7850::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7282#7851::Float64
  ####exp_a#7283#7852::Float64
  ####deriv#7284#7853::Float64
  ######G#7175#7285#7854::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7089#7095#7176#7286#7855::Tuple{Type{Float64},Type{Float64}}
  ############tup#7090#7092#7096#7177#7287#7856::Tuple{}
  ############x#7091#7093#7097#7178#7288#7857::Float64
  ##########_var0#7094#7098#7179#7289#7858::Tuple{}
  ######a#7105#7290#7859::Tuple{}
  ######b#7106#7291#7860::Tuple{}
  ######afactor#7107#7292#7861::Float64
  ######bfactor#7108#7293#7862::Float64
  ####_var0#7294#7863::Tuple{}
  ######types#7119#7295#7864::Tuple{Type{Float64}}
  _var3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7865::Float64
  ##a2#7866::Float64
  ######a#7105#7109#7867::Tuple{}
  ######b#7106#7110#7868::Tuple{}
  ######afactor#7107#7111#7869::Float64
  ######bfactor#7108#7112#7870::Float64
  ####_var0#7113#7871::Tuple{}
  ##a1#7872::Float64
  ##a2#7873::Float64
  ##div_a#7874::Float64
  ####afactor#7120#7875::Float64
  ####bfactor#7121#7876::Float64
  ########a#7105#7114#7122#7877::Tuple{}
  ########b#7106#7115#7123#7878::Tuple{}
  ########afactor#7107#7116#7124#7879::Float64
  ########bfactor#7108#7117#7125#7880::Float64
  ######_var0#7118#7126#7881::Tuple{}
  ######types#7119#7127#7882::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 198:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7741 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7741::Float64)::Bool,(Base.ne_float)(####fy#2548#7741::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7741::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7742 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7742::Float64)::Bool,(Base.ne_float)(####fy#2548#7742::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7742::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      GenSym(71) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(72) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(73) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(74) = GenSym(71)
      GenSym(75) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(74)
      #s25 = GenSym(75)
      GenSym(76) = GenSym(72)
      GenSym(77) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(76)
      #s25 = GenSym(77)
      GenSym(78) = GenSym(73)
      GenSym(79) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(78)
      #s25 = GenSym(79) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      $(Expr(:boundscheck, false))
      ####_var0#7196#7744 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7196#7744 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7746 = GenSym(6)
      ##a2#7747 = GenSym(7)
      ##div_a#7748 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7746::Float64,##a2#7747::Float64))
      ####afactor#7120#7749 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7747::Float64))
      ####bfactor#7121#7750 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7746::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7747::Float64,##a2#7747::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7755 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7118#7126#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7748::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 24
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7758 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7068#7070#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      24: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      25: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 205:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7760 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7068#7760 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##exp_a#7761 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7731#7762 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7735#7766 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7094#7098#7735#7766 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      t = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7761::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7768 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7068#7768 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      ##exp_a#7769 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7731#7770 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7735#7774 = (top(tuple))()::Tuple{}
      goto 33
      ########_var0#7094#7098#7735#7774 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7769::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7775 = GenSym(11)
      ##a2#7776 = GenSym(12)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7781 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7113#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7775::Float64,##a2#7776::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7782 = GenSym(14)
      ##a2#7783 = GenSym(15)
      ##div_a#7784 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7782::Float64,##a2#7783::Float64))
      ####afactor#7120#7785 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7783::Float64))
      ####bfactor#7121#7786 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7782::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7783::Float64,##a2#7783::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7791 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7118#7126#7791 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7784::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 208:
      GenSym(16) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(17) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7793 = GenSym(16)
      ##a2#7794 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7799 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7113#7799 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(18) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7793::Float64,##a2#7794::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (ForwardDiff.iszero)((top(getfield))(GenSym(18),:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 41
      _var1 = (Base.eq_float)((top(getfield))(GenSym(18),:value)::Float64,-1.0)::Bool
      goto 42
      41: 
      _var1 = false
      42: 
      unless _var1::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 211:
      GenSym(19) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(20) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7808 = GenSym(19)
      ##a2#7809 = GenSym(20)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7814 = (top(tuple))()::Tuple{}
      goto 47
      ####_var0#7113#7814 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7808::Float64,##a2#7809::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7800 = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7801 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),##a#7800::Float64))
      ##deriv#7802 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7801::Float64,##a#7800::Float64))))
      ####G#7736#7803 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7740#7807 = (top(tuple))()::Tuple{}
      goto 45
      ########_var0#7094#7098#7740#7807 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(21),:value)::Float64,1.0))), :((top(getfield))(GenSym(21),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7801::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7816"))
      NewvarNode(symbol("##a2#7817"))
      NewvarNode(symbol("##exp_a#7818"))
      NewvarNode(symbol("##powval#7819"))
      NewvarNode(symbol("##logval#7820"))
      NewvarNode(symbol("##new_bs#7821"))
      unless (top(getfield))((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 51
      GenSym(26) = (top(getfield))(GenSym(22),:value)::Float64
      ####a#7282#7822 = (top(getfield))(GenSym(23),:value)::Float64
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7282#7822::Float64,0,GenSym(26),0)::Float64
      ####exp_a#7283#7823 = (Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(####a#7282#7822::Float64,GenSym(26))))::Float64
      GenSym(30) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(26),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7282#7822::Float64,0,GenSym(30),0)::Float64
      ####deriv#7284#7824 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(26),(Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7282#7822::Float64,GenSym(30))))::Float64))
      ######G#7175#7285#7825 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7094#7098#7179#7289#7829 = (top(tuple))()::Tuple{}
      goto 50
      ##########_var0#7094#7098#7179#7289#7829 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      50: 
      _var2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7283#7823::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 53
      51: 
      GenSym(24) = (top(getfield))(GenSym(23),:value)::Float64
      GenSym(25) = (top(getfield))(GenSym(22),:value)::Float64
      ##a1#7816 = GenSym(24)
      ##a2#7817 = GenSym(25)
      GenSym(36) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7816::Float64,0,##a2#7817::Float64,0)::Float64
      ##exp_a#7818 = (Base.Math.nan_dom_err)(GenSym(36),(Base.box)(Base.Float64,(Base.add_float)(##a1#7816::Float64,##a2#7817::Float64)))::Float64
      GenSym(37) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7817::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7816::Float64,0,GenSym(37),0)::Float64
      ##powval#7819 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7817::Float64,(Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7816::Float64,GenSym(37))))::Float64))
      GenSym(42) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7816::Float64,0)::Float64
      ##logval#7820 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7818::Float64,(Base.Math.nan_dom_err)(GenSym(42),##a1#7816::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7294#7834 = (top(tuple))()::Tuple{}
      goto 52
      ####_var0#7294#7834 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      52: 
      ##new_bs#7821 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7818::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      53: 
      t = _var2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 212:
      GenSym(44) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7845"))
      NewvarNode(symbol("##a2#7846"))
      NewvarNode(symbol("##exp_a#7847"))
      NewvarNode(symbol("##powval#7848"))
      NewvarNode(symbol("##logval#7849"))
      NewvarNode(symbol("##new_bs#7850"))
      unless (top(getfield))((top(getfield))(GenSym(44),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 60
      GenSym(47) = (top(getfield))(GenSym(44),:value)::Float64
      ####a#7282#7851 = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(50) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7282#7851::Float64,0,GenSym(47),0)::Float64
      ####exp_a#7283#7852 = (Base.Math.nan_dom_err)(GenSym(50),(Base.box)(Base.Float64,(Base.add_float)(####a#7282#7851::Float64,GenSym(47))))::Float64
      GenSym(51) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(47),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(54) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7282#7851::Float64,0,GenSym(51),0)::Float64
      ####deriv#7284#7853 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(47),(Base.Math.nan_dom_err)(GenSym(54),(Base.box)(Base.Float64,(Base.add_float)(####a#7282#7851::Float64,GenSym(51))))::Float64))
      ######G#7175#7285#7854 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7094#7098#7179#7289#7858 = (top(tuple))()::Tuple{}
      goto 59
      ##########_var0#7094#7098#7179#7289#7858 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      59: 
      _var3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7283#7852::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 62
      60: 
      GenSym(45) = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(GenSym(44),:value)::Float64
      ##a1#7845 = GenSym(45)
      ##a2#7846 = GenSym(46)
      GenSym(57) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7845::Float64,0,##a2#7846::Float64,0)::Float64
      ##exp_a#7847 = (Base.Math.nan_dom_err)(GenSym(57),(Base.box)(Base.Float64,(Base.add_float)(##a1#7845::Float64,##a2#7846::Float64)))::Float64
      GenSym(58) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7846::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(61) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7845::Float64,0,GenSym(58),0)::Float64
      ##powval#7848 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7846::Float64,(Base.Math.nan_dom_err)(GenSym(61),(Base.box)(Base.Float64,(Base.add_float)(##a1#7845::Float64,GenSym(58))))::Float64))
      GenSym(63) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7845::Float64,0)::Float64
      ##logval#7849 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7847::Float64,(Base.Math.nan_dom_err)(GenSym(63),##a1#7845::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7294#7863 = (top(tuple))()::Tuple{}
      goto 61
      ####_var0#7294#7863 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      61: 
      ##new_bs#7850 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7847::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      62: 
      GenSym(64) = _var3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7068#7837 = (top(tuple))()::Tuple{}
      goto 54
      ####_var0#7068#7837 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      54: 
      ##exp_a#7838 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7731#7839 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7735#7843 = (top(tuple))()::Tuple{}
      goto 56
      ########_var0#7094#7098#7735#7843 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      56: 
      GenSym(65) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7838::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(66) = (top(getfield))(GenSym(64),:value)::Float64
      GenSym(67) = (top(getfield))(GenSym(65),:value)::Float64
      ##a1#7865 = GenSym(66)
      ##a2#7866 = GenSym(67)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7871 = (top(tuple))()::Tuple{}
      goto 63
      ####_var0#7113#7871 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      63: 
      GenSym(68) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7865::Float64,##a2#7866::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(69) = (top(getfield))(GenSym(68),:value)::Float64
      GenSym(70) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7872 = GenSym(69)
      ##a2#7873 = GenSym(70)
      ##div_a#7874 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7872::Float64,##a2#7873::Float64))
      ####afactor#7120#7875 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7873::Float64))
      ####bfactor#7121#7876 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7872::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7873::Float64,##a2#7873::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7881 = (top(tuple))()::Tuple{}
      goto 65
      ######_var0#7118#7126#7881 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      65: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7874::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      6: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----


----float----


----dual----





____________________________
cf
____________________________

----integer----


----float----


----dual----





