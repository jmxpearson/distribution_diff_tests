____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 70:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 70:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 70:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,0.5772156649015329))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 93:
      unless (Base.lt_float)(ξ::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,ξ::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,1.0)))),ξ::Float64))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 96:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,0.5772156649015329))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 93:
      unless (Base.lt_float)(ξ::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,ξ::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,1.0)))),ξ::Float64))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 96:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7103#7104#7106#7165::Tuple{}
  ######_var0#7105#7107#7166::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7108#7111#7167::Tuple{}
  ######x#7109#7112#7168::Irrational{:γ}
  ####_var0#7113#7169::Tuple{}
  ######types#7110#7114#7170::Tuple{Type{Irrational{:γ}}}
  ######a#7115#7117#7171::Tuple{}
  ######b#7116#7118#7172::Tuple{}
  ####_var0#7119#7173::Tuple{}
  ######tup#7103#7121#7174::Tuple{}
  ####_var0#7122#7175::Tuple{}
  ######types#7120#7123#7176::Tuple{Type{Float64}}
  ##a#7177::Float64
  ####G#7136#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7137#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7138#7180::Tuple{}
  ##########x#7128#7130#7134#7139#7181::Float64
  ########_var0#7131#7135#7140#7182::Tuple{}
  ######types#7120#7141#7183::Tuple{Type{Float64}}
  ##a1#7184::Float64
  ##a2#7185::Float64
  ######a#7142#7146#7186::Tuple{}
  ######b#7143#7147#7187::Tuple{}
  ######afactor#7144#7148#7188::Float64
  ######bfactor#7145#7149#7189::Float64
  ####_var0#7150#7190::Tuple{}
  ##a1#7191::Float64
  ##a2#7192::Float64
  ##div_a#7193::Float64
  ####afactor#7157#7194::Float64
  ####bfactor#7158#7195::Float64
  ########a#7142#7151#7159#7196::Tuple{}
  ########b#7143#7152#7160#7197::Tuple{}
  ########afactor#7144#7153#7161#7198::Float64
  ########bfactor#7145#7154#7162#7199::Float64
  ######_var0#7155#7163#7200::Tuple{}
  ######types#7156#7164#7201::Tuple{Type{Float64}}
  ######a#7115#7117#7202::Tuple{}
  ######b#7116#7118#7203::Tuple{}
  ####_var0#7119#7204::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7166 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7105#7107#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7113#7169 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7113#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      $(Expr(:boundscheck, false))
      ####_var0#7119#7173 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7119#7173 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 93:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      $(Expr(:boundscheck, false))
      ####_var0#7122#7175 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7122#7175 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      ##a#7177 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7177::Float64,0)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7177::Float64)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7177::Float64,0)::Float64
      ####G#7136#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7140#7182 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7131#7135#7140#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(8),##a#7177::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(9),:value)::Float64,1.0))), :((top(getfield))(GenSym(9),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7184 = GenSym(10)
      ##a2#7185 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7190 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7150#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7184::Float64,##a2#7185::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7191 = GenSym(13)
      ##a2#7192 = GenSym(14)
      ##div_a#7193 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7191::Float64,##a2#7192::Float64))
      ####afactor#7157#7194 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7192::Float64))
      ####bfactor#7158#7195 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7191::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7192::Float64,##a2#7192::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7200 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7155#7163#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7193::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7119#7204 = (top(tuple))()::Tuple{}
      goto 28
      ####_var0#7119#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 96:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(27) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(28) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(29) = GenSym(26)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(27)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(31)
      #s25 = GenSym(32)
      GenSym(33) = GenSym(28)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(33)
      #s25 = GenSym(34) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64)),6.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 115:
      unless (Base.lt_float)(ξ::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(22) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(20),0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(1.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(16) = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(16),0,2.0,0)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,ξ::Float64,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(22),GenSym(20))::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(GenSym(16),2.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,2.0)))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 118:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(27) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(28) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(29) = GenSym(26)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(27)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(31)
      #s25 = GenSym(32)
      GenSym(33) = GenSym(28)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(33)
      #s25 = GenSym(34) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64)),6.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 115:
      unless (Base.lt_float)(ξ::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(22) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(20),0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(1.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(16) = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(16),0,2.0,0)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,ξ::Float64,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(22),GenSym(20))::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(GenSym(16),2.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,2.0)))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 118:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7103#7104#7106#7253::Tuple{}
  ######_var0#7105#7107#7254::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7255::Float64
  ##exp_a#7256::Float64
  ##deriv#7257::Float64
  ####G#7212#7258::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7259::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7260::Tuple{}
  ##########x#7128#7130#7134#7215#7261::Float64
  ########_var0#7131#7135#7216#7262::Tuple{}
  ######tup#7127#7217#7263::Tuple{}
  ######x#7128#7218#7264::Float64
  ####_var0#7219#7265::Tuple{}
  ######types#7120#7220#7266::Tuple{Type{Float64}}
  ##div_a#7267::Float64
  ######tup#7221#7223#7268::Tuple{}
  ######x#7222#7224#7269::Float64
  ####_var0#7225#7270::Tuple{}
  ######types#7120#7226#7271::Tuple{Type{Float64}}
  ##a#7272::Float64
  ##exp_a#7273::Float64
  ##deriv#7274::Float64
  ####G#7212#7275::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7276::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7277::Tuple{}
  ##########x#7128#7130#7134#7215#7278::Float64
  ########_var0#7131#7135#7216#7279::Tuple{}
  ##a#7280::Float64
  ##exp_a#7281::Float64
  ##deriv#7282::Float64
  ####G#7212#7283::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7284::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7285::Tuple{}
  ##########x#7128#7130#7134#7215#7286::Float64
  ########_var0#7131#7135#7216#7287::Tuple{}
  ######a#7248#7250#7288::Tuple{}
  ######b#7249#7251#7289::Tuple{}
  ####_var0#7252#7290::Tuple{}
  ##a#7291::Float64
  ##exp_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7212#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7296::Tuple{}
  ##########x#7128#7130#7134#7215#7297::Float64
  ########_var0#7131#7135#7216#7298::Tuple{}
  ##a1#7299::Float64
  ##a2#7300::Float64
  ######a#7142#7146#7301::Tuple{}
  ######b#7143#7147#7302::Tuple{}
  ######afactor#7144#7148#7303::Float64
  ######bfactor#7145#7149#7304::Float64
  ####_var0#7150#7305::Tuple{}
  ##a1#7306::Float64
  ##a2#7307::Float64
  ##div_a#7308::Float64
  ####afactor#7157#7309::Float64
  ####bfactor#7158#7310::Float64
  ########a#7142#7151#7159#7311::Tuple{}
  ########b#7143#7152#7160#7312::Tuple{}
  ########afactor#7144#7153#7161#7313::Float64
  ########bfactor#7145#7154#7162#7314::Float64
  ######_var0#7155#7163#7315::Tuple{}
  ######types#7156#7164#7316::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      GenSym(46) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(47) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(48) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(49) = GenSym(46)
      GenSym(50) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(49)
      #s25 = GenSym(50)
      GenSym(51) = GenSym(47)
      GenSym(52) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(51)
      #s25 = GenSym(52)
      GenSym(53) = GenSym(48)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(53)
      #s25 = GenSym(54) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7254 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7105#7107#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      ##a#7255 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7255::Float64,0,2.0,0)::Float64
      ##exp_a#7256 = (Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7255::Float64,2.0)))::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7255::Float64,0,GenSym(10),0)::Float64
      ##deriv#7257 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a#7255::Float64,GenSym(10))))::Float64))
      ####G#7212#7258 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7262 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7131#7135#7216#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7256::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7219#7265 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7219#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##div_a#7267 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(14),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7225#7270 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7225#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7267::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 115:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      ##a#7291 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7291::Float64,0,2.0,0)::Float64
      ##exp_a#7292 = (Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(##a#7291::Float64,2.0)))::Float64
      GenSym(35) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(38) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7291::Float64,0,GenSym(35),0)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(38),(Base.box)(Base.Float64,(Base.add_float)(##a#7291::Float64,GenSym(35))))::Float64))
      ####G#7212#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7298 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7131#7135#7216#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(30) = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2.0)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1.0)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7280 = (top(getfield))(GenSym(22),:value)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7280::Float64,0,2.0,0)::Float64
      ##exp_a#7281 = (Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(##a#7280::Float64,2.0)))::Float64
      GenSym(26) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7280::Float64,0,GenSym(26),0)::Float64
      ##deriv#7282 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(##a#7280::Float64,GenSym(26))))::Float64))
      ####G#7212#7283 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7287 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7131#7135#7216#7287 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7290 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7252#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(40) = (top(getfield))(GenSym(39),:value)::Float64
      GenSym(41) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(30),:value)::Float64,(top(getfield))(GenSym(31),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7299 = GenSym(40)
      ##a2#7300 = GenSym(41)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7305 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7150#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(42) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7299::Float64,##a2#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7272 = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7272::Float64,0,2.0,0)::Float64
      ##exp_a#7273 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a#7272::Float64,2.0)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7272::Float64,0,GenSym(18),0)::Float64
      ##deriv#7274 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a#7272::Float64,GenSym(18))))::Float64))
      ####G#7212#7275 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7279 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7131#7135#7216#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(43) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(44) = (top(getfield))(GenSym(42),:value)::Float64
      GenSym(45) = (top(getfield))(GenSym(43),:value)::Float64
      ##a1#7306 = GenSym(44)
      ##a2#7307 = GenSym(45)
      ##div_a#7308 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7306::Float64,##a2#7307::Float64))
      ####afactor#7157#7309 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7307::Float64))
      ####bfactor#7158#7310 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7306::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7307::Float64,##a2#7307::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7315 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7155#7163#7315 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7308::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 118:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 103:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      return μ::Float64
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 106:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)(1.0,ξ::Float64))
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),GenSym(4))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 103:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      return μ::Float64
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 106:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)(1.0,ξ::Float64))
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),GenSym(4))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7103#7104#7106#7333::Tuple{}
  ######_var0#7105#7107#7334::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7103#7104#7335::Tuple{}
  ####_var0#7105#7336::Tuple{}
  ########types#7120#7317#7318#7337::Tuple{Type{Float64}}
  ##a1#7338::Float64
  ##a2#7339::Float64
  ##exp_a#7340::Float64
  ##powval#7341::Float64
  ##logval#7342::Float64
  ##new_bs#7343::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7319#7344::Float64
  ####exp_a#7320#7345::Float64
  ####deriv#7321#7346::Float64
  ######G#7212#7322#7347::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7126#7132#7213#7323#7348::Tuple{Type{Float64},Type{Float64}}
  ############tup#7127#7129#7133#7214#7324#7349::Tuple{}
  ############x#7128#7130#7134#7215#7325#7350::Float64
  ##########_var0#7131#7135#7216#7326#7351::Tuple{}
  ######a#7142#7327#7352::Tuple{}
  ######b#7143#7328#7353::Tuple{}
  ######afactor#7144#7329#7354::Float64
  ######bfactor#7145#7330#7355::Float64
  ####_var0#7331#7356::Tuple{}
  ######types#7156#7332#7357::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7120#7141#7358::Tuple{Type{Float64}}
  ##a1#7359::Float64
  ##a2#7360::Float64
  ######a#7142#7146#7361::Tuple{}
  ######b#7143#7147#7362::Tuple{}
  ######afactor#7144#7148#7363::Float64
  ######bfactor#7145#7149#7364::Float64
  ####_var0#7150#7365::Tuple{}
  ##a1#7366::Float64
  ##a2#7367::Float64
  ##div_a#7368::Float64
  ####afactor#7157#7369::Float64
  ####bfactor#7158#7370::Float64
  ########a#7142#7151#7159#7371::Tuple{}
  ########b#7143#7152#7160#7372::Tuple{}
  ########afactor#7144#7153#7161#7373::Float64
  ########bfactor#7145#7154#7162#7374::Float64
  ######_var0#7155#7163#7375::Tuple{}
  ######types#7156#7164#7376::Tuple{Type{Float64}}
  ######a#7115#7117#7377::Tuple{}
  ######b#7116#7118#7378::Tuple{}
  ####_var0#7119#7379::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(33) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(34) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(35) = GenSym(32)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(33)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(37)
      #s25 = GenSym(38)
      GenSym(39) = GenSym(34)
      GenSym(40) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(39)
      #s25 = GenSym(40) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 103:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 10
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7334 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7105#7107#7334 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      10: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      11: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      return μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 106:
      $(Expr(:boundscheck, false))
      ####_var0#7105#7336 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7105#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7338"))
      NewvarNode(symbol("##a2#7339"))
      NewvarNode(symbol("##exp_a#7340"))
      NewvarNode(symbol("##powval#7341"))
      NewvarNode(symbol("##logval#7342"))
      NewvarNode(symbol("##new_bs#7343"))
      unless (top(getfield))((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 17
      GenSym(8) = (top(getfield))(GenSym(4),:value)::Float64
      ####a#7319#7344 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7319#7344::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7320#7345 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7319#7344::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7319#7344::Float64,0,GenSym(12),0)::Float64
      ####deriv#7321#7346 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7319#7344::Float64,GenSym(12))))::Float64))
      ######G#7212#7322#7347 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7131#7135#7216#7326#7351 = (top(tuple))()::Tuple{}
      goto 16
      ##########_var0#7131#7135#7216#7326#7351 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7320#7345::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 19
      17: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7338 = GenSym(6)
      ##a2#7339 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7338::Float64,0,##a2#7339::Float64,0)::Float64
      ##exp_a#7340 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7338::Float64,##a2#7339::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7339::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7338::Float64,0,GenSym(19),0)::Float64
      ##powval#7341 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7339::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7338::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7338::Float64,0)::Float64
      ##logval#7342 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7340::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7338::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7331#7356 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7331#7356 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##new_bs#7343 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7340::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      19: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(26) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7359 = GenSym(26)
      ##a2#7360 = GenSym(27)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7365 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7150#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7359::Float64,##a2#7360::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(29) = (top(getfield))(GenSym(28),:value)::Float64
      GenSym(30) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7366 = GenSym(29)
      ##a2#7367 = GenSym(30)
      ##div_a#7368 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7366::Float64,##a2#7367::Float64))
      ####afactor#7157#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7367::Float64))
      ####bfactor#7158#7370 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7366::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7367::Float64,##a2#7367::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7375 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7155#7163#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7368::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7119#7379 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7119#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(31),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 81:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 84:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(12) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(12),0,GenSym(11),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(GenSym(12),GenSym(11))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 81:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 84:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(12) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(12),0,GenSym(11),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(GenSym(12),GenSym(11))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7103#7104#7106#7390::Tuple{}
  ######_var0#7105#7107#7391::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7127#7217#7392::Tuple{}
  ######x#7128#7218#7393::Float64
  ####_var0#7219#7394::Tuple{}
  ######types#7120#7220#7395::Tuple{Type{Float64}}
  ######a#7248#7250#7396::Tuple{}
  ######b#7249#7251#7397::Tuple{}
  ####_var0#7252#7398::Tuple{}
  ######tup#7103#7104#7399::Tuple{}
  ####_var0#7105#7400::Tuple{}
  ##a#7401::Float64
  ##exp_a#7402::Float64
  ##deriv#7403::Float64
  ####G#7385#7404::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7386#7405::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7387#7406::Tuple{}
  ##########x#7128#7130#7134#7388#7407::Float64
  ########_var0#7131#7135#7389#7408::Tuple{}
  ######types#7120#7141#7409::Tuple{Type{Float64}}
  ##a1#7410::Float64
  ##a2#7411::Float64
  ######a#7142#7146#7412::Tuple{}
  ######b#7143#7147#7413::Tuple{}
  ######afactor#7144#7148#7414::Float64
  ######bfactor#7145#7149#7415::Float64
  ####_var0#7150#7416::Tuple{}
  ##a1#7417::Float64
  ##a2#7418::Float64
  ##div_a#7419::Float64
  ####afactor#7157#7420::Float64
  ####bfactor#7158#7421::Float64
  ########a#7142#7151#7159#7422::Tuple{}
  ########b#7143#7152#7160#7423::Tuple{}
  ########afactor#7144#7153#7161#7424::Float64
  ########bfactor#7145#7154#7162#7425::Float64
  ######_var0#7155#7163#7426::Tuple{}
  ######types#7156#7164#7427::Tuple{Type{Float64}}
  ######a#7115#7117#7428::Tuple{}
  ######b#7116#7118#7429::Tuple{}
  ####_var0#7119#7430::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      GenSym(24) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(27)
      #s25 = GenSym(28)
      GenSym(29) = GenSym(25)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(26)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(31)
      #s25 = GenSym(32) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 81:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 10
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7391 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7105#7107#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      10: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      11: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7219#7394 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7219#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7398 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7252#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 84:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7105#7400 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7105#7400 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(11) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      ##a#7401 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(11),0,##a#7401::Float64,0)::Float64
      ##exp_a#7402 = (Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(GenSym(11),##a#7401::Float64)))::Float64
      GenSym(16) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      ##deriv#7403 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7402::Float64,(Base.Math.nan_dom_err)(GenSym(16),GenSym(11))::Float64))
      ####G#7385#7404 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7389#7408 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7131#7135#7389#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7402::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(17),:value)::Float64,1.0))), :((top(getfield))(GenSym(17),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7410 = GenSym(18)
      ##a2#7411 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7416 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7150#7416 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7410::Float64,##a2#7411::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(20),:value)::Float64
      GenSym(22) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7417 = GenSym(21)
      ##a2#7418 = GenSym(22)
      ##div_a#7419 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7417::Float64,##a2#7418::Float64))
      ####afactor#7157#7420 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7418::Float64))
      ####bfactor#7158#7421 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7417::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7418::Float64,##a2#7418::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7426 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7155#7163#7426 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7419::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7119#7430 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7119#7430 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(23),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7453::Tuple{}
  ##xs#7454::Tuple{}
  ######fx#1710#1711#7455::Float64
  ####fy#1712#7456::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      GenSym(8) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 130:
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      ####fy#1712#7456 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(28) = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(ξ::Float64,####fy#1712#7456::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(ξ::Float64,####fy#1712#7456::Float64)::Bool,(Base.lt_float)(####fy#1712#7456::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#1712#7456::Float64)),0)::Bool))))
      ######fx#1710#1711#7455 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(29) = ((top(getfield))(Base.Intrinsics,:select_value)::I)(GenSym(28),(Base.box)(Float64,(Base.sitofp)(Float64,-1)),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#1710#1711#7455::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#1710#1711#7455::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#1710#1711#7455::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#1710#1711#7455::Float64)))::Bool)))))),(Base.box)(Float64,(Base.sitofp)(Float64,1)),ξ::Float64)::Float64)::Float64
      GenSym(27) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,3.0,0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(21) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(20) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      GenSym(24) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(21),0,GenSym(20),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g1::Float64)),g2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(27),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,3.0)))::Float64)))))),(Base.Math.nan_dom_err)(GenSym(24),(Base.box)(Base.Float64,(Base.add_float)(GenSym(21),GenSym(20))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 133:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7453::Tuple{}
  ##xs#7454::Tuple{}
  ######fx#1710#1711#7455::Float64
  ####fy#1712#7456::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      GenSym(8) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 130:
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      ####fy#1712#7456 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(28) = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(ξ::Float64,####fy#1712#7456::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(ξ::Float64,####fy#1712#7456::Float64)::Bool,(Base.lt_float)(####fy#1712#7456::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#1712#7456::Float64)),0)::Bool))))
      ######fx#1710#1711#7455 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(29) = ((top(getfield))(Base.Intrinsics,:select_value)::I)(GenSym(28),(Base.box)(Float64,(Base.sitofp)(Float64,-1)),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#1710#1711#7455::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#1710#1711#7455::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#1710#1711#7455::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#1710#1711#7455::Float64)))::Bool)))))),(Base.box)(Float64,(Base.sitofp)(Float64,1)),ξ::Float64)::Float64)::Float64
      GenSym(27) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,3.0,0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(21) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(20) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      GenSym(24) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(21),0,GenSym(20),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g1::Float64)),g2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(27),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,3.0)))::Float64)))))),(Base.Math.nan_dom_err)(GenSym(24),(Base.box)(Base.Float64,(Base.add_float)(GenSym(21),GenSym(20))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 133:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7103#7104#7106#7499::Tuple{}
  ######_var0#7105#7107#7500::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7501::Tuple{}
  ########tup#7127#7217#7227#7502::Tuple{}
  ########x#7128#7218#7228#7503::Float64
  ######_var0#7219#7229#7504::Tuple{}
  ########types#7120#7220#7230#7505::Tuple{Type{Float64}}
  ##a#7506::Float64
  ##exp_a#7507::Float64
  ##deriv#7508::Float64
  ####G#7212#7509::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7510::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7511::Tuple{}
  ##########x#7128#7130#7134#7215#7512::Float64
  ########_var0#7131#7135#7216#7513::Tuple{}
  ######a#7248#7250#7514::Tuple{}
  ######b#7249#7251#7515::Tuple{}
  ####_var0#7252#7516::Tuple{}
  ##a#7517::Float64
  ##exp_a#7518::Float64
  ##deriv#7519::Float64
  ####G#7212#7520::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7521::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7522::Tuple{}
  ##########x#7128#7130#7134#7215#7523::Float64
  ########_var0#7131#7135#7216#7524::Tuple{}
  ##a#7525::Float64
  ##exp_a#7526::Float64
  ##deriv#7527::Float64
  ####G#7212#7528::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7529::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7530::Tuple{}
  ##########x#7128#7130#7134#7215#7531::Float64
  ########_var0#7131#7135#7216#7532::Tuple{}
  ########tup#7127#7217#7227#7533::Tuple{}
  ########x#7128#7218#7228#7534::Float64
  ######_var0#7219#7229#7535::Tuple{}
  ########types#7120#7220#7230#7536::Tuple{Type{Float64}}
  ##xs#7537::Tuple{}
  ##########tup#7127#7217#7227#7488#7538::Tuple{}
  ##########x#7128#7218#7228#7489#7539::Float64
  ########_var0#7219#7229#7490#7540::Tuple{}
  ##########types#7120#7220#7230#7491#7541::Tuple{Type{Float64}}
  ####a1#7492#7542::Float64
  ####a2#7493#7543::Float64
  ########a#7142#7146#7494#7544::Tuple{}
  ########b#7143#7147#7495#7545::Tuple{}
  ########afactor#7144#7148#7496#7546::Float64
  ########bfactor#7145#7149#7497#7547::Float64
  ######_var0#7150#7498#7548::Tuple{}
  ######a#7248#7250#7549::Tuple{}
  ######b#7249#7251#7550::Tuple{}
  ####_var0#7252#7551::Tuple{}
  ######a#7115#7117#7552::Tuple{}
  ######b#7116#7118#7553::Tuple{}
  ####_var0#7119#7554::Tuple{}
  ##a1#7555::Float64
  ##a2#7556::Float64
  ######a#7142#7146#7557::Tuple{}
  ######b#7143#7147#7558::Tuple{}
  ######afactor#7144#7148#7559::Float64
  ######bfactor#7145#7149#7560::Float64
  ####_var0#7150#7561::Tuple{}
  ##a1#7562::Float64
  ##a2#7563::Float64
  ##div_a#7564::Float64
  ####afactor#7157#7565::Float64
  ####bfactor#7158#7566::Float64
  ########a#7142#7151#7159#7567::Tuple{}
  ########b#7143#7152#7160#7568::Tuple{}
  ########afactor#7144#7153#7161#7569::Float64
  ########bfactor#7145#7154#7162#7570::Float64
  ######_var0#7155#7163#7571::Tuple{}
  ######types#7156#7164#7572::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(42) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(43) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(44) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(45) = GenSym(42)
      GenSym(46) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(45)
      #s25 = GenSym(46)
      GenSym(47) = GenSym(43)
      GenSym(48) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(47)
      #s25 = GenSym(48)
      GenSym(49) = GenSym(44)
      GenSym(50) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(49)
      #s25 = GenSym(50) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7500 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7105#7107#7500 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      $(Expr(:boundscheck, false))
      ######_var0#7219#7229#7504 = (top(tuple))()::Tuple{}
      goto 19
      ######_var0#7219#7229#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      g1 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      g2 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 130:
      g3 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},3)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      GenSym(35) = (Distributions.sign)(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7219#7229#7490#7540 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7219#7229#7490#7540 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(32) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(33) = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7492#7542 = GenSym(32)
      ####a2#7493#7543 = GenSym(33)
      $(Expr(:boundscheck, false))
      ######_var0#7150#7498#7548 = (top(tuple))()::Tuple{}
      goto 35
      ######_var0#7150#7498#7548 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7492#7542::Float64,####a2#7493#7543::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7551 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7252#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7525 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7525::Float64,0,3.0,0)::Float64
      ##exp_a#7526 = (Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a#7525::Float64,3.0)))::Float64
      GenSym(27) = (Base.box)(Base.Float64,(Base.sub_float)(3.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7525::Float64,0,GenSym(27),0)::Float64
      ##deriv#7527 = (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(##a#7525::Float64,GenSym(27))))::Float64))
      ####G#7212#7528 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7532 = (top(tuple))()::Tuple{}
      goto 30
      ########_var0#7131#7135#7216#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7526::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7219#7229#7535 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7219#7229#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      $(Expr(:boundscheck, false))
      ####_var0#7119#7554 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7119#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(36) = (top(getfield))(GenSym(35),:value)::Float64
      GenSym(37) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(34),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(31),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7555 = GenSym(36)
      ##a2#7556 = GenSym(37)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7561 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7150#7561 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(38) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7555::Float64,##a2#7556::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7506 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7506::Float64,0,2.0,0)::Float64
      ##exp_a#7507 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7506::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7506::Float64,0,GenSym(11),0)::Float64
      ##deriv#7508 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7506::Float64,GenSym(11))))::Float64))
      ####G#7212#7509 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7513 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7131#7135#7216#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7507::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7516 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7252#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(16) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      ##a#7517 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7517::Float64,0,GenSym(16),0)::Float64
      ##exp_a#7518 = (Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a#7517::Float64,GenSym(16))))::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(16),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(23) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7517::Float64,0,GenSym(20),0)::Float64
      ##deriv#7519 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(16),(Base.Math.nan_dom_err)(GenSym(23),(Base.box)(Base.Float64,(Base.add_float)(##a#7517::Float64,GenSym(20))))::Float64))
      ####G#7212#7520 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7524 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7131#7135#7216#7524 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7518::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(40) = (top(getfield))(GenSym(38),:value)::Float64
      GenSym(41) = (top(getfield))(GenSym(39),:value)::Float64
      ##a1#7562 = GenSym(40)
      ##a2#7563 = GenSym(41)
      ##div_a#7564 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7562::Float64,##a2#7563::Float64))
      ####afactor#7157#7565 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7563::Float64))
      ####bfactor#7158#7566 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7562::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7563::Float64,##a2#7563::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7571 = (top(tuple))()::Tuple{}
      goto 43
      ######_var0#7155#7163#7571 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7564::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 133:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7573::Tuple{}
  ##xs#7574::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(29) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(30)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(34)
      #s25 = GenSym(35)
      GenSym(36) = GenSym(31)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(36)
      #s25 = GenSym(37) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(12.0,5.0)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 146:
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,4.0,0)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(19),0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g1::Float64)),g3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,g2::Float64)),(Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,4.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(GenSym(19),2.0)))::Float64)),3.0))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 149:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7573::Tuple{}
  ##xs#7574::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(29) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(30)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(34)
      #s25 = GenSym(35)
      GenSym(36) = GenSym(31)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(36)
      #s25 = GenSym(37) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)(12.0,5.0)),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 146:
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,4.0,0)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(19),0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g1::Float64)),g3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,g2::Float64)),(Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,4.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(GenSym(19),2.0)))::Float64)),3.0))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 149:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7103#7104#7106#7575::Tuple{}
  ######_var0#7105#7107#7576::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7127#7217#7227#7577::Tuple{}
  ########x#7128#7218#7228#7578::Float64
  ######_var0#7219#7229#7579::Tuple{}
  ########types#7120#7220#7230#7580::Tuple{Type{Float64}}
  ##a#7581::Float64
  ##exp_a#7582::Float64
  ##deriv#7583::Float64
  ####G#7212#7584::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7585::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7586::Tuple{}
  ##########x#7128#7130#7134#7215#7587::Float64
  ########_var0#7131#7135#7216#7588::Tuple{}
  ######a#7248#7250#7589::Tuple{}
  ######b#7249#7251#7590::Tuple{}
  ####_var0#7252#7591::Tuple{}
  ##a#7592::Float64
  ##exp_a#7593::Float64
  ##deriv#7594::Float64
  ####G#7212#7595::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7596::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7597::Tuple{}
  ##########x#7128#7130#7134#7215#7598::Float64
  ########_var0#7131#7135#7216#7599::Tuple{}
  ##a#7600::Float64
  ##exp_a#7601::Float64
  ##deriv#7602::Float64
  ####G#7212#7603::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7604::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7605::Tuple{}
  ##########x#7128#7130#7134#7215#7606::Float64
  ########_var0#7131#7135#7216#7607::Tuple{}
  ########tup#7127#7217#7227#7608::Tuple{}
  ########x#7128#7218#7228#7609::Float64
  ######_var0#7219#7229#7610::Tuple{}
  ########types#7120#7220#7230#7611::Tuple{Type{Float64}}
  ##a#7612::Float64
  ##exp_a#7613::Float64
  ##deriv#7614::Float64
  ####G#7212#7615::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7213#7616::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7214#7617::Tuple{}
  ##########x#7128#7130#7134#7215#7618::Float64
  ########_var0#7131#7135#7216#7619::Tuple{}
  ##xs#7620::Tuple{}
  ##########tup#7127#7217#7227#7488#7621::Tuple{}
  ##########x#7128#7218#7228#7489#7622::Float64
  ########_var0#7219#7229#7490#7623::Tuple{}
  ##########types#7120#7220#7230#7491#7624::Tuple{Type{Float64}}
  ####a1#7492#7625::Float64
  ####a2#7493#7626::Float64
  ########a#7142#7146#7494#7627::Tuple{}
  ########b#7143#7147#7495#7628::Tuple{}
  ########afactor#7144#7148#7496#7629::Float64
  ########bfactor#7145#7149#7497#7630::Float64
  ######_var0#7150#7498#7631::Tuple{}
  ##xs#7632::Tuple{}
  ##########tup#7127#7217#7227#7488#7633::Tuple{}
  ##########x#7128#7218#7228#7489#7634::Float64
  ########_var0#7219#7229#7490#7635::Tuple{}
  ##########types#7120#7220#7230#7491#7636::Tuple{Type{Float64}}
  ####a1#7492#7637::Float64
  ####a2#7493#7638::Float64
  ########a#7142#7146#7494#7639::Tuple{}
  ########b#7143#7147#7495#7640::Tuple{}
  ########afactor#7144#7148#7496#7641::Float64
  ########bfactor#7145#7149#7497#7642::Float64
  ######_var0#7150#7498#7643::Tuple{}
  ######a#7248#7250#7644::Tuple{}
  ######b#7249#7251#7645::Tuple{}
  ####_var0#7252#7646::Tuple{}
  ######a#7115#7117#7647::Tuple{}
  ######b#7116#7118#7648::Tuple{}
  ####_var0#7119#7649::Tuple{}
  ######a#7248#7250#7650::Tuple{}
  ######b#7249#7251#7651::Tuple{}
  ####_var0#7252#7652::Tuple{}
  ##a1#7653::Float64
  ##a2#7654::Float64
  ##div_a#7655::Float64
  ####afactor#7157#7656::Float64
  ####bfactor#7158#7657::Float64
  ########a#7142#7151#7159#7658::Tuple{}
  ########b#7143#7152#7160#7659::Tuple{}
  ########afactor#7144#7153#7161#7660::Float64
  ########bfactor#7145#7154#7162#7661::Float64
  ######_var0#7155#7163#7662::Tuple{}
  ######types#7156#7164#7663::Tuple{Type{Float64}}
  ######types#7120#7141#7664::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(45) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(46) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(47) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(48) = GenSym(45)
      GenSym(49) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(48)
      #s25 = GenSym(49)
      GenSym(50) = GenSym(46)
      GenSym(51) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(50)
      #s25 = GenSym(51)
      GenSym(52) = GenSym(47)
      GenSym(53) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(52)
      #s25 = GenSym(53) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7576 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7105#7107#7576 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      $(Expr(:boundscheck, false))
      ######_var0#7219#7229#7579 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7219#7229#7579 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(12.0,5.0))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      g1 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      g2 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      g3 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},3)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 146:
      g4 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},4)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      $(Expr(:boundscheck, false))
      ########_var0#7219#7229#7490#7635 = (top(tuple))()::Tuple{}
      goto 35
      ########_var0#7219#7229#7490#7635 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(37) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(38) = (top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7492#7637 = GenSym(37)
      ####a2#7493#7638 = GenSym(38)
      $(Expr(:boundscheck, false))
      ######_var0#7150#7498#7643 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7150#7498#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7492#7637::Float64,####a2#7493#7638::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7646 = (top(tuple))()::Tuple{}
      goto 38
      ####_var0#7252#7646 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      ##a#7612 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7612::Float64,0,2.0,0)::Float64
      ##exp_a#7613 = (Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(##a#7612::Float64,2.0)))::Float64
      GenSym(30) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7612::Float64,0,GenSym(30),0)::Float64
      ##deriv#7614 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(##a#7612::Float64,GenSym(30))))::Float64))
      ####G#7212#7615 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7619 = (top(tuple))()::Tuple{}
      goto 30
      ########_var0#7131#7135#7216#7619 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7613::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7219#7229#7490#7623 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7219#7229#7490#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(35) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(36) = (top(getfield))(GenSym(34),:value)::Float64
      ####a1#7492#7625 = GenSym(35)
      ####a2#7493#7626 = GenSym(36)
      $(Expr(:boundscheck, false))
      ######_var0#7150#7498#7631 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7150#7498#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(40) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7492#7625::Float64,####a2#7493#7626::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7119#7649 = (top(tuple))()::Tuple{}
      goto 40
      ####_var0#7119#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      ##a#7600 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7600::Float64,0,4.0,0)::Float64
      ##exp_a#7601 = (Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a#7600::Float64,4.0)))::Float64
      GenSym(22) = (Base.box)(Base.Float64,(Base.sub_float)(4.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7600::Float64,0,GenSym(22),0)::Float64
      ##deriv#7602 = (Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(##a#7600::Float64,GenSym(22))))::Float64))
      ####G#7212#7603 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7607 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7131#7135#7216#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7601::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7219#7229#7610 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7219#7229#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      $(Expr(:boundscheck, false))
      ####_var0#7252#7652 = (top(tuple))()::Tuple{}
      goto 42
      ####_var0#7252#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      ##a#7581 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7581::Float64,0,2.0,0)::Float64
      ##exp_a#7582 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(##a#7581::Float64,2.0)))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7581::Float64,0,GenSym(7),0)::Float64
      ##deriv#7583 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7581::Float64,GenSym(7))))::Float64))
      ####G#7212#7584 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7588 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7131#7135#7216#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7582::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7252#7591 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7252#7591 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      ##a#7592 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7592::Float64,0,2.0,0)::Float64
      ##exp_a#7593 = (Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7592::Float64,2.0)))::Float64
      GenSym(15) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7592::Float64,0,GenSym(15),0)::Float64
      ##deriv#7594 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7592::Float64,GenSym(15))))::Float64))
      ####G#7212#7595 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7216#7599 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7131#7135#7216#7599 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(41) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7593::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(42) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(39),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(40),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(26),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(43) = (top(getfield))(GenSym(41),:value)::Float64
      ##a1#7653 = GenSym(42)
      ##a2#7654 = GenSym(43)
      ##div_a#7655 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7653::Float64,##a2#7654::Float64))
      ####afactor#7157#7656 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7654::Float64))
      ####bfactor#7158#7657 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7653::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7654::Float64,##a2#7654::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7662 = (top(tuple))()::Tuple{}
      goto 44
      ######_var0#7155#7163#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      GenSym(44) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7655::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(44),:value)::Float64,3.0))), :((top(getfield))(GenSym(44),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 149:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  ##xs#7665::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 154:
      GenSym(6) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 155:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),σ::Float64)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,ξ::Float64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  ##xs#7665::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 154:
      GenSym(6) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 155:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),σ::Float64)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,ξ::Float64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7108#7111#7671#7679::Tuple{}
  ########x#7109#7112#7672#7680::Irrational{:γ}
  ######_var0#7113#7673#7681::Tuple{}
  ########types#7110#7114#7674#7682::Tuple{Type{Irrational{:γ}}}
  ##a#7683::Float64
  ####G#7666#7684::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7667#7685::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7668#7686::Tuple{}
  ##########x#7128#7130#7134#7669#7687::Float64
  ########_var0#7131#7135#7670#7688::Tuple{}
  ##xs#7689::Tuple{}
  ########a#7115#7117#7675#7690::Tuple{}
  ########b#7116#7118#7676#7691::Tuple{}
  ######_var0#7119#7677#7692::Tuple{}
  ########types#7120#7317#7678#7693::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 154:
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(9)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(10)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 155:
      ##a#7683 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7683::Float64,0)::Float64
      ####G#7666#7684 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7670#7688 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7131#7135#7670#7688 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7683::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7113#7673#7681 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7113#7673#7681 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7119#7677#7692 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7119#7677#7692 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  u::Float64
  rd::Float64
  ####_var0#7696#7698::UNION{BOOL,INT64}
  ########_var0#7694#7695#7697#7699::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 260:
      NewvarNode(:rd)
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(19)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(20)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7696#7698 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7696#7698 = false
      9: 
      ####_var0#7696#7698::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7694#7695#7697#7699 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7694#7695#7697#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7694#7695#7697#7699::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 265:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 268:
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64)),(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64)),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.div_float)(GenSym(17),ξ::Float64))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 271:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,rd::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  u::Float64
  rd::Float64
  ####_var0#7696#7698::UNION{BOOL,INT64}
  ########_var0#7694#7695#7697#7699::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 260:
      NewvarNode(:rd)
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(19)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(20)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7696#7698 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7696#7698 = false
      9: 
      ####_var0#7696#7698::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7694#7695#7697#7699 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7694#7695#7697#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7694#7695#7697#7699::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 265:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 268:
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64)),(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64)),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.div_float)(GenSym(17),ξ::Float64))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 271:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,rd::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::Float64
  rd::ANY
  ####_var0#7696#7708::UNION{BOOL,INT64}
  ########_var0#7694#7695#7697#7709::Float64
  ########tup#7103#7104#7106#7710::Tuple{}
  ######_var0#7105#7107#7711::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7103#7104#7712::Tuple{}
  ####_var0#7105#7713::Tuple{}
  ######tup#7127#7217#7714::Tuple{}
  ######x#7128#7218#7715::Float64
  ####_var0#7219#7716::Tuple{}
  ######types#7120#7220#7717::Tuple{Type{Float64}}
  ##a#7718::Float64
  ####G#7703#7719::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7704#7720::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7705#7721::Tuple{}
  ##########x#7128#7130#7134#7706#7722::Float64
  ########_var0#7131#7135#7707#7723::Tuple{}
  ##a1#7724::Float64
  ##a2#7725::Float64
  ##div_a#7726::Float64
  ####afactor#7157#7727::Float64
  ####bfactor#7158#7728::Float64
  ########a#7142#7151#7159#7729::Tuple{}
  ########b#7143#7152#7160#7730::Tuple{}
  ########afactor#7144#7153#7161#7731::Float64
  ########bfactor#7145#7154#7162#7732::Float64
  ######_var0#7155#7163#7733::Tuple{}
  ######types#7156#7164#7734::Tuple{Type{Float64}}
  ######a#7115#7117#7735::Tuple{}
  ######b#7116#7118#7736::Tuple{}
  ####_var0#7119#7737::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 260:
      NewvarNode(:rd)
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(23)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28)
      GenSym(29) = GenSym(24)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(29)
      #s25 = GenSym(30) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7696#7708 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7696#7708 = false
      9: 
      ####_var0#7696#7708::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7694#7695#7697#7709 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7694#7695#7697#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7694#7695#7697#7709::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 265:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 15
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7711 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7105#7107#7711 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 16
      15: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      16: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 268:
      $(Expr(:boundscheck, false))
      ####_var0#7105#7713 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7105#7713 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7219#7716 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7219#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##a#7718 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7718::Float64,0)::Float64
      (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7718::Float64,0)::Float64
      ####G#7703#7719 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7707#7723 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7131#7135#7707#7723 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(18), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(20) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7724 = GenSym(19)
      ##a2#7725 = GenSym(20)
      ##div_a#7726 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7724::Float64,##a2#7725::Float64))
      ####afactor#7157#7727 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7725::Float64))
      ####bfactor#7158#7728 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7724::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7725::Float64,##a2#7725::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7733 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7155#7163#7733 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      rd = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7726::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 271:
      GenSym(21) = σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * rd::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7119#7737 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7119#7737 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  z::Float64
  t::Float64
  ####fy#2548#7740::Float64
  ####fy#2548#7741::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 198:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7740 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7740::Float64)::Bool,(Base.ne_float)(####fy#2548#7740::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7740::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7741 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7741::Float64)::Bool,(Base.ne_float)(####fy#2548#7741::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7741::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{Float64},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(21)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(22)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 205:
      t = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(z::Float64)),0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      GenSym(8) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(t::Float64,GenSym(8))),σ::Float64))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 208:
      unless (Base.eq_float)((Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64)),-1.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 211:
      GenSym(10) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64))))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),ξ::Float64))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,GenSym(9),0)::Float64
      t = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),GenSym(9))))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 212:
      GenSym(15) = (Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,1.0))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,t::Float64,0,GenSym(15),0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(t::Float64,GenSym(15))))::Float64,GenSym(19))),σ::Float64))
      6: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  z::Float64
  t::Float64
  ####fy#2548#7740::Float64
  ####fy#2548#7741::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 198:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7740 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7740::Float64)::Bool,(Base.ne_float)(####fy#2548#7740::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7740::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7741 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7741::Float64)::Bool,(Base.ne_float)(####fy#2548#7741::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7741::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{Float64},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(21)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(22)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 205:
      t = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(z::Float64)),0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      GenSym(8) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(t::Float64,GenSym(8))),σ::Float64))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 208:
      unless (Base.eq_float)((Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64)),-1.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 211:
      GenSym(10) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64))))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),ξ::Float64))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,GenSym(9),0)::Float64
      t = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),GenSym(9))))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 212:
      GenSym(15) = (Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,1.0))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,t::Float64,0,GenSym(15),0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(t::Float64,GenSym(15))))::Float64,GenSym(19))),σ::Float64))
      6: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#2548#7786::Float64
  ####fy#2548#7787::Float64
  ######tup#7103#7232#7788::Tuple{}
  ####_var0#7233#7789::Tuple{}
  ######types#7231#7234#7790::Tuple{Type{Int64}}
  ##a1#7791::Float64
  ##a2#7792::Float64
  ##div_a#7793::Float64
  ####afactor#7157#7794::Float64
  ####bfactor#7158#7795::Float64
  ########a#7142#7151#7159#7796::Tuple{}
  ########b#7143#7152#7160#7797::Tuple{}
  ########afactor#7144#7153#7161#7798::Float64
  ########bfactor#7145#7154#7162#7799::Float64
  ######_var0#7155#7163#7800::Tuple{}
  ######types#7156#7164#7801::Tuple{Type{Float64}}
  ########tup#7103#7104#7106#7802::Tuple{}
  ######_var0#7105#7107#7803::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7103#7104#7804::Tuple{}
  ####_var0#7105#7805::Tuple{}
  ##exp_a#7806::Float64
  ####G#7776#7807::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7777#7808::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7778#7809::Tuple{}
  ##########x#7128#7130#7134#7779#7810::Float64
  ########_var0#7131#7135#7780#7811::Tuple{}
  ######tup#7103#7104#7812::Tuple{}
  ####_var0#7105#7813::Tuple{}
  ##exp_a#7814::Float64
  ####G#7776#7815::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7777#7816::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7778#7817::Tuple{}
  ##########x#7128#7130#7134#7779#7818::Float64
  ########_var0#7131#7135#7780#7819::Tuple{}
  ##a1#7820::Float64
  ##a2#7821::Float64
  ######a#7142#7146#7822::Tuple{}
  ######b#7143#7147#7823::Tuple{}
  ######afactor#7144#7148#7824::Float64
  ######bfactor#7145#7149#7825::Float64
  ####_var0#7150#7826::Tuple{}
  ##a1#7827::Float64
  ##a2#7828::Float64
  ##div_a#7829::Float64
  ####afactor#7157#7830::Float64
  ####bfactor#7158#7831::Float64
  ########a#7142#7151#7159#7832::Tuple{}
  ########b#7143#7152#7160#7833::Tuple{}
  ########afactor#7144#7153#7161#7834::Float64
  ########bfactor#7145#7154#7162#7835::Float64
  ######_var0#7155#7163#7836::Tuple{}
  ######types#7156#7164#7837::Tuple{Type{Float64}}
  ##a1#7838::Float64
  ##a2#7839::Float64
  ######a#7142#7146#7840::Tuple{}
  ######b#7143#7147#7841::Tuple{}
  ######afactor#7144#7148#7842::Float64
  ######bfactor#7145#7149#7843::Float64
  ####_var0#7150#7844::Tuple{}
  _var1::Bool
  ##a#7845::Float64
  ##div_a#7846::Float64
  ##deriv#7847::Float64
  ####G#7781#7848::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7782#7849::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7783#7850::Tuple{}
  ##########x#7128#7130#7134#7784#7851::Float64
  ########_var0#7131#7135#7785#7852::Tuple{}
  ##a1#7853::Float64
  ##a2#7854::Float64
  ######a#7142#7146#7855::Tuple{}
  ######b#7143#7147#7856::Tuple{}
  ######afactor#7144#7148#7857::Float64
  ######bfactor#7145#7149#7858::Float64
  ####_var0#7150#7859::Tuple{}
  ########types#7120#7317#7318#7860::Tuple{Type{Float64}}
  ##a1#7861::Float64
  ##a2#7862::Float64
  ##exp_a#7863::Float64
  ##powval#7864::Float64
  ##logval#7865::Float64
  ##new_bs#7866::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7319#7867::Float64
  ####exp_a#7320#7868::Float64
  ####deriv#7321#7869::Float64
  ######G#7212#7322#7870::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7126#7132#7213#7323#7871::Tuple{Type{Float64},Type{Float64}}
  ############tup#7127#7129#7133#7214#7324#7872::Tuple{}
  ############x#7128#7130#7134#7215#7325#7873::Float64
  ##########_var0#7131#7135#7216#7326#7874::Tuple{}
  ######a#7142#7327#7875::Tuple{}
  ######b#7143#7328#7876::Tuple{}
  ######afactor#7144#7329#7877::Float64
  ######bfactor#7145#7330#7878::Float64
  ####_var0#7331#7879::Tuple{}
  ######types#7156#7332#7880::Tuple{Type{Float64}}
  _var2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7103#7104#7881::Tuple{}
  ####_var0#7105#7882::Tuple{}
  ##exp_a#7883::Float64
  ####G#7776#7884::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7126#7132#7777#7885::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7127#7129#7133#7778#7886::Tuple{}
  ##########x#7128#7130#7134#7779#7887::Float64
  ########_var0#7131#7135#7780#7888::Tuple{}
  ######types#7120#7317#7889::Tuple{Type{Float64}}
  ##a1#7890::Float64
  ##a2#7891::Float64
  ##exp_a#7892::Float64
  ##powval#7893::Float64
  ##logval#7894::Float64
  ##new_bs#7895::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7319#7896::Float64
  ####exp_a#7320#7897::Float64
  ####deriv#7321#7898::Float64
  ######G#7212#7322#7899::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7126#7132#7213#7323#7900::Tuple{Type{Float64},Type{Float64}}
  ############tup#7127#7129#7133#7214#7324#7901::Tuple{}
  ############x#7128#7130#7134#7215#7325#7902::Float64
  ##########_var0#7131#7135#7216#7326#7903::Tuple{}
  ######a#7142#7327#7904::Tuple{}
  ######b#7143#7328#7905::Tuple{}
  ######afactor#7144#7329#7906::Float64
  ######bfactor#7145#7330#7907::Float64
  ####_var0#7331#7908::Tuple{}
  ######types#7156#7332#7909::Tuple{Type{Float64}}
  _var3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7910::Float64
  ##a2#7911::Float64
  ######a#7142#7146#7912::Tuple{}
  ######b#7143#7147#7913::Tuple{}
  ######afactor#7144#7148#7914::Float64
  ######bfactor#7145#7149#7915::Float64
  ####_var0#7150#7916::Tuple{}
  ##a1#7917::Float64
  ##a2#7918::Float64
  ##div_a#7919::Float64
  ####afactor#7157#7920::Float64
  ####bfactor#7158#7921::Float64
  ########a#7142#7151#7159#7922::Tuple{}
  ########b#7143#7152#7160#7923::Tuple{}
  ########afactor#7144#7153#7161#7924::Float64
  ########bfactor#7145#7154#7162#7925::Float64
  ######_var0#7155#7163#7926::Tuple{}
  ######types#7156#7164#7927::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 198:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7786 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7786::Float64)::Bool,(Base.ne_float)(####fy#2548#7786::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7786::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7787 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7787::Float64)::Bool,(Base.ne_float)(####fy#2548#7787::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7787::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      GenSym(71) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(72) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(73) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(74) = GenSym(71)
      GenSym(75) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(74)
      #s25 = GenSym(75)
      GenSym(76) = GenSym(72)
      GenSym(77) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(76)
      #s25 = GenSym(77)
      GenSym(78) = GenSym(73)
      GenSym(79) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(78)
      #s25 = GenSym(79) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      $(Expr(:boundscheck, false))
      ####_var0#7233#7789 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7233#7789 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7791 = GenSym(6)
      ##a2#7792 = GenSym(7)
      ##div_a#7793 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7791::Float64,##a2#7792::Float64))
      ####afactor#7157#7794 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7792::Float64))
      ####bfactor#7158#7795 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7791::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7792::Float64,##a2#7792::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7800 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7155#7163#7800 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7793::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 24
      $(Expr(:boundscheck, false))
      ######_var0#7105#7107#7803 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7105#7107#7803 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      24: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      25: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 205:
      $(Expr(:boundscheck, false))
      ####_var0#7105#7805 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7105#7805 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##exp_a#7806 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7776#7807 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7780#7811 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7131#7135#7780#7811 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      t = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7806::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      $(Expr(:boundscheck, false))
      ####_var0#7105#7813 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7105#7813 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      ##exp_a#7814 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7776#7815 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7780#7819 = (top(tuple))()::Tuple{}
      goto 33
      ########_var0#7131#7135#7780#7819 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7814::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7820 = GenSym(11)
      ##a2#7821 = GenSym(12)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7826 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7150#7826 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7820::Float64,##a2#7821::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7827 = GenSym(14)
      ##a2#7828 = GenSym(15)
      ##div_a#7829 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7827::Float64,##a2#7828::Float64))
      ####afactor#7157#7830 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7828::Float64))
      ####bfactor#7158#7831 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7827::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7828::Float64,##a2#7828::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7836 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7155#7163#7836 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7829::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 208:
      GenSym(16) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(17) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7838 = GenSym(16)
      ##a2#7839 = GenSym(17)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7844 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7150#7844 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(18) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7838::Float64,##a2#7839::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (ForwardDiff.iszero)((top(getfield))(GenSym(18),:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 41
      _var1 = (Base.eq_float)((top(getfield))(GenSym(18),:value)::Float64,-1.0)::Bool
      goto 42
      41: 
      _var1 = false
      42: 
      unless _var1::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 211:
      GenSym(19) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(20) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7853 = GenSym(19)
      ##a2#7854 = GenSym(20)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7859 = (top(tuple))()::Tuple{}
      goto 47
      ####_var0#7150#7859 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7853::Float64,##a2#7854::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7845 = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7846 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),##a#7845::Float64))
      ##deriv#7847 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7846::Float64,##a#7845::Float64))))
      ####G#7781#7848 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7785#7852 = (top(tuple))()::Tuple{}
      goto 45
      ########_var0#7131#7135#7785#7852 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(21),:value)::Float64,1.0))), :((top(getfield))(GenSym(21),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7846::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7861"))
      NewvarNode(symbol("##a2#7862"))
      NewvarNode(symbol("##exp_a#7863"))
      NewvarNode(symbol("##powval#7864"))
      NewvarNode(symbol("##logval#7865"))
      NewvarNode(symbol("##new_bs#7866"))
      unless (top(getfield))((top(getfield))(GenSym(22),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 51
      GenSym(26) = (top(getfield))(GenSym(22),:value)::Float64
      ####a#7319#7867 = (top(getfield))(GenSym(23),:value)::Float64
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7319#7867::Float64,0,GenSym(26),0)::Float64
      ####exp_a#7320#7868 = (Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(####a#7319#7867::Float64,GenSym(26))))::Float64
      GenSym(30) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(26),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7319#7867::Float64,0,GenSym(30),0)::Float64
      ####deriv#7321#7869 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(26),(Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7319#7867::Float64,GenSym(30))))::Float64))
      ######G#7212#7322#7870 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7131#7135#7216#7326#7874 = (top(tuple))()::Tuple{}
      goto 50
      ##########_var0#7131#7135#7216#7326#7874 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      50: 
      _var2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7320#7868::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 53
      51: 
      GenSym(24) = (top(getfield))(GenSym(23),:value)::Float64
      GenSym(25) = (top(getfield))(GenSym(22),:value)::Float64
      ##a1#7861 = GenSym(24)
      ##a2#7862 = GenSym(25)
      GenSym(36) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7861::Float64,0,##a2#7862::Float64,0)::Float64
      ##exp_a#7863 = (Base.Math.nan_dom_err)(GenSym(36),(Base.box)(Base.Float64,(Base.add_float)(##a1#7861::Float64,##a2#7862::Float64)))::Float64
      GenSym(37) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7862::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7861::Float64,0,GenSym(37),0)::Float64
      ##powval#7864 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7862::Float64,(Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7861::Float64,GenSym(37))))::Float64))
      GenSym(42) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7861::Float64,0)::Float64
      ##logval#7865 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7863::Float64,(Base.Math.nan_dom_err)(GenSym(42),##a1#7861::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7331#7879 = (top(tuple))()::Tuple{}
      goto 52
      ####_var0#7331#7879 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      52: 
      ##new_bs#7866 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7863::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      53: 
      t = _var2::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 212:
      GenSym(44) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7890"))
      NewvarNode(symbol("##a2#7891"))
      NewvarNode(symbol("##exp_a#7892"))
      NewvarNode(symbol("##powval#7893"))
      NewvarNode(symbol("##logval#7894"))
      NewvarNode(symbol("##new_bs#7895"))
      unless (top(getfield))((top(getfield))(GenSym(44),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 60
      GenSym(47) = (top(getfield))(GenSym(44),:value)::Float64
      ####a#7319#7896 = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(50) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7319#7896::Float64,0,GenSym(47),0)::Float64
      ####exp_a#7320#7897 = (Base.Math.nan_dom_err)(GenSym(50),(Base.box)(Base.Float64,(Base.add_float)(####a#7319#7896::Float64,GenSym(47))))::Float64
      GenSym(51) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(47),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(54) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7319#7896::Float64,0,GenSym(51),0)::Float64
      ####deriv#7321#7898 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(47),(Base.Math.nan_dom_err)(GenSym(54),(Base.box)(Base.Float64,(Base.add_float)(####a#7319#7896::Float64,GenSym(51))))::Float64))
      ######G#7212#7322#7899 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7131#7135#7216#7326#7903 = (top(tuple))()::Tuple{}
      goto 59
      ##########_var0#7131#7135#7216#7326#7903 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      59: 
      _var3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7320#7897::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 62
      60: 
      GenSym(45) = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(46) = (top(getfield))(GenSym(44),:value)::Float64
      ##a1#7890 = GenSym(45)
      ##a2#7891 = GenSym(46)
      GenSym(57) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7890::Float64,0,##a2#7891::Float64,0)::Float64
      ##exp_a#7892 = (Base.Math.nan_dom_err)(GenSym(57),(Base.box)(Base.Float64,(Base.add_float)(##a1#7890::Float64,##a2#7891::Float64)))::Float64
      GenSym(58) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7891::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(61) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7890::Float64,0,GenSym(58),0)::Float64
      ##powval#7893 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7891::Float64,(Base.Math.nan_dom_err)(GenSym(61),(Base.box)(Base.Float64,(Base.add_float)(##a1#7890::Float64,GenSym(58))))::Float64))
      GenSym(63) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7890::Float64,0)::Float64
      ##logval#7894 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7892::Float64,(Base.Math.nan_dom_err)(GenSym(63),##a1#7890::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7331#7908 = (top(tuple))()::Tuple{}
      goto 61
      ####_var0#7331#7908 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      61: 
      ##new_bs#7895 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7892::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      62: 
      GenSym(64) = _var3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7105#7882 = (top(tuple))()::Tuple{}
      goto 54
      ####_var0#7105#7882 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      54: 
      ##exp_a#7883 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7776#7884 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7131#7135#7780#7888 = (top(tuple))()::Tuple{}
      goto 56
      ########_var0#7131#7135#7780#7888 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      56: 
      GenSym(65) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7883::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(66) = (top(getfield))(GenSym(64),:value)::Float64
      GenSym(67) = (top(getfield))(GenSym(65),:value)::Float64
      ##a1#7910 = GenSym(66)
      ##a2#7911 = GenSym(67)
      $(Expr(:boundscheck, false))
      ####_var0#7150#7916 = (top(tuple))()::Tuple{}
      goto 63
      ####_var0#7150#7916 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      63: 
      GenSym(68) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7910::Float64,##a2#7911::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(69) = (top(getfield))(GenSym(68),:value)::Float64
      GenSym(70) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7917 = GenSym(69)
      ##a2#7918 = GenSym(70)
      ##div_a#7919 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7917::Float64,##a2#7918::Float64))
      ####afactor#7157#7920 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7918::Float64))
      ####bfactor#7158#7921 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7917::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7918::Float64,##a2#7918::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7155#7163#7926 = (top(tuple))()::Tuple{}
      goto 65
      ######_var0#7155#7163#7926 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      65: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7919::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      6: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----


----float----


----dual----





____________________________
cf
____________________________

----integer----


----float----


----dual----





