____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 68:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 68:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 68:
      return (top(tuple))((top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 87:
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 90:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,0.5772156649015329))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)(ξ::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,ξ::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,1.0)))),ξ::Float64))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 87:
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 90:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,0.5772156649015329))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)(ξ::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,ξ::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,1.0)))),ξ::Float64))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7128::Tuple{}
  ######_var0#7068#7070#7129::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7071#7074#7130::Tuple{}
  ######x#7072#7075#7131::Irrational{:γ}
  ####_var0#7076#7132::Tuple{}
  ######types#7073#7077#7133::Tuple{Type{Irrational{:γ}}}
  ######a#7078#7080#7134::Tuple{}
  ######b#7079#7081#7135::Tuple{}
  ####_var0#7082#7136::Tuple{}
  ######tup#7066#7084#7137::Tuple{}
  ####_var0#7085#7138::Tuple{}
  ######types#7083#7086#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ####G#7099#7141::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7100#7142::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7101#7143::Tuple{}
  ##########x#7091#7093#7097#7102#7144::Float64
  ########_var0#7094#7098#7103#7145::Tuple{}
  ######types#7083#7104#7146::Tuple{Type{Float64}}
  ##a1#7147::Float64
  ##a2#7148::Float64
  ######a#7105#7109#7149::Tuple{}
  ######b#7106#7110#7150::Tuple{}
  ######afactor#7107#7111#7151::Float64
  ######bfactor#7108#7112#7152::Float64
  ####_var0#7113#7153::Tuple{}
  ##a1#7154::Float64
  ##a2#7155::Float64
  ##div_a#7156::Float64
  ####afactor#7120#7157::Float64
  ####bfactor#7121#7158::Float64
  ########a#7105#7114#7122#7159::Tuple{}
  ########b#7106#7115#7123#7160::Tuple{}
  ########afactor#7107#7116#7124#7161::Float64
  ########bfactor#7108#7117#7125#7162::Float64
  ######_var0#7118#7126#7163::Tuple{}
  ######types#7119#7127#7164::Tuple{Type{Float64}}
  ######a#7078#7080#7165::Tuple{}
  ######b#7079#7081#7166::Tuple{}
  ####_var0#7082#7167::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 87:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 89:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7129 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7076#7132 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7076#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      $(Expr(:boundscheck, false))
      ####_var0#7082#7136 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7082#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 91:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7085#7138 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7085#7138 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7140::Float64,0)::Float64
      GenSym(6) = (ForwardDiff.digamma)(##a#7140::Float64)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7140::Float64,0)::Float64
      ####G#7099#7141 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7103#7145 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7094#7098#7103#7145 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(8),##a#7140::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(9),:value)::Float64,1.0))), :((top(getfield))(GenSym(9),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7147 = GenSym(10)
      ##a2#7148 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7153 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7113#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7147::Float64,##a2#7148::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7154 = GenSym(13)
      ##a2#7155 = GenSym(14)
      ##div_a#7156 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7154::Float64,##a2#7155::Float64))
      ####afactor#7120#7157 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7155::Float64))
      ####bfactor#7121#7158 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7154::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7155::Float64,##a2#7155::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7163 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7118#7126#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7167 = (top(tuple))()::Tuple{}
      goto 28
      ####_var0#7082#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 94:
      return Distributions.Inf
      2: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 109:
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(27) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(28) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(29) = GenSym(26)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(27)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(31)
      #s25 = GenSym(32)
      GenSym(33) = GenSym(28)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(33)
      #s25 = GenSym(34) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 112:
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64)),6.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)(ξ::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(22) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(20),0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(1.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(16) = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(16),0,2.0,0)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,ξ::Float64,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(22),GenSym(20))::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(GenSym(16),2.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,2.0)))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 109:
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(27) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(28) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(29) = GenSym(26)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(27)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(31)
      #s25 = GenSym(32)
      GenSym(33) = GenSym(28)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(33)
      #s25 = GenSym(34) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 112:
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64)),6.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)(ξ::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,σ::Float64,0,2.0,0)::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(22) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(20),0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(1.0,(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(16) = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(16),0,2.0,0)::Float64
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,ξ::Float64,0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(σ::Float64,2.0)))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(22),GenSym(20))::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(GenSym(16),2.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,2.0)))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7218::Tuple{}
  ######_var0#7068#7070#7219::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7220::Float64
  ##exp_a#7221::Float64
  ##deriv#7222::Float64
  ####G#7177#7223::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7224::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7225::Tuple{}
  ##########x#7091#7093#7097#7180#7226::Float64
  ########_var0#7094#7098#7181#7227::Tuple{}
  ######tup#7090#7182#7228::Tuple{}
  ######x#7091#7183#7229::Float64
  ####_var0#7184#7230::Tuple{}
  ######types#7083#7185#7231::Tuple{Type{Float64}}
  ##div_a#7232::Float64
  ######tup#7186#7188#7233::Tuple{}
  ######x#7187#7189#7234::Float64
  ####_var0#7190#7235::Tuple{}
  ######types#7083#7191#7236::Tuple{Type{Float64}}
  ##a#7237::Float64
  ##exp_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7177#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7242::Tuple{}
  ##########x#7091#7093#7097#7180#7243::Float64
  ########_var0#7094#7098#7181#7244::Tuple{}
  ##a#7245::Float64
  ##exp_a#7246::Float64
  ##deriv#7247::Float64
  ####G#7177#7248::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7249::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7250::Tuple{}
  ##########x#7091#7093#7097#7180#7251::Float64
  ########_var0#7094#7098#7181#7252::Tuple{}
  ######a#7213#7215#7253::Tuple{}
  ######b#7214#7216#7254::Tuple{}
  ####_var0#7217#7255::Tuple{}
  ##a#7256::Float64
  ##exp_a#7257::Float64
  ##deriv#7258::Float64
  ####G#7177#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7260::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7261::Tuple{}
  ##########x#7091#7093#7097#7180#7262::Float64
  ########_var0#7094#7098#7181#7263::Tuple{}
  ##a1#7264::Float64
  ##a2#7265::Float64
  ######a#7105#7109#7266::Tuple{}
  ######b#7106#7110#7267::Tuple{}
  ######afactor#7107#7111#7268::Float64
  ######bfactor#7108#7112#7269::Float64
  ####_var0#7113#7270::Tuple{}
  ##a1#7271::Float64
  ##a2#7272::Float64
  ##div_a#7273::Float64
  ####afactor#7120#7274::Float64
  ####bfactor#7121#7275::Float64
  ########a#7105#7114#7122#7276::Tuple{}
  ########b#7106#7115#7123#7277::Tuple{}
  ########afactor#7107#7116#7124#7278::Float64
  ########bfactor#7108#7117#7125#7279::Float64
  ######_var0#7118#7126#7280::Tuple{}
  ######types#7119#7127#7281::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 109:
      GenSym(46) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(47) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(48) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(49) = GenSym(46)
      GenSym(50) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(49)
      #s25 = GenSym(50)
      GenSym(51) = GenSym(47)
      GenSym(52) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(51)
      #s25 = GenSym(52)
      GenSym(53) = GenSym(48)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(53)
      #s25 = GenSym(54) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 111:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7219 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 112:
      ##a#7220 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7220::Float64,0,2.0,0)::Float64
      ##exp_a#7221 = (Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(##a#7220::Float64,2.0)))::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7220::Float64,0,GenSym(10),0)::Float64
      ##deriv#7222 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a#7220::Float64,GenSym(10))))::Float64))
      ####G#7177#7223 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7227 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7094#7098#7181#7227 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7221::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,2.0,0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7184#7230 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7184#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##div_a#7232 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(14),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,2.0)))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7190#7235 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7190#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7232::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 113:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5)::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 114:
      ##a#7256 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(34) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7256::Float64,0,2.0,0)::Float64
      ##exp_a#7257 = (Base.Math.nan_dom_err)(GenSym(34),(Base.box)(Base.Float64,(Base.add_float)(##a#7256::Float64,2.0)))::Float64
      GenSym(35) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(38) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7256::Float64,0,GenSym(35),0)::Float64
      ##deriv#7258 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(38),(Base.box)(Base.Float64,(Base.add_float)(##a#7256::Float64,GenSym(35))))::Float64))
      ####G#7177#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7263 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7094#7098#7181#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(30) = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2.0)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(22) = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1.0)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7245 = (top(getfield))(GenSym(22),:value)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7245::Float64,0,2.0,0)::Float64
      ##exp_a#7246 = (Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(##a#7245::Float64,2.0)))::Float64
      GenSym(26) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7245::Float64,0,GenSym(26),0)::Float64
      ##deriv#7247 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(##a#7245::Float64,GenSym(26))))::Float64))
      ####G#7177#7248 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7252 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7094#7098#7181#7252 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7246::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7255 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7217#7255 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(40) = (top(getfield))(GenSym(39),:value)::Float64
      GenSym(41) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(30),:value)::Float64,(top(getfield))(GenSym(31),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7264 = GenSym(40)
      ##a2#7265 = GenSym(41)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7270 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7113#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(42) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7264::Float64,##a2#7265::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7237 = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7237::Float64,0,2.0,0)::Float64
      ##exp_a#7238 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a#7237::Float64,2.0)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7237::Float64,0,GenSym(18),0)::Float64
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a#7237::Float64,GenSym(18))))::Float64))
      ####G#7177#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7244 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7094#7098#7181#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(43) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(44) = (top(getfield))(GenSym(42),:value)::Float64
      GenSym(45) = (top(getfield))(GenSym(43),:value)::Float64
      ##a1#7271 = GenSym(44)
      ##a2#7272 = GenSym(45)
      ##div_a#7273 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7271::Float64,##a2#7272::Float64))
      ####afactor#7120#7274 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7272::Float64))
      ####bfactor#7121#7275 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7271::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7272::Float64,##a2#7272::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7280 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7118#7126#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 116:
      return Distributions.Inf
      2: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 99:
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 102:
      return μ::Float64
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)(1.0,ξ::Float64))
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),GenSym(4))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 99:
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 102:
      return μ::Float64
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      GenSym(5) = (Base.box)(Base.Float64,(Base.add_float)(1.0,ξ::Float64))
      GenSym(4) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,GenSym(4),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),GenSym(4))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7298::Tuple{}
  ######_var0#7068#7070#7299::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7300::Tuple{}
  ####_var0#7068#7301::Tuple{}
  ########types#7083#7282#7283#7302::Tuple{Type{Float64}}
  ##a1#7303::Float64
  ##a2#7304::Float64
  ##exp_a#7305::Float64
  ##powval#7306::Float64
  ##logval#7307::Float64
  ##new_bs#7308::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7284#7309::Float64
  ####exp_a#7285#7310::Float64
  ####deriv#7286#7311::Float64
  ######G#7177#7287#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7089#7095#7178#7288#7313::Tuple{Type{Float64},Type{Float64}}
  ############tup#7090#7092#7096#7179#7289#7314::Tuple{}
  ############x#7091#7093#7097#7180#7290#7315::Float64
  ##########_var0#7094#7098#7181#7291#7316::Tuple{}
  ######a#7105#7292#7317::Tuple{}
  ######b#7106#7293#7318::Tuple{}
  ######afactor#7107#7294#7319::Float64
  ######bfactor#7108#7295#7320::Float64
  ####_var0#7296#7321::Tuple{}
  ######types#7119#7297#7322::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7083#7104#7323::Tuple{Type{Float64}}
  ##a1#7324::Float64
  ##a2#7325::Float64
  ######a#7105#7109#7326::Tuple{}
  ######b#7106#7110#7327::Tuple{}
  ######afactor#7107#7111#7328::Float64
  ######bfactor#7108#7112#7329::Float64
  ####_var0#7113#7330::Tuple{}
  ##a1#7331::Float64
  ##a2#7332::Float64
  ##div_a#7333::Float64
  ####afactor#7120#7334::Float64
  ####bfactor#7121#7335::Float64
  ########a#7105#7114#7122#7336::Tuple{}
  ########b#7106#7115#7123#7337::Tuple{}
  ########afactor#7107#7116#7124#7338::Float64
  ########bfactor#7108#7117#7125#7339::Float64
  ######_var0#7118#7126#7340::Tuple{}
  ######types#7119#7127#7341::Tuple{Type{Float64}}
  ######a#7078#7080#7342::Tuple{}
  ######b#7079#7081#7343::Tuple{}
  ####_var0#7082#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 99:
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(33) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(34) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(35) = GenSym(32)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(33)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(37)
      #s25 = GenSym(38)
      GenSym(39) = GenSym(34)
      GenSym(40) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(39)
      #s25 = GenSym(40) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 101:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 10
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7299 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7068#7070#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      10: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      11: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 102:
      return μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 104:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7301 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7068#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7303"))
      NewvarNode(symbol("##a2#7304"))
      NewvarNode(symbol("##exp_a#7305"))
      NewvarNode(symbol("##powval#7306"))
      NewvarNode(symbol("##logval#7307"))
      NewvarNode(symbol("##new_bs#7308"))
      unless (top(getfield))((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 17
      GenSym(8) = (top(getfield))(GenSym(4),:value)::Float64
      ####a#7284#7309 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7284#7309::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7285#7310 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7284#7309::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7284#7309::Float64,0,GenSym(12),0)::Float64
      ####deriv#7286#7311 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7284#7309::Float64,GenSym(12))))::Float64))
      ######G#7177#7287#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7094#7098#7181#7291#7316 = (top(tuple))()::Tuple{}
      goto 16
      ##########_var0#7094#7098#7181#7291#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7285#7310::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 19
      17: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(4),:value)::Float64
      ##a1#7303 = GenSym(6)
      ##a2#7304 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7303::Float64,0,##a2#7304::Float64,0)::Float64
      ##exp_a#7305 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7303::Float64,##a2#7304::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7304::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7303::Float64,0,GenSym(19),0)::Float64
      ##powval#7306 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7304::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7303::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7303::Float64,0)::Float64
      ##logval#7307 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7305::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7303::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7296#7321 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7296#7321 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##new_bs#7308 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7305::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      19: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(26) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7324 = GenSym(26)
      ##a2#7325 = GenSym(27)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7330 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7113#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7324::Float64,##a2#7325::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(29) = (top(getfield))(GenSym(28),:value)::Float64
      GenSym(30) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7331 = GenSym(29)
      ##a2#7332 = GenSym(30)
      ##div_a#7333 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7331::Float64,##a2#7332::Float64))
      ####afactor#7120#7334 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7332::Float64))
      ####bfactor#7121#7335 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7331::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7332::Float64,##a2#7332::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7340 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7118#7126#7340 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7333::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7344 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7082#7344 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(31),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 77:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 80:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(12) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(12),0,GenSym(11),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(GenSym(12),GenSym(11))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 77:
      GenSym(16) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(17) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(17)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(18)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 80:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(12) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(12),0,GenSym(11),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(GenSym(12),GenSym(11))))::Float64,1.0)))),ξ::Float64))))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7066#7067#7069#7355::Tuple{}
  ######_var0#7068#7070#7356::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7090#7182#7357::Tuple{}
  ######x#7091#7183#7358::Float64
  ####_var0#7184#7359::Tuple{}
  ######types#7083#7185#7360::Tuple{Type{Float64}}
  ######a#7213#7215#7361::Tuple{}
  ######b#7214#7216#7362::Tuple{}
  ####_var0#7217#7363::Tuple{}
  ######tup#7066#7067#7364::Tuple{}
  ####_var0#7068#7365::Tuple{}
  ##a#7366::Float64
  ##exp_a#7367::Float64
  ##deriv#7368::Float64
  ####G#7350#7369::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7351#7370::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7352#7371::Tuple{}
  ##########x#7091#7093#7097#7353#7372::Float64
  ########_var0#7094#7098#7354#7373::Tuple{}
  ######types#7083#7104#7374::Tuple{Type{Float64}}
  ##a1#7375::Float64
  ##a2#7376::Float64
  ######a#7105#7109#7377::Tuple{}
  ######b#7106#7110#7378::Tuple{}
  ######afactor#7107#7111#7379::Float64
  ######bfactor#7108#7112#7380::Float64
  ####_var0#7113#7381::Tuple{}
  ##a1#7382::Float64
  ##a2#7383::Float64
  ##div_a#7384::Float64
  ####afactor#7120#7385::Float64
  ####bfactor#7121#7386::Float64
  ########a#7105#7114#7122#7387::Tuple{}
  ########b#7106#7115#7123#7388::Tuple{}
  ########afactor#7107#7116#7124#7389::Float64
  ########bfactor#7108#7117#7125#7390::Float64
  ######_var0#7118#7126#7391::Tuple{}
  ######types#7119#7127#7392::Tuple{Type{Float64}}
  ######a#7078#7080#7393::Tuple{}
  ######b#7079#7081#7394::Tuple{}
  ####_var0#7082#7395::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 77:
      GenSym(24) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(26) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(27) = GenSym(24)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(27)
      #s25 = GenSym(28)
      GenSym(29) = GenSym(25)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(29)
      #s25 = GenSym(30)
      GenSym(31) = GenSym(26)
      GenSym(32) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(31)
      #s25 = GenSym(32) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 79:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 10
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7356 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7068#7070#7356 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 11
      10: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      11: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 80:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      GenSym(6) = (Base.Math.nan_dom_err)(GenSym(5),2.0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7184#7359 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7184#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7217#7363 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7217#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 82:
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7068#7365 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7068#7365 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(11) = (Base.Math.nan_dom_err)(GenSym(10),2.0)::Float64
      ##a#7366 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(11),0,##a#7366::Float64,0)::Float64
      ##exp_a#7367 = (Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(GenSym(11),##a#7366::Float64)))::Float64
      GenSym(16) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      ##deriv#7368 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7367::Float64,(Base.Math.nan_dom_err)(GenSym(16),GenSym(11))::Float64))
      ####G#7350#7369 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7354#7373 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7094#7098#7354#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(18) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(17),:value)::Float64,1.0))), :((top(getfield))(GenSym(17),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7375 = GenSym(18)
      ##a2#7376 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7381 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7113#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7375::Float64,##a2#7376::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(21) = (top(getfield))(GenSym(20),:value)::Float64
      GenSym(22) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7382 = GenSym(21)
      ##a2#7383 = GenSym(22)
      ##div_a#7384 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7382::Float64,##a2#7383::Float64))
      ####afactor#7120#7385 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7383::Float64))
      ####bfactor#7121#7386 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7382::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7383::Float64,##a2#7383::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7391 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7118#7126#7391 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7384::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7395 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7082#7395 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(23),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7418::Tuple{}
  ##xs#7419::Tuple{}
  ######fx#1710#1711#7420::Float64
  ####fy#1712#7421::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 121:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 124:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(8) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      ####fy#1712#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(28) = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(ξ::Float64,####fy#1712#7421::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(ξ::Float64,####fy#1712#7421::Float64)::Bool,(Base.lt_float)(####fy#1712#7421::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#1712#7421::Float64)),0)::Bool))))
      ######fx#1710#1711#7420 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(29) = ((top(getfield))(Base.Intrinsics,:select_value)::I)(GenSym(28),(Base.box)(Float64,(Base.sitofp)(Float64,-1)),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#1710#1711#7420::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#1710#1711#7420::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#1710#1711#7420::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#1710#1711#7420::Float64)))::Bool)))))),(Base.box)(Float64,(Base.sitofp)(Float64,1)),ξ::Float64)::Float64)::Float64
      GenSym(27) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,3.0,0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(21) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(20) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      GenSym(24) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(21),0,GenSym(20),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g1::Float64)),g2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(27),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,3.0)))::Float64)))))),(Base.Math.nan_dom_err)(GenSym(24),(Base.box)(Base.Float64,(Base.add_float)(GenSym(21),GenSym(20))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7418::Tuple{}
  ##xs#7419::Tuple{}
  ######fx#1710#1711#7420::Float64
  ####fy#1712#7421::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 121:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 124:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      GenSym(8) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      ####fy#1712#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(28) = (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(ξ::Float64,####fy#1712#7421::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(ξ::Float64,####fy#1712#7421::Float64)::Bool,(Base.lt_float)(####fy#1712#7421::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#1712#7421::Float64)),0)::Bool))))
      ######fx#1710#1711#7420 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(29) = ((top(getfield))(Base.Intrinsics,:select_value)::I)(GenSym(28),(Base.box)(Float64,(Base.sitofp)(Float64,-1)),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#1710#1711#7420::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#1710#1711#7420::Float64,ξ::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#1710#1711#7420::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(0,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#1710#1711#7420::Float64)))::Bool)))))),(Base.box)(Float64,(Base.sitofp)(Float64,1)),ξ::Float64)::Float64)::Float64
      GenSym(27) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,3.0,0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(21) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(20) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      GenSym(24) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(21),0,GenSym(20),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g1::Float64)),g2::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(27),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,3.0)))::Float64)))))),(Base.Math.nan_dom_err)(GenSym(24),(Base.box)(Base.Float64,(Base.add_float)(GenSym(21),GenSym(20))))::Float64))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7066#7067#7069#7464::Tuple{}
  ######_var0#7068#7070#7465::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7466::Tuple{}
  ##a#7467::Float64
  ##exp_a#7468::Float64
  ##deriv#7469::Float64
  ####G#7177#7470::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7471::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7472::Tuple{}
  ##########x#7091#7093#7097#7180#7473::Float64
  ########_var0#7094#7098#7181#7474::Tuple{}
  ######a#7213#7215#7475::Tuple{}
  ######b#7214#7216#7476::Tuple{}
  ####_var0#7217#7477::Tuple{}
  ##a#7478::Float64
  ##exp_a#7479::Float64
  ##deriv#7480::Float64
  ####G#7177#7481::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7482::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7483::Tuple{}
  ##########x#7091#7093#7097#7180#7484::Float64
  ########_var0#7094#7098#7181#7485::Tuple{}
  ##a#7486::Float64
  ##exp_a#7487::Float64
  ##deriv#7488::Float64
  ####G#7177#7489::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7490::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7491::Tuple{}
  ##########x#7091#7093#7097#7180#7492::Float64
  ########_var0#7094#7098#7181#7493::Tuple{}
  ########tup#7090#7182#7192#7494::Tuple{}
  ########x#7091#7183#7193#7495::Float64
  ######_var0#7184#7194#7496::Tuple{}
  ########types#7083#7185#7195#7497::Tuple{Type{Float64}}
  ##xs#7498::Tuple{}
  ##########tup#7090#7182#7192#7453#7499::Tuple{}
  ##########x#7091#7183#7193#7454#7500::Float64
  ########_var0#7184#7194#7455#7501::Tuple{}
  ##########types#7083#7185#7195#7456#7502::Tuple{Type{Float64}}
  ####a1#7457#7503::Float64
  ####a2#7458#7504::Float64
  ########a#7105#7109#7459#7505::Tuple{}
  ########b#7106#7110#7460#7506::Tuple{}
  ########afactor#7107#7111#7461#7507::Float64
  ########bfactor#7108#7112#7462#7508::Float64
  ######_var0#7113#7463#7509::Tuple{}
  ######a#7213#7215#7510::Tuple{}
  ######b#7214#7216#7511::Tuple{}
  ####_var0#7217#7512::Tuple{}
  ######a#7078#7080#7513::Tuple{}
  ######b#7079#7081#7514::Tuple{}
  ####_var0#7082#7515::Tuple{}
  ##a1#7516::Float64
  ##a2#7517::Float64
  ######a#7105#7109#7518::Tuple{}
  ######b#7106#7110#7519::Tuple{}
  ######afactor#7107#7111#7520::Float64
  ######bfactor#7108#7112#7521::Float64
  ####_var0#7113#7522::Tuple{}
  ##a1#7523::Float64
  ##a2#7524::Float64
  ##div_a#7525::Float64
  ####afactor#7120#7526::Float64
  ####bfactor#7121#7527::Float64
  ########a#7105#7114#7122#7528::Tuple{}
  ########b#7106#7115#7123#7529::Tuple{}
  ########afactor#7107#7116#7124#7530::Float64
  ########bfactor#7108#7117#7125#7531::Float64
  ######_var0#7118#7126#7532::Tuple{}
  ######types#7119#7127#7533::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 121:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(42) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(43) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(44) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(45) = GenSym(42)
      GenSym(46) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(45)
      #s25 = GenSym(46)
      GenSym(47) = GenSym(43)
      GenSym(48) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(47)
      #s25 = GenSym(48)
      GenSym(49) = GenSym(44)
      GenSym(50) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(49)
      #s25 = GenSym(50) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 123:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7465 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 124:
      GenSym(7) = (Distributions.zeta)(3.0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,3.141592653589793,0,3.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(12.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)(6.0))::Float64)),GenSym(7))),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(3.141592653589793,3.0)))::Float64))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 125:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,3.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 126:
      g1 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 127:
      g2 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 128:
      g3 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},3)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 129:
      GenSym(35) = (Distributions.sign)(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7184#7194#7455#7501 = (top(tuple))()::Tuple{}
      goto 31
      ########_var0#7184#7194#7455#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(32) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(33) = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7457#7503 = GenSym(32)
      ####a2#7458#7504 = GenSym(33)
      $(Expr(:boundscheck, false))
      ######_var0#7113#7463#7509 = (top(tuple))()::Tuple{}
      goto 32
      ######_var0#7113#7463#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7457#7503::Float64,####a2#7458#7504::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7512 = (top(tuple))()::Tuple{}
      goto 34
      ####_var0#7217#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      ##a#7486 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7486::Float64,0,3.0,0)::Float64
      ##exp_a#7487 = (Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a#7486::Float64,3.0)))::Float64
      GenSym(27) = (Base.box)(Base.Float64,(Base.sub_float)(3.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(30) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7486::Float64,0,GenSym(27),0)::Float64
      ##deriv#7488 = (Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(30),(Base.box)(Base.Float64,(Base.add_float)(##a#7486::Float64,GenSym(27))))::Float64))
      ####G#7177#7489 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7493 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7094#7098#7181#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(31) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7487::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7194#7496 = (top(tuple))()::Tuple{}
      goto 29
      ######_var0#7184#7194#7496 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      $(Expr(:boundscheck, false))
      ####_var0#7082#7515 = (top(tuple))()::Tuple{}
      goto 36
      ####_var0#7082#7515 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      GenSym(36) = (top(getfield))(GenSym(35),:value)::Float64
      GenSym(37) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(34),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(31),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7516 = GenSym(36)
      ##a2#7517 = GenSym(37)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7522 = (top(tuple))()::Tuple{}
      goto 38
      ####_var0#7113#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(38) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7516::Float64,##a2#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7467 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7467::Float64,0,2.0,0)::Float64
      ##exp_a#7468 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7467::Float64,2.0)))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7467::Float64,0,GenSym(11),0)::Float64
      ##deriv#7469 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7467::Float64,GenSym(11))))::Float64))
      ####G#7177#7470 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7474 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7094#7098#7181#7474 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7468::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7477 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7217#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(16) = (Base.box)(Base.Float64,(Base.div_float)(3.0,2.0))
      ##a#7478 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7478::Float64,0,GenSym(16),0)::Float64
      ##exp_a#7479 = (Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(##a#7478::Float64,GenSym(16))))::Float64
      GenSym(20) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(16),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(23) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7478::Float64,0,GenSym(20),0)::Float64
      ##deriv#7480 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(16),(Base.Math.nan_dom_err)(GenSym(23),(Base.box)(Base.Float64,(Base.add_float)(##a#7478::Float64,GenSym(20))))::Float64))
      ####G#7177#7481 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7485 = (top(tuple))()::Tuple{}
      goto 25
      ########_var0#7094#7098#7181#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(40) = (top(getfield))(GenSym(38),:value)::Float64
      GenSym(41) = (top(getfield))(GenSym(39),:value)::Float64
      ##a1#7523 = GenSym(40)
      ##a2#7524 = GenSym(41)
      ##div_a#7525 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7523::Float64,##a2#7524::Float64))
      ####afactor#7120#7526 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7524::Float64))
      ####bfactor#7121#7527 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7523::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7524::Float64,##a2#7524::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7532 = (top(tuple))()::Tuple{}
      goto 40
      ######_var0#7118#7126#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7525::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 131:
      return Distributions.Inf
      2: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7534::Tuple{}
  ##xs#7535::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 136:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(29) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(30)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(34)
      #s25 = GenSym(35)
      GenSym(36) = GenSym(31)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(36)
      #s25 = GenSym(37) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 139:
      return (Base.box)(Base.Float64,(Base.div_float)(12.0,5.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,4.0,0)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(19),0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g1::Float64)),g3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,g2::Float64)),(Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,4.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(GenSym(19),2.0)))::Float64)),3.0))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      return Distributions.Inf
      2: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7534::Tuple{}
  ##xs#7535::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 136:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(29) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(30) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(30)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(34)
      #s25 = GenSym(35)
      GenSym(36) = GenSym(31)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(36)
      #s25 = GenSym(37) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 139:
      return (Base.box)(Base.Float64,(Base.div_float)(12.0,5.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)(ξ::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      GenSym(13) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,4)),(top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64))))
      GenSym(15) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,4.0,0)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,g1::Float64,0,2.0,0)::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(19),0,2.0,0)::Float64
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g1::Float64)),g3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,g2::Float64)),(Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,2.0)))::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(g1::Float64,4.0)))::Float64)))),(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(GenSym(19),2.0)))::Float64)),3.0))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      return Distributions.Inf
      2: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#7066#7067#7069#7536::Tuple{}
  ######_var0#7068#7070#7537::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7538::Float64
  ##exp_a#7539::Float64
  ##deriv#7540::Float64
  ####G#7177#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7543::Tuple{}
  ##########x#7091#7093#7097#7180#7544::Float64
  ########_var0#7094#7098#7181#7545::Tuple{}
  ######a#7213#7215#7546::Tuple{}
  ######b#7214#7216#7547::Tuple{}
  ####_var0#7217#7548::Tuple{}
  ##a#7549::Float64
  ##exp_a#7550::Float64
  ##deriv#7551::Float64
  ####G#7177#7552::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7553::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7554::Tuple{}
  ##########x#7091#7093#7097#7180#7555::Float64
  ########_var0#7094#7098#7181#7556::Tuple{}
  ##a#7557::Float64
  ##exp_a#7558::Float64
  ##deriv#7559::Float64
  ####G#7177#7560::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7561::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7562::Tuple{}
  ##########x#7091#7093#7097#7180#7563::Float64
  ########_var0#7094#7098#7181#7564::Tuple{}
  ########tup#7090#7182#7192#7565::Tuple{}
  ########x#7091#7183#7193#7566::Float64
  ######_var0#7184#7194#7567::Tuple{}
  ########types#7083#7185#7195#7568::Tuple{Type{Float64}}
  ##a#7569::Float64
  ##exp_a#7570::Float64
  ##deriv#7571::Float64
  ####G#7177#7572::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7178#7573::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7179#7574::Tuple{}
  ##########x#7091#7093#7097#7180#7575::Float64
  ########_var0#7094#7098#7181#7576::Tuple{}
  ##xs#7577::Tuple{}
  ##########tup#7090#7182#7192#7453#7578::Tuple{}
  ##########x#7091#7183#7193#7454#7579::Float64
  ########_var0#7184#7194#7455#7580::Tuple{}
  ##########types#7083#7185#7195#7456#7581::Tuple{Type{Float64}}
  ####a1#7457#7582::Float64
  ####a2#7458#7583::Float64
  ########a#7105#7109#7459#7584::Tuple{}
  ########b#7106#7110#7460#7585::Tuple{}
  ########afactor#7107#7111#7461#7586::Float64
  ########bfactor#7108#7112#7462#7587::Float64
  ######_var0#7113#7463#7588::Tuple{}
  ##xs#7589::Tuple{}
  ##########tup#7090#7182#7192#7453#7590::Tuple{}
  ##########x#7091#7183#7193#7454#7591::Float64
  ########_var0#7184#7194#7455#7592::Tuple{}
  ##########types#7083#7185#7195#7456#7593::Tuple{Type{Float64}}
  ####a1#7457#7594::Float64
  ####a2#7458#7595::Float64
  ########a#7105#7109#7459#7596::Tuple{}
  ########b#7106#7110#7460#7597::Tuple{}
  ########afactor#7107#7111#7461#7598::Float64
  ########bfactor#7108#7112#7462#7599::Float64
  ######_var0#7113#7463#7600::Tuple{}
  ######a#7213#7215#7601::Tuple{}
  ######b#7214#7216#7602::Tuple{}
  ####_var0#7217#7603::Tuple{}
  ######a#7078#7080#7604::Tuple{}
  ######b#7079#7081#7605::Tuple{}
  ####_var0#7082#7606::Tuple{}
  ######a#7213#7215#7607::Tuple{}
  ######b#7214#7216#7608::Tuple{}
  ####_var0#7217#7609::Tuple{}
  ##a1#7610::Float64
  ##a2#7611::Float64
  ##div_a#7612::Float64
  ####afactor#7120#7613::Float64
  ####bfactor#7121#7614::Float64
  ########a#7105#7114#7122#7615::Tuple{}
  ########b#7106#7115#7123#7616::Tuple{}
  ########afactor#7107#7116#7124#7617::Float64
  ########bfactor#7108#7117#7125#7618::Float64
  ######_var0#7118#7126#7619::Tuple{}
  ######types#7119#7127#7620::Tuple{Type{Float64}}
  ######types#7083#7104#7621::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 136:
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(45) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(46) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(47) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(48) = GenSym(45)
      GenSym(49) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(48)
      #s25 = GenSym(49)
      GenSym(50) = GenSym(46)
      GenSym(51) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(50)
      #s25 = GenSym(51)
      GenSym(52) = GenSym(47)
      GenSym(53) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(52)
      #s25 = GenSym(53) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 138:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 11
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7537 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7068#7070#7537 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 12
      11: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      12: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 139:
      return (Base.box)(Base.Float64,(Base.div_float)(12.0,5.0))
      goto 2
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 140:
      unless (Base.lt_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,4.0)))::Bool goto 1 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 141:
      g1 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},1)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 142:
      g2 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},2)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 143:
      g3 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},3)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 144:
      g4 = (Distributions.g)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},4)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 145:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7194#7455#7592 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7184#7194#7455#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(37) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(38) = (top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7457#7594 = GenSym(37)
      ####a2#7458#7595 = GenSym(38)
      $(Expr(:boundscheck, false))
      ######_var0#7113#7463#7600 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7113#7463#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(39) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7457#7594::Float64,####a2#7458#7595::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7603 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7217#7603 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7569 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(29) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7569::Float64,0,2.0,0)::Float64
      ##exp_a#7570 = (Base.Math.nan_dom_err)(GenSym(29),(Base.box)(Base.Float64,(Base.add_float)(##a#7569::Float64,2.0)))::Float64
      GenSym(30) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7569::Float64,0,GenSym(30),0)::Float64
      ##deriv#7571 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(##a#7569::Float64,GenSym(30))))::Float64))
      ####G#7177#7572 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7576 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7094#7098#7181#7576 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(34) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7570::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7184#7194#7455#7580 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7184#7194#7455#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(35) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(36) = (top(getfield))(GenSym(34),:value)::Float64
      ####a1#7457#7582 = GenSym(35)
      ####a2#7458#7583 = GenSym(36)
      $(Expr(:boundscheck, false))
      ######_var0#7113#7463#7588 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7113#7463#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(40) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7457#7582::Float64,####a2#7458#7583::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7082#7606 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7082#7606 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7557 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7557::Float64,0,4.0,0)::Float64
      ##exp_a#7558 = (Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a#7557::Float64,4.0)))::Float64
      GenSym(22) = (Base.box)(Base.Float64,(Base.sub_float)(4.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(25) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7557::Float64,0,GenSym(22),0)::Float64
      ##deriv#7559 = (Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.nan_dom_err)(GenSym(25),(Base.box)(Base.Float64,(Base.add_float)(##a#7557::Float64,GenSym(22))))::Float64))
      ####G#7177#7560 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7564 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7094#7098#7181#7564 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7558::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7194#7567 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7184#7194#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      $(Expr(:boundscheck, false))
      ####_var0#7217#7609 = (top(tuple))()::Tuple{}
      goto 39
      ####_var0#7217#7609 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      ##a#7538 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7538::Float64,0,2.0,0)::Float64
      ##exp_a#7539 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(##a#7538::Float64,2.0)))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7538::Float64,0,GenSym(7),0)::Float64
      ##deriv#7540 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(##a#7538::Float64,GenSym(7))))::Float64))
      ####G#7177#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7545 = (top(tuple))()::Tuple{}
      goto 17
      ########_var0#7094#7098#7181#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7539::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7548 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7217#7548 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      ##a#7549 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7549::Float64,0,2.0,0)::Float64
      ##exp_a#7550 = (Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(##a#7549::Float64,2.0)))::Float64
      GenSym(15) = (Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7549::Float64,0,GenSym(15),0)::Float64
      ##deriv#7551 = (Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7549::Float64,GenSym(15))))::Float64))
      ####G#7177#7552 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7181#7556 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7094#7098#7181#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(41) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7550::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(42) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(39),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(40),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(26),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(43) = (top(getfield))(GenSym(41),:value)::Float64
      ##a1#7610 = GenSym(42)
      ##a2#7611 = GenSym(43)
      ##div_a#7612 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7610::Float64,##a2#7611::Float64))
      ####afactor#7120#7613 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7611::Float64))
      ####bfactor#7121#7614 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7610::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7611::Float64,##a2#7611::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7619 = (top(tuple))()::Tuple{}
      goto 41
      ######_var0#7118#7126#7619 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(44) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7612::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(44),:value)::Float64,3.0))), :((top(getfield))(GenSym(44),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 2
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 147:
      return Distributions.Inf
      2: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  ##xs#7622::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 152:
      GenSym(6) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 153:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),σ::Float64)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,ξ::Float64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  ##xs#7622::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 152:
      GenSym(6) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 153:
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),σ::Float64)::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5772156649015329,ξ::Float64)))),(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7071#7074#7628#7636::Tuple{}
  ########x#7072#7075#7629#7637::Irrational{:γ}
  ######_var0#7076#7630#7638::Tuple{}
  ########types#7073#7077#7631#7639::Tuple{Type{Irrational{:γ}}}
  ##a#7640::Float64
  ####G#7623#7641::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7624#7642::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7625#7643::Tuple{}
  ##########x#7091#7093#7097#7626#7644::Float64
  ########_var0#7094#7098#7627#7645::Tuple{}
  ##xs#7646::Tuple{}
  ########a#7078#7080#7632#7647::Tuple{}
  ########b#7079#7081#7633#7648::Tuple{}
  ######_var0#7082#7634#7649::Tuple{}
  ########types#7083#7282#7635#7650::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 152:
      GenSym(8) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(9)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(10)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 153:
      ##a#7640 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7640::Float64,0)::Float64
      ####G#7623#7641 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7627#7645 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7094#7098#7627#7645 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7640::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7076#7630#7638 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7076#7630#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ######_var0#7082#7634#7649 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7082#7634#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5772156649015329))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,(Base.box)(Base.Float64,(Base.add_float)(1.0,0.5772156649015329))))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  u::Float64
  rd::Float64
  ####_var0#7653#7655::UNION{BOOL,INT64}
  ########_var0#7651#7652#7654#7656::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 258:
      NewvarNode(:rd)
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(19)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(20)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 261:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7653#7655 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7653#7655 = false
      9: 
      ####_var0#7653#7655::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7651#7652#7654#7656 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7651#7652#7654#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7651#7652#7654#7656::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 264:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64)),(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64)),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.div_float)(GenSym(17),ξ::Float64))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 269:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,rd::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  u::Float64
  rd::Float64
  ####_var0#7653#7655::UNION{BOOL,INT64}
  ########_var0#7651#7652#7654#7656::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 258:
      NewvarNode(:rd)
      GenSym(18) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(19)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(20)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(25)
      #s25 = GenSym(26) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 261:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7653#7655 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7653#7655 = false
      9: 
      ####_var0#7653#7655::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7651#7652#7654#7656 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7651#7652#7654#7656 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7651#7652#7654#7656::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 264:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      GenSym(17) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(ξ::Float64)),(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64)),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.div_float)(GenSym(17),ξ::Float64))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 269:
      return (Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,rd::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::Float64
  rd::ANY
  ####_var0#7653#7662::UNION{BOOL,INT64}
  ########_var0#7651#7652#7654#7663::Float64
  ########tup#7066#7067#7069#7664::Tuple{}
  ######_var0#7068#7070#7665::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7666::Tuple{}
  ####_var0#7068#7667::Tuple{}
  ######tup#7090#7182#7668::Tuple{}
  ######x#7091#7183#7669::Float64
  ####_var0#7184#7670::Tuple{}
  ######types#7083#7185#7671::Tuple{Type{Float64}}
  ##a#7672::Float64
  ####G#7657#7673::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7658#7674::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7659#7675::Tuple{}
  ##########x#7091#7093#7097#7660#7676::Float64
  ########_var0#7094#7098#7661#7677::Tuple{}
  ##a1#7678::Float64
  ##a2#7679::Float64
  ##div_a#7680::Float64
  ####afactor#7120#7681::Float64
  ####bfactor#7121#7682::Float64
  ########a#7105#7114#7122#7683::Tuple{}
  ########b#7106#7115#7123#7684::Tuple{}
  ########afactor#7107#7116#7124#7685::Float64
  ########bfactor#7108#7117#7125#7686::Float64
  ######_var0#7118#7126#7687::Tuple{}
  ######types#7119#7127#7688::Tuple{Type{Float64}}
  ######a#7078#7080#7689::Tuple{}
  ######b#7079#7081#7690::Tuple{}
  ####_var0#7082#7691::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 258:
      NewvarNode(:rd)
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(23) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(24) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(25) = GenSym(22)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(23)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(27)
      #s25 = GenSym(28)
      GenSym(29) = GenSym(24)
      GenSym(30) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(29)
      #s25 = GenSym(30) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 261:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7653#7662 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7653#7662 = false
      9: 
      ####_var0#7653#7662::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7651#7652#7654#7663 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7651#7652#7654#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7651#7652#7654#7663::Float64,1.0)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 263:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 15
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7665 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7068#7070#7665 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 16
      15: 
      _var0 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      16: 
      unless (Base.lt_float)((top(getfield))(_var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 264:
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(8) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(7),u::Float64)::Float64))
      GenSym(10) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(8),0)::Float64
      rd = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(10),GenSym(8))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 266:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7667 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7068#7667 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(12) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,u::Float64,0)::Float64
      GenSym(13) = (Base.box)(Base.Float64,(Base.neg_float)((Base.Math.nan_dom_err)(GenSym(12),u::Float64)::Float64))
      GenSym(15) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(13),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7184#7670 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7184#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##a#7672 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.Math.nan_dom_err)(GenSym(15),GenSym(13))::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))("expm1",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7672::Float64,0)::Float64
      (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7672::Float64,0)::Float64
      ####G#7657#7673 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7661#7677 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7094#7098#7661#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(18), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(20) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7678 = GenSym(19)
      ##a2#7679 = GenSym(20)
      ##div_a#7680 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7678::Float64,##a2#7679::Float64))
      ####afactor#7120#7681 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7679::Float64))
      ####bfactor#7121#7682 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7678::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7679::Float64,##a2#7679::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7687 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7118#7126#7687 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      rd = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7680::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 269:
      GenSym(21) = σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * rd::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7082#7691 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7082#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(21),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  z::Float64
  t::Float64
  ####fy#2548#7694::Float64
  ####fy#2548#7695::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 196:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7694 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7694::Float64)::Bool,(Base.ne_float)(####fy#2548#7694::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7694::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7695 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7695::Float64)::Bool,(Base.ne_float)(####fy#2548#7695::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7695::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{Float64},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 197:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(21)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(22)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 202:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      t = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(z::Float64)),0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      GenSym(8) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(t::Float64,GenSym(8))),σ::Float64))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      unless (Base.eq_float)((Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64)),-1.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 207:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      GenSym(10) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64))))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),ξ::Float64))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,GenSym(9),0)::Float64
      t = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),GenSym(9))))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 210:
      GenSym(15) = (Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,1.0))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,t::Float64,0,GenSym(15),0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(t::Float64,GenSym(15))))::Float64,GenSym(19))),σ::Float64))
      6: 
  end::Float64

----float----

Variables:
  d::Distributions.GeneralizedExtremeValue{Float64}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::Float64
  σ::Float64
  ξ::Float64
  #s25::Int64
  z::Float64
  t::Float64
  ####fy#2548#7694::Float64
  ####fy#2548#7695::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 196:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7694 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7694::Float64)::Bool,(Base.ne_float)(####fy#2548#7694::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7694::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7695 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7695::Float64)::Bool,(Base.ne_float)(####fy#2548#7695::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7695::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      GenSym(5) = (Distributions.insupport)(d::Distributions.GeneralizedExtremeValue{Float64},x::Int64)::Bool
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(GenSym(5)))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 197:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      GenSym(20) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:μ)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:σ)::Float64
      GenSym(22) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{Float64},:ξ)::Float64
      #s25 = 1
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(23)
      #s25 = GenSym(24)
      GenSym(25) = GenSym(21)
      GenSym(26) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(25)
      #s25 = GenSym(26)
      GenSym(27) = GenSym(22)
      GenSym(28) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(27)
      #s25 = GenSym(28) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),μ::Float64)),σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 202:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.abs_float)(ξ::Float64)),2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      t = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(z::Float64)),0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      GenSym(8) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(t::Float64,GenSym(8))),σ::Float64))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      unless (Base.eq_float)((Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64)),-1.0)::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 207:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      GenSym(10) = (Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(z::Float64,ξ::Float64))))
      GenSym(9) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),ξ::Float64))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,GenSym(9),0)::Float64
      t = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),GenSym(9))))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 210:
      GenSym(15) = (Base.box)(Base.Float64,(Base.add_float)(ξ::Float64,1.0))
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,t::Float64,0,GenSym(15),0)::Float64
      GenSym(19) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.neg_float)(t::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(t::Float64,GenSym(15))))::Float64,GenSym(19))),σ::Float64))
      6: 
  end::Float64

----dual----

Variables:
  d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  #s24::Bool
  #s23::Bool
  #s22::Bool
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  t::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ####fy#2548#7736::Float64
  ####fy#2548#7737::Float64
  _var0::Bool
  ######tup#7066#7197#7738::Tuple{}
  ####_var0#7198#7739::Tuple{}
  ######types#7196#7199#7740::Tuple{Type{Int64}}
  ##a1#7741::Float64
  ##a2#7742::Float64
  ##div_a#7743::Float64
  ####afactor#7120#7744::Float64
  ####bfactor#7121#7745::Float64
  ########a#7105#7114#7122#7746::Tuple{}
  ########b#7106#7115#7123#7747::Tuple{}
  ########afactor#7107#7116#7124#7748::Float64
  ########bfactor#7108#7117#7125#7749::Float64
  ######_var0#7118#7126#7750::Tuple{}
  ######types#7119#7127#7751::Tuple{Type{Float64}}
  ########tup#7066#7067#7069#7752::Tuple{}
  ######_var0#7068#7070#7753::Tuple{}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7754::Tuple{}
  ####_var0#7068#7755::Tuple{}
  ##exp_a#7756::Float64
  ####G#7726#7757::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7727#7758::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7728#7759::Tuple{}
  ##########x#7091#7093#7097#7729#7760::Float64
  ########_var0#7094#7098#7730#7761::Tuple{}
  ######tup#7066#7067#7762::Tuple{}
  ####_var0#7068#7763::Tuple{}
  ##exp_a#7764::Float64
  ####G#7726#7765::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7727#7766::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7728#7767::Tuple{}
  ##########x#7091#7093#7097#7729#7768::Float64
  ########_var0#7094#7098#7730#7769::Tuple{}
  ##a1#7770::Float64
  ##a2#7771::Float64
  ######a#7105#7109#7772::Tuple{}
  ######b#7106#7110#7773::Tuple{}
  ######afactor#7107#7111#7774::Float64
  ######bfactor#7108#7112#7775::Float64
  ####_var0#7113#7776::Tuple{}
  ##a1#7777::Float64
  ##a2#7778::Float64
  ##div_a#7779::Float64
  ####afactor#7120#7780::Float64
  ####bfactor#7121#7781::Float64
  ########a#7105#7114#7122#7782::Tuple{}
  ########b#7106#7115#7123#7783::Tuple{}
  ########afactor#7107#7116#7124#7784::Float64
  ########bfactor#7108#7117#7125#7785::Float64
  ######_var0#7118#7126#7786::Tuple{}
  ######types#7119#7127#7787::Tuple{Type{Float64}}
  ##a1#7788::Float64
  ##a2#7789::Float64
  ######a#7105#7109#7790::Tuple{}
  ######b#7106#7110#7791::Tuple{}
  ######afactor#7107#7111#7792::Float64
  ######bfactor#7108#7112#7793::Float64
  ####_var0#7113#7794::Tuple{}
  _var2::Bool
  ##a#7795::Float64
  ##div_a#7796::Float64
  ##deriv#7797::Float64
  ####G#7731#7798::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7732#7799::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7733#7800::Tuple{}
  ##########x#7091#7093#7097#7734#7801::Float64
  ########_var0#7094#7098#7735#7802::Tuple{}
  ##a1#7803::Float64
  ##a2#7804::Float64
  ######a#7105#7109#7805::Tuple{}
  ######b#7106#7110#7806::Tuple{}
  ######afactor#7107#7111#7807::Float64
  ######bfactor#7108#7112#7808::Float64
  ####_var0#7113#7809::Tuple{}
  ########types#7083#7282#7283#7810::Tuple{Type{Float64}}
  ##a1#7811::Float64
  ##a2#7812::Float64
  ##exp_a#7813::Float64
  ##powval#7814::Float64
  ##logval#7815::Float64
  ##new_bs#7816::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7284#7817::Float64
  ####exp_a#7285#7818::Float64
  ####deriv#7286#7819::Float64
  ######G#7177#7287#7820::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7089#7095#7178#7288#7821::Tuple{Type{Float64},Type{Float64}}
  ############tup#7090#7092#7096#7179#7289#7822::Tuple{}
  ############x#7091#7093#7097#7180#7290#7823::Float64
  ##########_var0#7094#7098#7181#7291#7824::Tuple{}
  ######a#7105#7292#7825::Tuple{}
  ######b#7106#7293#7826::Tuple{}
  ######afactor#7107#7294#7827::Float64
  ######bfactor#7108#7295#7828::Float64
  ####_var0#7296#7829::Tuple{}
  ######types#7119#7297#7830::Tuple{Type{Float64}}
  _var3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7066#7067#7831::Tuple{}
  ####_var0#7068#7832::Tuple{}
  ##exp_a#7833::Float64
  ####G#7726#7834::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7089#7095#7727#7835::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7090#7092#7096#7728#7836::Tuple{}
  ##########x#7091#7093#7097#7729#7837::Float64
  ########_var0#7094#7098#7730#7838::Tuple{}
  ######types#7083#7282#7839::Tuple{Type{Float64}}
  ##a1#7840::Float64
  ##a2#7841::Float64
  ##exp_a#7842::Float64
  ##powval#7843::Float64
  ##logval#7844::Float64
  ##new_bs#7845::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7284#7846::Float64
  ####exp_a#7285#7847::Float64
  ####deriv#7286#7848::Float64
  ######G#7177#7287#7849::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7089#7095#7178#7288#7850::Tuple{Type{Float64},Type{Float64}}
  ############tup#7090#7092#7096#7179#7289#7851::Tuple{}
  ############x#7091#7093#7097#7180#7290#7852::Float64
  ##########_var0#7094#7098#7181#7291#7853::Tuple{}
  ######a#7105#7292#7854::Tuple{}
  ######b#7106#7293#7855::Tuple{}
  ######afactor#7107#7294#7856::Float64
  ######bfactor#7108#7295#7857::Float64
  ####_var0#7296#7858::Tuple{}
  ######types#7119#7297#7859::Tuple{Type{Float64}}
  _var4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7860::Float64
  ##a2#7861::Float64
  ######a#7105#7109#7862::Tuple{}
  ######b#7106#7110#7863::Tuple{}
  ######afactor#7107#7111#7864::Float64
  ######bfactor#7108#7112#7865::Float64
  ####_var0#7113#7866::Tuple{}
  ##a1#7867::Float64
  ##a2#7868::Float64
  ##div_a#7869::Float64
  ####afactor#7120#7870::Float64
  ####bfactor#7121#7871::Float64
  ########a#7105#7114#7122#7872::Tuple{}
  ########b#7106#7115#7123#7873::Tuple{}
  ########afactor#7107#7116#7124#7874::Float64
  ########bfactor#7108#7117#7125#7875::Float64
  ######_var0#7118#7126#7876::Tuple{}
  ######types#7119#7127#7877::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 196:
      NewvarNode(symbol("#s23"))
      NewvarNode(symbol("#s22"))
      NewvarNode(:μ)
      NewvarNode(:σ)
      NewvarNode(:ξ)
      NewvarNode(symbol("#s25"))
      NewvarNode(:z)
      NewvarNode(:t)
      ####fy#2548#7736 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s24 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((Base.box)(Base.Float64,(Base.neg_float)(Distributions.Inf)),####fy#2548#7736::Float64)::Bool,(Base.ne_float)(####fy#2548#7736::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7736::Float64))::Bool))
      unless #s24::Bool goto 0
      #s22 = #s24::Bool
      goto 2
      0: 
      ####fy#2548#7737 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      #s23 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(Distributions.Inf,####fy#2548#7737::Float64)::Bool,(Base.ne_float)(####fy#2548#7737::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7737::Float64))::Bool))
      unless #s23::Bool goto 1
      #s22 = #s23::Bool
      goto 2
      1: 
      unless (Distributions.minimum)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}} <= x::Int64::Bool goto 11
      _var0 = x::Int64 <= (Distributions.maximum)(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}::Bool
      goto 12
      11: 
      _var0 = false
      12: 
      #s22 = (Base.box)(Base.Bool,(Base.not_int)(_var0::Bool))
      2: 
      GenSym(0) = #s22::Bool
      unless GenSym(0) goto 3 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 197:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      3:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 199:
      GenSym(70) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(71) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(72) = (top(getfield))(d::Distributions.GeneralizedExtremeValue{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:ξ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(73) = GenSym(70)
      GenSym(74) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(73)
      #s25 = GenSym(74)
      GenSym(75) = GenSym(71)
      GenSym(76) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(75)
      #s25 = GenSym(76)
      GenSym(77) = GenSym(72)
      GenSym(78) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      ξ = GenSym(77)
      #s25 = GenSym(78) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 201:
      $(Expr(:boundscheck, false))
      ####_var0#7198#7739 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7198#7739 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7741 = GenSym(5)
      ##a2#7742 = GenSym(6)
      ##div_a#7743 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7741::Float64,##a2#7742::Float64))
      ####afactor#7120#7744 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7742::Float64))
      ####bfactor#7121#7745 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7741::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7742::Float64,##a2#7742::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7750 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7118#7126#7750 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7743::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 202:
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64),0)::Bool goto 26
      $(Expr(:boundscheck, false))
      ######_var0#7068#7070#7753 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7068#7070#7753 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 27
      26: 
      _var1 = ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      27: 
      unless (Base.lt_float)((top(getfield))(_var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.220446049250313e-16)::Bool goto 4 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 203:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7755 = (top(tuple))()::Tuple{}
      goto 29
      ####_var0#7068#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      ##exp_a#7756 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7726#7757 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7730#7761 = (top(tuple))()::Tuple{}
      goto 31
      ########_var0#7094#7098#7730#7761 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      t = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7756::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 204:
      $(Expr(:boundscheck, false))
      ####_var0#7068#7763 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7068#7763 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      ##exp_a#7764 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7726#7765 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7730#7769 = (top(tuple))()::Tuple{}
      goto 35
      ########_var0#7094#7098#7730#7769 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7764::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7770 = GenSym(10)
      ##a2#7771 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7776 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7113#7776 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7770::Float64,##a2#7771::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(13) = (top(getfield))(GenSym(12),:value)::Float64
      GenSym(14) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7777 = GenSym(13)
      ##a2#7778 = GenSym(14)
      ##div_a#7779 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7777::Float64,##a2#7778::Float64))
      ####afactor#7120#7780 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7778::Float64))
      ####bfactor#7121#7781 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7777::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7778::Float64,##a2#7778::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7786 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7118#7126#7786 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7779::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      4:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 206:
      GenSym(15) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(16) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7788 = GenSym(15)
      ##a2#7789 = GenSym(16)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7794 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7113#7794 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7788::Float64,##a2#7789::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (ForwardDiff.iszero)((top(getfield))(GenSym(17),:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 43
      _var2 = (Base.eq_float)((top(getfield))(GenSym(17),:value)::Float64,-1.0)::Bool
      goto 44
      43: 
      _var2 = false
      44: 
      unless _var2::Bool goto 5 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 207:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 209:
      GenSym(18) = (top(getfield))(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(19) = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7803 = GenSym(18)
      ##a2#7804 = GenSym(19)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7809 = (top(tuple))()::Tuple{}
      goto 49
      ####_var0#7113#7809 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7803::Float64,##a2#7804::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7795 = (top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7796 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(1.0)),##a#7795::Float64))
      ##deriv#7797 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7796::Float64,##a#7795::Float64))))
      ####G#7731#7798 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7735#7802 = (top(tuple))()::Tuple{}
      goto 47
      ########_var0#7094#7098#7735#7802 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(22) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(20),:value)::Float64,1.0))), :((top(getfield))(GenSym(20),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7796::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7811"))
      NewvarNode(symbol("##a2#7812"))
      NewvarNode(symbol("##exp_a#7813"))
      NewvarNode(symbol("##powval#7814"))
      NewvarNode(symbol("##logval#7815"))
      NewvarNode(symbol("##new_bs#7816"))
      unless (top(getfield))((top(getfield))(GenSym(21),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 53
      GenSym(25) = (top(getfield))(GenSym(21),:value)::Float64
      ####a#7284#7817 = (top(getfield))(GenSym(22),:value)::Float64
      GenSym(28) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7284#7817::Float64,0,GenSym(25),0)::Float64
      ####exp_a#7285#7818 = (Base.Math.nan_dom_err)(GenSym(28),(Base.box)(Base.Float64,(Base.add_float)(####a#7284#7817::Float64,GenSym(25))))::Float64
      GenSym(29) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(25),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(32) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7284#7817::Float64,0,GenSym(29),0)::Float64
      ####deriv#7286#7819 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(25),(Base.Math.nan_dom_err)(GenSym(32),(Base.box)(Base.Float64,(Base.add_float)(####a#7284#7817::Float64,GenSym(29))))::Float64))
      ######G#7177#7287#7820 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7094#7098#7181#7291#7824 = (top(tuple))()::Tuple{}
      goto 52
      ##########_var0#7094#7098#7181#7291#7824 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      52: 
      _var3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7285#7818::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 55
      53: 
      GenSym(23) = (top(getfield))(GenSym(22),:value)::Float64
      GenSym(24) = (top(getfield))(GenSym(21),:value)::Float64
      ##a1#7811 = GenSym(23)
      ##a2#7812 = GenSym(24)
      GenSym(35) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7811::Float64,0,##a2#7812::Float64,0)::Float64
      ##exp_a#7813 = (Base.Math.nan_dom_err)(GenSym(35),(Base.box)(Base.Float64,(Base.add_float)(##a1#7811::Float64,##a2#7812::Float64)))::Float64
      GenSym(36) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7812::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(39) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7811::Float64,0,GenSym(36),0)::Float64
      ##powval#7814 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7812::Float64,(Base.Math.nan_dom_err)(GenSym(39),(Base.box)(Base.Float64,(Base.add_float)(##a1#7811::Float64,GenSym(36))))::Float64))
      GenSym(41) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7811::Float64,0)::Float64
      ##logval#7815 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7813::Float64,(Base.Math.nan_dom_err)(GenSym(41),##a1#7811::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7296#7829 = (top(tuple))()::Tuple{}
      goto 54
      ####_var0#7296#7829 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      54: 
      ##new_bs#7816 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7813::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      55: 
      t = _var3::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/generalizedextremevalue.jl, line 210:
      GenSym(43) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(ξ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      NewvarNode(symbol("##a1#7840"))
      NewvarNode(symbol("##a2#7841"))
      NewvarNode(symbol("##exp_a#7842"))
      NewvarNode(symbol("##powval#7843"))
      NewvarNode(symbol("##logval#7844"))
      NewvarNode(symbol("##new_bs#7845"))
      unless (top(getfield))((top(getfield))(GenSym(43),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 62
      GenSym(46) = (top(getfield))(GenSym(43),:value)::Float64
      ####a#7284#7846 = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(49) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7284#7846::Float64,0,GenSym(46),0)::Float64
      ####exp_a#7285#7847 = (Base.Math.nan_dom_err)(GenSym(49),(Base.box)(Base.Float64,(Base.add_float)(####a#7284#7846::Float64,GenSym(46))))::Float64
      GenSym(50) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(46),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(53) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7284#7846::Float64,0,GenSym(50),0)::Float64
      ####deriv#7286#7848 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(46),(Base.Math.nan_dom_err)(GenSym(53),(Base.box)(Base.Float64,(Base.add_float)(####a#7284#7846::Float64,GenSym(50))))::Float64))
      ######G#7177#7287#7849 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7094#7098#7181#7291#7853 = (top(tuple))()::Tuple{}
      goto 61
      ##########_var0#7094#7098#7181#7291#7853 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      61: 
      _var4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7285#7847::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 64
      62: 
      GenSym(44) = (top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(45) = (top(getfield))(GenSym(43),:value)::Float64
      ##a1#7840 = GenSym(44)
      ##a2#7841 = GenSym(45)
      GenSym(56) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7840::Float64,0,##a2#7841::Float64,0)::Float64
      ##exp_a#7842 = (Base.Math.nan_dom_err)(GenSym(56),(Base.box)(Base.Float64,(Base.add_float)(##a1#7840::Float64,##a2#7841::Float64)))::Float64
      GenSym(57) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7841::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(60) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7840::Float64,0,GenSym(57),0)::Float64
      ##powval#7843 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7841::Float64,(Base.Math.nan_dom_err)(GenSym(60),(Base.box)(Base.Float64,(Base.add_float)(##a1#7840::Float64,GenSym(57))))::Float64))
      GenSym(62) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7840::Float64,0)::Float64
      ##logval#7844 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7842::Float64,(Base.Math.nan_dom_err)(GenSym(62),##a1#7840::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7296#7858 = (top(tuple))()::Tuple{}
      goto 63
      ####_var0#7296#7858 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      63: 
      ##new_bs#7845 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7842::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      64: 
      GenSym(63) = _var4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7068#7832 = (top(tuple))()::Tuple{}
      goto 56
      ####_var0#7068#7832 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      56: 
      ##exp_a#7833 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(t::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7726#7834 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7094#7098#7730#7838 = (top(tuple))()::Tuple{}
      goto 58
      ########_var0#7094#7098#7730#7838 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      58: 
      GenSym(64) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7833::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(65) = (top(getfield))(GenSym(63),:value)::Float64
      GenSym(66) = (top(getfield))(GenSym(64),:value)::Float64
      ##a1#7860 = GenSym(65)
      ##a2#7861 = GenSym(66)
      $(Expr(:boundscheck, false))
      ####_var0#7113#7866 = (top(tuple))()::Tuple{}
      goto 65
      ####_var0#7113#7866 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      65: 
      GenSym(67) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7860::Float64,##a2#7861::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(68) = (top(getfield))(GenSym(67),:value)::Float64
      GenSym(69) = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7867 = GenSym(68)
      ##a2#7868 = GenSym(69)
      ##div_a#7869 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7867::Float64,##a2#7868::Float64))
      ####afactor#7120#7870 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7868::Float64))
      ####bfactor#7121#7871 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7867::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7868::Float64,##a2#7868::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7118#7126#7876 = (top(tuple))()::Tuple{}
      goto 67
      ######_var0#7118#7126#7876 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      67: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7869::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      6: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----


----float----


----dual----





____________________________
cf
____________________________

----integer----


----float----


----dual----





