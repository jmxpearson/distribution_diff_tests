____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 61:
      return (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
failprob
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}
  ######types#7070#7073#7076::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}
  ######types#7070#7073#7076::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}
  ######types#7070#7073#7076::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}
  ######types#7070#7073#7076::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7069#7071#7074::Tuple{}
  ####_var0#7072#7075::Tuple{}
  ######types#7070#7073#7076::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 62:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7075 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7072#7075 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 59:
      return (top(tuple))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  p::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),p::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7101::Tuple{}
  ####_var0#7072#7102::Tuple{}
  ######types#7070#7073#7103::Tuple{Type{Float64}}
  ##a1#7104::Float64
  ##a2#7105::Float64
  ######a#7078#7082#7106::Tuple{}
  ######b#7079#7083#7107::Tuple{}
  ######afactor#7080#7084#7108::Float64
  ######bfactor#7081#7085#7109::Float64
  ####_var0#7086#7110::Tuple{}
  ##a1#7111::Float64
  ##a2#7112::Float64
  ##div_a#7113::Float64
  ####afactor#7093#7114::Float64
  ####bfactor#7094#7115::Float64
  ########a#7078#7087#7095#7116::Tuple{}
  ########b#7079#7088#7096#7117::Tuple{}
  ########afactor#7080#7089#7097#7118::Float64
  ########bfactor#7081#7090#7098#7119::Float64
  ######_var0#7091#7099#7120::Tuple{}
  ######types#7092#7100#7121::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7102 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7104 = GenSym(0)
      ##a2#7105 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7110 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7104::Float64,##a2#7105::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7111 = GenSym(3)
      ##a2#7112 = GenSym(4)
      ##div_a#7113 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7111::Float64,##a2#7112::Float64))
      ####afactor#7093#7114 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7112::Float64))
      ####bfactor#7094#7115 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7111::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7112::Float64,##a2#7112::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7120 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7091#7099#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7113::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),p::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),p::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7101::Tuple{}
  ####_var0#7072#7102::Tuple{}
  ######types#7070#7073#7103::Tuple{Type{Float64}}
  ##a1#7104::Float64
  ##a2#7105::Float64
  ######a#7078#7082#7106::Tuple{}
  ######b#7079#7083#7107::Tuple{}
  ######afactor#7080#7084#7108::Float64
  ######bfactor#7081#7085#7109::Float64
  ####_var0#7086#7110::Tuple{}
  ##a1#7111::Float64
  ##a2#7112::Float64
  ##div_a#7113::Float64
  ####afactor#7093#7114::Float64
  ####bfactor#7094#7115::Float64
  ########a#7078#7087#7095#7116::Tuple{}
  ########b#7079#7088#7096#7117::Tuple{}
  ########afactor#7080#7089#7097#7118::Float64
  ########bfactor#7081#7090#7098#7119::Float64
  ######_var0#7091#7099#7120::Tuple{}
  ######types#7092#7100#7121::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7102 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7104 = GenSym(0)
      ##a2#7105 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7110 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7104::Float64,##a2#7105::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7111 = GenSym(3)
      ##a2#7112 = GenSym(4)
      ##div_a#7113 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7111::Float64,##a2#7112::Float64))
      ####afactor#7093#7114 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7112::Float64))
      ####bfactor#7094#7115 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7111::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7112::Float64,##a2#7112::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7120 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7091#7099#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7113::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7101::Tuple{}
  ####_var0#7072#7102::Tuple{}
  ######types#7070#7073#7103::Tuple{Type{Float64}}
  ##a1#7104::Float64
  ##a2#7105::Float64
  ######a#7078#7082#7106::Tuple{}
  ######b#7079#7083#7107::Tuple{}
  ######afactor#7080#7084#7108::Float64
  ######bfactor#7081#7085#7109::Float64
  ####_var0#7086#7110::Tuple{}
  ##a1#7111::Float64
  ##a2#7112::Float64
  ##div_a#7113::Float64
  ####afactor#7093#7114::Float64
  ####bfactor#7094#7115::Float64
  ########a#7078#7087#7095#7116::Tuple{}
  ########b#7079#7088#7096#7117::Tuple{}
  ########afactor#7080#7089#7097#7118::Float64
  ########bfactor#7081#7090#7098#7119::Float64
  ######_var0#7091#7099#7120::Tuple{}
  ######types#7092#7100#7121::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7102 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7104 = GenSym(0)
      ##a2#7105 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7110 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7104::Float64,##a2#7105::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7111 = GenSym(3)
      ##a2#7112 = GenSym(4)
      ##div_a#7113 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7111::Float64,##a2#7112::Float64))
      ####afactor#7093#7114 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7112::Float64))
      ####bfactor#7094#7115 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7111::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7112::Float64,##a2#7112::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7120 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7091#7099#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7113::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7101::Tuple{}
  ####_var0#7072#7102::Tuple{}
  ######types#7070#7073#7103::Tuple{Type{Float64}}
  ##a1#7104::Float64
  ##a2#7105::Float64
  ######a#7078#7082#7106::Tuple{}
  ######b#7079#7083#7107::Tuple{}
  ######afactor#7080#7084#7108::Float64
  ######bfactor#7081#7085#7109::Float64
  ####_var0#7086#7110::Tuple{}
  ##a1#7111::Float64
  ##a2#7112::Float64
  ##div_a#7113::Float64
  ####afactor#7093#7114::Float64
  ####bfactor#7094#7115::Float64
  ########a#7078#7087#7095#7116::Tuple{}
  ########b#7079#7088#7096#7117::Tuple{}
  ########afactor#7080#7089#7097#7118::Float64
  ########bfactor#7081#7090#7098#7119::Float64
  ######_var0#7091#7099#7120::Tuple{}
  ######types#7092#7100#7121::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7102 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7104 = GenSym(0)
      ##a2#7105 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7110 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7104::Float64,##a2#7105::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7111 = GenSym(3)
      ##a2#7112 = GenSym(4)
      ##div_a#7113 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7111::Float64,##a2#7112::Float64))
      ####afactor#7093#7114 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7112::Float64))
      ####bfactor#7094#7115 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7111::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7112::Float64,##a2#7112::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7120 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7091#7099#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7113::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7101::Tuple{}
  ####_var0#7072#7102::Tuple{}
  ######types#7070#7073#7103::Tuple{Type{Float64}}
  ##a1#7104::Float64
  ##a2#7105::Float64
  ######a#7078#7082#7106::Tuple{}
  ######b#7079#7083#7107::Tuple{}
  ######afactor#7080#7084#7108::Float64
  ######bfactor#7081#7085#7109::Float64
  ####_var0#7086#7110::Tuple{}
  ##a1#7111::Float64
  ##a2#7112::Float64
  ##div_a#7113::Float64
  ####afactor#7093#7114::Float64
  ####bfactor#7094#7115::Float64
  ########a#7078#7087#7095#7116::Tuple{}
  ########b#7079#7088#7096#7117::Tuple{}
  ########afactor#7080#7089#7097#7118::Float64
  ########bfactor#7081#7090#7098#7119::Float64
  ######_var0#7091#7099#7120::Tuple{}
  ######types#7092#7100#7121::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 67:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7102 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7104 = GenSym(0)
      ##a2#7105 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7110 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7110 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7104::Float64,##a2#7105::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7111 = GenSym(3)
      ##a2#7112 = GenSym(4)
      ##div_a#7113 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7111::Float64,##a2#7112::Float64))
      ####afactor#7093#7114 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7112::Float64))
      ####bfactor#7094#7115 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7111::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7112::Float64,##a2#7112::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7120 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7091#7099#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7113::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  p::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(p::Int64,p::Int64))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,p::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7078#7082#7130::Tuple{}
  ######b#7079#7083#7131::Tuple{}
  ######afactor#7080#7084#7132::Float64
  ######bfactor#7081#7085#7133::Float64
  ####_var0#7086#7134::Tuple{}
  ######tup#7069#7071#7135::Tuple{}
  ####_var0#7072#7136::Tuple{}
  ######types#7070#7073#7137::Tuple{Type{Float64}}
  ##a1#7138::Float64
  ##a2#7139::Float64
  ######a#7078#7082#7140::Tuple{}
  ######b#7079#7083#7141::Tuple{}
  ######afactor#7080#7084#7142::Float64
  ######bfactor#7081#7085#7143::Float64
  ####_var0#7086#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ##div_a#7147::Float64
  ####afactor#7093#7148::Float64
  ####bfactor#7094#7149::Float64
  ########a#7078#7087#7095#7150::Tuple{}
  ########b#7079#7088#7096#7151::Tuple{}
  ########afactor#7080#7089#7097#7152::Float64
  ########bfactor#7081#7090#7098#7153::Float64
  ######_var0#7091#7099#7154::Tuple{}
  ######types#7092#7100#7155::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7136 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7072#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7138 = GenSym(2)
      ##a2#7139 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7144 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7138::Float64,##a2#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7128 = GenSym(0)
      ##a2#7129 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7134 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7086#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7145 = GenSym(6)
      ##a2#7146 = GenSym(7)
      ##div_a#7147 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7145::Float64,##a2#7146::Float64))
      ####afactor#7093#7148 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7146::Float64))
      ####bfactor#7094#7149 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7145::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7146::Float64,##a2#7146::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7154 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,p::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,p::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7078#7082#7130::Tuple{}
  ######b#7079#7083#7131::Tuple{}
  ######afactor#7080#7084#7132::Float64
  ######bfactor#7081#7085#7133::Float64
  ####_var0#7086#7134::Tuple{}
  ######tup#7069#7071#7135::Tuple{}
  ####_var0#7072#7136::Tuple{}
  ######types#7070#7073#7137::Tuple{Type{Float64}}
  ##a1#7138::Float64
  ##a2#7139::Float64
  ######a#7078#7082#7140::Tuple{}
  ######b#7079#7083#7141::Tuple{}
  ######afactor#7080#7084#7142::Float64
  ######bfactor#7081#7085#7143::Float64
  ####_var0#7086#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ##div_a#7147::Float64
  ####afactor#7093#7148::Float64
  ####bfactor#7094#7149::Float64
  ########a#7078#7087#7095#7150::Tuple{}
  ########b#7079#7088#7096#7151::Tuple{}
  ########afactor#7080#7089#7097#7152::Float64
  ########bfactor#7081#7090#7098#7153::Float64
  ######_var0#7091#7099#7154::Tuple{}
  ######types#7092#7100#7155::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7136 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7072#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7138 = GenSym(2)
      ##a2#7139 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7144 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7138::Float64,##a2#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7128 = GenSym(0)
      ##a2#7129 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7134 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7086#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7145 = GenSym(6)
      ##a2#7146 = GenSym(7)
      ##div_a#7147 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7145::Float64,##a2#7146::Float64))
      ####afactor#7093#7148 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7146::Float64))
      ####bfactor#7094#7149 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7145::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7146::Float64,##a2#7146::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7154 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7078#7082#7130::Tuple{}
  ######b#7079#7083#7131::Tuple{}
  ######afactor#7080#7084#7132::Float64
  ######bfactor#7081#7085#7133::Float64
  ####_var0#7086#7134::Tuple{}
  ######tup#7069#7071#7135::Tuple{}
  ####_var0#7072#7136::Tuple{}
  ######types#7070#7073#7137::Tuple{Type{Float64}}
  ##a1#7138::Float64
  ##a2#7139::Float64
  ######a#7078#7082#7140::Tuple{}
  ######b#7079#7083#7141::Tuple{}
  ######afactor#7080#7084#7142::Float64
  ######bfactor#7081#7085#7143::Float64
  ####_var0#7086#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ##div_a#7147::Float64
  ####afactor#7093#7148::Float64
  ####bfactor#7094#7149::Float64
  ########a#7078#7087#7095#7150::Tuple{}
  ########b#7079#7088#7096#7151::Tuple{}
  ########afactor#7080#7089#7097#7152::Float64
  ########bfactor#7081#7090#7098#7153::Float64
  ######_var0#7091#7099#7154::Tuple{}
  ######types#7092#7100#7155::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7136 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7072#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7138 = GenSym(2)
      ##a2#7139 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7144 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7138::Float64,##a2#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7128 = GenSym(0)
      ##a2#7129 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7134 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7086#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7145 = GenSym(6)
      ##a2#7146 = GenSym(7)
      ##div_a#7147 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7145::Float64,##a2#7146::Float64))
      ####afactor#7093#7148 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7146::Float64))
      ####bfactor#7094#7149 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7145::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7146::Float64,##a2#7146::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7154 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7078#7082#7130::Tuple{}
  ######b#7079#7083#7131::Tuple{}
  ######afactor#7080#7084#7132::Float64
  ######bfactor#7081#7085#7133::Float64
  ####_var0#7086#7134::Tuple{}
  ######tup#7069#7071#7135::Tuple{}
  ####_var0#7072#7136::Tuple{}
  ######types#7070#7073#7137::Tuple{Type{Float64}}
  ##a1#7138::Float64
  ##a2#7139::Float64
  ######a#7078#7082#7140::Tuple{}
  ######b#7079#7083#7141::Tuple{}
  ######afactor#7080#7084#7142::Float64
  ######bfactor#7081#7085#7143::Float64
  ####_var0#7086#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ##div_a#7147::Float64
  ####afactor#7093#7148::Float64
  ####bfactor#7094#7149::Float64
  ########a#7078#7087#7095#7150::Tuple{}
  ########b#7079#7088#7096#7151::Tuple{}
  ########afactor#7080#7089#7097#7152::Float64
  ########bfactor#7081#7090#7098#7153::Float64
  ######_var0#7091#7099#7154::Tuple{}
  ######types#7092#7100#7155::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7136 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7072#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7138 = GenSym(2)
      ##a2#7139 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7144 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7138::Float64,##a2#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7128 = GenSym(0)
      ##a2#7129 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7134 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7086#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7145 = GenSym(6)
      ##a2#7146 = GenSym(7)
      ##div_a#7147 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7145::Float64,##a2#7146::Float64))
      ####afactor#7093#7148 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7146::Float64))
      ####bfactor#7094#7149 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7145::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7146::Float64,##a2#7146::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7154 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7078#7082#7130::Tuple{}
  ######b#7079#7083#7131::Tuple{}
  ######afactor#7080#7084#7132::Float64
  ######bfactor#7081#7085#7133::Float64
  ####_var0#7086#7134::Tuple{}
  ######tup#7069#7071#7135::Tuple{}
  ####_var0#7072#7136::Tuple{}
  ######types#7070#7073#7137::Tuple{Type{Float64}}
  ##a1#7138::Float64
  ##a2#7139::Float64
  ######a#7078#7082#7140::Tuple{}
  ######b#7079#7083#7141::Tuple{}
  ######afactor#7080#7084#7142::Float64
  ######bfactor#7081#7085#7143::Float64
  ####_var0#7086#7144::Tuple{}
  ##a1#7145::Float64
  ##a2#7146::Float64
  ##div_a#7147::Float64
  ####afactor#7093#7148::Float64
  ####bfactor#7094#7149::Float64
  ########a#7078#7087#7095#7150::Tuple{}
  ########b#7079#7088#7096#7151::Tuple{}
  ########afactor#7080#7089#7097#7152::Float64
  ########bfactor#7081#7090#7098#7153::Float64
  ######_var0#7091#7099#7154::Tuple{}
  ######types#7092#7100#7155::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 69:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7136 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7072#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7138 = GenSym(2)
      ##a2#7139 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7144 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7138::Float64,##a2#7139::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7128 = GenSym(0)
      ##a2#7129 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7134 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7086#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7145 = GenSym(6)
      ##a2#7146 = GenSym(7)
      ##div_a#7147 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7145::Float64,##a2#7146::Float64))
      ####afactor#7093#7148 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7146::Float64))
      ####bfactor#7094#7149 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7145::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7146::Float64,##a2#7146::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7154 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  p::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64)),1.0)))),(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))))))::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,1.0)))),p::Float64)))))::Int64
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7070#7156#7157::Tuple{Type{Float64}}
  ######tup#7069#7071#7158::Tuple{}
  ####_var0#7072#7159::Tuple{}
  ######types#7070#7073#7160::Tuple{Type{Float64}}
  ##a1#7161::Float64
  ##a2#7162::Float64
  ######a#7078#7082#7163::Tuple{}
  ######b#7079#7083#7164::Tuple{}
  ######afactor#7080#7084#7165::Float64
  ######bfactor#7081#7085#7166::Float64
  ####_var0#7086#7167::Tuple{}
  ##a1#7168::Float64
  ##a2#7169::Float64
  ##div_a#7170::Float64
  ####afactor#7093#7171::Float64
  ####bfactor#7094#7172::Float64
  ########a#7078#7087#7095#7173::Tuple{}
  ########b#7079#7088#7096#7174::Tuple{}
  ########afactor#7080#7089#7097#7175::Float64
  ########bfactor#7081#7090#7098#7176::Float64
  ######_var0#7091#7099#7177::Tuple{}
  ######types#7092#7100#7178::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7159 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7072#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7161 = GenSym(1)
      ##a2#7162 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7167 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7086#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7161::Float64,##a2#7162::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7168 = GenSym(4)
      ##a2#7169 = GenSym(5)
      ##div_a#7170 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7168::Float64,##a2#7169::Float64))
      ####afactor#7093#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7169::Float64))
      ####bfactor#7094#7172 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7168::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7169::Float64,##a2#7169::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7177 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7091#7099#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7170::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(GenSym(6),:value)::Float64)))::Int64
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,1.0)))),p::Float64)))))::Int64
  end::Int64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,1.0)))),p::Float64)))))::Int64
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7070#7156#7157::Tuple{Type{Float64}}
  ######tup#7069#7071#7158::Tuple{}
  ####_var0#7072#7159::Tuple{}
  ######types#7070#7073#7160::Tuple{Type{Float64}}
  ##a1#7161::Float64
  ##a2#7162::Float64
  ######a#7078#7082#7163::Tuple{}
  ######b#7079#7083#7164::Tuple{}
  ######afactor#7080#7084#7165::Float64
  ######bfactor#7081#7085#7166::Float64
  ####_var0#7086#7167::Tuple{}
  ##a1#7168::Float64
  ##a2#7169::Float64
  ##div_a#7170::Float64
  ####afactor#7093#7171::Float64
  ####bfactor#7094#7172::Float64
  ########a#7078#7087#7095#7173::Tuple{}
  ########b#7079#7088#7096#7174::Tuple{}
  ########afactor#7080#7089#7097#7175::Float64
  ########bfactor#7081#7090#7098#7176::Float64
  ######_var0#7091#7099#7177::Tuple{}
  ######types#7092#7100#7178::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7159 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7072#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7161 = GenSym(1)
      ##a2#7162 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7167 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7086#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7161::Float64,##a2#7162::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7168 = GenSym(4)
      ##a2#7169 = GenSym(5)
      ##div_a#7170 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7168::Float64,##a2#7169::Float64))
      ####afactor#7093#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7169::Float64))
      ####bfactor#7094#7172 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7168::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7169::Float64,##a2#7169::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7177 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7091#7099#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7170::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(GenSym(6),:value)::Float64)))::Int64
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7070#7156#7157::Tuple{Type{Float64}}
  ######tup#7069#7071#7158::Tuple{}
  ####_var0#7072#7159::Tuple{}
  ######types#7070#7073#7160::Tuple{Type{Float64}}
  ##a1#7161::Float64
  ##a2#7162::Float64
  ######a#7078#7082#7163::Tuple{}
  ######b#7079#7083#7164::Tuple{}
  ######afactor#7080#7084#7165::Float64
  ######bfactor#7081#7085#7166::Float64
  ####_var0#7086#7167::Tuple{}
  ##a1#7168::Float64
  ##a2#7169::Float64
  ##div_a#7170::Float64
  ####afactor#7093#7171::Float64
  ####bfactor#7094#7172::Float64
  ########a#7078#7087#7095#7173::Tuple{}
  ########b#7079#7088#7096#7174::Tuple{}
  ########afactor#7080#7089#7097#7175::Float64
  ########bfactor#7081#7090#7098#7176::Float64
  ######_var0#7091#7099#7177::Tuple{}
  ######types#7092#7100#7178::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7159 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7072#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7161 = GenSym(1)
      ##a2#7162 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7167 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7086#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7161::Float64,##a2#7162::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7168 = GenSym(4)
      ##a2#7169 = GenSym(5)
      ##div_a#7170 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7168::Float64,##a2#7169::Float64))
      ####afactor#7093#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7169::Float64))
      ####bfactor#7094#7172 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7168::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7169::Float64,##a2#7169::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7177 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7091#7099#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7170::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(GenSym(6),:value)::Float64)))::Int64
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7070#7156#7157::Tuple{Type{Float64}}
  ######tup#7069#7071#7158::Tuple{}
  ####_var0#7072#7159::Tuple{}
  ######types#7070#7073#7160::Tuple{Type{Float64}}
  ##a1#7161::Float64
  ##a2#7162::Float64
  ######a#7078#7082#7163::Tuple{}
  ######b#7079#7083#7164::Tuple{}
  ######afactor#7080#7084#7165::Float64
  ######bfactor#7081#7085#7166::Float64
  ####_var0#7086#7167::Tuple{}
  ##a1#7168::Float64
  ##a2#7169::Float64
  ##div_a#7170::Float64
  ####afactor#7093#7171::Float64
  ####bfactor#7094#7172::Float64
  ########a#7078#7087#7095#7173::Tuple{}
  ########b#7079#7088#7096#7174::Tuple{}
  ########afactor#7080#7089#7097#7175::Float64
  ########bfactor#7081#7090#7098#7176::Float64
  ######_var0#7091#7099#7177::Tuple{}
  ######types#7092#7100#7178::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7159 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7072#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7161 = GenSym(1)
      ##a2#7162 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7167 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7086#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7161::Float64,##a2#7162::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7168 = GenSym(4)
      ##a2#7169 = GenSym(5)
      ##div_a#7170 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7168::Float64,##a2#7169::Float64))
      ####afactor#7093#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7169::Float64))
      ####bfactor#7094#7172 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7168::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7169::Float64,##a2#7169::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7177 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7091#7099#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7170::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(GenSym(6),:value)::Float64)))::Int64
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7070#7156#7157::Tuple{Type{Float64}}
  ######tup#7069#7071#7158::Tuple{}
  ####_var0#7072#7159::Tuple{}
  ######types#7070#7073#7160::Tuple{Type{Float64}}
  ##a1#7161::Float64
  ##a2#7162::Float64
  ######a#7078#7082#7163::Tuple{}
  ######b#7079#7083#7164::Tuple{}
  ######afactor#7080#7084#7165::Float64
  ######bfactor#7081#7085#7166::Float64
  ####_var0#7086#7167::Tuple{}
  ##a1#7168::Float64
  ##a2#7169::Float64
  ##div_a#7170::Float64
  ####afactor#7093#7171::Float64
  ####bfactor#7094#7172::Float64
  ########a#7078#7087#7095#7173::Tuple{}
  ########b#7079#7088#7096#7174::Tuple{}
  ########afactor#7080#7089#7097#7175::Float64
  ########bfactor#7081#7090#7098#7176::Float64
  ######_var0#7091#7099#7177::Tuple{}
  ######types#7092#7100#7178::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 77:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7159 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7072#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7161 = GenSym(1)
      ##a2#7162 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7167 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7086#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7161::Float64,##a2#7162::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7168 = GenSym(4)
      ##a2#7169 = GenSym(5)
      ##div_a#7170 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7168::Float64,##a2#7169::Float64))
      ####afactor#7093#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7169::Float64))
      ####bfactor#7094#7172 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7168::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7169::Float64,##a2#7169::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7177 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7091#7099#7177 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7170::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((top(getfield))(GenSym(6),:value)::Float64)))::Int64
  end::Int64




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  ##p#7179::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##p#7179 = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,##p#7179::Int64)))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64)),1.0)))),(Base.box)(Float64,(Base.sitofp)(Float64,##p#7179::Int64)))))))::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  ##p#7180::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##p#7180 = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,##p#7180::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,1.0)))),##p#7180::Float64)))))::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  ##p#7180::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##p#7180 = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,##p#7180::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,1.0)))),##p#7180::Float64)))))::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  ##p#7180::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##p#7180 = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (top(vect))((Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.floor_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,##p#7180::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,1.0)))),##p#7180::Float64)))))::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Int64)::Array{Int64,1}
  end::Array{Int64,1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      return (Distributions.quantile)(d::Distributions.NegativeBinomial{Int64},0.5)::Int64
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(33)))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.nbinominvcdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(33)))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(31) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1))
      GenSym(32) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(33) = (top(ccall))((top(tuple))("qnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0,GenSym(31),0,GenSym(32),0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(33)))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.nbinominvcdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.nbinominvcdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.nbinominvcdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.nbinominvcdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  p::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(2.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64))))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(2.0,p::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7200::Tuple{}
  ####_var0#7072#7201::Tuple{}
  ######types#7070#7073#7202::Tuple{Type{Float64}}
  ##a1#7203::Float64
  ##a2#7204::Float64
  ######a#7078#7082#7205::Tuple{}
  ######b#7079#7083#7206::Tuple{}
  ######afactor#7080#7084#7207::Float64
  ######bfactor#7081#7085#7208::Float64
  ####_var0#7086#7209::Tuple{}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7195#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7196#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7197#7214::Tuple{}
  ##########x#7187#7189#7193#7198#7215::Float64
  ########_var0#7190#7194#7199#7216::Tuple{}
  ######tup#7069#7071#7217::Tuple{}
  ####_var0#7072#7218::Tuple{}
  ######types#7070#7073#7219::Tuple{Type{Float64}}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7093#7223::Float64
  ####bfactor#7094#7224::Float64
  ########a#7078#7087#7095#7225::Tuple{}
  ########b#7079#7088#7096#7226::Tuple{}
  ########afactor#7080#7089#7097#7227::Float64
  ########bfactor#7081#7090#7098#7228::Float64
  ######_var0#7091#7099#7229::Tuple{}
  ######types#7092#7100#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7218 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7201 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7203 = GenSym(0)
      ##a2#7204 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7209 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7209 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7203::Float64,##a2#7204::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7195#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7199#7216 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7190#7194#7199#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(2.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7220 = GenSym(4)
      ##a2#7221 = GenSym(5)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7093#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7094#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7229 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7091#7099#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(2.0,p::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(2.0,p::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7200::Tuple{}
  ####_var0#7072#7201::Tuple{}
  ######types#7070#7073#7202::Tuple{Type{Float64}}
  ##a1#7203::Float64
  ##a2#7204::Float64
  ######a#7078#7082#7205::Tuple{}
  ######b#7079#7083#7206::Tuple{}
  ######afactor#7080#7084#7207::Float64
  ######bfactor#7081#7085#7208::Float64
  ####_var0#7086#7209::Tuple{}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7195#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7196#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7197#7214::Tuple{}
  ##########x#7187#7189#7193#7198#7215::Float64
  ########_var0#7190#7194#7199#7216::Tuple{}
  ######tup#7069#7071#7217::Tuple{}
  ####_var0#7072#7218::Tuple{}
  ######types#7070#7073#7219::Tuple{Type{Float64}}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7093#7223::Float64
  ####bfactor#7094#7224::Float64
  ########a#7078#7087#7095#7225::Tuple{}
  ########b#7079#7088#7096#7226::Tuple{}
  ########afactor#7080#7089#7097#7227::Float64
  ########bfactor#7081#7090#7098#7228::Float64
  ######_var0#7091#7099#7229::Tuple{}
  ######types#7092#7100#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7218 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7201 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7203 = GenSym(0)
      ##a2#7204 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7209 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7209 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7203::Float64,##a2#7204::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7195#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7199#7216 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7190#7194#7199#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(2.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7220 = GenSym(4)
      ##a2#7221 = GenSym(5)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7093#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7094#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7229 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7091#7099#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7200::Tuple{}
  ####_var0#7072#7201::Tuple{}
  ######types#7070#7073#7202::Tuple{Type{Float64}}
  ##a1#7203::Float64
  ##a2#7204::Float64
  ######a#7078#7082#7205::Tuple{}
  ######b#7079#7083#7206::Tuple{}
  ######afactor#7080#7084#7207::Float64
  ######bfactor#7081#7085#7208::Float64
  ####_var0#7086#7209::Tuple{}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7195#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7196#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7197#7214::Tuple{}
  ##########x#7187#7189#7193#7198#7215::Float64
  ########_var0#7190#7194#7199#7216::Tuple{}
  ######tup#7069#7071#7217::Tuple{}
  ####_var0#7072#7218::Tuple{}
  ######types#7070#7073#7219::Tuple{Type{Float64}}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7093#7223::Float64
  ####bfactor#7094#7224::Float64
  ########a#7078#7087#7095#7225::Tuple{}
  ########b#7079#7088#7096#7226::Tuple{}
  ########afactor#7080#7089#7097#7227::Float64
  ########bfactor#7081#7090#7098#7228::Float64
  ######_var0#7091#7099#7229::Tuple{}
  ######types#7092#7100#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7218 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7201 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7203 = GenSym(0)
      ##a2#7204 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7209 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7209 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7203::Float64,##a2#7204::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7195#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7199#7216 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7190#7194#7199#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(2.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7220 = GenSym(4)
      ##a2#7221 = GenSym(5)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7093#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7094#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7229 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7091#7099#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7200::Tuple{}
  ####_var0#7072#7201::Tuple{}
  ######types#7070#7073#7202::Tuple{Type{Float64}}
  ##a1#7203::Float64
  ##a2#7204::Float64
  ######a#7078#7082#7205::Tuple{}
  ######b#7079#7083#7206::Tuple{}
  ######afactor#7080#7084#7207::Float64
  ######bfactor#7081#7085#7208::Float64
  ####_var0#7086#7209::Tuple{}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7195#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7196#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7197#7214::Tuple{}
  ##########x#7187#7189#7193#7198#7215::Float64
  ########_var0#7190#7194#7199#7216::Tuple{}
  ######tup#7069#7071#7217::Tuple{}
  ####_var0#7072#7218::Tuple{}
  ######types#7070#7073#7219::Tuple{Type{Float64}}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7093#7223::Float64
  ####bfactor#7094#7224::Float64
  ########a#7078#7087#7095#7225::Tuple{}
  ########b#7079#7088#7096#7226::Tuple{}
  ########afactor#7080#7089#7097#7227::Float64
  ########bfactor#7081#7090#7098#7228::Float64
  ######_var0#7091#7099#7229::Tuple{}
  ######types#7092#7100#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7218 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7201 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7203 = GenSym(0)
      ##a2#7204 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7209 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7209 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7203::Float64,##a2#7204::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7195#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7199#7216 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7190#7194#7199#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(2.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7220 = GenSym(4)
      ##a2#7221 = GenSym(5)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7093#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7094#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7229 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7091#7099#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7200::Tuple{}
  ####_var0#7072#7201::Tuple{}
  ######types#7070#7073#7202::Tuple{Type{Float64}}
  ##a1#7203::Float64
  ##a2#7204::Float64
  ######a#7078#7082#7205::Tuple{}
  ######b#7079#7083#7206::Tuple{}
  ######afactor#7080#7084#7207::Float64
  ######bfactor#7081#7085#7208::Float64
  ####_var0#7086#7209::Tuple{}
  ##sqrt_a#7210::Float64
  ##deriv#7211::Float64
  ####G#7195#7212::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7196#7213::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7197#7214::Tuple{}
  ##########x#7187#7189#7193#7198#7215::Float64
  ########_var0#7190#7194#7199#7216::Tuple{}
  ######tup#7069#7071#7217::Tuple{}
  ####_var0#7072#7218::Tuple{}
  ######types#7070#7073#7219::Tuple{Type{Float64}}
  ##a1#7220::Float64
  ##a2#7221::Float64
  ##div_a#7222::Float64
  ####afactor#7093#7223::Float64
  ####bfactor#7094#7224::Float64
  ########a#7078#7087#7095#7225::Tuple{}
  ########b#7079#7088#7096#7226::Tuple{}
  ########afactor#7080#7089#7097#7227::Float64
  ########bfactor#7081#7090#7098#7228::Float64
  ######_var0#7091#7099#7229::Tuple{}
  ######types#7092#7100#7230::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 73:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7072#7218 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7201 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7203 = GenSym(0)
      ##a2#7204 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7209 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7209 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7203::Float64,##a2#7204::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7210 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7211 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7210::Float64))
      ####G#7195#7212 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7199#7216 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7190#7194#7199#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7210::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(2.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7220 = GenSym(4)
      ##a2#7221 = GenSym(5)
      ##div_a#7222 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7220::Float64,##a2#7221::Float64))
      ####afactor#7093#7223 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7221::Float64))
      ####bfactor#7094#7224 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7220::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7221::Float64,##a2#7221::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7229 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7091#7099#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7222::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  p::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(6.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64)))),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(p::Int64,p::Int64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64))))))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(6.0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,p::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64))))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7244::Tuple{}
  ####_var0#7072#7245::Tuple{}
  ######types#7070#7073#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7078#7082#7249::Tuple{}
  ######b#7079#7083#7250::Tuple{}
  ######afactor#7080#7084#7251::Float64
  ######bfactor#7081#7085#7252::Float64
  ####_var0#7086#7253::Tuple{}
  ##a1#7254::Float64
  ##a2#7255::Float64
  ######a#7078#7082#7256::Tuple{}
  ######b#7079#7083#7257::Tuple{}
  ######afactor#7080#7084#7258::Float64
  ######bfactor#7081#7085#7259::Float64
  ####_var0#7086#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ##div_a#7263::Float64
  ####afactor#7093#7264::Float64
  ####bfactor#7094#7265::Float64
  ########a#7078#7087#7095#7266::Tuple{}
  ########b#7079#7088#7096#7267::Tuple{}
  ########afactor#7080#7089#7097#7268::Float64
  ########bfactor#7081#7090#7098#7269::Float64
  ######_var0#7091#7099#7270::Tuple{}
  ######types#7092#7100#7271::Tuple{Type{Float64}}
  ##a#7272::Float64
  ##div_a#7273::Float64
  ##deriv#7274::Float64
  ####G#7234#7275::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7235#7276::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7236#7277::Tuple{}
  ##########x#7187#7189#7193#7237#7278::Float64
  ########_var0#7190#7194#7238#7279::Tuple{}
  ######a#7239#7241#7280::Tuple{}
  ######b#7240#7242#7281::Tuple{}
  ####_var0#7243#7282::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7272 = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7273 = (Base.box)(Base.Float64,(Base.div_float)(6.0,##a#7272::Float64))
      ##deriv#7274 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7273::Float64,##a#7272::Float64))))
      ####G#7234#7275 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7238#7279 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7190#7194#7238#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7254 = GenSym(2)
      ##a2#7255 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7260 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7254::Float64,##a2#7255::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7072#7245 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7247 = GenSym(0)
      ##a2#7248 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7253 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7261 = GenSym(6)
      ##a2#7262 = GenSym(7)
      ##div_a#7263 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7261::Float64,##a2#7262::Float64))
      ####afactor#7093#7264 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7262::Float64))
      ####bfactor#7094#7265 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7261::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7262::Float64,##a2#7262::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7270 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7263::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7243#7282 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7243#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(6.0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,p::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64))))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(6.0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64)),(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,p::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64))))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7244::Tuple{}
  ####_var0#7072#7245::Tuple{}
  ######types#7070#7073#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7078#7082#7249::Tuple{}
  ######b#7079#7083#7250::Tuple{}
  ######afactor#7080#7084#7251::Float64
  ######bfactor#7081#7085#7252::Float64
  ####_var0#7086#7253::Tuple{}
  ##a1#7254::Float64
  ##a2#7255::Float64
  ######a#7078#7082#7256::Tuple{}
  ######b#7079#7083#7257::Tuple{}
  ######afactor#7080#7084#7258::Float64
  ######bfactor#7081#7085#7259::Float64
  ####_var0#7086#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ##div_a#7263::Float64
  ####afactor#7093#7264::Float64
  ####bfactor#7094#7265::Float64
  ########a#7078#7087#7095#7266::Tuple{}
  ########b#7079#7088#7096#7267::Tuple{}
  ########afactor#7080#7089#7097#7268::Float64
  ########bfactor#7081#7090#7098#7269::Float64
  ######_var0#7091#7099#7270::Tuple{}
  ######types#7092#7100#7271::Tuple{Type{Float64}}
  ##a#7272::Float64
  ##div_a#7273::Float64
  ##deriv#7274::Float64
  ####G#7234#7275::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7235#7276::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7236#7277::Tuple{}
  ##########x#7187#7189#7193#7237#7278::Float64
  ########_var0#7190#7194#7238#7279::Tuple{}
  ######a#7239#7241#7280::Tuple{}
  ######b#7240#7242#7281::Tuple{}
  ####_var0#7243#7282::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7272 = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7273 = (Base.box)(Base.Float64,(Base.div_float)(6.0,##a#7272::Float64))
      ##deriv#7274 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7273::Float64,##a#7272::Float64))))
      ####G#7234#7275 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7238#7279 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7190#7194#7238#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7254 = GenSym(2)
      ##a2#7255 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7260 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7254::Float64,##a2#7255::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7072#7245 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7247 = GenSym(0)
      ##a2#7248 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7253 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7261 = GenSym(6)
      ##a2#7262 = GenSym(7)
      ##div_a#7263 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7261::Float64,##a2#7262::Float64))
      ####afactor#7093#7264 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7262::Float64))
      ####bfactor#7094#7265 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7261::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7262::Float64,##a2#7262::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7270 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7263::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7243#7282 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7243#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7244::Tuple{}
  ####_var0#7072#7245::Tuple{}
  ######types#7070#7073#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7078#7082#7249::Tuple{}
  ######b#7079#7083#7250::Tuple{}
  ######afactor#7080#7084#7251::Float64
  ######bfactor#7081#7085#7252::Float64
  ####_var0#7086#7253::Tuple{}
  ##a1#7254::Float64
  ##a2#7255::Float64
  ######a#7078#7082#7256::Tuple{}
  ######b#7079#7083#7257::Tuple{}
  ######afactor#7080#7084#7258::Float64
  ######bfactor#7081#7085#7259::Float64
  ####_var0#7086#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ##div_a#7263::Float64
  ####afactor#7093#7264::Float64
  ####bfactor#7094#7265::Float64
  ########a#7078#7087#7095#7266::Tuple{}
  ########b#7079#7088#7096#7267::Tuple{}
  ########afactor#7080#7089#7097#7268::Float64
  ########bfactor#7081#7090#7098#7269::Float64
  ######_var0#7091#7099#7270::Tuple{}
  ######types#7092#7100#7271::Tuple{Type{Float64}}
  ##a#7272::Float64
  ##div_a#7273::Float64
  ##deriv#7274::Float64
  ####G#7234#7275::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7235#7276::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7236#7277::Tuple{}
  ##########x#7187#7189#7193#7237#7278::Float64
  ########_var0#7190#7194#7238#7279::Tuple{}
  ######a#7239#7241#7280::Tuple{}
  ######b#7240#7242#7281::Tuple{}
  ####_var0#7243#7282::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7272 = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7273 = (Base.box)(Base.Float64,(Base.div_float)(6.0,##a#7272::Float64))
      ##deriv#7274 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7273::Float64,##a#7272::Float64))))
      ####G#7234#7275 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7238#7279 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7190#7194#7238#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7254 = GenSym(2)
      ##a2#7255 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7260 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7254::Float64,##a2#7255::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7072#7245 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7247 = GenSym(0)
      ##a2#7248 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7253 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7261 = GenSym(6)
      ##a2#7262 = GenSym(7)
      ##div_a#7263 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7261::Float64,##a2#7262::Float64))
      ####afactor#7093#7264 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7262::Float64))
      ####bfactor#7094#7265 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7261::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7262::Float64,##a2#7262::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7270 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7263::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7243#7282 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7243#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7244::Tuple{}
  ####_var0#7072#7245::Tuple{}
  ######types#7070#7073#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7078#7082#7249::Tuple{}
  ######b#7079#7083#7250::Tuple{}
  ######afactor#7080#7084#7251::Float64
  ######bfactor#7081#7085#7252::Float64
  ####_var0#7086#7253::Tuple{}
  ##a1#7254::Float64
  ##a2#7255::Float64
  ######a#7078#7082#7256::Tuple{}
  ######b#7079#7083#7257::Tuple{}
  ######afactor#7080#7084#7258::Float64
  ######bfactor#7081#7085#7259::Float64
  ####_var0#7086#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ##div_a#7263::Float64
  ####afactor#7093#7264::Float64
  ####bfactor#7094#7265::Float64
  ########a#7078#7087#7095#7266::Tuple{}
  ########b#7079#7088#7096#7267::Tuple{}
  ########afactor#7080#7089#7097#7268::Float64
  ########bfactor#7081#7090#7098#7269::Float64
  ######_var0#7091#7099#7270::Tuple{}
  ######types#7092#7100#7271::Tuple{Type{Float64}}
  ##a#7272::Float64
  ##div_a#7273::Float64
  ##deriv#7274::Float64
  ####G#7234#7275::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7235#7276::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7236#7277::Tuple{}
  ##########x#7187#7189#7193#7237#7278::Float64
  ########_var0#7190#7194#7238#7279::Tuple{}
  ######a#7239#7241#7280::Tuple{}
  ######b#7240#7242#7281::Tuple{}
  ####_var0#7243#7282::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7272 = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7273 = (Base.box)(Base.Float64,(Base.div_float)(6.0,##a#7272::Float64))
      ##deriv#7274 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7273::Float64,##a#7272::Float64))))
      ####G#7234#7275 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7238#7279 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7190#7194#7238#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7254 = GenSym(2)
      ##a2#7255 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7260 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7254::Float64,##a2#7255::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7072#7245 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7247 = GenSym(0)
      ##a2#7248 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7253 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7261 = GenSym(6)
      ##a2#7262 = GenSym(7)
      ##div_a#7263 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7261::Float64,##a2#7262::Float64))
      ####afactor#7093#7264 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7262::Float64))
      ####bfactor#7094#7265 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7261::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7262::Float64,##a2#7262::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7270 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7263::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7243#7282 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7243#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7244::Tuple{}
  ####_var0#7072#7245::Tuple{}
  ######types#7070#7073#7246::Tuple{Type{Float64}}
  ##a1#7247::Float64
  ##a2#7248::Float64
  ######a#7078#7082#7249::Tuple{}
  ######b#7079#7083#7250::Tuple{}
  ######afactor#7080#7084#7251::Float64
  ######bfactor#7081#7085#7252::Float64
  ####_var0#7086#7253::Tuple{}
  ##a1#7254::Float64
  ##a2#7255::Float64
  ######a#7078#7082#7256::Tuple{}
  ######b#7079#7083#7257::Tuple{}
  ######afactor#7080#7084#7258::Float64
  ######bfactor#7081#7085#7259::Float64
  ####_var0#7086#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ##div_a#7263::Float64
  ####afactor#7093#7264::Float64
  ####bfactor#7094#7265::Float64
  ########a#7078#7087#7095#7266::Tuple{}
  ########b#7079#7088#7096#7267::Tuple{}
  ########afactor#7080#7089#7097#7268::Float64
  ########bfactor#7081#7090#7098#7269::Float64
  ######_var0#7091#7099#7270::Tuple{}
  ######types#7092#7100#7271::Tuple{Type{Float64}}
  ##a#7272::Float64
  ##div_a#7273::Float64
  ##deriv#7274::Float64
  ####G#7234#7275::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7185#7191#7235#7276::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7186#7188#7192#7236#7277::Tuple{}
  ##########x#7187#7189#7193#7237#7278::Float64
  ########_var0#7190#7194#7238#7279::Tuple{}
  ######a#7239#7241#7280::Tuple{}
  ######b#7240#7242#7281::Tuple{}
  ####_var0#7243#7282::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 75:
      p = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7272 = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7273 = (Base.box)(Base.Float64,(Base.div_float)(6.0,##a#7272::Float64))
      ##deriv#7274 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7273::Float64,##a#7272::Float64))))
      ####G#7234#7275 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7190#7194#7238#7279 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7190#7194#7238#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7273::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7254 = GenSym(2)
      ##a2#7255 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7260 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7086#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7254::Float64,##a2#7255::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7072#7245 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7072#7245 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7247 = GenSym(0)
      ##a2#7248 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7086#7253 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7086#7253 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7247::Float64,##a2#7248::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7261 = GenSym(6)
      ##a2#7262 = GenSym(7)
      ##div_a#7263 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7261::Float64,##a2#7262::Float64))
      ####afactor#7093#7264 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7262::Float64))
      ####bfactor#7094#7265 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7261::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7262::Float64,##a2#7262::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7270 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7091#7099#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7263::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7243#7282 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7243#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(48) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64))
      GenSym(49) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64))
      GenSym(50) = (top(ccall))((top(tuple))("rnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(48),0,GenSym(49),0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(50)))
  end::Int64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(50) = (top(ccall))((top(tuple))("rnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(50)))
  end::Int64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:nbinomrand)::F)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(50) = (top(ccall))((top(tuple))("rnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(50)))
  end::Int64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(50) = (top(ccall))((top(tuple))("rnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(50)))
  end::Int64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:nbinomrand)::F)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:nbinomrand)::F)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:nbinomrand)::F)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 84:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:nbinomrand)::F)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(1) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64))
      GenSym(2) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,GenSym(1),0,GenSym(2),0,GenSym(3),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0,GenSym(3),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.nbinompdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0,GenSym(3),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dnbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64,0,(top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64,0,GenSym(3),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.nbinompdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.nbinompdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.nbinompdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 320:
      return (Distributions.nbinompdf)((top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  t::Int64
  r::Int64
  p::Int64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(7) = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64
      GenSym(8) = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)))),GenSym(6))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,r::Int64))))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)),GenSym(4))))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,r::Int64))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  t::Int64
  r::Float64
  p::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(15) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      GenSym(10) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),GenSym(10)))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(11),0,r::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(5) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,GenSym(4)))))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,r::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(GenSym(11),r::Float64)))::Float64,(Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),r::Float64)))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7186#7288#7311::Tuple{}
  ######x#7187#7289#7312::Float64
  ####_var0#7290#7313::Tuple{}
  ######types#7070#7291#7314::Tuple{Type{Float64}}
  ######tup#7069#7071#7315::Tuple{}
  ####_var0#7072#7316::Tuple{}
  ######types#7070#7073#7317::Tuple{Type{Float64}}
  ##a1#7318::Float64
  ##a2#7319::Float64
  ##exp_a#7320::Float64
  ##powval#7321::Float64
  ##logval#7322::Float64
  ##new_bs#7323::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7324::Float64
  ####exp_a#7298#7325::Float64
  ####deriv#7299#7326::Float64
  ######G#7292#7300#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7328::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7329::Tuple{}
  ############x#7187#7189#7193#7295#7303#7330::Float64
  ##########_var0#7190#7194#7296#7304#7331::Tuple{}
  ######a#7078#7305#7332::Tuple{}
  ######b#7079#7306#7333::Tuple{}
  ######afactor#7080#7307#7334::Float64
  ######bfactor#7081#7308#7335::Float64
  ####_var0#7309#7336::Tuple{}
  ######types#7092#7310#7337::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7338::Tuple{}
  ####_var0#7072#7339::Tuple{}
  ######types#7070#7073#7340::Tuple{Type{Float64}}
  ######tup#7186#7288#7341::Tuple{}
  ######x#7187#7289#7342::Float64
  ####_var0#7290#7343::Tuple{}
  ######types#7070#7291#7344::Tuple{Type{Float64}}
  ##a1#7345::Float64
  ##a2#7346::Float64
  ##exp_a#7347::Float64
  ##powval#7348::Float64
  ##logval#7349::Float64
  ##new_bs#7350::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7351::Float64
  ####exp_a#7298#7352::Float64
  ####deriv#7299#7353::Float64
  ######G#7292#7300#7354::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7355::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7356::Tuple{}
  ############x#7187#7189#7193#7295#7303#7357::Float64
  ##########_var0#7190#7194#7296#7304#7358::Tuple{}
  ######a#7078#7305#7359::Tuple{}
  ######b#7079#7306#7360::Tuple{}
  ######afactor#7080#7307#7361::Float64
  ######bfactor#7081#7308#7362::Float64
  ####_var0#7309#7363::Tuple{}
  ######types#7092#7310#7364::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7093#7368::Float64
  ####bfactor#7094#7369::Float64
  ########a#7078#7087#7095#7370::Tuple{}
  ########b#7079#7088#7096#7371::Tuple{}
  ########afactor#7080#7089#7097#7372::Float64
  ########bfactor#7081#7090#7098#7373::Float64
  ######_var0#7091#7099#7374::Tuple{}
  ######types#7092#7100#7375::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(51) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(52) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(53) = GenSym(51)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(53)
      #s25 = GenSym(54)
      GenSym(55) = GenSym(52)
      GenSym(56) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(55)
      #s25 = GenSym(56) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7072#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(26) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7343 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7290#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(26)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7345"))
      NewvarNode(symbol("##a2#7346"))
      NewvarNode(symbol("##exp_a#7347"))
      NewvarNode(symbol("##powval#7348"))
      NewvarNode(symbol("##logval#7349"))
      NewvarNode(symbol("##new_bs#7350"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(30) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7351 = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(30),0)::Float64
      ####exp_a#7298#7352 = (Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(30))))::Float64
      GenSym(34) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(30),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(34),0)::Float64
      ####deriv#7299#7353 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(30),(Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(34))))::Float64))
      ######G#7292#7300#7354 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7358 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7190#7194#7296#7304#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7352::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(28) = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(29) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7345 = GenSym(28)
      ##a2#7346 = GenSym(29)
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,##a2#7346::Float64,0)::Float64
      ##exp_a#7347 = (Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,##a2#7346::Float64)))::Float64
      GenSym(41) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7346::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(44) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,GenSym(41),0)::Float64
      ##powval#7348 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7346::Float64,(Base.Math.nan_dom_err)(GenSym(44),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,GenSym(41))))::Float64))
      GenSym(46) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0)::Float64
      ##logval#7349 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7347::Float64,(Base.Math.nan_dom_err)(GenSym(46),##a1#7345::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7363 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7309#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7350 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7347::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(47) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7313 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7290#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7316 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7318"))
      NewvarNode(symbol("##a2#7319"))
      NewvarNode(symbol("##exp_a#7320"))
      NewvarNode(symbol("##powval#7321"))
      NewvarNode(symbol("##logval#7322"))
      NewvarNode(symbol("##new_bs#7323"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(8) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7324 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7298#7325 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(12),0)::Float64
      ####deriv#7299#7326 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(12))))::Float64))
      ######G#7292#7300#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7331 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7190#7194#7296#7304#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7318 = GenSym(6)
      ##a2#7319 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,##a2#7319::Float64,0)::Float64
      ##exp_a#7320 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,##a2#7319::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7319::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,GenSym(19),0)::Float64
      ##powval#7321 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7319::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0)::Float64
      ##logval#7322 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7320::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7318::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7336 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7309#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7323 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7320::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(48) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(48),:value)::Float64
      ##a1#7365 = GenSym(49)
      ##a2#7366 = GenSym(50)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7093#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7094#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7374 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7091#7099#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  t::Int64
  r::Float64
  p::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(15) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      GenSym(10) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),GenSym(10)))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(11),0,r::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(5) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,GenSym(4)))))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,r::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(GenSym(11),r::Float64)))::Float64,(Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),r::Float64)))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  t::Int64
  r::Float64
  p::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(15) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64
      GenSym(16) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      GenSym(10) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)),GenSym(10)))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(11),0,r::Float64,0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      GenSym(5) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,GenSym(4)))))
      GenSym(8) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(5),0,r::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(GenSym(11),r::Float64)))::Float64,(Base.Math.nan_dom_err)(GenSym(8),(Base.box)(Base.Float64,(Base.add_float)(GenSym(5),r::Float64)))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7186#7288#7311::Tuple{}
  ######x#7187#7289#7312::Float64
  ####_var0#7290#7313::Tuple{}
  ######types#7070#7291#7314::Tuple{Type{Float64}}
  ######tup#7069#7071#7315::Tuple{}
  ####_var0#7072#7316::Tuple{}
  ######types#7070#7073#7317::Tuple{Type{Float64}}
  ##a1#7318::Float64
  ##a2#7319::Float64
  ##exp_a#7320::Float64
  ##powval#7321::Float64
  ##logval#7322::Float64
  ##new_bs#7323::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7324::Float64
  ####exp_a#7298#7325::Float64
  ####deriv#7299#7326::Float64
  ######G#7292#7300#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7328::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7329::Tuple{}
  ############x#7187#7189#7193#7295#7303#7330::Float64
  ##########_var0#7190#7194#7296#7304#7331::Tuple{}
  ######a#7078#7305#7332::Tuple{}
  ######b#7079#7306#7333::Tuple{}
  ######afactor#7080#7307#7334::Float64
  ######bfactor#7081#7308#7335::Float64
  ####_var0#7309#7336::Tuple{}
  ######types#7092#7310#7337::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7338::Tuple{}
  ####_var0#7072#7339::Tuple{}
  ######types#7070#7073#7340::Tuple{Type{Float64}}
  ######tup#7186#7288#7341::Tuple{}
  ######x#7187#7289#7342::Float64
  ####_var0#7290#7343::Tuple{}
  ######types#7070#7291#7344::Tuple{Type{Float64}}
  ##a1#7345::Float64
  ##a2#7346::Float64
  ##exp_a#7347::Float64
  ##powval#7348::Float64
  ##logval#7349::Float64
  ##new_bs#7350::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7351::Float64
  ####exp_a#7298#7352::Float64
  ####deriv#7299#7353::Float64
  ######G#7292#7300#7354::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7355::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7356::Tuple{}
  ############x#7187#7189#7193#7295#7303#7357::Float64
  ##########_var0#7190#7194#7296#7304#7358::Tuple{}
  ######a#7078#7305#7359::Tuple{}
  ######b#7079#7306#7360::Tuple{}
  ######afactor#7080#7307#7361::Float64
  ######bfactor#7081#7308#7362::Float64
  ####_var0#7309#7363::Tuple{}
  ######types#7092#7310#7364::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7093#7368::Float64
  ####bfactor#7094#7369::Float64
  ########a#7078#7087#7095#7370::Tuple{}
  ########b#7079#7088#7096#7371::Tuple{}
  ########afactor#7080#7089#7097#7372::Float64
  ########bfactor#7081#7090#7098#7373::Float64
  ######_var0#7091#7099#7374::Tuple{}
  ######types#7092#7100#7375::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(51) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(52) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(53) = GenSym(51)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(53)
      #s25 = GenSym(54)
      GenSym(55) = GenSym(52)
      GenSym(56) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(55)
      #s25 = GenSym(56) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7072#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(26) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7343 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7290#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(26)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7345"))
      NewvarNode(symbol("##a2#7346"))
      NewvarNode(symbol("##exp_a#7347"))
      NewvarNode(symbol("##powval#7348"))
      NewvarNode(symbol("##logval#7349"))
      NewvarNode(symbol("##new_bs#7350"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(30) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7351 = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(30),0)::Float64
      ####exp_a#7298#7352 = (Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(30))))::Float64
      GenSym(34) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(30),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(34),0)::Float64
      ####deriv#7299#7353 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(30),(Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(34))))::Float64))
      ######G#7292#7300#7354 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7358 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7190#7194#7296#7304#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7352::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(28) = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(29) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7345 = GenSym(28)
      ##a2#7346 = GenSym(29)
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,##a2#7346::Float64,0)::Float64
      ##exp_a#7347 = (Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,##a2#7346::Float64)))::Float64
      GenSym(41) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7346::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(44) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,GenSym(41),0)::Float64
      ##powval#7348 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7346::Float64,(Base.Math.nan_dom_err)(GenSym(44),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,GenSym(41))))::Float64))
      GenSym(46) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0)::Float64
      ##logval#7349 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7347::Float64,(Base.Math.nan_dom_err)(GenSym(46),##a1#7345::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7363 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7309#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7350 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7347::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(47) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7313 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7290#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7316 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7318"))
      NewvarNode(symbol("##a2#7319"))
      NewvarNode(symbol("##exp_a#7320"))
      NewvarNode(symbol("##powval#7321"))
      NewvarNode(symbol("##logval#7322"))
      NewvarNode(symbol("##new_bs#7323"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(8) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7324 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7298#7325 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(12),0)::Float64
      ####deriv#7299#7326 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(12))))::Float64))
      ######G#7292#7300#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7331 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7190#7194#7296#7304#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7318 = GenSym(6)
      ##a2#7319 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,##a2#7319::Float64,0)::Float64
      ##exp_a#7320 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,##a2#7319::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7319::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,GenSym(19),0)::Float64
      ##powval#7321 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7319::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0)::Float64
      ##logval#7322 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7320::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7318::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7336 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7309#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7323 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7320::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(48) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(48),:value)::Float64
      ##a1#7365 = GenSym(49)
      ##a2#7366 = GenSym(50)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7093#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7094#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7374 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7091#7099#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7186#7288#7311::Tuple{}
  ######x#7187#7289#7312::Float64
  ####_var0#7290#7313::Tuple{}
  ######types#7070#7291#7314::Tuple{Type{Float64}}
  ######tup#7069#7071#7315::Tuple{}
  ####_var0#7072#7316::Tuple{}
  ######types#7070#7073#7317::Tuple{Type{Float64}}
  ##a1#7318::Float64
  ##a2#7319::Float64
  ##exp_a#7320::Float64
  ##powval#7321::Float64
  ##logval#7322::Float64
  ##new_bs#7323::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7324::Float64
  ####exp_a#7298#7325::Float64
  ####deriv#7299#7326::Float64
  ######G#7292#7300#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7328::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7329::Tuple{}
  ############x#7187#7189#7193#7295#7303#7330::Float64
  ##########_var0#7190#7194#7296#7304#7331::Tuple{}
  ######a#7078#7305#7332::Tuple{}
  ######b#7079#7306#7333::Tuple{}
  ######afactor#7080#7307#7334::Float64
  ######bfactor#7081#7308#7335::Float64
  ####_var0#7309#7336::Tuple{}
  ######types#7092#7310#7337::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7338::Tuple{}
  ####_var0#7072#7339::Tuple{}
  ######types#7070#7073#7340::Tuple{Type{Float64}}
  ######tup#7186#7288#7341::Tuple{}
  ######x#7187#7289#7342::Float64
  ####_var0#7290#7343::Tuple{}
  ######types#7070#7291#7344::Tuple{Type{Float64}}
  ##a1#7345::Float64
  ##a2#7346::Float64
  ##exp_a#7347::Float64
  ##powval#7348::Float64
  ##logval#7349::Float64
  ##new_bs#7350::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7351::Float64
  ####exp_a#7298#7352::Float64
  ####deriv#7299#7353::Float64
  ######G#7292#7300#7354::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7355::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7356::Tuple{}
  ############x#7187#7189#7193#7295#7303#7357::Float64
  ##########_var0#7190#7194#7296#7304#7358::Tuple{}
  ######a#7078#7305#7359::Tuple{}
  ######b#7079#7306#7360::Tuple{}
  ######afactor#7080#7307#7361::Float64
  ######bfactor#7081#7308#7362::Float64
  ####_var0#7309#7363::Tuple{}
  ######types#7092#7310#7364::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7093#7368::Float64
  ####bfactor#7094#7369::Float64
  ########a#7078#7087#7095#7370::Tuple{}
  ########b#7079#7088#7096#7371::Tuple{}
  ########afactor#7080#7089#7097#7372::Float64
  ########bfactor#7081#7090#7098#7373::Float64
  ######_var0#7091#7099#7374::Tuple{}
  ######types#7092#7100#7375::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(51) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(52) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(53) = GenSym(51)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(53)
      #s25 = GenSym(54)
      GenSym(55) = GenSym(52)
      GenSym(56) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(55)
      #s25 = GenSym(56) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7072#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(26) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7343 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7290#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(26)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7345"))
      NewvarNode(symbol("##a2#7346"))
      NewvarNode(symbol("##exp_a#7347"))
      NewvarNode(symbol("##powval#7348"))
      NewvarNode(symbol("##logval#7349"))
      NewvarNode(symbol("##new_bs#7350"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(30) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7351 = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(30),0)::Float64
      ####exp_a#7298#7352 = (Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(30))))::Float64
      GenSym(34) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(30),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(34),0)::Float64
      ####deriv#7299#7353 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(30),(Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(34))))::Float64))
      ######G#7292#7300#7354 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7358 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7190#7194#7296#7304#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7352::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(28) = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(29) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7345 = GenSym(28)
      ##a2#7346 = GenSym(29)
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,##a2#7346::Float64,0)::Float64
      ##exp_a#7347 = (Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,##a2#7346::Float64)))::Float64
      GenSym(41) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7346::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(44) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,GenSym(41),0)::Float64
      ##powval#7348 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7346::Float64,(Base.Math.nan_dom_err)(GenSym(44),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,GenSym(41))))::Float64))
      GenSym(46) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0)::Float64
      ##logval#7349 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7347::Float64,(Base.Math.nan_dom_err)(GenSym(46),##a1#7345::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7363 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7309#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7350 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7347::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(47) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7313 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7290#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7316 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7318"))
      NewvarNode(symbol("##a2#7319"))
      NewvarNode(symbol("##exp_a#7320"))
      NewvarNode(symbol("##powval#7321"))
      NewvarNode(symbol("##logval#7322"))
      NewvarNode(symbol("##new_bs#7323"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(8) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7324 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7298#7325 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(12),0)::Float64
      ####deriv#7299#7326 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(12))))::Float64))
      ######G#7292#7300#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7331 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7190#7194#7296#7304#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7318 = GenSym(6)
      ##a2#7319 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,##a2#7319::Float64,0)::Float64
      ##exp_a#7320 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,##a2#7319::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7319::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,GenSym(19),0)::Float64
      ##powval#7321 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7319::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0)::Float64
      ##logval#7322 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7320::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7318::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7336 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7309#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7323 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7320::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(48) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(48),:value)::Float64
      ##a1#7365 = GenSym(49)
      ##a2#7366 = GenSym(50)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7093#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7094#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7374 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7091#7099#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7186#7288#7311::Tuple{}
  ######x#7187#7289#7312::Float64
  ####_var0#7290#7313::Tuple{}
  ######types#7070#7291#7314::Tuple{Type{Float64}}
  ######tup#7069#7071#7315::Tuple{}
  ####_var0#7072#7316::Tuple{}
  ######types#7070#7073#7317::Tuple{Type{Float64}}
  ##a1#7318::Float64
  ##a2#7319::Float64
  ##exp_a#7320::Float64
  ##powval#7321::Float64
  ##logval#7322::Float64
  ##new_bs#7323::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7324::Float64
  ####exp_a#7298#7325::Float64
  ####deriv#7299#7326::Float64
  ######G#7292#7300#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7328::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7329::Tuple{}
  ############x#7187#7189#7193#7295#7303#7330::Float64
  ##########_var0#7190#7194#7296#7304#7331::Tuple{}
  ######a#7078#7305#7332::Tuple{}
  ######b#7079#7306#7333::Tuple{}
  ######afactor#7080#7307#7334::Float64
  ######bfactor#7081#7308#7335::Float64
  ####_var0#7309#7336::Tuple{}
  ######types#7092#7310#7337::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7338::Tuple{}
  ####_var0#7072#7339::Tuple{}
  ######types#7070#7073#7340::Tuple{Type{Float64}}
  ######tup#7186#7288#7341::Tuple{}
  ######x#7187#7289#7342::Float64
  ####_var0#7290#7343::Tuple{}
  ######types#7070#7291#7344::Tuple{Type{Float64}}
  ##a1#7345::Float64
  ##a2#7346::Float64
  ##exp_a#7347::Float64
  ##powval#7348::Float64
  ##logval#7349::Float64
  ##new_bs#7350::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7351::Float64
  ####exp_a#7298#7352::Float64
  ####deriv#7299#7353::Float64
  ######G#7292#7300#7354::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7355::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7356::Tuple{}
  ############x#7187#7189#7193#7295#7303#7357::Float64
  ##########_var0#7190#7194#7296#7304#7358::Tuple{}
  ######a#7078#7305#7359::Tuple{}
  ######b#7079#7306#7360::Tuple{}
  ######afactor#7080#7307#7361::Float64
  ######bfactor#7081#7308#7362::Float64
  ####_var0#7309#7363::Tuple{}
  ######types#7092#7310#7364::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7093#7368::Float64
  ####bfactor#7094#7369::Float64
  ########a#7078#7087#7095#7370::Tuple{}
  ########b#7079#7088#7096#7371::Tuple{}
  ########afactor#7080#7089#7097#7372::Float64
  ########bfactor#7081#7090#7098#7373::Float64
  ######_var0#7091#7099#7374::Tuple{}
  ######types#7092#7100#7375::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(51) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(52) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(53) = GenSym(51)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(53)
      #s25 = GenSym(54)
      GenSym(55) = GenSym(52)
      GenSym(56) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(55)
      #s25 = GenSym(56) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7072#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(26) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7343 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7290#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(26)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7345"))
      NewvarNode(symbol("##a2#7346"))
      NewvarNode(symbol("##exp_a#7347"))
      NewvarNode(symbol("##powval#7348"))
      NewvarNode(symbol("##logval#7349"))
      NewvarNode(symbol("##new_bs#7350"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(30) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7351 = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(30),0)::Float64
      ####exp_a#7298#7352 = (Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(30))))::Float64
      GenSym(34) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(30),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(34),0)::Float64
      ####deriv#7299#7353 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(30),(Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(34))))::Float64))
      ######G#7292#7300#7354 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7358 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7190#7194#7296#7304#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7352::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(28) = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(29) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7345 = GenSym(28)
      ##a2#7346 = GenSym(29)
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,##a2#7346::Float64,0)::Float64
      ##exp_a#7347 = (Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,##a2#7346::Float64)))::Float64
      GenSym(41) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7346::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(44) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,GenSym(41),0)::Float64
      ##powval#7348 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7346::Float64,(Base.Math.nan_dom_err)(GenSym(44),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,GenSym(41))))::Float64))
      GenSym(46) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0)::Float64
      ##logval#7349 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7347::Float64,(Base.Math.nan_dom_err)(GenSym(46),##a1#7345::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7363 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7309#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7350 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7347::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(47) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7313 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7290#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7316 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7318"))
      NewvarNode(symbol("##a2#7319"))
      NewvarNode(symbol("##exp_a#7320"))
      NewvarNode(symbol("##powval#7321"))
      NewvarNode(symbol("##logval#7322"))
      NewvarNode(symbol("##new_bs#7323"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(8) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7324 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7298#7325 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(12),0)::Float64
      ####deriv#7299#7326 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(12))))::Float64))
      ######G#7292#7300#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7331 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7190#7194#7296#7304#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7318 = GenSym(6)
      ##a2#7319 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,##a2#7319::Float64,0)::Float64
      ##exp_a#7320 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,##a2#7319::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7319::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,GenSym(19),0)::Float64
      ##powval#7321 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7319::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0)::Float64
      ##logval#7322 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7320::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7318::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7336 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7309#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7323 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7320::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(48) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(48),:value)::Float64
      ##a1#7365 = GenSym(49)
      ##a2#7366 = GenSym(50)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7093#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7094#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7374 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7091#7099#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7186#7288#7311::Tuple{}
  ######x#7187#7289#7312::Float64
  ####_var0#7290#7313::Tuple{}
  ######types#7070#7291#7314::Tuple{Type{Float64}}
  ######tup#7069#7071#7315::Tuple{}
  ####_var0#7072#7316::Tuple{}
  ######types#7070#7073#7317::Tuple{Type{Float64}}
  ##a1#7318::Float64
  ##a2#7319::Float64
  ##exp_a#7320::Float64
  ##powval#7321::Float64
  ##logval#7322::Float64
  ##new_bs#7323::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7324::Float64
  ####exp_a#7298#7325::Float64
  ####deriv#7299#7326::Float64
  ######G#7292#7300#7327::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7328::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7329::Tuple{}
  ############x#7187#7189#7193#7295#7303#7330::Float64
  ##########_var0#7190#7194#7296#7304#7331::Tuple{}
  ######a#7078#7305#7332::Tuple{}
  ######b#7079#7306#7333::Tuple{}
  ######afactor#7080#7307#7334::Float64
  ######bfactor#7081#7308#7335::Float64
  ####_var0#7309#7336::Tuple{}
  ######types#7092#7310#7337::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7069#7071#7338::Tuple{}
  ####_var0#7072#7339::Tuple{}
  ######types#7070#7073#7340::Tuple{Type{Float64}}
  ######tup#7186#7288#7341::Tuple{}
  ######x#7187#7289#7342::Float64
  ####_var0#7290#7343::Tuple{}
  ######types#7070#7291#7344::Tuple{Type{Float64}}
  ##a1#7345::Float64
  ##a2#7346::Float64
  ##exp_a#7347::Float64
  ##powval#7348::Float64
  ##logval#7349::Float64
  ##new_bs#7350::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7297#7351::Float64
  ####exp_a#7298#7352::Float64
  ####deriv#7299#7353::Float64
  ######G#7292#7300#7354::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7185#7191#7293#7301#7355::Tuple{Type{Float64},Type{Float64}}
  ############tup#7186#7188#7192#7294#7302#7356::Tuple{}
  ############x#7187#7189#7193#7295#7303#7357::Float64
  ##########_var0#7190#7194#7296#7304#7358::Tuple{}
  ######a#7078#7305#7359::Tuple{}
  ######b#7079#7306#7360::Tuple{}
  ######afactor#7080#7307#7361::Float64
  ######bfactor#7081#7308#7362::Float64
  ####_var0#7309#7363::Tuple{}
  ######types#7092#7310#7364::Tuple{Type{Float64}}
  _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7365::Float64
  ##a2#7366::Float64
  ##div_a#7367::Float64
  ####afactor#7093#7368::Float64
  ####bfactor#7094#7369::Float64
  ########a#7078#7087#7095#7370::Tuple{}
  ########b#7079#7088#7096#7371::Tuple{}
  ########afactor#7080#7089#7097#7372::Float64
  ########bfactor#7081#7090#7098#7373::Float64
  ######_var0#7091#7099#7374::Tuple{}
  ######types#7092#7100#7375::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 96:
      GenSym(51) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(52) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(53) = GenSym(51)
      GenSym(54) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(53)
      #s25 = GenSym(54)
      GenSym(55) = GenSym(52)
      GenSym(56) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(55)
      #s25 = GenSym(56) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 97:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7072#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(26) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7343 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7290#7343 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,GenSym(26)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7345"))
      NewvarNode(symbol("##a2#7346"))
      NewvarNode(symbol("##exp_a#7347"))
      NewvarNode(symbol("##powval#7348"))
      NewvarNode(symbol("##logval#7349"))
      NewvarNode(symbol("##new_bs#7350"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 20
      GenSym(30) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7351 = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(33) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(30),0)::Float64
      ####exp_a#7298#7352 = (Base.Math.nan_dom_err)(GenSym(33),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(30))))::Float64
      GenSym(34) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(30),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(37) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7351::Float64,0,GenSym(34),0)::Float64
      ####deriv#7299#7353 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(30),(Base.Math.nan_dom_err)(GenSym(37),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7351::Float64,GenSym(34))))::Float64))
      ######G#7292#7300#7354 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7358 = (top(tuple))()::Tuple{}
      goto 19
      ##########_var0#7190#7194#7296#7304#7358 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7352::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 22
      20: 
      GenSym(28) = (top(getfield))(GenSym(27),:value)::Float64
      GenSym(29) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7345 = GenSym(28)
      ##a2#7346 = GenSym(29)
      GenSym(40) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,##a2#7346::Float64,0)::Float64
      ##exp_a#7347 = (Base.Math.nan_dom_err)(GenSym(40),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,##a2#7346::Float64)))::Float64
      GenSym(41) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7346::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(44) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0,GenSym(41),0)::Float64
      ##powval#7348 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7346::Float64,(Base.Math.nan_dom_err)(GenSym(44),(Base.box)(Base.Float64,(Base.add_float)(##a1#7345::Float64,GenSym(41))))::Float64))
      GenSym(46) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7345::Float64,0)::Float64
      ##logval#7349 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7347::Float64,(Base.Math.nan_dom_err)(GenSym(46),##a1#7345::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7363 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7309#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      ##new_bs#7350 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7347::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      22: 
      GenSym(47) = _var1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7290#7313 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7290#7313 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7072#7316 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7072#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7318"))
      NewvarNode(symbol("##a2#7319"))
      NewvarNode(symbol("##exp_a#7320"))
      NewvarNode(symbol("##powval#7321"))
      NewvarNode(symbol("##logval#7322"))
      NewvarNode(symbol("##new_bs#7323"))
      unless (top(getfield))((top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(8) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7297#7324 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(8),0)::Float64
      ####exp_a#7298#7325 = (Base.Math.nan_dom_err)(GenSym(11),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(8))))::Float64
      GenSym(12) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(8),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7297#7324::Float64,0,GenSym(12),0)::Float64
      ####deriv#7299#7326 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(8),(Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7297#7324::Float64,GenSym(12))))::Float64))
      ######G#7292#7300#7327 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7190#7194#7296#7304#7331 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7190#7194#7296#7304#7331 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7298#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7318 = GenSym(6)
      ##a2#7319 = GenSym(7)
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,##a2#7319::Float64,0)::Float64
      ##exp_a#7320 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,##a2#7319::Float64)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7319::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0,GenSym(19),0)::Float64
      ##powval#7321 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7319::Float64,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7318::Float64,GenSym(19))))::Float64))
      GenSym(24) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7318::Float64,0)::Float64
      ##logval#7322 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7320::Float64,(Base.Math.nan_dom_err)(GenSym(24),##a1#7318::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7309#7336 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7309#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7323 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7320::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(48) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(49) = (top(getfield))(GenSym(47),:value)::Float64
      GenSym(50) = (top(getfield))(GenSym(48),:value)::Float64
      ##a1#7365 = GenSym(49)
      ##a2#7366 = GenSym(50)
      ##div_a#7367 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7365::Float64,##a2#7366::Float64))
      ####afactor#7093#7368 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7366::Float64))
      ####bfactor#7094#7369 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7365::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7366::Float64,##a2#7366::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7091#7099#7374 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7091#7099#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7367::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.NegativeBinomial{Int64}
  t::Int64
  r::Int64
  p::Int64
  #s25::Int64
  ##re#7390::Float64
  _var0::Complex{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(20) = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:r)::Int64
      GenSym(21) = (top(getfield))(d::Distributions.NegativeBinomial{Int64},:p)::Int64
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,p::Int64))))
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)),(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,p::Int64)),(top(getfield))(GenSym(9),:im)::Float64)))))
      ##re#7390 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(10),:re)::Float64))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:im)::Float64))))) / $(Expr(:new, Complex{Float64}, :(##re#7390::Float64), :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(10),:im)::Float64)))))::Complex{Float64}
      unless (Base.sle_int)(0,r::Int64)::Bool goto 11
      _var0 = (Base.power_by_squaring)(GenSym(19),r::Int64)::Complex{Float64}
      goto 12
      11: 
      _var0 = (Base.power_by_squaring)((Base.inv)(GenSym(19))::Complex{Float64},(Base.box)(Int64,(Base.neg_int)(r::Int64)))::Complex{Float64}
      12: 
      return _var0::Complex{Float64}
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  t::Int64
  r::Float64
  p::Float64
  #s25::Int64
  ##re#7415::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(20) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64))
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:im)::Float64)))))
      ##re#7415 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(10),:re)::Float64))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:im)::Float64))))) / $(Expr(:new, Complex{Float64}, :(##re#7415::Float64), :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(10),:im)::Float64)))))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(19),:re)::Float64), :((top(getfield))(GenSym(19),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :(r::Float64), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7069#7071#7804::Tuple{}
  ####_var0#7072#7805::Tuple{}
  ######types#7070#7073#7806::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(17) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7805 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7072#7805 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(12) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(14) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      GenSym(9) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(11) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64), :((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(16) = GenSym(15) / (1.0 - p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(16),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(16),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  t::Int64
  r::Float64
  p::Float64
  #s25::Int64
  ##re#7415::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(20) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64))
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:im)::Float64)))))
      ##re#7415 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(10),:re)::Float64))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:im)::Float64))))) / $(Expr(:new, Complex{Float64}, :(##re#7415::Float64), :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(10),:im)::Float64)))))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(19),:re)::Float64), :((top(getfield))(GenSym(19),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :(r::Float64), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.NegativeBinomial{Float64}
  t::Int64
  r::Float64
  p::Float64
  #s25::Int64
  ##re#7415::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(20) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:r)::Float64
      GenSym(21) = (top(getfield))(d::Distributions.NegativeBinomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(22) = GenSym(20)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(21)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      GenSym(14) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(16) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(14),0)::Float64
      GenSym(11) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64))
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(16),GenSym(14))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:im)::Float64)))))
      ##re#7415 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(10),:re)::Float64))
      GenSym(19) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(18),(top(getfield))(GenSym(17),:im)::Float64))))) / $(Expr(:new, Complex{Float64}, :(##re#7415::Float64), :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(10),:im)::Float64)))))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(19),:re)::Float64), :((top(getfield))(GenSym(19),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :(r::Float64), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7069#7071#7804::Tuple{}
  ####_var0#7072#7805::Tuple{}
  ######types#7070#7073#7806::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(17) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7805 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7072#7805 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(12) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(14) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      GenSym(9) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(11) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64), :((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(16) = GenSym(15) / (1.0 - p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(16),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(16),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7069#7071#7804::Tuple{}
  ####_var0#7072#7805::Tuple{}
  ######types#7070#7073#7806::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(17) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7805 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7072#7805 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(12) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(14) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      GenSym(9) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(11) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64), :((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(16) = GenSym(15) / (1.0 - p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(16),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(16),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7069#7071#7804::Tuple{}
  ####_var0#7072#7805::Tuple{}
  ######types#7070#7073#7806::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(17) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7805 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7072#7805 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(12) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(14) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      GenSym(9) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(11) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64), :((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(16) = GenSym(15) / (1.0 - p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(16),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(16),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7069#7071#7804::Tuple{}
  ####_var0#7072#7805::Tuple{}
  ######types#7070#7073#7806::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 101:
      GenSym(17) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:r)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.NegativeBinomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(19) = GenSym(17)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      r = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(18)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/negativebinomial.jl, line 102:
      $(Expr(:boundscheck, false))
      ####_var0#7072#7805 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7072#7805 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(12) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(14) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(12),0)::Float64
      GenSym(9) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(11) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(14),GenSym(12))::Float64), :((Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(16) = GenSym(15) / (1.0 - p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(16),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(16),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :(r::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




