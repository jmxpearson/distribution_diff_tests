____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 21:
      return (top(tuple))((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 21:
      return (top(tuple))((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 21:
      return (top(tuple))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(1.2533141373155003,(top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 26:
      return (Base.box)(Base.Float64,(Base.mul_float)(1.2533141373155003,(top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7061#7064#7068#7072::Tuple{}
  ########x#7062#7065#7069#7073::Irrational{:sqrthalfπ}
  ######_var0#7066#7070#7074::Tuple{}
  ########types#7063#7067#7071#7075::Tuple{Type{Irrational{:sqrthalfπ}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 26:
      $(Expr(:boundscheck, false))
      ######_var0#7066#7070#7074 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7066#7070#7074 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.2533141373155003))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 30:
      return (Base.box)(Base.Float64,(Base.mul_float)(0.4292036732051034,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 30:
      return (Base.box)(Base.Float64,(Base.mul_float)(0.4292036732051034,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7105::Float64
  ##exp_a#7106::Float64
  ##deriv#7107::Float64
  ####G#7091#7108::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7081#7087#7092#7109::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7082#7084#7088#7093#7110::Tuple{}
  ##########x#7083#7085#7089#7094#7111::Float64
  ########_var0#7086#7090#7095#7112::Tuple{}
  ########tup#7082#7097#7101#7113::Tuple{}
  ########x#7083#7098#7102#7114::Float64
  ######_var0#7099#7103#7115::Tuple{}
  ########types#7096#7100#7104#7116::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 30:
      ##a#7105 = (top(getfield))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7106 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7105::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7107 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7105::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7091#7108 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7086#7090#7095#7112 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7086#7090#7095#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7106::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7099#7103#7115 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7099#7103#7115 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.4292036732051034))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 28:
      return (top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 28:
      return (top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 28:
      return (top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 27:
      return (Base.box)(Base.Float64,(Base.mul_float)(1.1774100225154747,(top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 27:
      return (Base.box)(Base.Float64,(Base.mul_float)(1.1774100225154747,(top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7082#7097#7101#7126::Tuple{}
  ########x#7083#7098#7102#7127::Float64
  ######_var0#7099#7103#7128::Tuple{}
  ########types#7096#7100#7104#7129::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 27:
      $(Expr(:boundscheck, false))
      ######_var0#7099#7103#7128 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7099#7103#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.1774100225154747))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 33:
      return 0.6311106578189372
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 33:
      return 0.6311106578189372
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 33:
      return 0.6311106578189372
  end::Float64




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 34:
      return 0.24508930068763807
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 34:
      return 0.24508930068763807
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 34:
      return 0.24508930068763807
  end::Float64




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.9420342421707938,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 36:
      GenSym(0) = (top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.9420342421707938,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7139::Float64
  ####G#7132#7140::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7081#7087#7133#7141::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7082#7084#7088#7134#7142::Tuple{}
  ##########x#7083#7085#7089#7135#7143::Float64
  ########_var0#7086#7090#7136#7144::Tuple{}
  ########types#7096#7137#7138#7145::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 36:
      ##a#7139 = (top(getfield))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7139::Float64,0)::Float64
      ####G#7132#7140 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7086#7090#7136#7144 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7086#7090#7136#7144 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7139::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,0.9420342421707938))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}
  ####ri#7156#7161::UInt64
  ####idx#7157#7162::UInt64
  ####x#7158#7163::Float64
  ########_var0#7148#7154#7159#7164::UNION{BOOL,INT64}
  ############_var0#7146#7147#7149#7155#7160#7165::Float64
  ##_var0#7166::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 62:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7148#7154#7159#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7148#7154#7159#7164 = false
      2: 
      ########_var0#7148#7154#7159#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7146#7147#7149#7155#7160#7165 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7146#7147#7149#7155#7160#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7156#7161 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7146#7147#7149#7155#7160#7165::Float64),0x000fffffffffffff))
      ####idx#7157#7162 = (Base.box)(UInt64,(Base.and_int)(####ri#7156#7161::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7158#7163 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7156#7161::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7157#7162::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7156#7161::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7157#7162::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7166 = ####x#7158#7163::Float64
      goto 5
      4: 
      ##_var0#7166 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7157#7162::UInt64,####x#7158#7163::Float64)::Float64
      goto 5
      ##_var0#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(2.0,##_var0#7166::Float64))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}
  ####ri#7156#7161::UInt64
  ####idx#7157#7162::UInt64
  ####x#7158#7163::Float64
  ########_var0#7148#7154#7159#7164::UNION{BOOL,INT64}
  ############_var0#7146#7147#7149#7155#7160#7165::Float64
  ##_var0#7166::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 62:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7148#7154#7159#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7148#7154#7159#7164 = false
      2: 
      ########_var0#7148#7154#7159#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7146#7147#7149#7155#7160#7165 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7146#7147#7149#7155#7160#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7156#7161 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7146#7147#7149#7155#7160#7165::Float64),0x000fffffffffffff))
      ####idx#7157#7162 = (Base.box)(UInt64,(Base.and_int)(####ri#7156#7161::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7158#7163 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7156#7161::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7157#7162::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7156#7161::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7157#7162::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7166 = ####x#7158#7163::Float64
      goto 5
      4: 
      ##_var0#7166 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7157#7162::UInt64,####x#7158#7163::Float64)::Float64
      goto 5
      ##_var0#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Rayleigh{Float64},:σ)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(2.0,##_var0#7166::Float64))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7156#7168::UInt64
  ####idx#7157#7169::UInt64
  ####x#7158#7170::Float64
  ########_var0#7148#7154#7159#7171::UNION{BOOL,INT64}
  ############_var0#7146#7147#7149#7155#7160#7172::Float64
  ##_var0#7173::Float64
  ######tup#7082#7097#7174::Tuple{}
  ######x#7083#7098#7175::Float64
  ####_var0#7099#7176::Tuple{}
  ######types#7096#7100#7177::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/rayleigh.jl, line 62:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7148#7154#7159#7171 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7148#7154#7159#7171 = false
      2: 
      ########_var0#7148#7154#7159#7171::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7146#7147#7149#7155#7160#7172 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7146#7147#7149#7155#7160#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7156#7168 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7146#7147#7149#7155#7160#7172::Float64),0x000fffffffffffff))
      ####idx#7157#7169 = (Base.box)(UInt64,(Base.and_int)(####ri#7156#7168::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7158#7170 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7156#7168::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7157#7169::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7156#7168::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7157#7169::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7173 = ####x#7158#7170::Float64
      goto 5
      4: 
      ##_var0#7173 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7157#7169::UInt64,####x#7158#7170::Float64)::Float64
      goto 5
      ##_var0#7173 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(2.0,##_var0#7173::Float64)))::ANY)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7099#7176 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7099#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.Rayleigh{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Rayleigh{Float64},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Rayleigh{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Rayleigh{Float64},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 103:
      return (Distributions.pdf)(d::Distributions.Rayleigh{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----


----float----


----dual----





____________________________
cf
____________________________

----integer----


----float----


----dual----





