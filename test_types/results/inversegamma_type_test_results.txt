____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 55:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7113::Tuple{Type{Float64}}
  ##a1#7114::Float64
  ##a2#7115::Float64
  ##div_a#7116::Float64
  ####afactor#7105#7117::Float64
  ####bfactor#7106#7118::Float64
  ########a#7095#7099#7107#7119::Tuple{}
  ########b#7096#7100#7108#7120::Tuple{}
  ########afactor#7097#7101#7109#7121::Float64
  ########bfactor#7098#7102#7110#7122::Float64
  ######_var0#7103#7111#7123::Tuple{}
  ######types#7104#7112#7124::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7114 = GenSym(3)
      ##a2#7115 = GenSym(4)
      ##div_a#7116 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7114::Float64,##a2#7115::Float64))
      ####afactor#7105#7117 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7115::Float64))
      ####bfactor#7106#7118 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7114::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7115::Float64,##a2#7115::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7123 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7103#7111#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7116::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7113::Tuple{Type{Float64}}
  ##a1#7114::Float64
  ##a2#7115::Float64
  ##div_a#7116::Float64
  ####afactor#7105#7117::Float64
  ####bfactor#7106#7118::Float64
  ########a#7095#7099#7107#7119::Tuple{}
  ########b#7096#7100#7108#7120::Tuple{}
  ########afactor#7097#7101#7109#7121::Float64
  ########bfactor#7098#7102#7110#7122::Float64
  ######_var0#7103#7111#7123::Tuple{}
  ######types#7104#7112#7124::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7114 = GenSym(3)
      ##a2#7115 = GenSym(4)
      ##div_a#7116 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7114::Float64,##a2#7115::Float64))
      ####afactor#7105#7117 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7115::Float64))
      ####bfactor#7106#7118 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7114::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7115::Float64,##a2#7115::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7123 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7103#7111#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7116::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7113::Tuple{Type{Float64}}
  ##a1#7114::Float64
  ##a2#7115::Float64
  ##div_a#7116::Float64
  ####afactor#7105#7117::Float64
  ####bfactor#7106#7118::Float64
  ########a#7095#7099#7107#7119::Tuple{}
  ########b#7096#7100#7108#7120::Tuple{}
  ########afactor#7097#7101#7109#7121::Float64
  ########bfactor#7098#7102#7110#7122::Float64
  ######_var0#7103#7111#7123::Tuple{}
  ######types#7104#7112#7124::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7114 = GenSym(3)
      ##a2#7115 = GenSym(4)
      ##div_a#7116 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7114::Float64,##a2#7115::Float64))
      ####afactor#7105#7117 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7115::Float64))
      ####bfactor#7106#7118 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7114::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7115::Float64,##a2#7115::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7123 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7103#7111#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7116::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7113::Tuple{Type{Float64}}
  ##a1#7114::Float64
  ##a2#7115::Float64
  ##div_a#7116::Float64
  ####afactor#7105#7117::Float64
  ####bfactor#7106#7118::Float64
  ########a#7095#7099#7107#7119::Tuple{}
  ########b#7096#7100#7108#7120::Tuple{}
  ########afactor#7097#7101#7109#7121::Float64
  ########bfactor#7098#7102#7110#7122::Float64
  ######_var0#7103#7111#7123::Tuple{}
  ######types#7104#7112#7124::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7114 = GenSym(3)
      ##a2#7115 = GenSym(4)
      ##div_a#7116 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7114::Float64,##a2#7115::Float64))
      ####afactor#7105#7117 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7115::Float64))
      ####bfactor#7106#7118 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7114::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7115::Float64,##a2#7115::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7123 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7103#7111#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7116::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7113::Tuple{Type{Float64}}
  ##a1#7114::Float64
  ##a2#7115::Float64
  ##div_a#7116::Float64
  ####afactor#7105#7117::Float64
  ####bfactor#7106#7118::Float64
  ########a#7095#7099#7107#7119::Tuple{}
  ########b#7096#7100#7108#7120::Tuple{}
  ########afactor#7097#7101#7109#7121::Float64
  ########bfactor#7098#7102#7110#7122::Float64
  ######_var0#7103#7111#7123::Tuple{}
  ######types#7104#7112#7124::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 60:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7114 = GenSym(3)
      ##a2#7115 = GenSym(4)
      ##div_a#7116 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7114::Float64,##a2#7115::Float64))
      ####afactor#7105#7117 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7115::Float64))
      ####bfactor#7106#7118 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7114::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7115::Float64,##a2#7115::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7123 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7103#7111#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7116::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7142::Tuple{Type{Float64}}
  ######types#7093#7094#7143::Tuple{Type{Float64}}
  ##a#7144::Float64
  ##exp_a#7145::Float64
  ##deriv#7146::Float64
  ####G#7132#7147::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7148::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7149::Tuple{}
  ##########x#6997#6999#7003#7135#7150::Float64
  ########_var0#7000#7004#7136#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7095#7137#7154::Tuple{}
  ######b#7096#7138#7155::Tuple{}
  ######afactor#7097#7139#7156::Float64
  ######bfactor#7098#7140#7157::Float64
  ####_var0#7141#7158::Tuple{}
  ##a#7159::Float64
  ##exp_a#7160::Float64
  ##deriv#7161::Float64
  ####G#7132#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7164::Tuple{}
  ##########x#6997#6999#7003#7135#7165::Float64
  ########_var0#7000#7004#7136#7166::Tuple{}
  ##a1#7167::Float64
  ##a2#7168::Float64
  ##div_a#7169::Float64
  ####afactor#7105#7170::Float64
  ####bfactor#7106#7171::Float64
  ########a#7095#7099#7107#7172::Tuple{}
  ########b#7096#7100#7108#7173::Tuple{}
  ########afactor#7097#7101#7109#7174::Float64
  ########bfactor#7098#7102#7110#7175::Float64
  ######_var0#7103#7111#7176::Tuple{}
  ######types#7104#7112#7177::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7159 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7160 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7161 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7166 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7136#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7160::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7144 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7145 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7146 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7147 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7151 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7136#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7145::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7152 = GenSym(4)
      ##a2#7153 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7158 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7141#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7167 = GenSym(8)
      ##a2#7168 = GenSym(9)
      ##div_a#7169 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7167::Float64,##a2#7168::Float64))
      ####afactor#7105#7170 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7168::Float64))
      ####bfactor#7106#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7167::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7168::Float64,##a2#7168::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7176 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7103#7111#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7169::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7142::Tuple{Type{Float64}}
  ######types#7093#7094#7143::Tuple{Type{Float64}}
  ##a#7144::Float64
  ##exp_a#7145::Float64
  ##deriv#7146::Float64
  ####G#7132#7147::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7148::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7149::Tuple{}
  ##########x#6997#6999#7003#7135#7150::Float64
  ########_var0#7000#7004#7136#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7095#7137#7154::Tuple{}
  ######b#7096#7138#7155::Tuple{}
  ######afactor#7097#7139#7156::Float64
  ######bfactor#7098#7140#7157::Float64
  ####_var0#7141#7158::Tuple{}
  ##a#7159::Float64
  ##exp_a#7160::Float64
  ##deriv#7161::Float64
  ####G#7132#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7164::Tuple{}
  ##########x#6997#6999#7003#7135#7165::Float64
  ########_var0#7000#7004#7136#7166::Tuple{}
  ##a1#7167::Float64
  ##a2#7168::Float64
  ##div_a#7169::Float64
  ####afactor#7105#7170::Float64
  ####bfactor#7106#7171::Float64
  ########a#7095#7099#7107#7172::Tuple{}
  ########b#7096#7100#7108#7173::Tuple{}
  ########afactor#7097#7101#7109#7174::Float64
  ########bfactor#7098#7102#7110#7175::Float64
  ######_var0#7103#7111#7176::Tuple{}
  ######types#7104#7112#7177::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7159 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7160 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7161 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7166 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7136#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7160::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7144 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7145 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7146 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7147 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7151 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7136#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7145::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7152 = GenSym(4)
      ##a2#7153 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7158 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7141#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7167 = GenSym(8)
      ##a2#7168 = GenSym(9)
      ##div_a#7169 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7167::Float64,##a2#7168::Float64))
      ####afactor#7105#7170 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7168::Float64))
      ####bfactor#7106#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7167::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7168::Float64,##a2#7168::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7176 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7103#7111#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7169::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7142::Tuple{Type{Float64}}
  ######types#7093#7094#7143::Tuple{Type{Float64}}
  ##a#7144::Float64
  ##exp_a#7145::Float64
  ##deriv#7146::Float64
  ####G#7132#7147::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7148::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7149::Tuple{}
  ##########x#6997#6999#7003#7135#7150::Float64
  ########_var0#7000#7004#7136#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7095#7137#7154::Tuple{}
  ######b#7096#7138#7155::Tuple{}
  ######afactor#7097#7139#7156::Float64
  ######bfactor#7098#7140#7157::Float64
  ####_var0#7141#7158::Tuple{}
  ##a#7159::Float64
  ##exp_a#7160::Float64
  ##deriv#7161::Float64
  ####G#7132#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7164::Tuple{}
  ##########x#6997#6999#7003#7135#7165::Float64
  ########_var0#7000#7004#7136#7166::Tuple{}
  ##a1#7167::Float64
  ##a2#7168::Float64
  ##div_a#7169::Float64
  ####afactor#7105#7170::Float64
  ####bfactor#7106#7171::Float64
  ########a#7095#7099#7107#7172::Tuple{}
  ########b#7096#7100#7108#7173::Tuple{}
  ########afactor#7097#7101#7109#7174::Float64
  ########bfactor#7098#7102#7110#7175::Float64
  ######_var0#7103#7111#7176::Tuple{}
  ######types#7104#7112#7177::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7159 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7160 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7161 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7166 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7136#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7160::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7144 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7145 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7146 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7147 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7151 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7136#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7145::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7152 = GenSym(4)
      ##a2#7153 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7158 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7141#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7167 = GenSym(8)
      ##a2#7168 = GenSym(9)
      ##div_a#7169 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7167::Float64,##a2#7168::Float64))
      ####afactor#7105#7170 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7168::Float64))
      ####bfactor#7106#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7167::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7168::Float64,##a2#7168::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7176 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7103#7111#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7169::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7142::Tuple{Type{Float64}}
  ######types#7093#7094#7143::Tuple{Type{Float64}}
  ##a#7144::Float64
  ##exp_a#7145::Float64
  ##deriv#7146::Float64
  ####G#7132#7147::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7148::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7149::Tuple{}
  ##########x#6997#6999#7003#7135#7150::Float64
  ########_var0#7000#7004#7136#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7095#7137#7154::Tuple{}
  ######b#7096#7138#7155::Tuple{}
  ######afactor#7097#7139#7156::Float64
  ######bfactor#7098#7140#7157::Float64
  ####_var0#7141#7158::Tuple{}
  ##a#7159::Float64
  ##exp_a#7160::Float64
  ##deriv#7161::Float64
  ####G#7132#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7164::Tuple{}
  ##########x#6997#6999#7003#7135#7165::Float64
  ########_var0#7000#7004#7136#7166::Tuple{}
  ##a1#7167::Float64
  ##a2#7168::Float64
  ##div_a#7169::Float64
  ####afactor#7105#7170::Float64
  ####bfactor#7106#7171::Float64
  ########a#7095#7099#7107#7172::Tuple{}
  ########b#7096#7100#7108#7173::Tuple{}
  ########afactor#7097#7101#7109#7174::Float64
  ########bfactor#7098#7102#7110#7175::Float64
  ######_var0#7103#7111#7176::Tuple{}
  ######types#7104#7112#7177::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7159 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7160 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7161 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7166 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7136#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7160::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7144 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7145 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7146 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7147 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7151 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7136#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7145::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7152 = GenSym(4)
      ##a2#7153 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7158 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7141#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7167 = GenSym(8)
      ##a2#7168 = GenSym(9)
      ##div_a#7169 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7167::Float64,##a2#7168::Float64))
      ####afactor#7105#7170 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7168::Float64))
      ####bfactor#7106#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7167::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7168::Float64,##a2#7168::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7176 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7103#7111#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7169::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7093#7094#7142::Tuple{Type{Float64}}
  ######types#7093#7094#7143::Tuple{Type{Float64}}
  ##a#7144::Float64
  ##exp_a#7145::Float64
  ##deriv#7146::Float64
  ####G#7132#7147::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7148::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7149::Tuple{}
  ##########x#6997#6999#7003#7135#7150::Float64
  ########_var0#7000#7004#7136#7151::Tuple{}
  ##a1#7152::Float64
  ##a2#7153::Float64
  ######a#7095#7137#7154::Tuple{}
  ######b#7096#7138#7155::Tuple{}
  ######afactor#7097#7139#7156::Float64
  ######bfactor#7098#7140#7157::Float64
  ####_var0#7141#7158::Tuple{}
  ##a#7159::Float64
  ##exp_a#7160::Float64
  ##deriv#7161::Float64
  ####G#7132#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7133#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7134#7164::Tuple{}
  ##########x#6997#6999#7003#7135#7165::Float64
  ########_var0#7000#7004#7136#7166::Tuple{}
  ##a1#7167::Float64
  ##a2#7168::Float64
  ##div_a#7169::Float64
  ####afactor#7105#7170::Float64
  ####bfactor#7106#7171::Float64
  ########a#7095#7099#7107#7172::Tuple{}
  ########b#7096#7100#7108#7173::Tuple{}
  ########afactor#7097#7101#7109#7174::Float64
  ########bfactor#7098#7102#7110#7175::Float64
  ######_var0#7103#7111#7176::Tuple{}
  ######types#7104#7112#7177::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 66:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7159 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7160 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7161 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7159::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7166 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7136#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7160::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7144 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7145 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7146 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7144::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7132#7147 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7136#7151 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7136#7151 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7145::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7152 = GenSym(4)
      ##a2#7153 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7158 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7141#7158 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7152::Float64,##a2#7153::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7167 = GenSym(8)
      ##a2#7168 = GenSym(9)
      ##div_a#7169 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7167::Float64,##a2#7168::Float64))
      ####afactor#7105#7170 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7168::Float64))
      ####bfactor#7106#7171 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7167::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7168::Float64,##a2#7168::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7176 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7103#7111#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7169::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7093#7181#7182::Tuple{Type{Float64}}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ##div_a#7185::Float64
  ####afactor#7105#7186::Float64
  ####bfactor#7106#7187::Float64
  ########a#7095#7099#7107#7188::Tuple{}
  ########b#7096#7100#7108#7189::Tuple{}
  ########afactor#7097#7101#7109#7190::Float64
  ########bfactor#7098#7102#7110#7191::Float64
  ######_var0#7103#7111#7192::Tuple{}
  ######types#7104#7112#7193::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(1)
      ##a2#7184 = GenSym(2)
      ##div_a#7185 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7183::Float64,##a2#7184::Float64))
      ####afactor#7105#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7184::Float64))
      ####bfactor#7106#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7183::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7184::Float64,##a2#7184::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7192 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7103#7111#7192 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7093#7181#7182::Tuple{Type{Float64}}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ##div_a#7185::Float64
  ####afactor#7105#7186::Float64
  ####bfactor#7106#7187::Float64
  ########a#7095#7099#7107#7188::Tuple{}
  ########b#7096#7100#7108#7189::Tuple{}
  ########afactor#7097#7101#7109#7190::Float64
  ########bfactor#7098#7102#7110#7191::Float64
  ######_var0#7103#7111#7192::Tuple{}
  ######types#7104#7112#7193::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(1)
      ##a2#7184 = GenSym(2)
      ##div_a#7185 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7183::Float64,##a2#7184::Float64))
      ####afactor#7105#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7184::Float64))
      ####bfactor#7106#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7183::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7184::Float64,##a2#7184::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7192 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7103#7111#7192 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7093#7181#7182::Tuple{Type{Float64}}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ##div_a#7185::Float64
  ####afactor#7105#7186::Float64
  ####bfactor#7106#7187::Float64
  ########a#7095#7099#7107#7188::Tuple{}
  ########b#7096#7100#7108#7189::Tuple{}
  ########afactor#7097#7101#7109#7190::Float64
  ########bfactor#7098#7102#7110#7191::Float64
  ######_var0#7103#7111#7192::Tuple{}
  ######types#7104#7112#7193::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(1)
      ##a2#7184 = GenSym(2)
      ##div_a#7185 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7183::Float64,##a2#7184::Float64))
      ####afactor#7105#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7184::Float64))
      ####bfactor#7106#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7183::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7184::Float64,##a2#7184::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7192 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7103#7111#7192 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7093#7181#7182::Tuple{Type{Float64}}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ##div_a#7185::Float64
  ####afactor#7105#7186::Float64
  ####bfactor#7106#7187::Float64
  ########a#7095#7099#7107#7188::Tuple{}
  ########b#7096#7100#7108#7189::Tuple{}
  ########afactor#7097#7101#7109#7190::Float64
  ########bfactor#7098#7102#7110#7191::Float64
  ######_var0#7103#7111#7192::Tuple{}
  ######types#7104#7112#7193::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(1)
      ##a2#7184 = GenSym(2)
      ##div_a#7185 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7183::Float64,##a2#7184::Float64))
      ####afactor#7105#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7184::Float64))
      ####bfactor#7106#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7183::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7184::Float64,##a2#7184::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7192 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7103#7111#7192 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7093#7181#7182::Tuple{Type{Float64}}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ##div_a#7185::Float64
  ####afactor#7105#7186::Float64
  ####bfactor#7106#7187::Float64
  ########a#7095#7099#7107#7188::Tuple{}
  ########b#7096#7100#7108#7189::Tuple{}
  ########afactor#7097#7101#7109#7190::Float64
  ########bfactor#7098#7102#7110#7191::Float64
  ######_var0#7103#7111#7192::Tuple{}
  ######types#7104#7112#7193::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 62:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(1)
      ##a2#7184 = GenSym(2)
      ##div_a#7185 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7183::Float64,##a2#7184::Float64))
      ####afactor#7105#7186 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7184::Float64))
      ####bfactor#7106#7187 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7183::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7184::Float64,##a2#7184::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7192 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7103#7111#7192 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7185::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7211::Tuple{Type{Float64}}
  ######types#7093#7094#7212::Tuple{Type{Float64}}
  ##sqrt_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7198#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7217::Tuple{}
  ##########x#6997#6999#7003#7201#7218::Float64
  ########_var0#7000#7004#7202#7219::Tuple{}
  ########tup#6996#7203#7207#7220::Tuple{}
  ########x#6997#7204#7208#7221::Float64
  ######_var0#7205#7209#7222::Tuple{}
  ########types#7093#7206#7210#7223::Tuple{Type{Float64}}
  ##a1#7224::Float64
  ##a2#7225::Float64
  ##div_a#7226::Float64
  ####afactor#7105#7227::Float64
  ####bfactor#7106#7228::Float64
  ########a#7095#7099#7107#7229::Tuple{}
  ########b#7096#7100#7108#7230::Tuple{}
  ########afactor#7097#7101#7109#7231::Float64
  ########bfactor#7098#7102#7110#7232::Float64
  ######_var0#7103#7111#7233::Tuple{}
  ######types#7104#7112#7234::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7213::Float64))
      ####G#7198#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7219 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7202#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7222 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7224 = GenSym(1)
      ##a2#7225 = GenSym(2)
      ##div_a#7226 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7224::Float64,##a2#7225::Float64))
      ####afactor#7105#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7225::Float64))
      ####bfactor#7106#7228 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7224::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7225::Float64,##a2#7225::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7233 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7103#7111#7233 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7211::Tuple{Type{Float64}}
  ######types#7093#7094#7212::Tuple{Type{Float64}}
  ##sqrt_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7198#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7217::Tuple{}
  ##########x#6997#6999#7003#7201#7218::Float64
  ########_var0#7000#7004#7202#7219::Tuple{}
  ########tup#6996#7203#7207#7220::Tuple{}
  ########x#6997#7204#7208#7221::Float64
  ######_var0#7205#7209#7222::Tuple{}
  ########types#7093#7206#7210#7223::Tuple{Type{Float64}}
  ##a1#7224::Float64
  ##a2#7225::Float64
  ##div_a#7226::Float64
  ####afactor#7105#7227::Float64
  ####bfactor#7106#7228::Float64
  ########a#7095#7099#7107#7229::Tuple{}
  ########b#7096#7100#7108#7230::Tuple{}
  ########afactor#7097#7101#7109#7231::Float64
  ########bfactor#7098#7102#7110#7232::Float64
  ######_var0#7103#7111#7233::Tuple{}
  ######types#7104#7112#7234::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7213::Float64))
      ####G#7198#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7219 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7202#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7222 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7224 = GenSym(1)
      ##a2#7225 = GenSym(2)
      ##div_a#7226 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7224::Float64,##a2#7225::Float64))
      ####afactor#7105#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7225::Float64))
      ####bfactor#7106#7228 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7224::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7225::Float64,##a2#7225::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7233 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7103#7111#7233 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7211::Tuple{Type{Float64}}
  ######types#7093#7094#7212::Tuple{Type{Float64}}
  ##sqrt_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7198#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7217::Tuple{}
  ##########x#6997#6999#7003#7201#7218::Float64
  ########_var0#7000#7004#7202#7219::Tuple{}
  ########tup#6996#7203#7207#7220::Tuple{}
  ########x#6997#7204#7208#7221::Float64
  ######_var0#7205#7209#7222::Tuple{}
  ########types#7093#7206#7210#7223::Tuple{Type{Float64}}
  ##a1#7224::Float64
  ##a2#7225::Float64
  ##div_a#7226::Float64
  ####afactor#7105#7227::Float64
  ####bfactor#7106#7228::Float64
  ########a#7095#7099#7107#7229::Tuple{}
  ########b#7096#7100#7108#7230::Tuple{}
  ########afactor#7097#7101#7109#7231::Float64
  ########bfactor#7098#7102#7110#7232::Float64
  ######_var0#7103#7111#7233::Tuple{}
  ######types#7104#7112#7234::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7213::Float64))
      ####G#7198#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7219 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7202#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7222 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7224 = GenSym(1)
      ##a2#7225 = GenSym(2)
      ##div_a#7226 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7224::Float64,##a2#7225::Float64))
      ####afactor#7105#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7225::Float64))
      ####bfactor#7106#7228 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7224::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7225::Float64,##a2#7225::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7233 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7103#7111#7233 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7211::Tuple{Type{Float64}}
  ######types#7093#7094#7212::Tuple{Type{Float64}}
  ##sqrt_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7198#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7217::Tuple{}
  ##########x#6997#6999#7003#7201#7218::Float64
  ########_var0#7000#7004#7202#7219::Tuple{}
  ########tup#6996#7203#7207#7220::Tuple{}
  ########x#6997#7204#7208#7221::Float64
  ######_var0#7205#7209#7222::Tuple{}
  ########types#7093#7206#7210#7223::Tuple{Type{Float64}}
  ##a1#7224::Float64
  ##a2#7225::Float64
  ##div_a#7226::Float64
  ####afactor#7105#7227::Float64
  ####bfactor#7106#7228::Float64
  ########a#7095#7099#7107#7229::Tuple{}
  ########b#7096#7100#7108#7230::Tuple{}
  ########afactor#7097#7101#7109#7231::Float64
  ########bfactor#7098#7102#7110#7232::Float64
  ######_var0#7103#7111#7233::Tuple{}
  ######types#7104#7112#7234::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7213::Float64))
      ####G#7198#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7219 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7202#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7222 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7224 = GenSym(1)
      ##a2#7225 = GenSym(2)
      ##div_a#7226 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7224::Float64,##a2#7225::Float64))
      ####afactor#7105#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7225::Float64))
      ####bfactor#7106#7228 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7224::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7225::Float64,##a2#7225::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7233 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7103#7111#7233 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7211::Tuple{Type{Float64}}
  ######types#7093#7094#7212::Tuple{Type{Float64}}
  ##sqrt_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7198#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7217::Tuple{}
  ##########x#6997#6999#7003#7201#7218::Float64
  ########_var0#7000#7004#7202#7219::Tuple{}
  ########tup#6996#7203#7207#7220::Tuple{}
  ########x#6997#7204#7208#7221::Float64
  ######_var0#7205#7209#7222::Tuple{}
  ########types#7093#7206#7210#7223::Tuple{Type{Float64}}
  ##a1#7224::Float64
  ##a2#7225::Float64
  ##div_a#7226::Float64
  ####afactor#7105#7227::Float64
  ####bfactor#7106#7228::Float64
  ########a#7095#7099#7107#7229::Tuple{}
  ########b#7096#7100#7108#7230::Tuple{}
  ########afactor#7097#7101#7109#7231::Float64
  ########bfactor#7098#7102#7110#7232::Float64
  ######_var0#7103#7111#7233::Tuple{}
  ######types#7104#7112#7234::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 71:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7213::Float64))
      ####G#7198#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7219 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7202#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7222 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7224 = GenSym(1)
      ##a2#7225 = GenSym(2)
      ##div_a#7226 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7224::Float64,##a2#7225::Float64))
      ####afactor#7105#7227 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7225::Float64))
      ####bfactor#7106#7228 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7224::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7225::Float64,##a2#7225::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7233 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7103#7111#7233 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7235::Tuple{Type{Float64}}
  ######types#7093#7094#7236::Tuple{Type{Float64}}
  ##a1#7237::Float64
  ##a2#7238::Float64
  ######a#7095#7137#7239::Tuple{}
  ######b#7096#7138#7240::Tuple{}
  ######afactor#7097#7139#7241::Float64
  ######bfactor#7098#7140#7242::Float64
  ####_var0#7141#7243::Tuple{}
  ########tup#6996#7203#7207#7244::Tuple{}
  ########x#6997#7204#7208#7245::Float64
  ######_var0#7205#7209#7246::Tuple{}
  ########types#7093#7206#7210#7247::Tuple{Type{Float64}}
  ######types#7093#7094#7248::Tuple{Type{Float64}}
  ##a1#7249::Float64
  ##a2#7250::Float64
  ##div_a#7251::Float64
  ####afactor#7105#7252::Float64
  ####bfactor#7106#7253::Float64
  ########a#7095#7099#7107#7254::Tuple{}
  ########b#7096#7100#7108#7255::Tuple{}
  ########afactor#7097#7101#7109#7256::Float64
  ########bfactor#7098#7102#7110#7257::Float64
  ######_var0#7103#7111#7258::Tuple{}
  ######types#7104#7112#7259::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7246 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7237 = GenSym(0)
      ##a2#7238 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7243 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7141#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7237::Float64,##a2#7238::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7249 = GenSym(4)
      ##a2#7250 = GenSym(5)
      ##div_a#7251 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7249::Float64,##a2#7250::Float64))
      ####afactor#7105#7252 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7250::Float64))
      ####bfactor#7106#7253 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7249::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7250::Float64,##a2#7250::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7258 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7103#7111#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7251::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7235::Tuple{Type{Float64}}
  ######types#7093#7094#7236::Tuple{Type{Float64}}
  ##a1#7237::Float64
  ##a2#7238::Float64
  ######a#7095#7137#7239::Tuple{}
  ######b#7096#7138#7240::Tuple{}
  ######afactor#7097#7139#7241::Float64
  ######bfactor#7098#7140#7242::Float64
  ####_var0#7141#7243::Tuple{}
  ########tup#6996#7203#7207#7244::Tuple{}
  ########x#6997#7204#7208#7245::Float64
  ######_var0#7205#7209#7246::Tuple{}
  ########types#7093#7206#7210#7247::Tuple{Type{Float64}}
  ######types#7093#7094#7248::Tuple{Type{Float64}}
  ##a1#7249::Float64
  ##a2#7250::Float64
  ##div_a#7251::Float64
  ####afactor#7105#7252::Float64
  ####bfactor#7106#7253::Float64
  ########a#7095#7099#7107#7254::Tuple{}
  ########b#7096#7100#7108#7255::Tuple{}
  ########afactor#7097#7101#7109#7256::Float64
  ########bfactor#7098#7102#7110#7257::Float64
  ######_var0#7103#7111#7258::Tuple{}
  ######types#7104#7112#7259::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7246 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7237 = GenSym(0)
      ##a2#7238 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7243 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7141#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7237::Float64,##a2#7238::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7249 = GenSym(4)
      ##a2#7250 = GenSym(5)
      ##div_a#7251 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7249::Float64,##a2#7250::Float64))
      ####afactor#7105#7252 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7250::Float64))
      ####bfactor#7106#7253 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7249::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7250::Float64,##a2#7250::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7258 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7103#7111#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7251::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7235::Tuple{Type{Float64}}
  ######types#7093#7094#7236::Tuple{Type{Float64}}
  ##a1#7237::Float64
  ##a2#7238::Float64
  ######a#7095#7137#7239::Tuple{}
  ######b#7096#7138#7240::Tuple{}
  ######afactor#7097#7139#7241::Float64
  ######bfactor#7098#7140#7242::Float64
  ####_var0#7141#7243::Tuple{}
  ########tup#6996#7203#7207#7244::Tuple{}
  ########x#6997#7204#7208#7245::Float64
  ######_var0#7205#7209#7246::Tuple{}
  ########types#7093#7206#7210#7247::Tuple{Type{Float64}}
  ######types#7093#7094#7248::Tuple{Type{Float64}}
  ##a1#7249::Float64
  ##a2#7250::Float64
  ##div_a#7251::Float64
  ####afactor#7105#7252::Float64
  ####bfactor#7106#7253::Float64
  ########a#7095#7099#7107#7254::Tuple{}
  ########b#7096#7100#7108#7255::Tuple{}
  ########afactor#7097#7101#7109#7256::Float64
  ########bfactor#7098#7102#7110#7257::Float64
  ######_var0#7103#7111#7258::Tuple{}
  ######types#7104#7112#7259::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7246 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7237 = GenSym(0)
      ##a2#7238 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7243 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7141#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7237::Float64,##a2#7238::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7249 = GenSym(4)
      ##a2#7250 = GenSym(5)
      ##div_a#7251 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7249::Float64,##a2#7250::Float64))
      ####afactor#7105#7252 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7250::Float64))
      ####bfactor#7106#7253 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7249::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7250::Float64,##a2#7250::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7258 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7103#7111#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7251::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7235::Tuple{Type{Float64}}
  ######types#7093#7094#7236::Tuple{Type{Float64}}
  ##a1#7237::Float64
  ##a2#7238::Float64
  ######a#7095#7137#7239::Tuple{}
  ######b#7096#7138#7240::Tuple{}
  ######afactor#7097#7139#7241::Float64
  ######bfactor#7098#7140#7242::Float64
  ####_var0#7141#7243::Tuple{}
  ########tup#6996#7203#7207#7244::Tuple{}
  ########x#6997#7204#7208#7245::Float64
  ######_var0#7205#7209#7246::Tuple{}
  ########types#7093#7206#7210#7247::Tuple{Type{Float64}}
  ######types#7093#7094#7248::Tuple{Type{Float64}}
  ##a1#7249::Float64
  ##a2#7250::Float64
  ##div_a#7251::Float64
  ####afactor#7105#7252::Float64
  ####bfactor#7106#7253::Float64
  ########a#7095#7099#7107#7254::Tuple{}
  ########b#7096#7100#7108#7255::Tuple{}
  ########afactor#7097#7101#7109#7256::Float64
  ########bfactor#7098#7102#7110#7257::Float64
  ######_var0#7103#7111#7258::Tuple{}
  ######types#7104#7112#7259::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7246 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7237 = GenSym(0)
      ##a2#7238 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7243 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7141#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7237::Float64,##a2#7238::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7249 = GenSym(4)
      ##a2#7250 = GenSym(5)
      ##div_a#7251 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7249::Float64,##a2#7250::Float64))
      ####afactor#7105#7252 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7250::Float64))
      ####bfactor#7106#7253 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7249::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7250::Float64,##a2#7250::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7258 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7103#7111#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7251::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7093#7094#7235::Tuple{Type{Float64}}
  ######types#7093#7094#7236::Tuple{Type{Float64}}
  ##a1#7237::Float64
  ##a2#7238::Float64
  ######a#7095#7137#7239::Tuple{}
  ######b#7096#7138#7240::Tuple{}
  ######afactor#7097#7139#7241::Float64
  ######bfactor#7098#7140#7242::Float64
  ####_var0#7141#7243::Tuple{}
  ########tup#6996#7203#7207#7244::Tuple{}
  ########x#6997#7204#7208#7245::Float64
  ######_var0#7205#7209#7246::Tuple{}
  ########types#7093#7206#7210#7247::Tuple{Type{Float64}}
  ######types#7093#7094#7248::Tuple{Type{Float64}}
  ##a1#7249::Float64
  ##a2#7250::Float64
  ##div_a#7251::Float64
  ####afactor#7105#7252::Float64
  ####bfactor#7106#7253::Float64
  ########a#7095#7099#7107#7254::Tuple{}
  ########b#7096#7100#7108#7255::Tuple{}
  ########afactor#7097#7101#7109#7256::Float64
  ########bfactor#7098#7102#7110#7257::Float64
  ######_var0#7103#7111#7258::Tuple{}
  ######types#7104#7112#7259::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 76:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7246 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7205#7209#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7237 = GenSym(0)
      ##a2#7238 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7243 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7141#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7237::Float64,##a2#7238::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7249 = GenSym(4)
      ##a2#7250 = GenSym(5)
      ##div_a#7251 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7249::Float64,##a2#7250::Float64))
      ####afactor#7105#7252 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7250::Float64))
      ####bfactor#7106#7253 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7249::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7250::Float64,##a2#7250::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7258 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7103#7111#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7251::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7291::Float64
  ####G#7286#7292::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7287#7293::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7288#7294::Tuple{}
  ##########x#6997#6999#7003#7289#7295::Float64
  ########_var0#7000#7004#7290#7296::Tuple{}
  ##a#7297::Float64
  ####G#7276#7298::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7277#7299::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7278#7300::Tuple{}
  ##########x#6997#6999#7003#7279#7301::Float64
  ########_var0#7000#7004#7280#7302::Tuple{}
  ########types#7093#7181#7272#7303::Tuple{Type{Float64}}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7095#7137#7306::Tuple{}
  ######b#7096#7138#7307::Tuple{}
  ######afactor#7097#7139#7308::Float64
  ######bfactor#7098#7140#7309::Float64
  ####_var0#7141#7310::Tuple{}
  ##a#7311::Float64
  ####G#7262#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7263#7313::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7264#7314::Tuple{}
  ##########x#6997#6999#7003#7265#7315::Float64
  ########_var0#7000#7004#7266#7316::Tuple{}
  ######a#7267#7269#7317::Tuple{}
  ######b#7268#7270#7318::Tuple{}
  ####_var0#7271#7319::Tuple{}
  ######a#7281#7283#7320::Tuple{}
  ######b#7282#7284#7321::Tuple{}
  ####_var0#7285#7322::Tuple{}
  ######a#7267#7269#7323::Tuple{}
  ######b#7268#7270#7324::Tuple{}
  ####_var0#7271#7325::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      ##a#7311 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7311::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7311::Float64)::Float64
      ####G#7262#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7266#7316 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7266#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7311::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7319 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7271#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7297 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7297::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7297::Float64)::Float64
      ####G#7276#7298 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7280#7302 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7280#7302 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7304 = GenSym(6)
      ##a2#7305 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7310 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7141#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7285#7322 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7285#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7291 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7291::Float64,0)::Float64
      ####G#7286#7292 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7290#7296 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7290#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7291::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7325 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7271#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7291::Float64
  ####G#7286#7292::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7287#7293::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7288#7294::Tuple{}
  ##########x#6997#6999#7003#7289#7295::Float64
  ########_var0#7000#7004#7290#7296::Tuple{}
  ##a#7297::Float64
  ####G#7276#7298::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7277#7299::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7278#7300::Tuple{}
  ##########x#6997#6999#7003#7279#7301::Float64
  ########_var0#7000#7004#7280#7302::Tuple{}
  ########types#7093#7181#7272#7303::Tuple{Type{Float64}}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7095#7137#7306::Tuple{}
  ######b#7096#7138#7307::Tuple{}
  ######afactor#7097#7139#7308::Float64
  ######bfactor#7098#7140#7309::Float64
  ####_var0#7141#7310::Tuple{}
  ##a#7311::Float64
  ####G#7262#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7263#7313::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7264#7314::Tuple{}
  ##########x#6997#6999#7003#7265#7315::Float64
  ########_var0#7000#7004#7266#7316::Tuple{}
  ######a#7267#7269#7317::Tuple{}
  ######b#7268#7270#7318::Tuple{}
  ####_var0#7271#7319::Tuple{}
  ######a#7281#7283#7320::Tuple{}
  ######b#7282#7284#7321::Tuple{}
  ####_var0#7285#7322::Tuple{}
  ######a#7267#7269#7323::Tuple{}
  ######b#7268#7270#7324::Tuple{}
  ####_var0#7271#7325::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      ##a#7311 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7311::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7311::Float64)::Float64
      ####G#7262#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7266#7316 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7266#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7311::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7319 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7271#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7297 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7297::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7297::Float64)::Float64
      ####G#7276#7298 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7280#7302 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7280#7302 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7304 = GenSym(6)
      ##a2#7305 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7310 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7141#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7285#7322 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7285#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7291 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7291::Float64,0)::Float64
      ####G#7286#7292 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7290#7296 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7290#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7291::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7325 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7271#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7291::Float64
  ####G#7286#7292::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7287#7293::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7288#7294::Tuple{}
  ##########x#6997#6999#7003#7289#7295::Float64
  ########_var0#7000#7004#7290#7296::Tuple{}
  ##a#7297::Float64
  ####G#7276#7298::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7277#7299::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7278#7300::Tuple{}
  ##########x#6997#6999#7003#7279#7301::Float64
  ########_var0#7000#7004#7280#7302::Tuple{}
  ########types#7093#7181#7272#7303::Tuple{Type{Float64}}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7095#7137#7306::Tuple{}
  ######b#7096#7138#7307::Tuple{}
  ######afactor#7097#7139#7308::Float64
  ######bfactor#7098#7140#7309::Float64
  ####_var0#7141#7310::Tuple{}
  ##a#7311::Float64
  ####G#7262#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7263#7313::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7264#7314::Tuple{}
  ##########x#6997#6999#7003#7265#7315::Float64
  ########_var0#7000#7004#7266#7316::Tuple{}
  ######a#7267#7269#7317::Tuple{}
  ######b#7268#7270#7318::Tuple{}
  ####_var0#7271#7319::Tuple{}
  ######a#7281#7283#7320::Tuple{}
  ######b#7282#7284#7321::Tuple{}
  ####_var0#7285#7322::Tuple{}
  ######a#7267#7269#7323::Tuple{}
  ######b#7268#7270#7324::Tuple{}
  ####_var0#7271#7325::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      ##a#7311 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7311::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7311::Float64)::Float64
      ####G#7262#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7266#7316 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7266#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7311::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7319 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7271#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7297 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7297::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7297::Float64)::Float64
      ####G#7276#7298 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7280#7302 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7280#7302 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7304 = GenSym(6)
      ##a2#7305 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7310 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7141#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7285#7322 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7285#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7291 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7291::Float64,0)::Float64
      ####G#7286#7292 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7290#7296 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7290#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7291::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7325 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7271#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7291::Float64
  ####G#7286#7292::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7287#7293::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7288#7294::Tuple{}
  ##########x#6997#6999#7003#7289#7295::Float64
  ########_var0#7000#7004#7290#7296::Tuple{}
  ##a#7297::Float64
  ####G#7276#7298::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7277#7299::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7278#7300::Tuple{}
  ##########x#6997#6999#7003#7279#7301::Float64
  ########_var0#7000#7004#7280#7302::Tuple{}
  ########types#7093#7181#7272#7303::Tuple{Type{Float64}}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7095#7137#7306::Tuple{}
  ######b#7096#7138#7307::Tuple{}
  ######afactor#7097#7139#7308::Float64
  ######bfactor#7098#7140#7309::Float64
  ####_var0#7141#7310::Tuple{}
  ##a#7311::Float64
  ####G#7262#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7263#7313::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7264#7314::Tuple{}
  ##########x#6997#6999#7003#7265#7315::Float64
  ########_var0#7000#7004#7266#7316::Tuple{}
  ######a#7267#7269#7317::Tuple{}
  ######b#7268#7270#7318::Tuple{}
  ####_var0#7271#7319::Tuple{}
  ######a#7281#7283#7320::Tuple{}
  ######b#7282#7284#7321::Tuple{}
  ####_var0#7285#7322::Tuple{}
  ######a#7267#7269#7323::Tuple{}
  ######b#7268#7270#7324::Tuple{}
  ####_var0#7271#7325::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      ##a#7311 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7311::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7311::Float64)::Float64
      ####G#7262#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7266#7316 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7266#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7311::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7319 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7271#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7297 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7297::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7297::Float64)::Float64
      ####G#7276#7298 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7280#7302 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7280#7302 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7304 = GenSym(6)
      ##a2#7305 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7310 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7141#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7285#7322 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7285#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7291 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7291::Float64,0)::Float64
      ####G#7286#7292 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7290#7296 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7290#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7291::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7325 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7271#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7291::Float64
  ####G#7286#7292::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7287#7293::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7288#7294::Tuple{}
  ##########x#6997#6999#7003#7289#7295::Float64
  ########_var0#7000#7004#7290#7296::Tuple{}
  ##a#7297::Float64
  ####G#7276#7298::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7277#7299::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7278#7300::Tuple{}
  ##########x#6997#6999#7003#7279#7301::Float64
  ########_var0#7000#7004#7280#7302::Tuple{}
  ########types#7093#7181#7272#7303::Tuple{Type{Float64}}
  ##a1#7304::Float64
  ##a2#7305::Float64
  ######a#7095#7137#7306::Tuple{}
  ######b#7096#7138#7307::Tuple{}
  ######afactor#7097#7139#7308::Float64
  ######bfactor#7098#7140#7309::Float64
  ####_var0#7141#7310::Tuple{}
  ##a#7311::Float64
  ####G#7262#7312::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7263#7313::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7264#7314::Tuple{}
  ##########x#6997#6999#7003#7265#7315::Float64
  ########_var0#7000#7004#7266#7316::Tuple{}
  ######a#7267#7269#7317::Tuple{}
  ######b#7268#7270#7318::Tuple{}
  ####_var0#7271#7319::Tuple{}
  ######a#7281#7283#7320::Tuple{}
  ######b#7282#7284#7321::Tuple{}
  ####_var0#7285#7322::Tuple{}
  ######a#7267#7269#7323::Tuple{}
  ######b#7268#7270#7324::Tuple{}
  ####_var0#7271#7325::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 81:
      ##a#7311 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7311::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7311::Float64)::Float64
      ####G#7262#7312 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7266#7316 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7266#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7311::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7319 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7271#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7297 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7297::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7297::Float64)::Float64
      ####G#7276#7298 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7280#7302 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7280#7302 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7304 = GenSym(6)
      ##a2#7305 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7141#7310 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7141#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7304::Float64,##a2#7305::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7285#7322 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7285#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7291 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7291::Float64,0)::Float64
      ####G#7286#7292 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7290#7296 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7290#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7291::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7271#7325 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7271#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 117:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7378::Float64
  ####G#7373#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7374#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7375#7381::Tuple{}
  ##########x#6997#6999#7003#7376#7382::Float64
  ########_var0#7000#7004#7377#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7378 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7373#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7377#7383 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7377#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7378::Float64
  ####G#7373#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7374#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7375#7381::Tuple{}
  ##########x#6997#6999#7003#7376#7382::Float64
  ########_var0#7000#7004#7377#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7378 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7373#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7377#7383 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7377#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7378::Float64
  ####G#7373#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7374#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7375#7381::Tuple{}
  ##########x#6997#6999#7003#7376#7382::Float64
  ########_var0#7000#7004#7377#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7378 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7373#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7377#7383 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7377#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7378::Float64
  ####G#7373#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7374#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7375#7381::Tuple{}
  ##########x#6997#6999#7003#7376#7382::Float64
  ########_var0#7000#7004#7377#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7378 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7373#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7377#7383 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7377#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7378::Float64
  ####G#7373#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7374#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7375#7381::Tuple{}
  ##########x#6997#6999#7003#7376#7382::Float64
  ########_var0#7000#7004#7377#7383::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 87:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7378 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7373#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7377#7383 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7377#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7390::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7390::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7433::Tuple{}
  ##########tup#6996#7203#7207#7425#7434::Tuple{}
  ##########x#6997#7204#7208#7426#7435::Float64
  ########_var0#7205#7209#7427#7436::Tuple{}
  ##########types#7093#7206#7210#7428#7437::Tuple{Type{Float64}}
  ########tup#7394#7397#7429#7438::Tuple{}
  ########x#7395#7398#7430#7439::Int64
  ######_var0#7399#7431#7440::Tuple{}
  ########types#7396#7400#7432#7441::Tuple{Type{Int64}}
  ##sqrt_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7198#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7446::Tuple{}
  ##########x#6997#6999#7003#7201#7447::Float64
  ########_var0#7000#7004#7202#7448::Tuple{}
  ##a#7449::Float64
  ####G#7420#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7452::Tuple{}
  ##########x#6997#6999#7003#7423#7453::Float64
  ########_var0#7000#7004#7424#7454::Tuple{}
  ########tup#6996#7203#7207#7455::Tuple{}
  ########x#6997#7204#7208#7456::Float64
  ######_var0#7205#7209#7457::Tuple{}
  ########types#7093#7206#7210#7458::Tuple{Type{Float64}}
  ######tup#7391#7392#7459::Tuple{}
  ####_var0#7393#7460::Tuple{}
  ######tup#7394#7397#7461::Tuple{}
  ######x#7395#7398#7462::Int64
  ####_var0#7399#7463::Tuple{}
  ######types#7396#7400#7464::Tuple{Type{Int64}}
  ##a1#7465::Float64
  ##a2#7466::Float64
  ##exp_a#7467::Float64
  ##powval#7468::Float64
  ##logval#7469::Float64
  ##new_bs#7470::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7406#7471::Float64
  ####exp_a#7407#7472::Float64
  ####deriv#7408#7473::Float64
  ######G#7401#7409#7474::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7402#7410#7475::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7403#7411#7476::Tuple{}
  ############x#6997#6999#7003#7404#7412#7477::Float64
  ##########_var0#7000#7004#7405#7413#7478::Tuple{}
  ######a#7095#7414#7479::Tuple{}
  ######b#7096#7415#7480::Tuple{}
  ######afactor#7097#7416#7481::Float64
  ######bfactor#7098#7417#7482::Float64
  ####_var0#7418#7483::Tuple{}
  ######types#7104#7419#7484::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7203#7207#7485::Tuple{}
  ########x#6997#7204#7208#7486::Float64
  ######_var0#7205#7209#7487::Tuple{}
  ########types#7093#7206#7210#7488::Tuple{Type{Float64}}
  ##a1#7489::Float64
  ##a2#7490::Float64
  ##div_a#7491::Float64
  ####afactor#7105#7492::Float64
  ####bfactor#7106#7493::Float64
  ########a#7095#7099#7107#7494::Tuple{}
  ########b#7096#7100#7108#7495::Tuple{}
  ########afactor#7097#7101#7109#7496::Float64
  ########bfactor#7098#7102#7110#7497::Float64
  ######_var0#7103#7111#7498::Tuple{}
  ######types#7104#7112#7499::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7393#7460 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7393#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7399#7463 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7399#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7457 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7205#7209#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7465"))
      NewvarNode(symbol("##a2#7466"))
      NewvarNode(symbol("##exp_a#7467"))
      NewvarNode(symbol("##powval#7468"))
      NewvarNode(symbol("##logval#7469"))
      NewvarNode(symbol("##new_bs#7470"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 23
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7406#7471 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7407#7472 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(16),0)::Float64
      ####deriv#7408#7473 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(16))))::Float64))
      ######G#7401#7409#7474 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7405#7413#7478 = (top(tuple))()::Tuple{}
      goto 22
      ##########_var0#7000#7004#7405#7413#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7407#7472::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      23: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7465 = GenSym(10)
      ##a2#7466 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,##a2#7466::Float64,0)::Float64
      ##exp_a#7467 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,##a2#7466::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7466::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,GenSym(23),0)::Float64
      ##powval#7468 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7466::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0)::Float64
      ##logval#7469 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7467::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7465::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7418#7483 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7418#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##new_bs#7470 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      25: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7487 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7205#7209#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      ##a#7449 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7449::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      ####G#7420#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7454 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7000#7004#7424#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7449::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7489 = GenSym(31)
      ##a2#7490 = GenSym(32)
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7489::Float64,##a2#7490::Float64))
      ####afactor#7105#7492 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7490::Float64))
      ####bfactor#7106#7493 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7489::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7490::Float64,##a2#7490::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7498 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7103#7111#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7205#7209#7427#7436 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7205#7209#7427#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7399#7431#7440 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7399#7431#7440 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##sqrt_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7442::Float64))
      ####G#7198#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7448 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7202#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7390::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7390::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7433::Tuple{}
  ##########tup#6996#7203#7207#7425#7434::Tuple{}
  ##########x#6997#7204#7208#7426#7435::Float64
  ########_var0#7205#7209#7427#7436::Tuple{}
  ##########types#7093#7206#7210#7428#7437::Tuple{Type{Float64}}
  ########tup#7394#7397#7429#7438::Tuple{}
  ########x#7395#7398#7430#7439::Int64
  ######_var0#7399#7431#7440::Tuple{}
  ########types#7396#7400#7432#7441::Tuple{Type{Int64}}
  ##sqrt_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7198#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7446::Tuple{}
  ##########x#6997#6999#7003#7201#7447::Float64
  ########_var0#7000#7004#7202#7448::Tuple{}
  ##a#7449::Float64
  ####G#7420#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7452::Tuple{}
  ##########x#6997#6999#7003#7423#7453::Float64
  ########_var0#7000#7004#7424#7454::Tuple{}
  ########tup#6996#7203#7207#7455::Tuple{}
  ########x#6997#7204#7208#7456::Float64
  ######_var0#7205#7209#7457::Tuple{}
  ########types#7093#7206#7210#7458::Tuple{Type{Float64}}
  ######tup#7391#7392#7459::Tuple{}
  ####_var0#7393#7460::Tuple{}
  ######tup#7394#7397#7461::Tuple{}
  ######x#7395#7398#7462::Int64
  ####_var0#7399#7463::Tuple{}
  ######types#7396#7400#7464::Tuple{Type{Int64}}
  ##a1#7465::Float64
  ##a2#7466::Float64
  ##exp_a#7467::Float64
  ##powval#7468::Float64
  ##logval#7469::Float64
  ##new_bs#7470::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7406#7471::Float64
  ####exp_a#7407#7472::Float64
  ####deriv#7408#7473::Float64
  ######G#7401#7409#7474::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7402#7410#7475::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7403#7411#7476::Tuple{}
  ############x#6997#6999#7003#7404#7412#7477::Float64
  ##########_var0#7000#7004#7405#7413#7478::Tuple{}
  ######a#7095#7414#7479::Tuple{}
  ######b#7096#7415#7480::Tuple{}
  ######afactor#7097#7416#7481::Float64
  ######bfactor#7098#7417#7482::Float64
  ####_var0#7418#7483::Tuple{}
  ######types#7104#7419#7484::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7203#7207#7485::Tuple{}
  ########x#6997#7204#7208#7486::Float64
  ######_var0#7205#7209#7487::Tuple{}
  ########types#7093#7206#7210#7488::Tuple{Type{Float64}}
  ##a1#7489::Float64
  ##a2#7490::Float64
  ##div_a#7491::Float64
  ####afactor#7105#7492::Float64
  ####bfactor#7106#7493::Float64
  ########a#7095#7099#7107#7494::Tuple{}
  ########b#7096#7100#7108#7495::Tuple{}
  ########afactor#7097#7101#7109#7496::Float64
  ########bfactor#7098#7102#7110#7497::Float64
  ######_var0#7103#7111#7498::Tuple{}
  ######types#7104#7112#7499::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7393#7460 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7393#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7399#7463 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7399#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7457 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7205#7209#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7465"))
      NewvarNode(symbol("##a2#7466"))
      NewvarNode(symbol("##exp_a#7467"))
      NewvarNode(symbol("##powval#7468"))
      NewvarNode(symbol("##logval#7469"))
      NewvarNode(symbol("##new_bs#7470"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 23
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7406#7471 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7407#7472 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(16),0)::Float64
      ####deriv#7408#7473 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(16))))::Float64))
      ######G#7401#7409#7474 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7405#7413#7478 = (top(tuple))()::Tuple{}
      goto 22
      ##########_var0#7000#7004#7405#7413#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7407#7472::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      23: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7465 = GenSym(10)
      ##a2#7466 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,##a2#7466::Float64,0)::Float64
      ##exp_a#7467 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,##a2#7466::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7466::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,GenSym(23),0)::Float64
      ##powval#7468 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7466::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0)::Float64
      ##logval#7469 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7467::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7465::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7418#7483 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7418#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##new_bs#7470 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      25: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7487 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7205#7209#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      ##a#7449 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7449::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      ####G#7420#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7454 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7000#7004#7424#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7449::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7489 = GenSym(31)
      ##a2#7490 = GenSym(32)
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7489::Float64,##a2#7490::Float64))
      ####afactor#7105#7492 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7490::Float64))
      ####bfactor#7106#7493 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7489::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7490::Float64,##a2#7490::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7498 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7103#7111#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7205#7209#7427#7436 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7205#7209#7427#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7399#7431#7440 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7399#7431#7440 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##sqrt_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7442::Float64))
      ####G#7198#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7448 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7202#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7433::Tuple{}
  ##########tup#6996#7203#7207#7425#7434::Tuple{}
  ##########x#6997#7204#7208#7426#7435::Float64
  ########_var0#7205#7209#7427#7436::Tuple{}
  ##########types#7093#7206#7210#7428#7437::Tuple{Type{Float64}}
  ########tup#7394#7397#7429#7438::Tuple{}
  ########x#7395#7398#7430#7439::Int64
  ######_var0#7399#7431#7440::Tuple{}
  ########types#7396#7400#7432#7441::Tuple{Type{Int64}}
  ##sqrt_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7198#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7446::Tuple{}
  ##########x#6997#6999#7003#7201#7447::Float64
  ########_var0#7000#7004#7202#7448::Tuple{}
  ##a#7449::Float64
  ####G#7420#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7452::Tuple{}
  ##########x#6997#6999#7003#7423#7453::Float64
  ########_var0#7000#7004#7424#7454::Tuple{}
  ########tup#6996#7203#7207#7455::Tuple{}
  ########x#6997#7204#7208#7456::Float64
  ######_var0#7205#7209#7457::Tuple{}
  ########types#7093#7206#7210#7458::Tuple{Type{Float64}}
  ######tup#7391#7392#7459::Tuple{}
  ####_var0#7393#7460::Tuple{}
  ######tup#7394#7397#7461::Tuple{}
  ######x#7395#7398#7462::Int64
  ####_var0#7399#7463::Tuple{}
  ######types#7396#7400#7464::Tuple{Type{Int64}}
  ##a1#7465::Float64
  ##a2#7466::Float64
  ##exp_a#7467::Float64
  ##powval#7468::Float64
  ##logval#7469::Float64
  ##new_bs#7470::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7406#7471::Float64
  ####exp_a#7407#7472::Float64
  ####deriv#7408#7473::Float64
  ######G#7401#7409#7474::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7402#7410#7475::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7403#7411#7476::Tuple{}
  ############x#6997#6999#7003#7404#7412#7477::Float64
  ##########_var0#7000#7004#7405#7413#7478::Tuple{}
  ######a#7095#7414#7479::Tuple{}
  ######b#7096#7415#7480::Tuple{}
  ######afactor#7097#7416#7481::Float64
  ######bfactor#7098#7417#7482::Float64
  ####_var0#7418#7483::Tuple{}
  ######types#7104#7419#7484::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7203#7207#7485::Tuple{}
  ########x#6997#7204#7208#7486::Float64
  ######_var0#7205#7209#7487::Tuple{}
  ########types#7093#7206#7210#7488::Tuple{Type{Float64}}
  ##a1#7489::Float64
  ##a2#7490::Float64
  ##div_a#7491::Float64
  ####afactor#7105#7492::Float64
  ####bfactor#7106#7493::Float64
  ########a#7095#7099#7107#7494::Tuple{}
  ########b#7096#7100#7108#7495::Tuple{}
  ########afactor#7097#7101#7109#7496::Float64
  ########bfactor#7098#7102#7110#7497::Float64
  ######_var0#7103#7111#7498::Tuple{}
  ######types#7104#7112#7499::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7393#7460 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7393#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7399#7463 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7399#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7457 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7205#7209#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7465"))
      NewvarNode(symbol("##a2#7466"))
      NewvarNode(symbol("##exp_a#7467"))
      NewvarNode(symbol("##powval#7468"))
      NewvarNode(symbol("##logval#7469"))
      NewvarNode(symbol("##new_bs#7470"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 23
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7406#7471 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7407#7472 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(16),0)::Float64
      ####deriv#7408#7473 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(16))))::Float64))
      ######G#7401#7409#7474 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7405#7413#7478 = (top(tuple))()::Tuple{}
      goto 22
      ##########_var0#7000#7004#7405#7413#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7407#7472::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      23: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7465 = GenSym(10)
      ##a2#7466 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,##a2#7466::Float64,0)::Float64
      ##exp_a#7467 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,##a2#7466::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7466::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,GenSym(23),0)::Float64
      ##powval#7468 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7466::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0)::Float64
      ##logval#7469 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7467::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7465::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7418#7483 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7418#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##new_bs#7470 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      25: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7487 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7205#7209#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      ##a#7449 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7449::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      ####G#7420#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7454 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7000#7004#7424#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7449::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7489 = GenSym(31)
      ##a2#7490 = GenSym(32)
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7489::Float64,##a2#7490::Float64))
      ####afactor#7105#7492 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7490::Float64))
      ####bfactor#7106#7493 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7489::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7490::Float64,##a2#7490::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7498 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7103#7111#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7205#7209#7427#7436 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7205#7209#7427#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7399#7431#7440 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7399#7431#7440 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##sqrt_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7442::Float64))
      ####G#7198#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7448 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7202#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7433::Tuple{}
  ##########tup#6996#7203#7207#7425#7434::Tuple{}
  ##########x#6997#7204#7208#7426#7435::Float64
  ########_var0#7205#7209#7427#7436::Tuple{}
  ##########types#7093#7206#7210#7428#7437::Tuple{Type{Float64}}
  ########tup#7394#7397#7429#7438::Tuple{}
  ########x#7395#7398#7430#7439::Int64
  ######_var0#7399#7431#7440::Tuple{}
  ########types#7396#7400#7432#7441::Tuple{Type{Int64}}
  ##sqrt_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7198#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7446::Tuple{}
  ##########x#6997#6999#7003#7201#7447::Float64
  ########_var0#7000#7004#7202#7448::Tuple{}
  ##a#7449::Float64
  ####G#7420#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7452::Tuple{}
  ##########x#6997#6999#7003#7423#7453::Float64
  ########_var0#7000#7004#7424#7454::Tuple{}
  ########tup#6996#7203#7207#7455::Tuple{}
  ########x#6997#7204#7208#7456::Float64
  ######_var0#7205#7209#7457::Tuple{}
  ########types#7093#7206#7210#7458::Tuple{Type{Float64}}
  ######tup#7391#7392#7459::Tuple{}
  ####_var0#7393#7460::Tuple{}
  ######tup#7394#7397#7461::Tuple{}
  ######x#7395#7398#7462::Int64
  ####_var0#7399#7463::Tuple{}
  ######types#7396#7400#7464::Tuple{Type{Int64}}
  ##a1#7465::Float64
  ##a2#7466::Float64
  ##exp_a#7467::Float64
  ##powval#7468::Float64
  ##logval#7469::Float64
  ##new_bs#7470::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7406#7471::Float64
  ####exp_a#7407#7472::Float64
  ####deriv#7408#7473::Float64
  ######G#7401#7409#7474::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7402#7410#7475::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7403#7411#7476::Tuple{}
  ############x#6997#6999#7003#7404#7412#7477::Float64
  ##########_var0#7000#7004#7405#7413#7478::Tuple{}
  ######a#7095#7414#7479::Tuple{}
  ######b#7096#7415#7480::Tuple{}
  ######afactor#7097#7416#7481::Float64
  ######bfactor#7098#7417#7482::Float64
  ####_var0#7418#7483::Tuple{}
  ######types#7104#7419#7484::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7203#7207#7485::Tuple{}
  ########x#6997#7204#7208#7486::Float64
  ######_var0#7205#7209#7487::Tuple{}
  ########types#7093#7206#7210#7488::Tuple{Type{Float64}}
  ##a1#7489::Float64
  ##a2#7490::Float64
  ##div_a#7491::Float64
  ####afactor#7105#7492::Float64
  ####bfactor#7106#7493::Float64
  ########a#7095#7099#7107#7494::Tuple{}
  ########b#7096#7100#7108#7495::Tuple{}
  ########afactor#7097#7101#7109#7496::Float64
  ########bfactor#7098#7102#7110#7497::Float64
  ######_var0#7103#7111#7498::Tuple{}
  ######types#7104#7112#7499::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7393#7460 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7393#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7399#7463 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7399#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7457 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7205#7209#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7465"))
      NewvarNode(symbol("##a2#7466"))
      NewvarNode(symbol("##exp_a#7467"))
      NewvarNode(symbol("##powval#7468"))
      NewvarNode(symbol("##logval#7469"))
      NewvarNode(symbol("##new_bs#7470"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 23
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7406#7471 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7407#7472 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(16),0)::Float64
      ####deriv#7408#7473 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(16))))::Float64))
      ######G#7401#7409#7474 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7405#7413#7478 = (top(tuple))()::Tuple{}
      goto 22
      ##########_var0#7000#7004#7405#7413#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7407#7472::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      23: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7465 = GenSym(10)
      ##a2#7466 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,##a2#7466::Float64,0)::Float64
      ##exp_a#7467 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,##a2#7466::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7466::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,GenSym(23),0)::Float64
      ##powval#7468 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7466::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0)::Float64
      ##logval#7469 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7467::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7465::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7418#7483 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7418#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##new_bs#7470 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      25: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7487 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7205#7209#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      ##a#7449 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7449::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      ####G#7420#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7454 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7000#7004#7424#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7449::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7489 = GenSym(31)
      ##a2#7490 = GenSym(32)
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7489::Float64,##a2#7490::Float64))
      ####afactor#7105#7492 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7490::Float64))
      ####bfactor#7106#7493 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7489::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7490::Float64,##a2#7490::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7498 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7103#7111#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7205#7209#7427#7436 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7205#7209#7427#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7399#7431#7440 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7399#7431#7440 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##sqrt_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7442::Float64))
      ####G#7198#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7448 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7202#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7433::Tuple{}
  ##########tup#6996#7203#7207#7425#7434::Tuple{}
  ##########x#6997#7204#7208#7426#7435::Float64
  ########_var0#7205#7209#7427#7436::Tuple{}
  ##########types#7093#7206#7210#7428#7437::Tuple{Type{Float64}}
  ########tup#7394#7397#7429#7438::Tuple{}
  ########x#7395#7398#7430#7439::Int64
  ######_var0#7399#7431#7440::Tuple{}
  ########types#7396#7400#7432#7441::Tuple{Type{Int64}}
  ##sqrt_a#7442::Float64
  ##deriv#7443::Float64
  ####G#7198#7444::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7199#7445::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7200#7446::Tuple{}
  ##########x#6997#6999#7003#7201#7447::Float64
  ########_var0#7000#7004#7202#7448::Tuple{}
  ##a#7449::Float64
  ####G#7420#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7452::Tuple{}
  ##########x#6997#6999#7003#7423#7453::Float64
  ########_var0#7000#7004#7424#7454::Tuple{}
  ########tup#6996#7203#7207#7455::Tuple{}
  ########x#6997#7204#7208#7456::Float64
  ######_var0#7205#7209#7457::Tuple{}
  ########types#7093#7206#7210#7458::Tuple{Type{Float64}}
  ######tup#7391#7392#7459::Tuple{}
  ####_var0#7393#7460::Tuple{}
  ######tup#7394#7397#7461::Tuple{}
  ######x#7395#7398#7462::Int64
  ####_var0#7399#7463::Tuple{}
  ######types#7396#7400#7464::Tuple{Type{Int64}}
  ##a1#7465::Float64
  ##a2#7466::Float64
  ##exp_a#7467::Float64
  ##powval#7468::Float64
  ##logval#7469::Float64
  ##new_bs#7470::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7406#7471::Float64
  ####exp_a#7407#7472::Float64
  ####deriv#7408#7473::Float64
  ######G#7401#7409#7474::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7402#7410#7475::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7403#7411#7476::Tuple{}
  ############x#6997#6999#7003#7404#7412#7477::Float64
  ##########_var0#7000#7004#7405#7413#7478::Tuple{}
  ######a#7095#7414#7479::Tuple{}
  ######b#7096#7415#7480::Tuple{}
  ######afactor#7097#7416#7481::Float64
  ######bfactor#7098#7417#7482::Float64
  ####_var0#7418#7483::Tuple{}
  ######types#7104#7419#7484::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7203#7207#7485::Tuple{}
  ########x#6997#7204#7208#7486::Float64
  ######_var0#7205#7209#7487::Tuple{}
  ########types#7093#7206#7210#7488::Tuple{Type{Float64}}
  ##a1#7489::Float64
  ##a2#7490::Float64
  ##div_a#7491::Float64
  ####afactor#7105#7492::Float64
  ####bfactor#7106#7493::Float64
  ########a#7095#7099#7107#7494::Tuple{}
  ########b#7096#7100#7108#7495::Tuple{}
  ########afactor#7097#7101#7109#7496::Float64
  ########bfactor#7098#7102#7110#7497::Float64
  ######_var0#7103#7111#7498::Tuple{}
  ######types#7104#7112#7499::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 106:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7393#7460 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7393#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7399#7463 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7399#7463 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7457 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7205#7209#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7465"))
      NewvarNode(symbol("##a2#7466"))
      NewvarNode(symbol("##exp_a#7467"))
      NewvarNode(symbol("##powval#7468"))
      NewvarNode(symbol("##logval#7469"))
      NewvarNode(symbol("##new_bs#7470"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 23
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7406#7471 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7407#7472 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7406#7471::Float64,0,GenSym(16),0)::Float64
      ####deriv#7408#7473 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7406#7471::Float64,GenSym(16))))::Float64))
      ######G#7401#7409#7474 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7405#7413#7478 = (top(tuple))()::Tuple{}
      goto 22
      ##########_var0#7000#7004#7405#7413#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7407#7472::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 25
      23: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7465 = GenSym(10)
      ##a2#7466 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,##a2#7466::Float64,0)::Float64
      ##exp_a#7467 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,##a2#7466::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7466::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0,GenSym(23),0)::Float64
      ##powval#7468 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7466::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7465::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7465::Float64,0)::Float64
      ##logval#7469 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7467::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7465::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7418#7483 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7418#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##new_bs#7470 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      25: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7487 = (top(tuple))()::Tuple{}
      goto 26
      ######_var0#7205#7209#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      ##a#7449 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7449::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7449::Float64,0)::Float64
      ####G#7420#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7454 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7000#7004#7424#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7449::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7489 = GenSym(31)
      ##a2#7490 = GenSym(32)
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7489::Float64,##a2#7490::Float64))
      ####afactor#7105#7492 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7490::Float64))
      ####bfactor#7106#7493 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7489::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7490::Float64,##a2#7490::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7103#7111#7498 = (top(tuple))()::Tuple{}
      goto 28
      ######_var0#7103#7111#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7205#7209#7427#7436 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7205#7209#7427#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7399#7431#7440 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7399#7431#7440 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      ##sqrt_a#7442 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7443 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7442::Float64))
      ####G#7198#7444 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7202#7448 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7202#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7533::Tuple{Int64}
  ##xs#7534::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(19) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:re)::Float64))), :((top(getfield))(GenSym(4),:im)::Float64)))
      0: 
      GenSym(11) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:im)::Int64)))))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(14) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(13),:re)::Float64), :((top(getfield))(GenSym(13),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:im)::Float64)))))
      GenSym(15) = (Base.Math.nan_dom_err)(GenSym(10),a::Float64)::Float64
      GenSym(5) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(7) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:im)::Float64)))))
      GenSym(8) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:re)::Float64,GenSym(15)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:im)::Float64,GenSym(15))))))
      GenSym(17) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(8),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:re)::Float64)))))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7533::Tuple{Int64}
  ##xs#7534::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(19) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:re)::Float64))), :((top(getfield))(GenSym(4),:im)::Float64)))
      0: 
      GenSym(11) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:im)::Int64)))))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(14) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(13),:re)::Float64), :((top(getfield))(GenSym(13),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:im)::Float64)))))
      GenSym(15) = (Base.Math.nan_dom_err)(GenSym(10),a::Float64)::Float64
      GenSym(5) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(7) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:im)::Float64)))))
      GenSym(8) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:re)::Float64,GenSym(15)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:im)::Float64,GenSym(15))))))
      GenSym(17) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(8),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:re)::Float64)))))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7420#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7776::Tuple{}
  ##########x#6997#6999#7003#7423#7777::Float64
  ########_var0#7000#7004#7424#7778::Tuple{}
  ########tup#6996#7203#7207#7779::Tuple{}
  ########x#6997#7204#7208#7780::Float64
  ######_var0#7205#7209#7781::Tuple{}
  ########types#7093#7206#7210#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(10) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7205#7209#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(10),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(10),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7420#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7424#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = GenSym(11) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(12) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7533::Tuple{Int64}
  ##xs#7534::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(19) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:re)::Float64))), :((top(getfield))(GenSym(4),:im)::Float64)))
      0: 
      GenSym(11) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:im)::Int64)))))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(14) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(13),:re)::Float64), :((top(getfield))(GenSym(13),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:im)::Float64)))))
      GenSym(15) = (Base.Math.nan_dom_err)(GenSym(10),a::Float64)::Float64
      GenSym(5) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(7) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:im)::Float64)))))
      GenSym(8) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:re)::Float64,GenSym(15)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:im)::Float64,GenSym(15))))))
      GenSym(17) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(8),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:re)::Float64)))))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7533::Tuple{Int64}
  ##xs#7534::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(19) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(20) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(21) = GenSym(19)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(21)
      #s25 = GenSym(22)
      GenSym(23) = GenSym(20)
      GenSym(24) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(23)
      #s25 = GenSym(24) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(3),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(3)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(4),:re)::Float64))), :((top(getfield))(GenSym(4),:im)::Float64)))
      0: 
      GenSym(11) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(11),:im)::Int64)))))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(12),:im)::Float64)))))
      GenSym(14) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(13),:re)::Float64), :((top(getfield))(GenSym(13),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(14),:im)::Float64)))))
      GenSym(15) = (Base.Math.nan_dom_err)(GenSym(10),a::Float64)::Float64
      GenSym(5) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(7) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(5),:im)::Float64)))))
      GenSym(8) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(18) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:re)::Float64,GenSym(15)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(16),:im)::Float64,GenSym(15))))))
      GenSym(17) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(8),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:re)::Float64,(top(getfield))(GenSym(17),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(18),:im)::Float64,(top(getfield))(GenSym(17),:re)::Float64)))))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7420#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7776::Tuple{}
  ##########x#6997#6999#7003#7423#7777::Float64
  ########_var0#7000#7004#7424#7778::Tuple{}
  ########tup#6996#7203#7207#7779::Tuple{}
  ########x#6997#7204#7208#7780::Float64
  ######_var0#7205#7209#7781::Tuple{}
  ########types#7093#7206#7210#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(10) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7205#7209#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(10),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(10),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7420#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7424#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = GenSym(11) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(12) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7420#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7776::Tuple{}
  ##########x#6997#6999#7003#7423#7777::Float64
  ########_var0#7000#7004#7424#7778::Tuple{}
  ########tup#6996#7203#7207#7779::Tuple{}
  ########x#6997#7204#7208#7780::Float64
  ######_var0#7205#7209#7781::Tuple{}
  ########types#7093#7206#7210#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(10) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7205#7209#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(10),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(10),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7420#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7424#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = GenSym(11) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(12) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7420#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7776::Tuple{}
  ##########x#6997#6999#7003#7423#7777::Float64
  ########_var0#7000#7004#7424#7778::Tuple{}
  ########tup#6996#7203#7207#7779::Tuple{}
  ########x#6997#7204#7208#7780::Float64
  ######_var0#7205#7209#7781::Tuple{}
  ########types#7093#7206#7210#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(10) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7205#7209#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(10),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(10),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7420#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7424#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = GenSym(11) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(12) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7420#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7421#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7422#7776::Tuple{}
  ##########x#6997#6999#7003#7423#7777::Float64
  ########_var0#7000#7004#7424#7778::Tuple{}
  ########tup#6996#7203#7207#7779::Tuple{}
  ########x#6997#7204#7208#7780::Float64
  ######_var0#7205#7209#7781::Tuple{}
  ########types#7093#7206#7210#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 111:
      unless t::Int64 === 0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(10) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7205#7209#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7205#7209#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(10),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(10),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7420#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7424#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7424#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = GenSym(11) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = GenSym(3) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(12) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(4),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(4),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




