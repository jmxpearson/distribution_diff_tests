____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64,(top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,(top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 54:
      return (top(tuple))((top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  α::Int64
  θ::Int64
  #s25::Int64
  ####fy#7084#7085::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      ####fy#7084#7085 = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(1.0,####fy#7084#7085::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(1.0,####fy#7084#7085::Float64)::Bool,(Base.lt_float)(####fy#7084#7085::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7084#7085::Float64)),α::Int64)::Bool)))) goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,θ::Int64)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7118::Tuple{Type{Float64}}
  ##a1#7119::Float64
  ##a2#7120::Float64
  ##div_a#7121::Float64
  ####afactor#7110#7122::Float64
  ####bfactor#7111#7123::Float64
  ########a#7100#7104#7112#7124::Tuple{}
  ########b#7101#7105#7113#7125::Tuple{}
  ########afactor#7102#7106#7114#7126::Float64
  ########bfactor#7103#7107#7115#7127::Float64
  ######_var0#7108#7116#7128::Tuple{}
  ######types#7109#7117#7129::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7119 = GenSym(3)
      ##a2#7120 = GenSym(4)
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7119::Float64,##a2#7120::Float64))
      ####afactor#7110#7122 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7120::Float64))
      ####bfactor#7111#7123 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7119::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7120::Float64,##a2#7120::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7128 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7108#7116#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7118::Tuple{Type{Float64}}
  ##a1#7119::Float64
  ##a2#7120::Float64
  ##div_a#7121::Float64
  ####afactor#7110#7122::Float64
  ####bfactor#7111#7123::Float64
  ########a#7100#7104#7112#7124::Tuple{}
  ########b#7101#7105#7113#7125::Tuple{}
  ########afactor#7102#7106#7114#7126::Float64
  ########bfactor#7103#7107#7115#7127::Float64
  ######_var0#7108#7116#7128::Tuple{}
  ######types#7109#7117#7129::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7119 = GenSym(3)
      ##a2#7120 = GenSym(4)
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7119::Float64,##a2#7120::Float64))
      ####afactor#7110#7122 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7120::Float64))
      ####bfactor#7111#7123 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7119::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7120::Float64,##a2#7120::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7128 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7108#7116#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7118::Tuple{Type{Float64}}
  ##a1#7119::Float64
  ##a2#7120::Float64
  ##div_a#7121::Float64
  ####afactor#7110#7122::Float64
  ####bfactor#7111#7123::Float64
  ########a#7100#7104#7112#7124::Tuple{}
  ########b#7101#7105#7113#7125::Tuple{}
  ########afactor#7102#7106#7114#7126::Float64
  ########bfactor#7103#7107#7115#7127::Float64
  ######_var0#7108#7116#7128::Tuple{}
  ######types#7109#7117#7129::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7119 = GenSym(3)
      ##a2#7120 = GenSym(4)
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7119::Float64,##a2#7120::Float64))
      ####afactor#7110#7122 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7120::Float64))
      ####bfactor#7111#7123 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7119::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7120::Float64,##a2#7120::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7128 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7108#7116#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7118::Tuple{Type{Float64}}
  ##a1#7119::Float64
  ##a2#7120::Float64
  ##div_a#7121::Float64
  ####afactor#7110#7122::Float64
  ####bfactor#7111#7123::Float64
  ########a#7100#7104#7112#7124::Tuple{}
  ########b#7101#7105#7113#7125::Tuple{}
  ########afactor#7102#7106#7114#7126::Float64
  ########bfactor#7103#7107#7115#7127::Float64
  ######_var0#7108#7116#7128::Tuple{}
  ######types#7109#7117#7129::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7119 = GenSym(3)
      ##a2#7120 = GenSym(4)
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7119::Float64,##a2#7120::Float64))
      ####afactor#7110#7122 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7120::Float64))
      ####bfactor#7111#7123 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7119::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7120::Float64,##a2#7120::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7128 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7108#7116#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7118::Tuple{Type{Float64}}
  ##a1#7119::Float64
  ##a2#7120::Float64
  ##div_a#7121::Float64
  ####afactor#7110#7122::Float64
  ####bfactor#7111#7123::Float64
  ########a#7100#7104#7112#7124::Tuple{}
  ########b#7101#7105#7113#7125::Tuple{}
  ########afactor#7102#7106#7114#7126::Float64
  ########bfactor#7103#7107#7115#7127::Float64
  ######_var0#7108#7116#7128::Tuple{}
  ######types#7109#7117#7129::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 59:
      GenSym(5) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(9)
      #s25 = GenSym(10)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7119 = GenSym(3)
      ##a2#7120 = GenSym(4)
      ##div_a#7121 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7119::Float64,##a2#7120::Float64))
      ####afactor#7110#7122 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7120::Float64))
      ####bfactor#7111#7123 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7119::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7120::Float64,##a2#7120::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7128 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7108#7116#7128 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  α::Int64
  θ::Int64
  #s25::Int64
  ####fy#7084#7136::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      ####fy#7084#7136 = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(2.0,####fy#7084#7136::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(2.0,####fy#7084#7136::Float64)::Bool,(Base.lt_float)(####fy#7084#7136::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7084#7136::Float64)),α::Int64)::Bool)))) goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(θ::Int64,θ::Int64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7147::Tuple{Type{Float64}}
  ######types#7098#7099#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ##exp_a#7150::Float64
  ##deriv#7151::Float64
  ####G#7137#7152::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7153::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7154::Tuple{}
  ##########x#6997#6999#7003#7140#7155::Float64
  ########_var0#7000#7004#7141#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ######a#7100#7142#7159::Tuple{}
  ######b#7101#7143#7160::Tuple{}
  ######afactor#7102#7144#7161::Float64
  ######bfactor#7103#7145#7162::Float64
  ####_var0#7146#7163::Tuple{}
  ##a#7164::Float64
  ##exp_a#7165::Float64
  ##deriv#7166::Float64
  ####G#7137#7167::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7168::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7169::Tuple{}
  ##########x#6997#6999#7003#7140#7170::Float64
  ########_var0#7000#7004#7141#7171::Tuple{}
  ##a1#7172::Float64
  ##a2#7173::Float64
  ##div_a#7174::Float64
  ####afactor#7110#7175::Float64
  ####bfactor#7111#7176::Float64
  ########a#7100#7104#7112#7177::Tuple{}
  ########b#7101#7105#7113#7178::Tuple{}
  ########afactor#7102#7106#7114#7179::Float64
  ########bfactor#7103#7107#7115#7180::Float64
  ######_var0#7108#7116#7181::Tuple{}
  ######types#7109#7117#7182::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7164 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7165 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7166 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7167 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7171 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7141#7171 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7165::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7150 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7151 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7152 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7156 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7141#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7157 = GenSym(4)
      ##a2#7158 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7163 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7146#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7157::Float64,##a2#7158::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7172 = GenSym(8)
      ##a2#7173 = GenSym(9)
      ##div_a#7174 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7172::Float64,##a2#7173::Float64))
      ####afactor#7110#7175 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7173::Float64))
      ####bfactor#7111#7176 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7172::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7173::Float64,##a2#7173::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7181 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7108#7116#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7174::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7147::Tuple{Type{Float64}}
  ######types#7098#7099#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ##exp_a#7150::Float64
  ##deriv#7151::Float64
  ####G#7137#7152::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7153::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7154::Tuple{}
  ##########x#6997#6999#7003#7140#7155::Float64
  ########_var0#7000#7004#7141#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ######a#7100#7142#7159::Tuple{}
  ######b#7101#7143#7160::Tuple{}
  ######afactor#7102#7144#7161::Float64
  ######bfactor#7103#7145#7162::Float64
  ####_var0#7146#7163::Tuple{}
  ##a#7164::Float64
  ##exp_a#7165::Float64
  ##deriv#7166::Float64
  ####G#7137#7167::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7168::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7169::Tuple{}
  ##########x#6997#6999#7003#7140#7170::Float64
  ########_var0#7000#7004#7141#7171::Tuple{}
  ##a1#7172::Float64
  ##a2#7173::Float64
  ##div_a#7174::Float64
  ####afactor#7110#7175::Float64
  ####bfactor#7111#7176::Float64
  ########a#7100#7104#7112#7177::Tuple{}
  ########b#7101#7105#7113#7178::Tuple{}
  ########afactor#7102#7106#7114#7179::Float64
  ########bfactor#7103#7107#7115#7180::Float64
  ######_var0#7108#7116#7181::Tuple{}
  ######types#7109#7117#7182::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7164 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7165 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7166 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7167 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7171 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7141#7171 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7165::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7150 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7151 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7152 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7156 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7141#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7157 = GenSym(4)
      ##a2#7158 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7163 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7146#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7157::Float64,##a2#7158::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7172 = GenSym(8)
      ##a2#7173 = GenSym(9)
      ##div_a#7174 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7172::Float64,##a2#7173::Float64))
      ####afactor#7110#7175 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7173::Float64))
      ####bfactor#7111#7176 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7172::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7173::Float64,##a2#7173::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7181 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7108#7116#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7174::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7147::Tuple{Type{Float64}}
  ######types#7098#7099#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ##exp_a#7150::Float64
  ##deriv#7151::Float64
  ####G#7137#7152::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7153::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7154::Tuple{}
  ##########x#6997#6999#7003#7140#7155::Float64
  ########_var0#7000#7004#7141#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ######a#7100#7142#7159::Tuple{}
  ######b#7101#7143#7160::Tuple{}
  ######afactor#7102#7144#7161::Float64
  ######bfactor#7103#7145#7162::Float64
  ####_var0#7146#7163::Tuple{}
  ##a#7164::Float64
  ##exp_a#7165::Float64
  ##deriv#7166::Float64
  ####G#7137#7167::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7168::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7169::Tuple{}
  ##########x#6997#6999#7003#7140#7170::Float64
  ########_var0#7000#7004#7141#7171::Tuple{}
  ##a1#7172::Float64
  ##a2#7173::Float64
  ##div_a#7174::Float64
  ####afactor#7110#7175::Float64
  ####bfactor#7111#7176::Float64
  ########a#7100#7104#7112#7177::Tuple{}
  ########b#7101#7105#7113#7178::Tuple{}
  ########afactor#7102#7106#7114#7179::Float64
  ########bfactor#7103#7107#7115#7180::Float64
  ######_var0#7108#7116#7181::Tuple{}
  ######types#7109#7117#7182::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7164 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7165 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7166 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7167 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7171 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7141#7171 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7165::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7150 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7151 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7152 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7156 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7141#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7157 = GenSym(4)
      ##a2#7158 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7163 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7146#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7157::Float64,##a2#7158::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7172 = GenSym(8)
      ##a2#7173 = GenSym(9)
      ##div_a#7174 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7172::Float64,##a2#7173::Float64))
      ####afactor#7110#7175 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7173::Float64))
      ####bfactor#7111#7176 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7172::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7173::Float64,##a2#7173::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7181 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7108#7116#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7174::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7147::Tuple{Type{Float64}}
  ######types#7098#7099#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ##exp_a#7150::Float64
  ##deriv#7151::Float64
  ####G#7137#7152::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7153::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7154::Tuple{}
  ##########x#6997#6999#7003#7140#7155::Float64
  ########_var0#7000#7004#7141#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ######a#7100#7142#7159::Tuple{}
  ######b#7101#7143#7160::Tuple{}
  ######afactor#7102#7144#7161::Float64
  ######bfactor#7103#7145#7162::Float64
  ####_var0#7146#7163::Tuple{}
  ##a#7164::Float64
  ##exp_a#7165::Float64
  ##deriv#7166::Float64
  ####G#7137#7167::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7168::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7169::Tuple{}
  ##########x#6997#6999#7003#7140#7170::Float64
  ########_var0#7000#7004#7141#7171::Tuple{}
  ##a1#7172::Float64
  ##a2#7173::Float64
  ##div_a#7174::Float64
  ####afactor#7110#7175::Float64
  ####bfactor#7111#7176::Float64
  ########a#7100#7104#7112#7177::Tuple{}
  ########b#7101#7105#7113#7178::Tuple{}
  ########afactor#7102#7106#7114#7179::Float64
  ########bfactor#7103#7107#7115#7180::Float64
  ######_var0#7108#7116#7181::Tuple{}
  ######types#7109#7117#7182::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7164 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7165 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7166 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7167 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7171 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7141#7171 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7165::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7150 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7151 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7152 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7156 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7141#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7157 = GenSym(4)
      ##a2#7158 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7163 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7146#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7157::Float64,##a2#7158::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7172 = GenSym(8)
      ##a2#7173 = GenSym(9)
      ##div_a#7174 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7172::Float64,##a2#7173::Float64))
      ####afactor#7110#7175 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7173::Float64))
      ####bfactor#7111#7176 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7172::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7173::Float64,##a2#7173::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7181 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7108#7116#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7174::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7098#7099#7147::Tuple{Type{Float64}}
  ######types#7098#7099#7148::Tuple{Type{Float64}}
  ##a#7149::Float64
  ##exp_a#7150::Float64
  ##deriv#7151::Float64
  ####G#7137#7152::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7153::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7154::Tuple{}
  ##########x#6997#6999#7003#7140#7155::Float64
  ########_var0#7000#7004#7141#7156::Tuple{}
  ##a1#7157::Float64
  ##a2#7158::Float64
  ######a#7100#7142#7159::Tuple{}
  ######b#7101#7143#7160::Tuple{}
  ######afactor#7102#7144#7161::Float64
  ######bfactor#7103#7145#7162::Float64
  ####_var0#7146#7163::Tuple{}
  ##a#7164::Float64
  ##exp_a#7165::Float64
  ##deriv#7166::Float64
  ####G#7137#7167::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7138#7168::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7139#7169::Tuple{}
  ##########x#6997#6999#7003#7140#7170::Float64
  ########_var0#7000#7004#7141#7171::Tuple{}
  ##a1#7172::Float64
  ##a2#7173::Float64
  ##div_a#7174::Float64
  ####afactor#7110#7175::Float64
  ####bfactor#7111#7176::Float64
  ########a#7100#7104#7112#7177::Tuple{}
  ########b#7101#7105#7113#7178::Tuple{}
  ########afactor#7102#7106#7114#7179::Float64
  ########bfactor#7103#7107#7115#7180::Float64
  ######_var0#7108#7116#7181::Tuple{}
  ######types#7109#7117#7182::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 64:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 65:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7164 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7165 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7166 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7164::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7167 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7171 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7141#7171 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7165::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7149 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7150 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7151 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7149::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7137#7152 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7141#7156 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7000#7004#7141#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7150::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7157 = GenSym(4)
      ##a2#7158 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7163 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7146#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7157::Float64,##a2#7158::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(9) = (top(getfield))(GenSym(7),:value)::Float64
      ##a1#7172 = GenSym(8)
      ##a2#7173 = GenSym(9)
      ##div_a#7174 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7172::Float64,##a2#7173::Float64))
      ####afactor#7110#7175 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7173::Float64))
      ####bfactor#7111#7176 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7172::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7173::Float64,##a2#7173::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7181 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7108#7116#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7174::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64)),1.0))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7098#7183#7184::Tuple{Type{Float64}}
  ##a1#7185::Float64
  ##a2#7186::Float64
  ##div_a#7187::Float64
  ####afactor#7110#7188::Float64
  ####bfactor#7111#7189::Float64
  ########a#7100#7104#7112#7190::Tuple{}
  ########b#7101#7105#7113#7191::Tuple{}
  ########afactor#7102#7106#7114#7192::Float64
  ########bfactor#7103#7107#7115#7193::Float64
  ######_var0#7108#7116#7194::Tuple{}
  ######types#7109#7117#7195::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7185 = GenSym(1)
      ##a2#7186 = GenSym(2)
      ##div_a#7187 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7185::Float64,##a2#7186::Float64))
      ####afactor#7110#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7186::Float64))
      ####bfactor#7111#7189 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7185::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7186::Float64,##a2#7186::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7108#7116#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      return (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7098#7183#7184::Tuple{Type{Float64}}
  ##a1#7185::Float64
  ##a2#7186::Float64
  ##div_a#7187::Float64
  ####afactor#7110#7188::Float64
  ####bfactor#7111#7189::Float64
  ########a#7100#7104#7112#7190::Tuple{}
  ########b#7101#7105#7113#7191::Tuple{}
  ########afactor#7102#7106#7114#7192::Float64
  ########bfactor#7103#7107#7115#7193::Float64
  ######_var0#7108#7116#7194::Tuple{}
  ######types#7109#7117#7195::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7185 = GenSym(1)
      ##a2#7186 = GenSym(2)
      ##div_a#7187 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7185::Float64,##a2#7186::Float64))
      ####afactor#7110#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7186::Float64))
      ####bfactor#7111#7189 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7185::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7186::Float64,##a2#7186::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7108#7116#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7098#7183#7184::Tuple{Type{Float64}}
  ##a1#7185::Float64
  ##a2#7186::Float64
  ##div_a#7187::Float64
  ####afactor#7110#7188::Float64
  ####bfactor#7111#7189::Float64
  ########a#7100#7104#7112#7190::Tuple{}
  ########b#7101#7105#7113#7191::Tuple{}
  ########afactor#7102#7106#7114#7192::Float64
  ########bfactor#7103#7107#7115#7193::Float64
  ######_var0#7108#7116#7194::Tuple{}
  ######types#7109#7117#7195::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7185 = GenSym(1)
      ##a2#7186 = GenSym(2)
      ##div_a#7187 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7185::Float64,##a2#7186::Float64))
      ####afactor#7110#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7186::Float64))
      ####bfactor#7111#7189 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7185::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7186::Float64,##a2#7186::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7108#7116#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7098#7183#7184::Tuple{Type{Float64}}
  ##a1#7185::Float64
  ##a2#7186::Float64
  ##div_a#7187::Float64
  ####afactor#7110#7188::Float64
  ####bfactor#7111#7189::Float64
  ########a#7100#7104#7112#7190::Tuple{}
  ########b#7101#7105#7113#7191::Tuple{}
  ########afactor#7102#7106#7114#7192::Float64
  ########bfactor#7103#7107#7115#7193::Float64
  ######_var0#7108#7116#7194::Tuple{}
  ######types#7109#7117#7195::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7185 = GenSym(1)
      ##a2#7186 = GenSym(2)
      ##div_a#7187 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7185::Float64,##a2#7186::Float64))
      ####afactor#7110#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7186::Float64))
      ####bfactor#7111#7189 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7185::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7186::Float64,##a2#7186::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7108#7116#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######types#7098#7183#7184::Tuple{Type{Float64}}
  ##a1#7185::Float64
  ##a2#7186::Float64
  ##div_a#7187::Float64
  ####afactor#7110#7188::Float64
  ####bfactor#7111#7189::Float64
  ########a#7100#7104#7112#7190::Tuple{}
  ########b#7101#7105#7113#7191::Tuple{}
  ########afactor#7102#7106#7114#7192::Float64
  ########bfactor#7103#7107#7115#7193::Float64
  ######_var0#7108#7116#7194::Tuple{}
  ######types#7109#7117#7195::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 61:
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(0),:value)::Float64,1.0))), :((top(getfield))(GenSym(0),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7185 = GenSym(1)
      ##a2#7186 = GenSym(2)
      ##div_a#7187 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7185::Float64,##a2#7186::Float64))
      ####afactor#7110#7188 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7186::Float64))
      ####bfactor#7111#7189 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7185::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7186::Float64,##a2#7186::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7194 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7108#7116#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64)),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64)),1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64,(Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64,1.0)))))::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (Distributions.cquantile)((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(0)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(37) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(38) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      GenSym(39) = (top(ccall))((top(tuple))("qgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint,StatsFuns.Rmath.Cint)::SimpleVector,0.5,0,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0,GenSym(37),0,GenSym(38),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(39)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 73:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = (Distributions.gammainvccdf)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},0.5)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  α::Int64
  ####fy#7084#7200::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      ####fy#7084#7200 = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(3.0,####fy#7084#7200::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(3.0,####fy#7084#7200::Float64)::Bool,(Base.lt_float)(####fy#7084#7200::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7084#7200::Float64)),α::Int64)::Bool)))) goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7214::Tuple{Type{Float64}}
  ######types#7098#7099#7215::Tuple{Type{Float64}}
  ##sqrt_a#7216::Float64
  ##deriv#7217::Float64
  ####G#7201#7218::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7219::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7220::Tuple{}
  ##########x#6997#6999#7003#7204#7221::Float64
  ########_var0#7000#7004#7205#7222::Tuple{}
  ########tup#6996#7206#7210#7223::Tuple{}
  ########x#6997#7207#7211#7224::Float64
  ######_var0#7208#7212#7225::Tuple{}
  ########types#7098#7209#7213#7226::Tuple{Type{Float64}}
  ##a1#7227::Float64
  ##a2#7228::Float64
  ##div_a#7229::Float64
  ####afactor#7110#7230::Float64
  ####bfactor#7111#7231::Float64
  ########a#7100#7104#7112#7232::Tuple{}
  ########b#7101#7105#7113#7233::Tuple{}
  ########afactor#7102#7106#7114#7234::Float64
  ########bfactor#7103#7107#7115#7235::Float64
  ######_var0#7108#7116#7236::Tuple{}
  ######types#7109#7117#7237::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7216 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7217 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7216::Float64))
      ####G#7201#7218 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7222 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7205#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7216::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7225 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7227 = GenSym(1)
      ##a2#7228 = GenSym(2)
      ##div_a#7229 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7227::Float64,##a2#7228::Float64))
      ####afactor#7110#7230 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7228::Float64))
      ####bfactor#7111#7231 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7227::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7228::Float64,##a2#7228::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7236 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7108#7116#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7214::Tuple{Type{Float64}}
  ######types#7098#7099#7215::Tuple{Type{Float64}}
  ##sqrt_a#7216::Float64
  ##deriv#7217::Float64
  ####G#7201#7218::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7219::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7220::Tuple{}
  ##########x#6997#6999#7003#7204#7221::Float64
  ########_var0#7000#7004#7205#7222::Tuple{}
  ########tup#6996#7206#7210#7223::Tuple{}
  ########x#6997#7207#7211#7224::Float64
  ######_var0#7208#7212#7225::Tuple{}
  ########types#7098#7209#7213#7226::Tuple{Type{Float64}}
  ##a1#7227::Float64
  ##a2#7228::Float64
  ##div_a#7229::Float64
  ####afactor#7110#7230::Float64
  ####bfactor#7111#7231::Float64
  ########a#7100#7104#7112#7232::Tuple{}
  ########b#7101#7105#7113#7233::Tuple{}
  ########afactor#7102#7106#7114#7234::Float64
  ########bfactor#7103#7107#7115#7235::Float64
  ######_var0#7108#7116#7236::Tuple{}
  ######types#7109#7117#7237::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7216 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7217 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7216::Float64))
      ####G#7201#7218 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7222 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7205#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7216::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7225 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7227 = GenSym(1)
      ##a2#7228 = GenSym(2)
      ##div_a#7229 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7227::Float64,##a2#7228::Float64))
      ####afactor#7110#7230 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7228::Float64))
      ####bfactor#7111#7231 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7227::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7228::Float64,##a2#7228::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7236 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7108#7116#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7214::Tuple{Type{Float64}}
  ######types#7098#7099#7215::Tuple{Type{Float64}}
  ##sqrt_a#7216::Float64
  ##deriv#7217::Float64
  ####G#7201#7218::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7219::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7220::Tuple{}
  ##########x#6997#6999#7003#7204#7221::Float64
  ########_var0#7000#7004#7205#7222::Tuple{}
  ########tup#6996#7206#7210#7223::Tuple{}
  ########x#6997#7207#7211#7224::Float64
  ######_var0#7208#7212#7225::Tuple{}
  ########types#7098#7209#7213#7226::Tuple{Type{Float64}}
  ##a1#7227::Float64
  ##a2#7228::Float64
  ##div_a#7229::Float64
  ####afactor#7110#7230::Float64
  ####bfactor#7111#7231::Float64
  ########a#7100#7104#7112#7232::Tuple{}
  ########b#7101#7105#7113#7233::Tuple{}
  ########afactor#7102#7106#7114#7234::Float64
  ########bfactor#7103#7107#7115#7235::Float64
  ######_var0#7108#7116#7236::Tuple{}
  ######types#7109#7117#7237::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7216 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7217 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7216::Float64))
      ####G#7201#7218 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7222 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7205#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7216::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7225 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7227 = GenSym(1)
      ##a2#7228 = GenSym(2)
      ##div_a#7229 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7227::Float64,##a2#7228::Float64))
      ####afactor#7110#7230 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7228::Float64))
      ####bfactor#7111#7231 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7227::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7228::Float64,##a2#7228::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7236 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7108#7116#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7214::Tuple{Type{Float64}}
  ######types#7098#7099#7215::Tuple{Type{Float64}}
  ##sqrt_a#7216::Float64
  ##deriv#7217::Float64
  ####G#7201#7218::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7219::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7220::Tuple{}
  ##########x#6997#6999#7003#7204#7221::Float64
  ########_var0#7000#7004#7205#7222::Tuple{}
  ########tup#6996#7206#7210#7223::Tuple{}
  ########x#6997#7207#7211#7224::Float64
  ######_var0#7208#7212#7225::Tuple{}
  ########types#7098#7209#7213#7226::Tuple{Type{Float64}}
  ##a1#7227::Float64
  ##a2#7228::Float64
  ##div_a#7229::Float64
  ####afactor#7110#7230::Float64
  ####bfactor#7111#7231::Float64
  ########a#7100#7104#7112#7232::Tuple{}
  ########b#7101#7105#7113#7233::Tuple{}
  ########afactor#7102#7106#7114#7234::Float64
  ########bfactor#7103#7107#7115#7235::Float64
  ######_var0#7108#7116#7236::Tuple{}
  ######types#7109#7117#7237::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7216 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7217 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7216::Float64))
      ####G#7201#7218 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7222 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7205#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7216::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7225 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7227 = GenSym(1)
      ##a2#7228 = GenSym(2)
      ##div_a#7229 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7227::Float64,##a2#7228::Float64))
      ####afactor#7110#7230 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7228::Float64))
      ####bfactor#7111#7231 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7227::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7228::Float64,##a2#7228::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7236 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7108#7116#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7214::Tuple{Type{Float64}}
  ######types#7098#7099#7215::Tuple{Type{Float64}}
  ##sqrt_a#7216::Float64
  ##deriv#7217::Float64
  ####G#7201#7218::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7219::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7220::Tuple{}
  ##########x#6997#6999#7003#7204#7221::Float64
  ########_var0#7000#7004#7205#7222::Tuple{}
  ########tup#6996#7206#7210#7223::Tuple{}
  ########x#6997#7207#7211#7224::Float64
  ######_var0#7208#7212#7225::Tuple{}
  ########types#7098#7209#7213#7226::Tuple{Type{Float64}}
  ##a1#7227::Float64
  ##a2#7228::Float64
  ##div_a#7229::Float64
  ####afactor#7110#7230::Float64
  ####bfactor#7111#7231::Float64
  ########a#7100#7104#7112#7232::Tuple{}
  ########b#7101#7105#7113#7233::Tuple{}
  ########afactor#7102#7106#7114#7234::Float64
  ########bfactor#7103#7107#7115#7235::Float64
  ######_var0#7108#7116#7236::Tuple{}
  ######types#7109#7117#7237::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 69:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 70:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##sqrt_a#7216 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7217 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7216::Float64))
      ####G#7201#7218 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7222 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7000#7004#7205#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7216::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7225 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7227 = GenSym(1)
      ##a2#7228 = GenSym(2)
      ##div_a#7229 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7227::Float64,##a2#7228::Float64))
      ####afactor#7110#7230 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7228::Float64))
      ####bfactor#7111#7231 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7227::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7228::Float64,##a2#7228::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7236 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7108#7116#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7229::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  α::Int64
  ####fy#7084#7238::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      ####fy#7084#7238 = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(4.0,####fy#7084#7238::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(4.0,####fy#7084#7238::Float64)::Bool,(Base.lt_float)(####fy#7084#7238::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7084#7238::Float64)),α::Int64)::Bool)))) goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,(Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),3.0)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7239::Tuple{Type{Float64}}
  ######types#7098#7099#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7100#7142#7243::Tuple{}
  ######b#7101#7143#7244::Tuple{}
  ######afactor#7102#7144#7245::Float64
  ######bfactor#7103#7145#7246::Float64
  ####_var0#7146#7247::Tuple{}
  ########tup#6996#7206#7210#7248::Tuple{}
  ########x#6997#7207#7211#7249::Float64
  ######_var0#7208#7212#7250::Tuple{}
  ########types#7098#7209#7213#7251::Tuple{Type{Float64}}
  ######types#7098#7099#7252::Tuple{Type{Float64}}
  ##a1#7253::Float64
  ##a2#7254::Float64
  ##div_a#7255::Float64
  ####afactor#7110#7256::Float64
  ####bfactor#7111#7257::Float64
  ########a#7100#7104#7112#7258::Tuple{}
  ########b#7101#7105#7113#7259::Tuple{}
  ########afactor#7102#7106#7114#7260::Float64
  ########bfactor#7103#7107#7115#7261::Float64
  ######_var0#7108#7116#7262::Tuple{}
  ######types#7109#7117#7263::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7250 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7241 = GenSym(0)
      ##a2#7242 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7247 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7146#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7253 = GenSym(4)
      ##a2#7254 = GenSym(5)
      ##div_a#7255 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7253::Float64,##a2#7254::Float64))
      ####afactor#7110#7256 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7254::Float64))
      ####bfactor#7111#7257 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7253::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7254::Float64,##a2#7254::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7262 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7108#7116#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(30.0,α::Float64)),66.0)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7239::Tuple{Type{Float64}}
  ######types#7098#7099#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7100#7142#7243::Tuple{}
  ######b#7101#7143#7244::Tuple{}
  ######afactor#7102#7144#7245::Float64
  ######bfactor#7103#7145#7246::Float64
  ####_var0#7146#7247::Tuple{}
  ########tup#6996#7206#7210#7248::Tuple{}
  ########x#6997#7207#7211#7249::Float64
  ######_var0#7208#7212#7250::Tuple{}
  ########types#7098#7209#7213#7251::Tuple{Type{Float64}}
  ######types#7098#7099#7252::Tuple{Type{Float64}}
  ##a1#7253::Float64
  ##a2#7254::Float64
  ##div_a#7255::Float64
  ####afactor#7110#7256::Float64
  ####bfactor#7111#7257::Float64
  ########a#7100#7104#7112#7258::Tuple{}
  ########b#7101#7105#7113#7259::Tuple{}
  ########afactor#7102#7106#7114#7260::Float64
  ########bfactor#7103#7107#7115#7261::Float64
  ######_var0#7108#7116#7262::Tuple{}
  ######types#7109#7117#7263::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7250 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7241 = GenSym(0)
      ##a2#7242 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7247 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7146#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7253 = GenSym(4)
      ##a2#7254 = GenSym(5)
      ##div_a#7255 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7253::Float64,##a2#7254::Float64))
      ####afactor#7110#7256 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7254::Float64))
      ####bfactor#7111#7257 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7253::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7254::Float64,##a2#7254::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7262 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7108#7116#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7239::Tuple{Type{Float64}}
  ######types#7098#7099#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7100#7142#7243::Tuple{}
  ######b#7101#7143#7244::Tuple{}
  ######afactor#7102#7144#7245::Float64
  ######bfactor#7103#7145#7246::Float64
  ####_var0#7146#7247::Tuple{}
  ########tup#6996#7206#7210#7248::Tuple{}
  ########x#6997#7207#7211#7249::Float64
  ######_var0#7208#7212#7250::Tuple{}
  ########types#7098#7209#7213#7251::Tuple{Type{Float64}}
  ######types#7098#7099#7252::Tuple{Type{Float64}}
  ##a1#7253::Float64
  ##a2#7254::Float64
  ##div_a#7255::Float64
  ####afactor#7110#7256::Float64
  ####bfactor#7111#7257::Float64
  ########a#7100#7104#7112#7258::Tuple{}
  ########b#7101#7105#7113#7259::Tuple{}
  ########afactor#7102#7106#7114#7260::Float64
  ########bfactor#7103#7107#7115#7261::Float64
  ######_var0#7108#7116#7262::Tuple{}
  ######types#7109#7117#7263::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7250 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7241 = GenSym(0)
      ##a2#7242 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7247 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7146#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7253 = GenSym(4)
      ##a2#7254 = GenSym(5)
      ##div_a#7255 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7253::Float64,##a2#7254::Float64))
      ####afactor#7110#7256 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7254::Float64))
      ####bfactor#7111#7257 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7253::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7254::Float64,##a2#7254::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7262 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7108#7116#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7239::Tuple{Type{Float64}}
  ######types#7098#7099#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7100#7142#7243::Tuple{}
  ######b#7101#7143#7244::Tuple{}
  ######afactor#7102#7144#7245::Float64
  ######bfactor#7103#7145#7246::Float64
  ####_var0#7146#7247::Tuple{}
  ########tup#6996#7206#7210#7248::Tuple{}
  ########x#6997#7207#7211#7249::Float64
  ######_var0#7208#7212#7250::Tuple{}
  ########types#7098#7209#7213#7251::Tuple{Type{Float64}}
  ######types#7098#7099#7252::Tuple{Type{Float64}}
  ##a1#7253::Float64
  ##a2#7254::Float64
  ##div_a#7255::Float64
  ####afactor#7110#7256::Float64
  ####bfactor#7111#7257::Float64
  ########a#7100#7104#7112#7258::Tuple{}
  ########b#7101#7105#7113#7259::Tuple{}
  ########afactor#7102#7106#7114#7260::Float64
  ########bfactor#7103#7107#7115#7261::Float64
  ######_var0#7108#7116#7262::Tuple{}
  ######types#7109#7117#7263::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7250 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7241 = GenSym(0)
      ##a2#7242 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7247 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7146#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7253 = GenSym(4)
      ##a2#7254 = GenSym(5)
      ##div_a#7255 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7253::Float64,##a2#7254::Float64))
      ####afactor#7110#7256 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7254::Float64))
      ####bfactor#7111#7257 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7253::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7254::Float64,##a2#7254::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7262 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7108#7116#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7098#7099#7239::Tuple{Type{Float64}}
  ######types#7098#7099#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7100#7142#7243::Tuple{}
  ######b#7101#7143#7244::Tuple{}
  ######afactor#7102#7144#7245::Float64
  ######bfactor#7103#7145#7246::Float64
  ####_var0#7146#7247::Tuple{}
  ########tup#6996#7206#7210#7248::Tuple{}
  ########x#6997#7207#7211#7249::Float64
  ######_var0#7208#7212#7250::Tuple{}
  ########types#7098#7209#7213#7251::Tuple{Type{Float64}}
  ######types#7098#7099#7252::Tuple{Type{Float64}}
  ##a1#7253::Float64
  ##a2#7254::Float64
  ##div_a#7255::Float64
  ####afactor#7110#7256::Float64
  ####bfactor#7111#7257::Float64
  ########a#7100#7104#7112#7258::Tuple{}
  ########b#7101#7105#7113#7259::Tuple{}
  ########afactor#7102#7106#7114#7260::Float64
  ########bfactor#7103#7107#7115#7261::Float64
  ######_var0#7108#7116#7262::Tuple{}
  ######types#7109#7117#7263::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 74:
      α = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 75:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7250 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7208#7212#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,30.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7241 = GenSym(0)
      ##a2#7242 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7247 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7146#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(2),:value)::Float64,66.0))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7253 = GenSym(4)
      ##a2#7254 = GenSym(5)
      ##div_a#7255 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7253::Float64,##a2#7254::Float64))
      ####afactor#7110#7256 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7254::Float64))
      ####bfactor#7111#7257 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7253::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7254::Float64,##a2#7254::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7262 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7108#7116#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  α::Int64
  θ::Int64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(7) = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      GenSym(6) = (Base.Math.digamma)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,θ::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)),(Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,α::Int64)))),GenSym(6))))),(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7295::Float64
  ####G#7290#7296::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7291#7297::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7292#7298::Tuple{}
  ##########x#6997#6999#7003#7293#7299::Float64
  ########_var0#7000#7004#7294#7300::Tuple{}
  ##a#7301::Float64
  ####G#7280#7302::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7281#7303::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7282#7304::Tuple{}
  ##########x#6997#6999#7003#7283#7305::Float64
  ########_var0#7000#7004#7284#7306::Tuple{}
  ########types#7098#7183#7276#7307::Tuple{Type{Float64}}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ######a#7100#7142#7310::Tuple{}
  ######b#7101#7143#7311::Tuple{}
  ######afactor#7102#7144#7312::Float64
  ######bfactor#7103#7145#7313::Float64
  ####_var0#7146#7314::Tuple{}
  ##a#7315::Float64
  ####G#7266#7316::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7267#7317::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7268#7318::Tuple{}
  ##########x#6997#6999#7003#7269#7319::Float64
  ########_var0#7000#7004#7270#7320::Tuple{}
  ######a#7271#7273#7321::Tuple{}
  ######b#7272#7274#7322::Tuple{}
  ####_var0#7275#7323::Tuple{}
  ######a#7285#7287#7324::Tuple{}
  ######b#7286#7288#7325::Tuple{}
  ####_var0#7289#7326::Tuple{}
  ######a#7271#7273#7327::Tuple{}
  ######b#7272#7274#7328::Tuple{}
  ####_var0#7275#7329::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      ##a#7315 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7315::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7315::Float64)::Float64
      ####G#7266#7316 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7270#7320 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7270#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7315::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7323 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7275#7323 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7301 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7301::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7301::Float64)::Float64
      ####G#7280#7302 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7284#7306 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7284#7306 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7308 = GenSym(6)
      ##a2#7309 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7314 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7146#7314 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7308::Float64,##a2#7309::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7289#7326 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7289#7326 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7295 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7295::Float64,0)::Float64
      ####G#7290#7296 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7294#7300 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7294#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7295::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7329 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7275#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(8) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      GenSym(7) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,α::Float64,0)::Float64
      GenSym(5) = (Distributions.digamma)(α::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,θ::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(7),α::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)),GenSym(5))))),(Base.Math.nan_dom_err)(GenSym(4),θ::Float64)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7295::Float64
  ####G#7290#7296::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7291#7297::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7292#7298::Tuple{}
  ##########x#6997#6999#7003#7293#7299::Float64
  ########_var0#7000#7004#7294#7300::Tuple{}
  ##a#7301::Float64
  ####G#7280#7302::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7281#7303::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7282#7304::Tuple{}
  ##########x#6997#6999#7003#7283#7305::Float64
  ########_var0#7000#7004#7284#7306::Tuple{}
  ########types#7098#7183#7276#7307::Tuple{Type{Float64}}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ######a#7100#7142#7310::Tuple{}
  ######b#7101#7143#7311::Tuple{}
  ######afactor#7102#7144#7312::Float64
  ######bfactor#7103#7145#7313::Float64
  ####_var0#7146#7314::Tuple{}
  ##a#7315::Float64
  ####G#7266#7316::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7267#7317::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7268#7318::Tuple{}
  ##########x#6997#6999#7003#7269#7319::Float64
  ########_var0#7000#7004#7270#7320::Tuple{}
  ######a#7271#7273#7321::Tuple{}
  ######b#7272#7274#7322::Tuple{}
  ####_var0#7275#7323::Tuple{}
  ######a#7285#7287#7324::Tuple{}
  ######b#7286#7288#7325::Tuple{}
  ####_var0#7289#7326::Tuple{}
  ######a#7271#7273#7327::Tuple{}
  ######b#7272#7274#7328::Tuple{}
  ####_var0#7275#7329::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      ##a#7315 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7315::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7315::Float64)::Float64
      ####G#7266#7316 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7270#7320 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7270#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7315::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7323 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7275#7323 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7301 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7301::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7301::Float64)::Float64
      ####G#7280#7302 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7284#7306 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7284#7306 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7308 = GenSym(6)
      ##a2#7309 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7314 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7146#7314 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7308::Float64,##a2#7309::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7289#7326 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7289#7326 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7295 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7295::Float64,0)::Float64
      ####G#7290#7296 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7294#7300 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7294#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7295::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7329 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7275#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7295::Float64
  ####G#7290#7296::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7291#7297::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7292#7298::Tuple{}
  ##########x#6997#6999#7003#7293#7299::Float64
  ########_var0#7000#7004#7294#7300::Tuple{}
  ##a#7301::Float64
  ####G#7280#7302::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7281#7303::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7282#7304::Tuple{}
  ##########x#6997#6999#7003#7283#7305::Float64
  ########_var0#7000#7004#7284#7306::Tuple{}
  ########types#7098#7183#7276#7307::Tuple{Type{Float64}}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ######a#7100#7142#7310::Tuple{}
  ######b#7101#7143#7311::Tuple{}
  ######afactor#7102#7144#7312::Float64
  ######bfactor#7103#7145#7313::Float64
  ####_var0#7146#7314::Tuple{}
  ##a#7315::Float64
  ####G#7266#7316::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7267#7317::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7268#7318::Tuple{}
  ##########x#6997#6999#7003#7269#7319::Float64
  ########_var0#7000#7004#7270#7320::Tuple{}
  ######a#7271#7273#7321::Tuple{}
  ######b#7272#7274#7322::Tuple{}
  ####_var0#7275#7323::Tuple{}
  ######a#7285#7287#7324::Tuple{}
  ######b#7286#7288#7325::Tuple{}
  ####_var0#7289#7326::Tuple{}
  ######a#7271#7273#7327::Tuple{}
  ######b#7272#7274#7328::Tuple{}
  ####_var0#7275#7329::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      ##a#7315 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7315::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7315::Float64)::Float64
      ####G#7266#7316 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7270#7320 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7270#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7315::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7323 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7275#7323 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7301 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7301::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7301::Float64)::Float64
      ####G#7280#7302 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7284#7306 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7284#7306 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7308 = GenSym(6)
      ##a2#7309 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7314 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7146#7314 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7308::Float64,##a2#7309::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7289#7326 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7289#7326 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7295 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7295::Float64,0)::Float64
      ####G#7290#7296 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7294#7300 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7294#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7295::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7329 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7275#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7295::Float64
  ####G#7290#7296::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7291#7297::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7292#7298::Tuple{}
  ##########x#6997#6999#7003#7293#7299::Float64
  ########_var0#7000#7004#7294#7300::Tuple{}
  ##a#7301::Float64
  ####G#7280#7302::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7281#7303::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7282#7304::Tuple{}
  ##########x#6997#6999#7003#7283#7305::Float64
  ########_var0#7000#7004#7284#7306::Tuple{}
  ########types#7098#7183#7276#7307::Tuple{Type{Float64}}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ######a#7100#7142#7310::Tuple{}
  ######b#7101#7143#7311::Tuple{}
  ######afactor#7102#7144#7312::Float64
  ######bfactor#7103#7145#7313::Float64
  ####_var0#7146#7314::Tuple{}
  ##a#7315::Float64
  ####G#7266#7316::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7267#7317::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7268#7318::Tuple{}
  ##########x#6997#6999#7003#7269#7319::Float64
  ########_var0#7000#7004#7270#7320::Tuple{}
  ######a#7271#7273#7321::Tuple{}
  ######b#7272#7274#7322::Tuple{}
  ####_var0#7275#7323::Tuple{}
  ######a#7285#7287#7324::Tuple{}
  ######b#7286#7288#7325::Tuple{}
  ####_var0#7289#7326::Tuple{}
  ######a#7271#7273#7327::Tuple{}
  ######b#7272#7274#7328::Tuple{}
  ####_var0#7275#7329::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      ##a#7315 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7315::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7315::Float64)::Float64
      ####G#7266#7316 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7270#7320 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7270#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7315::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7323 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7275#7323 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7301 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7301::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7301::Float64)::Float64
      ####G#7280#7302 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7284#7306 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7284#7306 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7308 = GenSym(6)
      ##a2#7309 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7314 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7146#7314 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7308::Float64,##a2#7309::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7289#7326 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7289#7326 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7295 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7295::Float64,0)::Float64
      ####G#7290#7296 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7294#7300 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7294#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7295::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7329 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7275#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7295::Float64
  ####G#7290#7296::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7291#7297::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7292#7298::Tuple{}
  ##########x#6997#6999#7003#7293#7299::Float64
  ########_var0#7000#7004#7294#7300::Tuple{}
  ##a#7301::Float64
  ####G#7280#7302::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7281#7303::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7282#7304::Tuple{}
  ##########x#6997#6999#7003#7283#7305::Float64
  ########_var0#7000#7004#7284#7306::Tuple{}
  ########types#7098#7183#7276#7307::Tuple{Type{Float64}}
  ##a1#7308::Float64
  ##a2#7309::Float64
  ######a#7100#7142#7310::Tuple{}
  ######b#7101#7143#7311::Tuple{}
  ######afactor#7102#7144#7312::Float64
  ######bfactor#7103#7145#7313::Float64
  ####_var0#7146#7314::Tuple{}
  ##a#7315::Float64
  ####G#7266#7316::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7267#7317::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7268#7318::Tuple{}
  ##########x#6997#6999#7003#7269#7319::Float64
  ########_var0#7000#7004#7270#7320::Tuple{}
  ######a#7271#7273#7321::Tuple{}
  ######b#7272#7274#7322::Tuple{}
  ####_var0#7275#7323::Tuple{}
  ######a#7285#7287#7324::Tuple{}
  ######b#7286#7288#7325::Tuple{}
  ####_var0#7289#7326::Tuple{}
  ######a#7271#7273#7327::Tuple{}
  ######b#7272#7274#7328::Tuple{}
  ####_var0#7275#7329::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 79:
      GenSym(13) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 80:
      ##a#7315 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))("lgamma",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7315::Float64,0)::Float64
      (ForwardDiff.digamma)(##a#7315::Float64)::Float64
      ####G#7266#7316 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7270#7320 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7270#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7315::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7323 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7275#7323 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7301 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7301::Float64)::Float64
      (ForwardDiff.trigamma)(##a#7301::Float64)::Float64
      ####G#7280#7302 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7284#7306 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7000#7004#7284#7306 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(5), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7308 = GenSym(6)
      ##a2#7309 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7146#7314 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7146#7314 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7308::Float64,##a2#7309::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7289#7326 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7289#7326 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      ##a#7295 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7295::Float64,0)::Float64
      ####G#7290#7296 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7294#7300 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7000#7004#7294#7300 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7295::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7275#7329 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7275#7329 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(10),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64}
      GenSym(49) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(0),:α)::Int64))
      GenSym(50) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(0),:θ)::Int64))
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(49),0,GenSym(50),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64}
      GenSym(51) = (top(ccall))((top(tuple))("rgamma",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,(top(getfield))(GenSym(0),:α)::Float64,0,(top(getfield))(GenSym(0),:θ)::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(51)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 116:
      GenSym(0) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(1) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:gammarand)::F)((top(getfield))(GenSym(0),:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(GenSym(0),:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Base.Float64,(Base.div_float)(1.0,GenSym(1)))
  end::Float64




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Int64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7382::Float64
  ####G#7377#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7378#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7379#7385::Tuple{}
  ##########x#6997#6999#7003#7380#7386::Float64
  ########_var0#7000#7004#7381#7387::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7382 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7377#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7381#7387 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7381#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7382::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7382::Float64
  ####G#7377#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7378#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7379#7385::Tuple{}
  ##########x#6997#6999#7003#7380#7386::Float64
  ########_var0#7000#7004#7381#7387::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7382 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7377#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7381#7387 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7381#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7382::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7382::Float64
  ####G#7377#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7378#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7379#7385::Tuple{}
  ##########x#6997#6999#7003#7380#7386::Float64
  ########_var0#7000#7004#7381#7387::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7382 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7377#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7381#7387 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7381#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7382::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7382::Float64
  ####G#7377#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7378#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7379#7385::Tuple{}
  ##########x#6997#6999#7003#7380#7386::Float64
  ########_var0#7000#7004#7381#7387::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7382 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7377#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7381#7387 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7381#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7382::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7382::Float64
  ####G#7377#7383::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7378#7384::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7379#7385::Tuple{}
  ##########x#6997#6999#7003#7380#7386::Float64
  ########_var0#7000#7004#7381#7387::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 86:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7382 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7377#7383 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7381#7387 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7000#7004#7381#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7382::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  t::Int64
  a::Int64
  b::Int64
  #s25::Int64
  ##xs#7394::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64
      GenSym(11) = (top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64
      #s25 = 1
      GenSym(12) = GenSym(10)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(11)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Float64,(Base.sitofp)(Float64,a::Int64))))
      GenSym(4) = (Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)((Base.box)(Int64,(Base.neg_int)(b::Int64)),t::Int64))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(4),0,GenSym(3),0)::Float64
      GenSym(8) = (Distributions.gamma)(a::Int64)::Float64
      GenSym(9) = (Distributions.besselk)(a::Int64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,(Base.box)(Float64,(Base.sitofp)(Float64,b::Int64)))),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(GenSym(4),GenSym(3))))::Float64)),GenSym(8))),GenSym(9)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7440::Tuple{}
  ##########tup#6996#7206#7210#7432#7441::Tuple{}
  ##########x#6997#7207#7211#7433#7442::Float64
  ########_var0#7208#7212#7434#7443::Tuple{}
  ##########types#7098#7209#7213#7435#7444::Tuple{Type{Float64}}
  ########tup#7401#7404#7436#7445::Tuple{}
  ########x#7402#7405#7437#7446::Int64
  ######_var0#7406#7438#7447::Tuple{}
  ########types#7403#7407#7439#7448::Tuple{Type{Int64}}
  ##sqrt_a#7449::Float64
  ##deriv#7450::Float64
  ####G#7201#7451::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7452::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7453::Tuple{}
  ##########x#6997#6999#7003#7204#7454::Float64
  ########_var0#7000#7004#7205#7455::Tuple{}
  ##a#7456::Float64
  ####G#7427#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7459::Tuple{}
  ##########x#6997#6999#7003#7430#7460::Float64
  ########_var0#7000#7004#7431#7461::Tuple{}
  ########tup#6996#7206#7210#7462::Tuple{}
  ########x#6997#7207#7211#7463::Float64
  ######_var0#7208#7212#7464::Tuple{}
  ########types#7098#7209#7213#7465::Tuple{Type{Float64}}
  ######tup#7398#7399#7466::Tuple{}
  ####_var0#7400#7467::Tuple{}
  ######tup#7401#7404#7468::Tuple{}
  ######x#7402#7405#7469::Int64
  ####_var0#7406#7470::Tuple{}
  ######types#7403#7407#7471::Tuple{Type{Int64}}
  ##a1#7472::Float64
  ##a2#7473::Float64
  ##exp_a#7474::Float64
  ##powval#7475::Float64
  ##logval#7476::Float64
  ##new_bs#7477::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7413#7478::Float64
  ####exp_a#7414#7479::Float64
  ####deriv#7415#7480::Float64
  ######G#7408#7416#7481::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7409#7417#7482::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7410#7418#7483::Tuple{}
  ############x#6997#6999#7003#7411#7419#7484::Float64
  ##########_var0#7000#7004#7412#7420#7485::Tuple{}
  ######a#7100#7421#7486::Tuple{}
  ######b#7101#7422#7487::Tuple{}
  ######afactor#7102#7423#7488::Float64
  ######bfactor#7103#7424#7489::Float64
  ####_var0#7425#7490::Tuple{}
  ######types#7109#7426#7491::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7206#7210#7492::Tuple{}
  ########x#6997#7207#7211#7493::Float64
  ######_var0#7208#7212#7494::Tuple{}
  ########types#7098#7209#7213#7495::Tuple{Type{Float64}}
  ##a1#7496::Float64
  ##a2#7497::Float64
  ##div_a#7498::Float64
  ####afactor#7110#7499::Float64
  ####bfactor#7111#7500::Float64
  ########a#7100#7104#7112#7501::Tuple{}
  ########b#7101#7105#7113#7502::Tuple{}
  ########afactor#7102#7106#7114#7503::Float64
  ########bfactor#7103#7107#7115#7504::Float64
  ######_var0#7108#7116#7505::Tuple{}
  ######types#7109#7117#7506::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7400#7467 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7400#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7406#7470 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7406#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7464 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7208#7212#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7472"))
      NewvarNode(symbol("##a2#7473"))
      NewvarNode(symbol("##exp_a#7474"))
      NewvarNode(symbol("##powval#7475"))
      NewvarNode(symbol("##logval#7476"))
      NewvarNode(symbol("##new_bs#7477"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 22
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7413#7478 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7414#7479 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(16),0)::Float64
      ####deriv#7415#7480 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(16))))::Float64))
      ######G#7408#7416#7481 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7412#7420#7485 = (top(tuple))()::Tuple{}
      goto 21
      ##########_var0#7000#7004#7412#7420#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7414#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 24
      22: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7472 = GenSym(10)
      ##a2#7473 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,##a2#7473::Float64,0)::Float64
      ##exp_a#7474 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,##a2#7473::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7473::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,GenSym(23),0)::Float64
      ##powval#7475 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7473::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0)::Float64
      ##logval#7476 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7474::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7472::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7425#7490 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7425#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      ##new_bs#7477 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7474::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      24: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7494 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7208#7212#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7456 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7456::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      ####G#7427#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7461 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7431#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7456::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7496 = GenSym(31)
      ##a2#7497 = GenSym(32)
      ##div_a#7498 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7496::Float64,##a2#7497::Float64))
      ####afactor#7110#7499 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7497::Float64))
      ####bfactor#7111#7500 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7496::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7497::Float64,##a2#7497::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7505 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7108#7116#7505 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7498::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7208#7212#7434#7443 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7208#7212#7434#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7406#7438#7447 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7406#7438#7447 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##sqrt_a#7449 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7450 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7449::Float64))
      ####G#7201#7451 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7455 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7000#7004#7205#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(11) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.neg_float)(b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(5) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(9) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(6),0,GenSym(5),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(10) = (Distributions.besselk)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(-4.0,b::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))))::ANY)::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.Math.nan_dom_err)(GenSym(9),(Base.box)(Base.Float64,(Base.add_float)(GenSym(6),GenSym(5))))::Float64)),(Base.Math.nan_dom_err)(GenSym(4),a::Float64)::Float64)),GenSym(10)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7440::Tuple{}
  ##########tup#6996#7206#7210#7432#7441::Tuple{}
  ##########x#6997#7207#7211#7433#7442::Float64
  ########_var0#7208#7212#7434#7443::Tuple{}
  ##########types#7098#7209#7213#7435#7444::Tuple{Type{Float64}}
  ########tup#7401#7404#7436#7445::Tuple{}
  ########x#7402#7405#7437#7446::Int64
  ######_var0#7406#7438#7447::Tuple{}
  ########types#7403#7407#7439#7448::Tuple{Type{Int64}}
  ##sqrt_a#7449::Float64
  ##deriv#7450::Float64
  ####G#7201#7451::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7452::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7453::Tuple{}
  ##########x#6997#6999#7003#7204#7454::Float64
  ########_var0#7000#7004#7205#7455::Tuple{}
  ##a#7456::Float64
  ####G#7427#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7459::Tuple{}
  ##########x#6997#6999#7003#7430#7460::Float64
  ########_var0#7000#7004#7431#7461::Tuple{}
  ########tup#6996#7206#7210#7462::Tuple{}
  ########x#6997#7207#7211#7463::Float64
  ######_var0#7208#7212#7464::Tuple{}
  ########types#7098#7209#7213#7465::Tuple{Type{Float64}}
  ######tup#7398#7399#7466::Tuple{}
  ####_var0#7400#7467::Tuple{}
  ######tup#7401#7404#7468::Tuple{}
  ######x#7402#7405#7469::Int64
  ####_var0#7406#7470::Tuple{}
  ######types#7403#7407#7471::Tuple{Type{Int64}}
  ##a1#7472::Float64
  ##a2#7473::Float64
  ##exp_a#7474::Float64
  ##powval#7475::Float64
  ##logval#7476::Float64
  ##new_bs#7477::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7413#7478::Float64
  ####exp_a#7414#7479::Float64
  ####deriv#7415#7480::Float64
  ######G#7408#7416#7481::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7409#7417#7482::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7410#7418#7483::Tuple{}
  ############x#6997#6999#7003#7411#7419#7484::Float64
  ##########_var0#7000#7004#7412#7420#7485::Tuple{}
  ######a#7100#7421#7486::Tuple{}
  ######b#7101#7422#7487::Tuple{}
  ######afactor#7102#7423#7488::Float64
  ######bfactor#7103#7424#7489::Float64
  ####_var0#7425#7490::Tuple{}
  ######types#7109#7426#7491::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7206#7210#7492::Tuple{}
  ########x#6997#7207#7211#7493::Float64
  ######_var0#7208#7212#7494::Tuple{}
  ########types#7098#7209#7213#7495::Tuple{Type{Float64}}
  ##a1#7496::Float64
  ##a2#7497::Float64
  ##div_a#7498::Float64
  ####afactor#7110#7499::Float64
  ####bfactor#7111#7500::Float64
  ########a#7100#7104#7112#7501::Tuple{}
  ########b#7101#7105#7113#7502::Tuple{}
  ########afactor#7102#7106#7114#7503::Float64
  ########bfactor#7103#7107#7115#7504::Float64
  ######_var0#7108#7116#7505::Tuple{}
  ######types#7109#7117#7506::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7400#7467 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7400#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7406#7470 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7406#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7464 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7208#7212#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7472"))
      NewvarNode(symbol("##a2#7473"))
      NewvarNode(symbol("##exp_a#7474"))
      NewvarNode(symbol("##powval#7475"))
      NewvarNode(symbol("##logval#7476"))
      NewvarNode(symbol("##new_bs#7477"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 22
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7413#7478 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7414#7479 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(16),0)::Float64
      ####deriv#7415#7480 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(16))))::Float64))
      ######G#7408#7416#7481 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7412#7420#7485 = (top(tuple))()::Tuple{}
      goto 21
      ##########_var0#7000#7004#7412#7420#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7414#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 24
      22: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7472 = GenSym(10)
      ##a2#7473 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,##a2#7473::Float64,0)::Float64
      ##exp_a#7474 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,##a2#7473::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7473::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,GenSym(23),0)::Float64
      ##powval#7475 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7473::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0)::Float64
      ##logval#7476 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7474::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7472::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7425#7490 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7425#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      ##new_bs#7477 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7474::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      24: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7494 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7208#7212#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7456 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7456::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      ####G#7427#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7461 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7431#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7456::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7496 = GenSym(31)
      ##a2#7497 = GenSym(32)
      ##div_a#7498 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7496::Float64,##a2#7497::Float64))
      ####afactor#7110#7499 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7497::Float64))
      ####bfactor#7111#7500 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7496::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7497::Float64,##a2#7497::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7505 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7108#7116#7505 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7498::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7208#7212#7434#7443 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7208#7212#7434#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7406#7438#7447 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7406#7438#7447 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##sqrt_a#7449 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7450 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7449::Float64))
      ####G#7201#7451 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7455 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7000#7004#7205#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7440::Tuple{}
  ##########tup#6996#7206#7210#7432#7441::Tuple{}
  ##########x#6997#7207#7211#7433#7442::Float64
  ########_var0#7208#7212#7434#7443::Tuple{}
  ##########types#7098#7209#7213#7435#7444::Tuple{Type{Float64}}
  ########tup#7401#7404#7436#7445::Tuple{}
  ########x#7402#7405#7437#7446::Int64
  ######_var0#7406#7438#7447::Tuple{}
  ########types#7403#7407#7439#7448::Tuple{Type{Int64}}
  ##sqrt_a#7449::Float64
  ##deriv#7450::Float64
  ####G#7201#7451::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7452::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7453::Tuple{}
  ##########x#6997#6999#7003#7204#7454::Float64
  ########_var0#7000#7004#7205#7455::Tuple{}
  ##a#7456::Float64
  ####G#7427#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7459::Tuple{}
  ##########x#6997#6999#7003#7430#7460::Float64
  ########_var0#7000#7004#7431#7461::Tuple{}
  ########tup#6996#7206#7210#7462::Tuple{}
  ########x#6997#7207#7211#7463::Float64
  ######_var0#7208#7212#7464::Tuple{}
  ########types#7098#7209#7213#7465::Tuple{Type{Float64}}
  ######tup#7398#7399#7466::Tuple{}
  ####_var0#7400#7467::Tuple{}
  ######tup#7401#7404#7468::Tuple{}
  ######x#7402#7405#7469::Int64
  ####_var0#7406#7470::Tuple{}
  ######types#7403#7407#7471::Tuple{Type{Int64}}
  ##a1#7472::Float64
  ##a2#7473::Float64
  ##exp_a#7474::Float64
  ##powval#7475::Float64
  ##logval#7476::Float64
  ##new_bs#7477::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7413#7478::Float64
  ####exp_a#7414#7479::Float64
  ####deriv#7415#7480::Float64
  ######G#7408#7416#7481::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7409#7417#7482::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7410#7418#7483::Tuple{}
  ############x#6997#6999#7003#7411#7419#7484::Float64
  ##########_var0#7000#7004#7412#7420#7485::Tuple{}
  ######a#7100#7421#7486::Tuple{}
  ######b#7101#7422#7487::Tuple{}
  ######afactor#7102#7423#7488::Float64
  ######bfactor#7103#7424#7489::Float64
  ####_var0#7425#7490::Tuple{}
  ######types#7109#7426#7491::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7206#7210#7492::Tuple{}
  ########x#6997#7207#7211#7493::Float64
  ######_var0#7208#7212#7494::Tuple{}
  ########types#7098#7209#7213#7495::Tuple{Type{Float64}}
  ##a1#7496::Float64
  ##a2#7497::Float64
  ##div_a#7498::Float64
  ####afactor#7110#7499::Float64
  ####bfactor#7111#7500::Float64
  ########a#7100#7104#7112#7501::Tuple{}
  ########b#7101#7105#7113#7502::Tuple{}
  ########afactor#7102#7106#7114#7503::Float64
  ########bfactor#7103#7107#7115#7504::Float64
  ######_var0#7108#7116#7505::Tuple{}
  ######types#7109#7117#7506::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7400#7467 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7400#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7406#7470 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7406#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7464 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7208#7212#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7472"))
      NewvarNode(symbol("##a2#7473"))
      NewvarNode(symbol("##exp_a#7474"))
      NewvarNode(symbol("##powval#7475"))
      NewvarNode(symbol("##logval#7476"))
      NewvarNode(symbol("##new_bs#7477"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 22
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7413#7478 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7414#7479 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(16),0)::Float64
      ####deriv#7415#7480 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(16))))::Float64))
      ######G#7408#7416#7481 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7412#7420#7485 = (top(tuple))()::Tuple{}
      goto 21
      ##########_var0#7000#7004#7412#7420#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7414#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 24
      22: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7472 = GenSym(10)
      ##a2#7473 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,##a2#7473::Float64,0)::Float64
      ##exp_a#7474 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,##a2#7473::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7473::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,GenSym(23),0)::Float64
      ##powval#7475 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7473::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0)::Float64
      ##logval#7476 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7474::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7472::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7425#7490 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7425#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      ##new_bs#7477 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7474::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      24: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7494 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7208#7212#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7456 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7456::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      ####G#7427#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7461 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7431#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7456::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7496 = GenSym(31)
      ##a2#7497 = GenSym(32)
      ##div_a#7498 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7496::Float64,##a2#7497::Float64))
      ####afactor#7110#7499 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7497::Float64))
      ####bfactor#7111#7500 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7496::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7497::Float64,##a2#7497::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7505 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7108#7116#7505 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7498::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7208#7212#7434#7443 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7208#7212#7434#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7406#7438#7447 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7406#7438#7447 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##sqrt_a#7449 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7450 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7449::Float64))
      ####G#7201#7451 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7455 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7000#7004#7205#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7440::Tuple{}
  ##########tup#6996#7206#7210#7432#7441::Tuple{}
  ##########x#6997#7207#7211#7433#7442::Float64
  ########_var0#7208#7212#7434#7443::Tuple{}
  ##########types#7098#7209#7213#7435#7444::Tuple{Type{Float64}}
  ########tup#7401#7404#7436#7445::Tuple{}
  ########x#7402#7405#7437#7446::Int64
  ######_var0#7406#7438#7447::Tuple{}
  ########types#7403#7407#7439#7448::Tuple{Type{Int64}}
  ##sqrt_a#7449::Float64
  ##deriv#7450::Float64
  ####G#7201#7451::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7452::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7453::Tuple{}
  ##########x#6997#6999#7003#7204#7454::Float64
  ########_var0#7000#7004#7205#7455::Tuple{}
  ##a#7456::Float64
  ####G#7427#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7459::Tuple{}
  ##########x#6997#6999#7003#7430#7460::Float64
  ########_var0#7000#7004#7431#7461::Tuple{}
  ########tup#6996#7206#7210#7462::Tuple{}
  ########x#6997#7207#7211#7463::Float64
  ######_var0#7208#7212#7464::Tuple{}
  ########types#7098#7209#7213#7465::Tuple{Type{Float64}}
  ######tup#7398#7399#7466::Tuple{}
  ####_var0#7400#7467::Tuple{}
  ######tup#7401#7404#7468::Tuple{}
  ######x#7402#7405#7469::Int64
  ####_var0#7406#7470::Tuple{}
  ######types#7403#7407#7471::Tuple{Type{Int64}}
  ##a1#7472::Float64
  ##a2#7473::Float64
  ##exp_a#7474::Float64
  ##powval#7475::Float64
  ##logval#7476::Float64
  ##new_bs#7477::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7413#7478::Float64
  ####exp_a#7414#7479::Float64
  ####deriv#7415#7480::Float64
  ######G#7408#7416#7481::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7409#7417#7482::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7410#7418#7483::Tuple{}
  ############x#6997#6999#7003#7411#7419#7484::Float64
  ##########_var0#7000#7004#7412#7420#7485::Tuple{}
  ######a#7100#7421#7486::Tuple{}
  ######b#7101#7422#7487::Tuple{}
  ######afactor#7102#7423#7488::Float64
  ######bfactor#7103#7424#7489::Float64
  ####_var0#7425#7490::Tuple{}
  ######types#7109#7426#7491::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7206#7210#7492::Tuple{}
  ########x#6997#7207#7211#7493::Float64
  ######_var0#7208#7212#7494::Tuple{}
  ########types#7098#7209#7213#7495::Tuple{Type{Float64}}
  ##a1#7496::Float64
  ##a2#7497::Float64
  ##div_a#7498::Float64
  ####afactor#7110#7499::Float64
  ####bfactor#7111#7500::Float64
  ########a#7100#7104#7112#7501::Tuple{}
  ########b#7101#7105#7113#7502::Tuple{}
  ########afactor#7102#7106#7114#7503::Float64
  ########bfactor#7103#7107#7115#7504::Float64
  ######_var0#7108#7116#7505::Tuple{}
  ######types#7109#7117#7506::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7400#7467 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7400#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7406#7470 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7406#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7464 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7208#7212#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7472"))
      NewvarNode(symbol("##a2#7473"))
      NewvarNode(symbol("##exp_a#7474"))
      NewvarNode(symbol("##powval#7475"))
      NewvarNode(symbol("##logval#7476"))
      NewvarNode(symbol("##new_bs#7477"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 22
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7413#7478 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7414#7479 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(16),0)::Float64
      ####deriv#7415#7480 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(16))))::Float64))
      ######G#7408#7416#7481 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7412#7420#7485 = (top(tuple))()::Tuple{}
      goto 21
      ##########_var0#7000#7004#7412#7420#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7414#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 24
      22: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7472 = GenSym(10)
      ##a2#7473 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,##a2#7473::Float64,0)::Float64
      ##exp_a#7474 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,##a2#7473::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7473::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,GenSym(23),0)::Float64
      ##powval#7475 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7473::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0)::Float64
      ##logval#7476 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7474::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7472::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7425#7490 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7425#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      ##new_bs#7477 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7474::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      24: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7494 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7208#7212#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7456 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7456::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      ####G#7427#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7461 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7431#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7456::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7496 = GenSym(31)
      ##a2#7497 = GenSym(32)
      ##div_a#7498 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7496::Float64,##a2#7497::Float64))
      ####afactor#7110#7499 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7497::Float64))
      ####bfactor#7111#7500 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7496::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7497::Float64,##a2#7497::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7505 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7108#7116#7505 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7498::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7208#7212#7434#7443 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7208#7212#7434#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7406#7438#7447 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7406#7438#7447 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##sqrt_a#7449 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7450 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7449::Float64))
      ####G#7201#7451 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7455 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7000#7004#7205#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7440::Tuple{}
  ##########tup#6996#7206#7210#7432#7441::Tuple{}
  ##########x#6997#7207#7211#7433#7442::Float64
  ########_var0#7208#7212#7434#7443::Tuple{}
  ##########types#7098#7209#7213#7435#7444::Tuple{Type{Float64}}
  ########tup#7401#7404#7436#7445::Tuple{}
  ########x#7402#7405#7437#7446::Int64
  ######_var0#7406#7438#7447::Tuple{}
  ########types#7403#7407#7439#7448::Tuple{Type{Int64}}
  ##sqrt_a#7449::Float64
  ##deriv#7450::Float64
  ####G#7201#7451::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7202#7452::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7203#7453::Tuple{}
  ##########x#6997#6999#7003#7204#7454::Float64
  ########_var0#7000#7004#7205#7455::Tuple{}
  ##a#7456::Float64
  ####G#7427#7457::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7458::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7459::Tuple{}
  ##########x#6997#6999#7003#7430#7460::Float64
  ########_var0#7000#7004#7431#7461::Tuple{}
  ########tup#6996#7206#7210#7462::Tuple{}
  ########x#6997#7207#7211#7463::Float64
  ######_var0#7208#7212#7464::Tuple{}
  ########types#7098#7209#7213#7465::Tuple{Type{Float64}}
  ######tup#7398#7399#7466::Tuple{}
  ####_var0#7400#7467::Tuple{}
  ######tup#7401#7404#7468::Tuple{}
  ######x#7402#7405#7469::Int64
  ####_var0#7406#7470::Tuple{}
  ######types#7403#7407#7471::Tuple{Type{Int64}}
  ##a1#7472::Float64
  ##a2#7473::Float64
  ##exp_a#7474::Float64
  ##powval#7475::Float64
  ##logval#7476::Float64
  ##new_bs#7477::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7413#7478::Float64
  ####exp_a#7414#7479::Float64
  ####deriv#7415#7480::Float64
  ######G#7408#7416#7481::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#6995#7001#7409#7417#7482::Tuple{Type{Float64},Type{Float64}}
  ############tup#6996#6998#7002#7410#7418#7483::Tuple{}
  ############x#6997#6999#7003#7411#7419#7484::Float64
  ##########_var0#7000#7004#7412#7420#7485::Tuple{}
  ######a#7100#7421#7486::Tuple{}
  ######b#7101#7422#7487::Tuple{}
  ######afactor#7102#7423#7488::Float64
  ######bfactor#7103#7424#7489::Float64
  ####_var0#7425#7490::Tuple{}
  ######types#7109#7426#7491::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ########tup#6996#7206#7210#7492::Tuple{}
  ########x#6997#7207#7211#7493::Float64
  ######_var0#7208#7212#7494::Tuple{}
  ########types#7098#7209#7213#7495::Tuple{Type{Float64}}
  ##a1#7496::Float64
  ##a2#7497::Float64
  ##div_a#7498::Float64
  ####afactor#7110#7499::Float64
  ####bfactor#7111#7500::Float64
  ########a#7100#7104#7112#7501::Tuple{}
  ########b#7101#7105#7113#7502::Tuple{}
  ########afactor#7102#7106#7114#7503::Float64
  ########bfactor#7103#7107#7115#7504::Float64
  ######_var0#7108#7116#7505::Tuple{}
  ######types#7109#7117#7506::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 104:
      GenSym(34) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(35) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(36) = GenSym(34)
      GenSym(37) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(36)
      #s25 = GenSym(37)
      GenSym(38) = GenSym(35)
      GenSym(39) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(38)
      #s25 = GenSym(39) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 105:
      unless t::Int64 === 0::Bool goto 0
      return 1.0
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7400#7467 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7400#7467 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7406#7470 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7406#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7464 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7208#7212#7464 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7472"))
      NewvarNode(symbol("##a2#7473"))
      NewvarNode(symbol("##exp_a#7474"))
      NewvarNode(symbol("##powval#7475"))
      NewvarNode(symbol("##logval#7476"))
      NewvarNode(symbol("##new_bs#7477"))
      unless (top(getfield))((top(getfield))(GenSym(8),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 22
      GenSym(12) = (top(getfield))(GenSym(8),:value)::Float64
      ####a#7413#7478 = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(15) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(12),0)::Float64
      ####exp_a#7414#7479 = (Base.Math.nan_dom_err)(GenSym(15),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(12))))::Float64
      GenSym(16) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(12),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(19) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7413#7478::Float64,0,GenSym(16),0)::Float64
      ####deriv#7415#7480 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(12),(Base.Math.nan_dom_err)(GenSym(19),(Base.box)(Base.Float64,(Base.add_float)(####a#7413#7478::Float64,GenSym(16))))::Float64))
      ######G#7408#7416#7481 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7000#7004#7412#7420#7485 = (top(tuple))()::Tuple{}
      goto 21
      ##########_var0#7000#7004#7412#7420#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7414#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 24
      22: 
      GenSym(10) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7472 = GenSym(10)
      ##a2#7473 = GenSym(11)
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,##a2#7473::Float64,0)::Float64
      ##exp_a#7474 = (Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,##a2#7473::Float64)))::Float64
      GenSym(23) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7473::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(26) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0,GenSym(23),0)::Float64
      ##powval#7475 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7473::Float64,(Base.Math.nan_dom_err)(GenSym(26),(Base.box)(Base.Float64,(Base.add_float)(##a1#7472::Float64,GenSym(23))))::Float64))
      GenSym(28) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7472::Float64,0)::Float64
      ##logval#7476 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7474::Float64,(Base.Math.nan_dom_err)(GenSym(28),##a1#7472::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7425#7490 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7425#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      ##new_bs#7477 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7474::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      24: 
      GenSym(29) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7494 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7208#7212#7494 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7456 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      GenSym(5) = (ForwardDiff.digamma)(##a#7456::Float64)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7456::Float64,0)::Float64
      ####G#7427#7457 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7461 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7000#7004#7431#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(30) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7456::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(31) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(29),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(32) = (top(getfield))(GenSym(30),:value)::Float64
      ##a1#7496 = GenSym(31)
      ##a2#7497 = GenSym(32)
      ##div_a#7498 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7496::Float64,##a2#7497::Float64))
      ####afactor#7110#7499 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7497::Float64))
      ####bfactor#7111#7500 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7496::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7497::Float64,##a2#7497::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7108#7116#7505 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7108#7116#7505 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(33) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7498::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7208#7212#7434#7443 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7208#7212#7434#7443 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ######_var0#7406#7438#7447 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7406#7438#7447 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##sqrt_a#7449 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,-4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::ANY)::Float64
      ##deriv#7450 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7449::Float64))
      ####G#7201#7451 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7205#7455 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7000#7004#7205#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return GenSym(33) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ANY::ANY
  end::ANY




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.InverseGamma{Int64}
  t::Int64
  a::Int64
  b::Int64
  #s25::Int64
  ##xs#7540::Tuple{Int64}
  ##xs#7541::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(16) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Int64},:invd)::Distributions.Gamma{Int64},:α)::Int64
      GenSym(17) = (top(getfield))(d::Distributions.InverseGamma{Int64},:θ)::Int64
      #s25 = 1
      GenSym(18) = GenSym(16)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(18)
      #s25 = GenSym(19)
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(20)
      #s25 = GenSym(21) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(8) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(9) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.mul_int)(b::Int64,(top(getfield))(GenSym(8),:re)::Int64))), :((Base.box)(Int64,(Base.mul_int)(b::Int64,(top(getfield))(GenSym(8),:im)::Int64)))))
      GenSym(10) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.mul_int)(t::Int64,(top(getfield))(GenSym(9),:re)::Int64))), :((Base.box)(Int64,(Base.mul_int)(t::Int64,(top(getfield))(GenSym(9),:im)::Int64)))))
      GenSym(11) = $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:re)::Int64))), :((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:im)::Int64))))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Float64,(Base.sitofp)(Float64,a::Int64))))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(11),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(11),:im)::Float64)))))
      GenSym(12) = (Distributions.gamma)(a::Int64)::Float64
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,b::Int64)),(top(getfield))(GenSym(4),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,b::Int64)),(top(getfield))(GenSym(4),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64))))))::Complex{Float64}
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(13),:re)::Float64,GenSym(12)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(13),:im)::Float64,GenSym(12))))))
      GenSym(14) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Float64,(Base.sitofp)(Float64,a::Int64)))),$(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(7),:re)::Float64), :((top(getfield))(GenSym(7),:im)::Float64))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(15),:re)::Float64,(top(getfield))(GenSym(14),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(15),:im)::Float64,(top(getfield))(GenSym(14),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(15),:re)::Float64,(top(getfield))(GenSym(14),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(15),:im)::Float64,(top(getfield))(GenSym(14),:re)::Float64)))))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7542::Tuple{Int64}
  ##xs#7543::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(18) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(20) = GenSym(18)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(20)
      #s25 = GenSym(21)
      GenSym(22) = GenSym(19)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(22)
      #s25 = GenSym(23) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(10) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(11) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:im)::Int64)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(11),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(11),:im)::Float64)))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(12),:re)::Float64), :((top(getfield))(GenSym(12),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.Math.nan_dom_err)(GenSym(9),a::Float64)::Float64
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(4),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(4),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64))))))::Complex{Float64}
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
      GenSym(16) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(7),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:re)::Float64,(top(getfield))(GenSym(16),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:im)::Float64,(top(getfield))(GenSym(16),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:re)::Float64,(top(getfield))(GenSym(16),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:im)::Float64,(top(getfield))(GenSym(16),:re)::Float64)))))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7427#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7776::Tuple{}
  ##########x#6997#6999#7003#7430#7777::Float64
  ########_var0#7000#7004#7431#7778::Tuple{}
  ########tup#6996#7206#7210#7779::Tuple{}
  ########x#6997#7207#7211#7780::Float64
  ######_var0#7208#7212#7781::Tuple{}
  ########types#7098#7209#7213#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(14) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(11) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7208#7212#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(12) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(11),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(11),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7427#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7431#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(13) = GenSym(12) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(5) = GenSym(4) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(13) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(5),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(5),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{Float64}

---- float, integer ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7542::Tuple{Int64}
  ##xs#7543::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(18) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(20) = GenSym(18)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(20)
      #s25 = GenSym(21)
      GenSym(22) = GenSym(19)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(22)
      #s25 = GenSym(23) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(10) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(11) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:im)::Int64)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(11),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(11),:im)::Float64)))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(12),:re)::Float64), :((top(getfield))(GenSym(12),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.Math.nan_dom_err)(GenSym(9),a::Float64)::Float64
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(4),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(4),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64))))))::Complex{Float64}
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
      GenSym(16) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(7),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:re)::Float64,(top(getfield))(GenSym(16),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:im)::Float64,(top(getfield))(GenSym(16),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:re)::Float64,(top(getfield))(GenSym(16),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:im)::Float64,(top(getfield))(GenSym(16),:re)::Float64)))))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.InverseGamma{Float64}
  t::Int64
  a::Float64
  b::Float64
  #s25::Int64
  ##xs#7542::Tuple{Int64}
  ##xs#7543::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(18) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{Float64},:invd)::Distributions.Gamma{Float64},:α)::Float64
      GenSym(19) = (top(getfield))(d::Distributions.InverseGamma{Float64},:θ)::Float64
      #s25 = 1
      GenSym(20) = GenSym(18)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(20)
      #s25 = GenSym(21)
      GenSym(22) = GenSym(19)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(22)
      #s25 = GenSym(23) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(10) = $(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool)))))))
      GenSym(11) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:re)::Int64))))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:im)::Int64)))))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(11),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(11),:im)::Float64)))))
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((top(getfield))(GenSym(12),:re)::Float64), :((top(getfield))(GenSym(12),:im)::Float64))) ^ $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))::Complex{Float64}
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(15) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(2.0,(top(getfield))(GenSym(13),:im)::Float64)))))
      GenSym(14) = (Base.Math.nan_dom_err)(GenSym(9),a::Float64)::Float64
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(4),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(top(getfield))(GenSym(4),:im)::Float64)))))
      GenSym(7) = (Distributions.sqrt)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(6),:im)::Float64))))))::Complex{Float64}
      GenSym(17) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:re)::Float64,GenSym(14)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(15),:im)::Float64,GenSym(14))))))
      GenSym(16) = (Base.Math._besselk)((Base.box)(Base.Float64,(Base.abs_float)(a::Float64)),GenSym(7),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,1)))::Complex{Float64}
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:re)::Float64,(top(getfield))(GenSym(16),:re)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:im)::Float64,(top(getfield))(GenSym(16),:im)::Float64))))), :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:re)::Float64,(top(getfield))(GenSym(16),:im)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(17),:im)::Float64,(top(getfield))(GenSym(16),:re)::Float64)))))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7427#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7776::Tuple{}
  ##########x#6997#6999#7003#7430#7777::Float64
  ########_var0#7000#7004#7431#7778::Tuple{}
  ########tup#6996#7206#7210#7779::Tuple{}
  ########x#6997#7207#7211#7780::Float64
  ######_var0#7208#7212#7781::Tuple{}
  ########types#7098#7209#7213#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(14) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(11) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7208#7212#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(12) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(11),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(11),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7427#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7431#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(13) = GenSym(12) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(5) = GenSym(4) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(13) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(5),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(5),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{Float64}

---- dual, integer ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7427#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7776::Tuple{}
  ##########x#6997#6999#7003#7430#7777::Float64
  ########_var0#7000#7004#7431#7778::Tuple{}
  ########tup#6996#7206#7210#7779::Tuple{}
  ########x#6997#7207#7211#7780::Float64
  ######_var0#7208#7212#7781::Tuple{}
  ########types#7098#7209#7213#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(14) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(11) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7208#7212#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(12) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(11),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(11),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7427#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7431#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(13) = GenSym(12) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(5) = GenSym(4) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(13) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(5),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(5),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{Float64}

---- dual, float ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7427#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7776::Tuple{}
  ##########x#6997#6999#7003#7430#7777::Float64
  ########_var0#7000#7004#7431#7778::Tuple{}
  ########tup#6996#7206#7210#7779::Tuple{}
  ########x#6997#7207#7211#7780::Float64
  ######_var0#7208#7212#7781::Tuple{}
  ########types#7098#7209#7213#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(14) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(11) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7208#7212#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(12) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(11),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(11),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7427#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7431#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(13) = GenSym(12) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(5) = GenSym(4) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(13) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(5),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(5),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{Float64}

---- dual, dual ----

Variables:
  d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##xs#7770::Tuple{Int64}
  ######T#7568#7768#7771::Type{Float64}
  ######T#7569#7769#7772::Type{Float64}
  ##a#7773::Float64
  ####G#7427#7774::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#6995#7001#7428#7775::Tuple{Type{Float64},Type{Float64}}
  ##########tup#6996#6998#7002#7429#7776::Tuple{}
  ##########x#6997#6999#7003#7430#7777::Float64
  ########_var0#7000#7004#7431#7778::Tuple{}
  ########tup#6996#7206#7210#7779::Tuple{}
  ########x#6997#7207#7211#7780::Float64
  ######_var0#7208#7212#7781::Tuple{}
  ########types#7098#7209#7213#7782::Tuple{Type{Float64}}
  ##xs#7783::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 109:
      GenSym(14) = (top(getfield))((top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:invd)::Distributions.Gamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.InverseGamma{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/inversegamma.jl, line 110:
      unless t::Int64 === 0::Bool goto 0
      GenSym(3) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,0.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,0.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)(1.0,(top(getfield))(GenSym(3),:re)::Float64))), :((top(getfield))(GenSym(3),:im)::Float64)))
      0: 
      GenSym(11) = ($(Expr(:new, Complex{Int64}, :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:re)::Bool))))), :((Base.box)(Int64,(Base.neg_int)((Base.box)(Int64,(Base.zext_int)(Int64,(top(getfield))(Distributions.im,:im)::Bool))))))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7208#7212#7781 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7208#7212#7781 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(12) = 2.0 * $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(11),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(11),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7773 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7773::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7773::Float64,0)::Float64
      ####G#7427#7774 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7000#7004#7431#7778 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7000#7004#7431#7778 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(13) = GenSym(12) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7773::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(4) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,-4.0,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,-4.0),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64))) * b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(5) = GenSym(4) * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ######T#7569#7769#7772 = Float64
      ######T#7568#7768#7771 = Float64
      return GenSym(13) * (Distributions.besselk)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.sqrt)($(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(5),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(5),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))))::UNION{})::UNION{}::UNION{}
  end::Complex{Float64}




