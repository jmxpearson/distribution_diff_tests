____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7095::Tuple{Type{Float64}}
  ##a1#7096::Float64
  ##a2#7097::Float64
  ######a#7070#7074#7098::Tuple{}
  ######b#7071#7075#7099::Tuple{}
  ######afactor#7072#7076#7100::Float64
  ######bfactor#7073#7077#7101::Float64
  ####_var0#7078#7102::Tuple{}
  ##a1#7103::Float64
  ##a2#7104::Float64
  ##div_a#7105::Float64
  ####afactor#7087#7106::Float64
  ####bfactor#7088#7107::Float64
  ########a#7070#7081#7089#7108::Tuple{}
  ########b#7071#7082#7090#7109::Tuple{}
  ########afactor#7072#7083#7091#7110::Float64
  ########bfactor#7073#7084#7092#7111::Float64
  ######_var0#7085#7093#7112::Tuple{}
  ######types#7086#7094#7113::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7096 = GenSym(3)
      ##a2#7097 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7102 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7078#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7096::Float64,##a2#7097::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7103 = GenSym(6)
      ##a2#7104 = GenSym(7)
      ##div_a#7105 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7103::Float64,##a2#7104::Float64))
      ####afactor#7087#7106 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7104::Float64))
      ####bfactor#7088#7107 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7103::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7104::Float64,##a2#7104::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7112 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7085#7093#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7105::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8)
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7095::Tuple{Type{Float64}}
  ##a1#7096::Float64
  ##a2#7097::Float64
  ######a#7070#7074#7098::Tuple{}
  ######b#7071#7075#7099::Tuple{}
  ######afactor#7072#7076#7100::Float64
  ######bfactor#7073#7077#7101::Float64
  ####_var0#7078#7102::Tuple{}
  ##a1#7103::Float64
  ##a2#7104::Float64
  ##div_a#7105::Float64
  ####afactor#7087#7106::Float64
  ####bfactor#7088#7107::Float64
  ########a#7070#7081#7089#7108::Tuple{}
  ########b#7071#7082#7090#7109::Tuple{}
  ########afactor#7072#7083#7091#7110::Float64
  ########bfactor#7073#7084#7092#7111::Float64
  ######_var0#7085#7093#7112::Tuple{}
  ######types#7086#7094#7113::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7096 = GenSym(3)
      ##a2#7097 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7102 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7078#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7096::Float64,##a2#7097::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7103 = GenSym(6)
      ##a2#7104 = GenSym(7)
      ##div_a#7105 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7103::Float64,##a2#7104::Float64))
      ####afactor#7087#7106 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7104::Float64))
      ####bfactor#7088#7107 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7103::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7104::Float64,##a2#7104::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7112 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7085#7093#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7105::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7095::Tuple{Type{Float64}}
  ##a1#7096::Float64
  ##a2#7097::Float64
  ######a#7070#7074#7098::Tuple{}
  ######b#7071#7075#7099::Tuple{}
  ######afactor#7072#7076#7100::Float64
  ######bfactor#7073#7077#7101::Float64
  ####_var0#7078#7102::Tuple{}
  ##a1#7103::Float64
  ##a2#7104::Float64
  ##div_a#7105::Float64
  ####afactor#7087#7106::Float64
  ####bfactor#7088#7107::Float64
  ########a#7070#7081#7089#7108::Tuple{}
  ########b#7071#7082#7090#7109::Tuple{}
  ########afactor#7072#7083#7091#7110::Float64
  ########bfactor#7073#7084#7092#7111::Float64
  ######_var0#7085#7093#7112::Tuple{}
  ######types#7086#7094#7113::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7096 = GenSym(3)
      ##a2#7097 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7102 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7078#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7096::Float64,##a2#7097::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7103 = GenSym(6)
      ##a2#7104 = GenSym(7)
      ##div_a#7105 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7103::Float64,##a2#7104::Float64))
      ####afactor#7087#7106 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7104::Float64))
      ####bfactor#7088#7107 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7103::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7104::Float64,##a2#7104::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7112 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7085#7093#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7105::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7095::Tuple{Type{Float64}}
  ##a1#7096::Float64
  ##a2#7097::Float64
  ######a#7070#7074#7098::Tuple{}
  ######b#7071#7075#7099::Tuple{}
  ######afactor#7072#7076#7100::Float64
  ######bfactor#7073#7077#7101::Float64
  ####_var0#7078#7102::Tuple{}
  ##a1#7103::Float64
  ##a2#7104::Float64
  ##div_a#7105::Float64
  ####afactor#7087#7106::Float64
  ####bfactor#7088#7107::Float64
  ########a#7070#7081#7089#7108::Tuple{}
  ########b#7071#7082#7090#7109::Tuple{}
  ########afactor#7072#7083#7091#7110::Float64
  ########bfactor#7073#7084#7092#7111::Float64
  ######_var0#7085#7093#7112::Tuple{}
  ######types#7086#7094#7113::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7096 = GenSym(3)
      ##a2#7097 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7102 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7078#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7096::Float64,##a2#7097::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7103 = GenSym(6)
      ##a2#7104 = GenSym(7)
      ##div_a#7105 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7103::Float64,##a2#7104::Float64))
      ####afactor#7087#7106 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7104::Float64))
      ####bfactor#7088#7107 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7103::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7104::Float64,##a2#7104::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7112 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7085#7093#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7105::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7095::Tuple{Type{Float64}}
  ##a1#7096::Float64
  ##a2#7097::Float64
  ######a#7070#7074#7098::Tuple{}
  ######b#7071#7075#7099::Tuple{}
  ######afactor#7072#7076#7100::Float64
  ######bfactor#7073#7077#7101::Float64
  ####_var0#7078#7102::Tuple{}
  ##a1#7103::Float64
  ##a2#7104::Float64
  ##div_a#7105::Float64
  ####afactor#7087#7106::Float64
  ####bfactor#7088#7107::Float64
  ########a#7070#7081#7089#7108::Tuple{}
  ########b#7071#7082#7090#7109::Tuple{}
  ########afactor#7072#7083#7091#7110::Float64
  ########bfactor#7073#7084#7092#7111::Float64
  ######_var0#7085#7093#7112::Tuple{}
  ######types#7086#7094#7113::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 54:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13)
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7096 = GenSym(3)
      ##a2#7097 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7102 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7078#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7096::Float64,##a2#7097::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7103 = GenSym(6)
      ##a2#7104 = GenSym(7)
      ##div_a#7105 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7103::Float64,##a2#7104::Float64))
      ####afactor#7087#7106 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7104::Float64))
      ####bfactor#7088#7107 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7103::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7104::Float64,##a2#7104::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7112 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7085#7093#7112 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7105::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7138::Tuple{Type{Float64}}
  ######types#7079#7080#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7133#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7145::Tuple{}
  ##########x#7125#7127#7131#7136#7146::Float64
  ########_var0#7128#7132#7137#7147::Tuple{}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ######a#7070#7074#7150::Tuple{}
  ######b#7071#7075#7151::Tuple{}
  ######afactor#7072#7076#7152::Float64
  ######bfactor#7073#7077#7153::Float64
  ####_var0#7078#7154::Tuple{}
  ##a#7155::Float64
  ##exp_a#7156::Float64
  ##deriv#7157::Float64
  ####G#7133#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7160::Tuple{}
  ##########x#7125#7127#7131#7136#7161::Float64
  ########_var0#7128#7132#7137#7162::Tuple{}
  ##a1#7163::Float64
  ##a2#7164::Float64
  ######a#7070#7074#7165::Tuple{}
  ######b#7071#7075#7166::Tuple{}
  ######afactor#7072#7076#7167::Float64
  ######bfactor#7073#7077#7168::Float64
  ####_var0#7078#7169::Tuple{}
  ##a1#7170::Float64
  ##a2#7171::Float64
  ##div_a#7172::Float64
  ####afactor#7087#7173::Float64
  ####bfactor#7088#7174::Float64
  ########a#7070#7081#7089#7175::Tuple{}
  ########b#7071#7082#7090#7176::Tuple{}
  ########afactor#7072#7083#7091#7177::Float64
  ########bfactor#7073#7084#7092#7178::Float64
  ######_var0#7085#7093#7179::Tuple{}
  ######types#7086#7094#7180::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7155 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7156 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7157 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7162 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7163 = GenSym(7)
      ##a2#7164 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7169 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7163::Float64,##a2#7164::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7147 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7137#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7148 = GenSym(4)
      ##a2#7149 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7154 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7148::Float64,##a2#7149::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7170 = GenSym(11)
      ##a2#7171 = GenSym(12)
      ##div_a#7172 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7170::Float64,##a2#7171::Float64))
      ####afactor#7087#7173 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7171::Float64))
      ####bfactor#7088#7174 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7170::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7171::Float64,##a2#7171::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7179 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7085#7093#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7172::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7138::Tuple{Type{Float64}}
  ######types#7079#7080#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7133#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7145::Tuple{}
  ##########x#7125#7127#7131#7136#7146::Float64
  ########_var0#7128#7132#7137#7147::Tuple{}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ######a#7070#7074#7150::Tuple{}
  ######b#7071#7075#7151::Tuple{}
  ######afactor#7072#7076#7152::Float64
  ######bfactor#7073#7077#7153::Float64
  ####_var0#7078#7154::Tuple{}
  ##a#7155::Float64
  ##exp_a#7156::Float64
  ##deriv#7157::Float64
  ####G#7133#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7160::Tuple{}
  ##########x#7125#7127#7131#7136#7161::Float64
  ########_var0#7128#7132#7137#7162::Tuple{}
  ##a1#7163::Float64
  ##a2#7164::Float64
  ######a#7070#7074#7165::Tuple{}
  ######b#7071#7075#7166::Tuple{}
  ######afactor#7072#7076#7167::Float64
  ######bfactor#7073#7077#7168::Float64
  ####_var0#7078#7169::Tuple{}
  ##a1#7170::Float64
  ##a2#7171::Float64
  ##div_a#7172::Float64
  ####afactor#7087#7173::Float64
  ####bfactor#7088#7174::Float64
  ########a#7070#7081#7089#7175::Tuple{}
  ########b#7071#7082#7090#7176::Tuple{}
  ########afactor#7072#7083#7091#7177::Float64
  ########bfactor#7073#7084#7092#7178::Float64
  ######_var0#7085#7093#7179::Tuple{}
  ######types#7086#7094#7180::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7155 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7156 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7157 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7162 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7163 = GenSym(7)
      ##a2#7164 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7169 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7163::Float64,##a2#7164::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7147 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7137#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7148 = GenSym(4)
      ##a2#7149 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7154 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7148::Float64,##a2#7149::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7170 = GenSym(11)
      ##a2#7171 = GenSym(12)
      ##div_a#7172 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7170::Float64,##a2#7171::Float64))
      ####afactor#7087#7173 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7171::Float64))
      ####bfactor#7088#7174 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7170::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7171::Float64,##a2#7171::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7179 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7085#7093#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7172::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7138::Tuple{Type{Float64}}
  ######types#7079#7080#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7133#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7145::Tuple{}
  ##########x#7125#7127#7131#7136#7146::Float64
  ########_var0#7128#7132#7137#7147::Tuple{}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ######a#7070#7074#7150::Tuple{}
  ######b#7071#7075#7151::Tuple{}
  ######afactor#7072#7076#7152::Float64
  ######bfactor#7073#7077#7153::Float64
  ####_var0#7078#7154::Tuple{}
  ##a#7155::Float64
  ##exp_a#7156::Float64
  ##deriv#7157::Float64
  ####G#7133#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7160::Tuple{}
  ##########x#7125#7127#7131#7136#7161::Float64
  ########_var0#7128#7132#7137#7162::Tuple{}
  ##a1#7163::Float64
  ##a2#7164::Float64
  ######a#7070#7074#7165::Tuple{}
  ######b#7071#7075#7166::Tuple{}
  ######afactor#7072#7076#7167::Float64
  ######bfactor#7073#7077#7168::Float64
  ####_var0#7078#7169::Tuple{}
  ##a1#7170::Float64
  ##a2#7171::Float64
  ##div_a#7172::Float64
  ####afactor#7087#7173::Float64
  ####bfactor#7088#7174::Float64
  ########a#7070#7081#7089#7175::Tuple{}
  ########b#7071#7082#7090#7176::Tuple{}
  ########afactor#7072#7083#7091#7177::Float64
  ########bfactor#7073#7084#7092#7178::Float64
  ######_var0#7085#7093#7179::Tuple{}
  ######types#7086#7094#7180::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7155 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7156 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7157 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7162 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7163 = GenSym(7)
      ##a2#7164 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7169 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7163::Float64,##a2#7164::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7147 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7137#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7148 = GenSym(4)
      ##a2#7149 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7154 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7148::Float64,##a2#7149::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7170 = GenSym(11)
      ##a2#7171 = GenSym(12)
      ##div_a#7172 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7170::Float64,##a2#7171::Float64))
      ####afactor#7087#7173 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7171::Float64))
      ####bfactor#7088#7174 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7170::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7171::Float64,##a2#7171::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7179 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7085#7093#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7172::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7138::Tuple{Type{Float64}}
  ######types#7079#7080#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7133#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7145::Tuple{}
  ##########x#7125#7127#7131#7136#7146::Float64
  ########_var0#7128#7132#7137#7147::Tuple{}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ######a#7070#7074#7150::Tuple{}
  ######b#7071#7075#7151::Tuple{}
  ######afactor#7072#7076#7152::Float64
  ######bfactor#7073#7077#7153::Float64
  ####_var0#7078#7154::Tuple{}
  ##a#7155::Float64
  ##exp_a#7156::Float64
  ##deriv#7157::Float64
  ####G#7133#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7160::Tuple{}
  ##########x#7125#7127#7131#7136#7161::Float64
  ########_var0#7128#7132#7137#7162::Tuple{}
  ##a1#7163::Float64
  ##a2#7164::Float64
  ######a#7070#7074#7165::Tuple{}
  ######b#7071#7075#7166::Tuple{}
  ######afactor#7072#7076#7167::Float64
  ######bfactor#7073#7077#7168::Float64
  ####_var0#7078#7169::Tuple{}
  ##a1#7170::Float64
  ##a2#7171::Float64
  ##div_a#7172::Float64
  ####afactor#7087#7173::Float64
  ####bfactor#7088#7174::Float64
  ########a#7070#7081#7089#7175::Tuple{}
  ########b#7071#7082#7090#7176::Tuple{}
  ########afactor#7072#7083#7091#7177::Float64
  ########bfactor#7073#7084#7092#7178::Float64
  ######_var0#7085#7093#7179::Tuple{}
  ######types#7086#7094#7180::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7155 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7156 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7157 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7162 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7163 = GenSym(7)
      ##a2#7164 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7169 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7163::Float64,##a2#7164::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7147 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7137#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7148 = GenSym(4)
      ##a2#7149 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7154 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7148::Float64,##a2#7149::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7170 = GenSym(11)
      ##a2#7171 = GenSym(12)
      ##div_a#7172 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7170::Float64,##a2#7171::Float64))
      ####afactor#7087#7173 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7171::Float64))
      ####bfactor#7088#7174 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7170::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7171::Float64,##a2#7171::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7179 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7085#7093#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7172::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7079#7080#7138::Tuple{Type{Float64}}
  ######types#7079#7080#7139::Tuple{Type{Float64}}
  ##a#7140::Float64
  ##exp_a#7141::Float64
  ##deriv#7142::Float64
  ####G#7133#7143::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7144::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7145::Tuple{}
  ##########x#7125#7127#7131#7136#7146::Float64
  ########_var0#7128#7132#7137#7147::Tuple{}
  ##a1#7148::Float64
  ##a2#7149::Float64
  ######a#7070#7074#7150::Tuple{}
  ######b#7071#7075#7151::Tuple{}
  ######afactor#7072#7076#7152::Float64
  ######bfactor#7073#7077#7153::Float64
  ####_var0#7078#7154::Tuple{}
  ##a#7155::Float64
  ##exp_a#7156::Float64
  ##deriv#7157::Float64
  ####G#7133#7158::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7159::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7160::Tuple{}
  ##########x#7125#7127#7131#7136#7161::Float64
  ########_var0#7128#7132#7137#7162::Tuple{}
  ##a1#7163::Float64
  ##a2#7164::Float64
  ######a#7070#7074#7165::Tuple{}
  ######b#7071#7075#7166::Tuple{}
  ######afactor#7072#7076#7167::Float64
  ######bfactor#7073#7077#7168::Float64
  ####_var0#7078#7169::Tuple{}
  ##a1#7170::Float64
  ##a2#7171::Float64
  ##div_a#7172::Float64
  ####afactor#7087#7173::Float64
  ####bfactor#7088#7174::Float64
  ########a#7070#7081#7089#7175::Tuple{}
  ########b#7071#7082#7090#7176::Tuple{}
  ########afactor#7072#7083#7091#7177::Float64
  ########bfactor#7073#7084#7092#7178::Float64
  ######_var0#7085#7093#7179::Tuple{}
  ######types#7086#7094#7180::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 60:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7155 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7156 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7157 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7155::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7158 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7162 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7162 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7156::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7163 = GenSym(7)
      ##a2#7164 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7169 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7163::Float64,##a2#7164::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7140 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7141 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7142 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7140::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7143 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7147 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7137#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7141::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7148 = GenSym(4)
      ##a2#7149 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7154 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7154 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7148::Float64,##a2#7149::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7170 = GenSym(11)
      ##a2#7171 = GenSym(12)
      ##div_a#7172 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7170::Float64,##a2#7171::Float64))
      ####afactor#7087#7173 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7171::Float64))
      ####bfactor#7088#7174 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7170::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7171::Float64,##a2#7171::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7179 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7085#7093#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7172::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7191::Float64
  ##div_a#7192::Float64
  ##deriv#7193::Float64
  ####G#7181#7194::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7195::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7196::Tuple{}
  ##########x#7125#7127#7131#7184#7197::Float64
  ########_var0#7128#7132#7185#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7186#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7187#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7188#7204::Tuple{}
  ##########x#7125#7127#7131#7189#7205::Float64
  ########_var0#7128#7132#7190#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7070#7074#7209::Tuple{}
  ######b#7071#7075#7210::Tuple{}
  ######afactor#7072#7076#7211::Float64
  ######bfactor#7073#7077#7212::Float64
  ####_var0#7078#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7191 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7192 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7191::Float64))
      ##deriv#7193 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7192::Float64,##a#7191::Float64))))
      ####G#7181#7194 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7198 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7192::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7199 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7199::Float64,0)::Float64
      ##exp_a#7200 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7199::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7200::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7186#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7190#7206 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7190#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7207 = GenSym(10)
      ##a2#7208 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7213 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7191::Float64
  ##div_a#7192::Float64
  ##deriv#7193::Float64
  ####G#7181#7194::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7195::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7196::Tuple{}
  ##########x#7125#7127#7131#7184#7197::Float64
  ########_var0#7128#7132#7185#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7186#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7187#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7188#7204::Tuple{}
  ##########x#7125#7127#7131#7189#7205::Float64
  ########_var0#7128#7132#7190#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7070#7074#7209::Tuple{}
  ######b#7071#7075#7210::Tuple{}
  ######afactor#7072#7076#7211::Float64
  ######bfactor#7073#7077#7212::Float64
  ####_var0#7078#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7191 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7192 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7191::Float64))
      ##deriv#7193 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7192::Float64,##a#7191::Float64))))
      ####G#7181#7194 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7198 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7192::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7199 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7199::Float64,0)::Float64
      ##exp_a#7200 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7199::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7200::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7186#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7190#7206 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7190#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7207 = GenSym(10)
      ##a2#7208 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7213 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7191::Float64
  ##div_a#7192::Float64
  ##deriv#7193::Float64
  ####G#7181#7194::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7195::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7196::Tuple{}
  ##########x#7125#7127#7131#7184#7197::Float64
  ########_var0#7128#7132#7185#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7186#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7187#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7188#7204::Tuple{}
  ##########x#7125#7127#7131#7189#7205::Float64
  ########_var0#7128#7132#7190#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7070#7074#7209::Tuple{}
  ######b#7071#7075#7210::Tuple{}
  ######afactor#7072#7076#7211::Float64
  ######bfactor#7073#7077#7212::Float64
  ####_var0#7078#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7191 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7192 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7191::Float64))
      ##deriv#7193 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7192::Float64,##a#7191::Float64))))
      ####G#7181#7194 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7198 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7192::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7199 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7199::Float64,0)::Float64
      ##exp_a#7200 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7199::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7200::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7186#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7190#7206 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7190#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7207 = GenSym(10)
      ##a2#7208 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7213 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7191::Float64
  ##div_a#7192::Float64
  ##deriv#7193::Float64
  ####G#7181#7194::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7195::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7196::Tuple{}
  ##########x#7125#7127#7131#7184#7197::Float64
  ########_var0#7128#7132#7185#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7186#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7187#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7188#7204::Tuple{}
  ##########x#7125#7127#7131#7189#7205::Float64
  ########_var0#7128#7132#7190#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7070#7074#7209::Tuple{}
  ######b#7071#7075#7210::Tuple{}
  ######afactor#7072#7076#7211::Float64
  ######bfactor#7073#7077#7212::Float64
  ####_var0#7078#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7191 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7192 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7191::Float64))
      ##deriv#7193 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7192::Float64,##a#7191::Float64))))
      ####G#7181#7194 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7198 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7192::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7199 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7199::Float64,0)::Float64
      ##exp_a#7200 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7199::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7200::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7186#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7190#7206 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7190#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7207 = GenSym(10)
      ##a2#7208 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7213 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7191::Float64
  ##div_a#7192::Float64
  ##deriv#7193::Float64
  ####G#7181#7194::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7195::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7196::Tuple{}
  ##########x#7125#7127#7131#7184#7197::Float64
  ########_var0#7128#7132#7185#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7186#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7187#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7188#7204::Tuple{}
  ##########x#7125#7127#7131#7189#7205::Float64
  ########_var0#7128#7132#7190#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7070#7074#7209::Tuple{}
  ######b#7071#7075#7210::Tuple{}
  ######afactor#7072#7076#7211::Float64
  ######bfactor#7073#7077#7212::Float64
  ####_var0#7078#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7191 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7192 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7191::Float64))
      ##deriv#7193 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7192::Float64,##a#7191::Float64))))
      ####G#7181#7194 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7198 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7192::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7199 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7199::Float64,0)::Float64
      ##exp_a#7200 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7199::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7200::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7186#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7190#7206 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7190#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7207 = GenSym(10)
      ##a2#7208 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7213 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7078#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7087#7235::Float64
  ####bfactor#7088#7236::Float64
  ########a#7070#7081#7089#7237::Tuple{}
  ########b#7071#7082#7090#7238::Tuple{}
  ########afactor#7072#7083#7091#7239::Float64
  ########bfactor#7073#7084#7092#7240::Float64
  ######_var0#7085#7093#7241::Tuple{}
  ######types#7086#7094#7242::Tuple{Type{Float64}}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7226#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7227#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7228#7247::Tuple{}
  ##########x#7125#7127#7131#7229#7248::Float64
  ########_var0#7128#7132#7230#7249::Tuple{}
  ######types#7079#7080#7250::Tuple{Type{Float64}}
  ########types#7079#7216#7217#7251::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7252::Tuple{}
  ########x#7125#7219#7223#7253::Float64
  ######_var0#7220#7224#7254::Tuple{}
  ########types#7079#7221#7225#7255::Tuple{Type{Float64}}
  ##a1#7256::Float64
  ##a2#7257::Float64
  ##div_a#7258::Float64
  ####afactor#7087#7259::Float64
  ####bfactor#7088#7260::Float64
  ########a#7070#7081#7089#7261::Tuple{}
  ########b#7071#7082#7090#7262::Tuple{}
  ########afactor#7072#7083#7091#7263::Float64
  ########bfactor#7073#7084#7092#7264::Float64
  ######_var0#7085#7093#7265::Tuple{}
  ######types#7086#7094#7266::Tuple{Type{Float64}}
  ##a1#7267::Float64
  ##a2#7268::Float64
  ######a#7070#7074#7269::Tuple{}
  ######b#7071#7075#7270::Tuple{}
  ######afactor#7072#7076#7271::Float64
  ######bfactor#7073#7077#7272::Float64
  ####_var0#7078#7273::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7254 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7220#7224#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7256 = GenSym(3)
      ##a2#7257 = GenSym(4)
      ##div_a#7258 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7256::Float64,##a2#7257::Float64))
      ####afactor#7087#7259 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7257::Float64))
      ####bfactor#7088#7260 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7256::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7257::Float64,##a2#7257::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7265 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7085#7093#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7258::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(0)
      ##a2#7233 = GenSym(1)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7087#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7088#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7241 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7085#7093#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7226#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7230#7249 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7230#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7267 = GenSym(7)
      ##a2#7268 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7273 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7267::Float64,##a2#7268::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7087#7235::Float64
  ####bfactor#7088#7236::Float64
  ########a#7070#7081#7089#7237::Tuple{}
  ########b#7071#7082#7090#7238::Tuple{}
  ########afactor#7072#7083#7091#7239::Float64
  ########bfactor#7073#7084#7092#7240::Float64
  ######_var0#7085#7093#7241::Tuple{}
  ######types#7086#7094#7242::Tuple{Type{Float64}}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7226#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7227#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7228#7247::Tuple{}
  ##########x#7125#7127#7131#7229#7248::Float64
  ########_var0#7128#7132#7230#7249::Tuple{}
  ######types#7079#7080#7250::Tuple{Type{Float64}}
  ########types#7079#7216#7217#7251::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7252::Tuple{}
  ########x#7125#7219#7223#7253::Float64
  ######_var0#7220#7224#7254::Tuple{}
  ########types#7079#7221#7225#7255::Tuple{Type{Float64}}
  ##a1#7256::Float64
  ##a2#7257::Float64
  ##div_a#7258::Float64
  ####afactor#7087#7259::Float64
  ####bfactor#7088#7260::Float64
  ########a#7070#7081#7089#7261::Tuple{}
  ########b#7071#7082#7090#7262::Tuple{}
  ########afactor#7072#7083#7091#7263::Float64
  ########bfactor#7073#7084#7092#7264::Float64
  ######_var0#7085#7093#7265::Tuple{}
  ######types#7086#7094#7266::Tuple{Type{Float64}}
  ##a1#7267::Float64
  ##a2#7268::Float64
  ######a#7070#7074#7269::Tuple{}
  ######b#7071#7075#7270::Tuple{}
  ######afactor#7072#7076#7271::Float64
  ######bfactor#7073#7077#7272::Float64
  ####_var0#7078#7273::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7254 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7220#7224#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7256 = GenSym(3)
      ##a2#7257 = GenSym(4)
      ##div_a#7258 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7256::Float64,##a2#7257::Float64))
      ####afactor#7087#7259 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7257::Float64))
      ####bfactor#7088#7260 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7256::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7257::Float64,##a2#7257::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7265 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7085#7093#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7258::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(0)
      ##a2#7233 = GenSym(1)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7087#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7088#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7241 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7085#7093#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7226#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7230#7249 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7230#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7267 = GenSym(7)
      ##a2#7268 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7273 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7267::Float64,##a2#7268::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7087#7235::Float64
  ####bfactor#7088#7236::Float64
  ########a#7070#7081#7089#7237::Tuple{}
  ########b#7071#7082#7090#7238::Tuple{}
  ########afactor#7072#7083#7091#7239::Float64
  ########bfactor#7073#7084#7092#7240::Float64
  ######_var0#7085#7093#7241::Tuple{}
  ######types#7086#7094#7242::Tuple{Type{Float64}}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7226#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7227#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7228#7247::Tuple{}
  ##########x#7125#7127#7131#7229#7248::Float64
  ########_var0#7128#7132#7230#7249::Tuple{}
  ######types#7079#7080#7250::Tuple{Type{Float64}}
  ########types#7079#7216#7217#7251::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7252::Tuple{}
  ########x#7125#7219#7223#7253::Float64
  ######_var0#7220#7224#7254::Tuple{}
  ########types#7079#7221#7225#7255::Tuple{Type{Float64}}
  ##a1#7256::Float64
  ##a2#7257::Float64
  ##div_a#7258::Float64
  ####afactor#7087#7259::Float64
  ####bfactor#7088#7260::Float64
  ########a#7070#7081#7089#7261::Tuple{}
  ########b#7071#7082#7090#7262::Tuple{}
  ########afactor#7072#7083#7091#7263::Float64
  ########bfactor#7073#7084#7092#7264::Float64
  ######_var0#7085#7093#7265::Tuple{}
  ######types#7086#7094#7266::Tuple{Type{Float64}}
  ##a1#7267::Float64
  ##a2#7268::Float64
  ######a#7070#7074#7269::Tuple{}
  ######b#7071#7075#7270::Tuple{}
  ######afactor#7072#7076#7271::Float64
  ######bfactor#7073#7077#7272::Float64
  ####_var0#7078#7273::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7254 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7220#7224#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7256 = GenSym(3)
      ##a2#7257 = GenSym(4)
      ##div_a#7258 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7256::Float64,##a2#7257::Float64))
      ####afactor#7087#7259 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7257::Float64))
      ####bfactor#7088#7260 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7256::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7257::Float64,##a2#7257::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7265 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7085#7093#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7258::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(0)
      ##a2#7233 = GenSym(1)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7087#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7088#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7241 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7085#7093#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7226#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7230#7249 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7230#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7267 = GenSym(7)
      ##a2#7268 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7273 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7267::Float64,##a2#7268::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7087#7235::Float64
  ####bfactor#7088#7236::Float64
  ########a#7070#7081#7089#7237::Tuple{}
  ########b#7071#7082#7090#7238::Tuple{}
  ########afactor#7072#7083#7091#7239::Float64
  ########bfactor#7073#7084#7092#7240::Float64
  ######_var0#7085#7093#7241::Tuple{}
  ######types#7086#7094#7242::Tuple{Type{Float64}}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7226#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7227#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7228#7247::Tuple{}
  ##########x#7125#7127#7131#7229#7248::Float64
  ########_var0#7128#7132#7230#7249::Tuple{}
  ######types#7079#7080#7250::Tuple{Type{Float64}}
  ########types#7079#7216#7217#7251::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7252::Tuple{}
  ########x#7125#7219#7223#7253::Float64
  ######_var0#7220#7224#7254::Tuple{}
  ########types#7079#7221#7225#7255::Tuple{Type{Float64}}
  ##a1#7256::Float64
  ##a2#7257::Float64
  ##div_a#7258::Float64
  ####afactor#7087#7259::Float64
  ####bfactor#7088#7260::Float64
  ########a#7070#7081#7089#7261::Tuple{}
  ########b#7071#7082#7090#7262::Tuple{}
  ########afactor#7072#7083#7091#7263::Float64
  ########bfactor#7073#7084#7092#7264::Float64
  ######_var0#7085#7093#7265::Tuple{}
  ######types#7086#7094#7266::Tuple{Type{Float64}}
  ##a1#7267::Float64
  ##a2#7268::Float64
  ######a#7070#7074#7269::Tuple{}
  ######b#7071#7075#7270::Tuple{}
  ######afactor#7072#7076#7271::Float64
  ######bfactor#7073#7077#7272::Float64
  ####_var0#7078#7273::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7254 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7220#7224#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7256 = GenSym(3)
      ##a2#7257 = GenSym(4)
      ##div_a#7258 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7256::Float64,##a2#7257::Float64))
      ####afactor#7087#7259 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7257::Float64))
      ####bfactor#7088#7260 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7256::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7257::Float64,##a2#7257::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7265 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7085#7093#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7258::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(0)
      ##a2#7233 = GenSym(1)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7087#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7088#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7241 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7085#7093#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7226#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7230#7249 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7230#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7267 = GenSym(7)
      ##a2#7268 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7273 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7267::Float64,##a2#7268::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7087#7235::Float64
  ####bfactor#7088#7236::Float64
  ########a#7070#7081#7089#7237::Tuple{}
  ########b#7071#7082#7090#7238::Tuple{}
  ########afactor#7072#7083#7091#7239::Float64
  ########bfactor#7073#7084#7092#7240::Float64
  ######_var0#7085#7093#7241::Tuple{}
  ######types#7086#7094#7242::Tuple{Type{Float64}}
  ##sqrt_a#7243::Float64
  ##deriv#7244::Float64
  ####G#7226#7245::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7227#7246::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7228#7247::Tuple{}
  ##########x#7125#7127#7131#7229#7248::Float64
  ########_var0#7128#7132#7230#7249::Tuple{}
  ######types#7079#7080#7250::Tuple{Type{Float64}}
  ########types#7079#7216#7217#7251::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7252::Tuple{}
  ########x#7125#7219#7223#7253::Float64
  ######_var0#7220#7224#7254::Tuple{}
  ########types#7079#7221#7225#7255::Tuple{Type{Float64}}
  ##a1#7256::Float64
  ##a2#7257::Float64
  ##div_a#7258::Float64
  ####afactor#7087#7259::Float64
  ####bfactor#7088#7260::Float64
  ########a#7070#7081#7089#7261::Tuple{}
  ########b#7071#7082#7090#7262::Tuple{}
  ########afactor#7072#7083#7091#7263::Float64
  ########bfactor#7073#7084#7092#7264::Float64
  ######_var0#7085#7093#7265::Tuple{}
  ######types#7086#7094#7266::Tuple{Type{Float64}}
  ##a1#7267::Float64
  ##a2#7268::Float64
  ######a#7070#7074#7269::Tuple{}
  ######b#7071#7075#7270::Tuple{}
  ######afactor#7072#7076#7271::Float64
  ######bfactor#7073#7077#7272::Float64
  ####_var0#7078#7273::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 64:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 65:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7254 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7220#7224#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7256 = GenSym(3)
      ##a2#7257 = GenSym(4)
      ##div_a#7258 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7256::Float64,##a2#7257::Float64))
      ####afactor#7087#7259 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7257::Float64))
      ####bfactor#7088#7260 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7256::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7257::Float64,##a2#7257::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7265 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7085#7093#7265 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7258::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(0)
      ##a2#7233 = GenSym(1)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7087#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7088#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7241 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7085#7093#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7243 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7244 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7243::Float64))
      ####G#7226#7245 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7230#7249 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7230#7249 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7243::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7267 = GenSym(7)
      ##a2#7268 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7273 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7078#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7267::Float64,##a2#7268::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7274::Tuple{}
  ##xs#7275::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7274::Tuple{}
  ##xs#7275::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7300::Tuple{Type{Float64}}
  ######types#7079#7080#7301::Tuple{Type{Float64}}
  ##xs#7302::Tuple{}
  ####a1#7286#7303::Float64
  ####a2#7287#7304::Float64
  ########a#7070#7074#7288#7305::Tuple{}
  ########b#7071#7075#7289#7306::Tuple{}
  ########afactor#7072#7076#7290#7307::Float64
  ########bfactor#7073#7077#7291#7308::Float64
  ######_var0#7078#7292#7309::Tuple{}
  ####a1#7293#7310::Float64
  ####a2#7294#7311::Float64
  ########a#7070#7074#7295#7312::Tuple{}
  ########b#7071#7075#7296#7313::Tuple{}
  ########afactor#7072#7076#7297#7314::Float64
  ########bfactor#7073#7077#7298#7315::Float64
  ######_var0#7078#7299#7316::Tuple{}
  ########tup#7124#7218#7222#7317::Tuple{}
  ########x#7125#7219#7223#7318::Float64
  ######_var0#7220#7224#7319::Tuple{}
  ########types#7079#7221#7225#7320::Tuple{Type{Float64}}
  ##a#7321::Float64
  ##exp_a#7322::Float64
  ##deriv#7323::Float64
  ####G#7133#7324::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7325::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7326::Tuple{}
  ##########x#7125#7127#7131#7136#7327::Float64
  ########_var0#7128#7132#7137#7328::Tuple{}
  ##a#7329::Float64
  ##exp_a#7330::Float64
  ##deriv#7331::Float64
  ####G#7133#7332::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7333::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7334::Tuple{}
  ##########x#7125#7127#7131#7136#7335::Float64
  ########_var0#7128#7132#7137#7336::Tuple{}
  ######a#7276#7278#7337::Tuple{}
  ######b#7277#7279#7338::Tuple{}
  ####_var0#7280#7339::Tuple{}
  ######a#7281#7283#7340::Tuple{}
  ######b#7282#7284#7341::Tuple{}
  ####_var0#7285#7342::Tuple{}
  ######types#7079#7080#7343::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7344::Tuple{}
  ########x#7125#7219#7223#7345::Float64
  ######_var0#7220#7224#7346::Tuple{}
  ########types#7079#7221#7225#7347::Tuple{Type{Float64}}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ##div_a#7350::Float64
  ####afactor#7087#7351::Float64
  ####bfactor#7088#7352::Float64
  ########a#7070#7081#7089#7353::Tuple{}
  ########b#7071#7082#7090#7354::Tuple{}
  ########afactor#7072#7083#7091#7355::Float64
  ########bfactor#7073#7084#7092#7356::Float64
  ######_var0#7085#7093#7357::Tuple{}
  ######types#7086#7094#7358::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7329 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7330 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7331 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7133#7332 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7336 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7330::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7321 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7322 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7323 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7324 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7328 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7128#7132#7137#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7322::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7280#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7280#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7319 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7220#7224#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7285#7342 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7285#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7346 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7220#7224#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7286#7303 = GenSym(0)
      ####a2#7287#7304 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7292#7309 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7078#7292#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7286#7303::Float64,####a2#7287#7304::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7293#7310 = GenSym(3)
      ####a2#7294#7311 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7299#7316 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7078#7299#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7293#7310::Float64,####a2#7294#7311::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7348 = GenSym(9)
      ##a2#7349 = GenSym(10)
      ##div_a#7350 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7348::Float64,##a2#7349::Float64))
      ####afactor#7087#7351 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7349::Float64))
      ####bfactor#7088#7352 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7348::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7349::Float64,##a2#7349::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7357 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7085#7093#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7350::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7274::Tuple{}
  ##xs#7275::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7274::Tuple{}
  ##xs#7275::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7300::Tuple{Type{Float64}}
  ######types#7079#7080#7301::Tuple{Type{Float64}}
  ##xs#7302::Tuple{}
  ####a1#7286#7303::Float64
  ####a2#7287#7304::Float64
  ########a#7070#7074#7288#7305::Tuple{}
  ########b#7071#7075#7289#7306::Tuple{}
  ########afactor#7072#7076#7290#7307::Float64
  ########bfactor#7073#7077#7291#7308::Float64
  ######_var0#7078#7292#7309::Tuple{}
  ####a1#7293#7310::Float64
  ####a2#7294#7311::Float64
  ########a#7070#7074#7295#7312::Tuple{}
  ########b#7071#7075#7296#7313::Tuple{}
  ########afactor#7072#7076#7297#7314::Float64
  ########bfactor#7073#7077#7298#7315::Float64
  ######_var0#7078#7299#7316::Tuple{}
  ########tup#7124#7218#7222#7317::Tuple{}
  ########x#7125#7219#7223#7318::Float64
  ######_var0#7220#7224#7319::Tuple{}
  ########types#7079#7221#7225#7320::Tuple{Type{Float64}}
  ##a#7321::Float64
  ##exp_a#7322::Float64
  ##deriv#7323::Float64
  ####G#7133#7324::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7325::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7326::Tuple{}
  ##########x#7125#7127#7131#7136#7327::Float64
  ########_var0#7128#7132#7137#7328::Tuple{}
  ##a#7329::Float64
  ##exp_a#7330::Float64
  ##deriv#7331::Float64
  ####G#7133#7332::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7333::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7334::Tuple{}
  ##########x#7125#7127#7131#7136#7335::Float64
  ########_var0#7128#7132#7137#7336::Tuple{}
  ######a#7276#7278#7337::Tuple{}
  ######b#7277#7279#7338::Tuple{}
  ####_var0#7280#7339::Tuple{}
  ######a#7281#7283#7340::Tuple{}
  ######b#7282#7284#7341::Tuple{}
  ####_var0#7285#7342::Tuple{}
  ######types#7079#7080#7343::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7344::Tuple{}
  ########x#7125#7219#7223#7345::Float64
  ######_var0#7220#7224#7346::Tuple{}
  ########types#7079#7221#7225#7347::Tuple{Type{Float64}}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ##div_a#7350::Float64
  ####afactor#7087#7351::Float64
  ####bfactor#7088#7352::Float64
  ########a#7070#7081#7089#7353::Tuple{}
  ########b#7071#7082#7090#7354::Tuple{}
  ########afactor#7072#7083#7091#7355::Float64
  ########bfactor#7073#7084#7092#7356::Float64
  ######_var0#7085#7093#7357::Tuple{}
  ######types#7086#7094#7358::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7329 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7330 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7331 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7133#7332 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7336 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7330::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7321 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7322 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7323 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7324 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7328 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7128#7132#7137#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7322::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7280#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7280#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7319 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7220#7224#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7285#7342 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7285#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7346 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7220#7224#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7286#7303 = GenSym(0)
      ####a2#7287#7304 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7292#7309 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7078#7292#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7286#7303::Float64,####a2#7287#7304::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7293#7310 = GenSym(3)
      ####a2#7294#7311 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7299#7316 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7078#7299#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7293#7310::Float64,####a2#7294#7311::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7348 = GenSym(9)
      ##a2#7349 = GenSym(10)
      ##div_a#7350 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7348::Float64,##a2#7349::Float64))
      ####afactor#7087#7351 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7349::Float64))
      ####bfactor#7088#7352 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7348::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7349::Float64,##a2#7349::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7357 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7085#7093#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7350::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7300::Tuple{Type{Float64}}
  ######types#7079#7080#7301::Tuple{Type{Float64}}
  ##xs#7302::Tuple{}
  ####a1#7286#7303::Float64
  ####a2#7287#7304::Float64
  ########a#7070#7074#7288#7305::Tuple{}
  ########b#7071#7075#7289#7306::Tuple{}
  ########afactor#7072#7076#7290#7307::Float64
  ########bfactor#7073#7077#7291#7308::Float64
  ######_var0#7078#7292#7309::Tuple{}
  ####a1#7293#7310::Float64
  ####a2#7294#7311::Float64
  ########a#7070#7074#7295#7312::Tuple{}
  ########b#7071#7075#7296#7313::Tuple{}
  ########afactor#7072#7076#7297#7314::Float64
  ########bfactor#7073#7077#7298#7315::Float64
  ######_var0#7078#7299#7316::Tuple{}
  ########tup#7124#7218#7222#7317::Tuple{}
  ########x#7125#7219#7223#7318::Float64
  ######_var0#7220#7224#7319::Tuple{}
  ########types#7079#7221#7225#7320::Tuple{Type{Float64}}
  ##a#7321::Float64
  ##exp_a#7322::Float64
  ##deriv#7323::Float64
  ####G#7133#7324::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7325::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7326::Tuple{}
  ##########x#7125#7127#7131#7136#7327::Float64
  ########_var0#7128#7132#7137#7328::Tuple{}
  ##a#7329::Float64
  ##exp_a#7330::Float64
  ##deriv#7331::Float64
  ####G#7133#7332::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7333::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7334::Tuple{}
  ##########x#7125#7127#7131#7136#7335::Float64
  ########_var0#7128#7132#7137#7336::Tuple{}
  ######a#7276#7278#7337::Tuple{}
  ######b#7277#7279#7338::Tuple{}
  ####_var0#7280#7339::Tuple{}
  ######a#7281#7283#7340::Tuple{}
  ######b#7282#7284#7341::Tuple{}
  ####_var0#7285#7342::Tuple{}
  ######types#7079#7080#7343::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7344::Tuple{}
  ########x#7125#7219#7223#7345::Float64
  ######_var0#7220#7224#7346::Tuple{}
  ########types#7079#7221#7225#7347::Tuple{Type{Float64}}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ##div_a#7350::Float64
  ####afactor#7087#7351::Float64
  ####bfactor#7088#7352::Float64
  ########a#7070#7081#7089#7353::Tuple{}
  ########b#7071#7082#7090#7354::Tuple{}
  ########afactor#7072#7083#7091#7355::Float64
  ########bfactor#7073#7084#7092#7356::Float64
  ######_var0#7085#7093#7357::Tuple{}
  ######types#7086#7094#7358::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7329 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7330 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7331 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7133#7332 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7336 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7330::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7321 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7322 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7323 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7324 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7328 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7128#7132#7137#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7322::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7280#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7280#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7319 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7220#7224#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7285#7342 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7285#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7346 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7220#7224#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7286#7303 = GenSym(0)
      ####a2#7287#7304 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7292#7309 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7078#7292#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7286#7303::Float64,####a2#7287#7304::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7293#7310 = GenSym(3)
      ####a2#7294#7311 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7299#7316 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7078#7299#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7293#7310::Float64,####a2#7294#7311::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7348 = GenSym(9)
      ##a2#7349 = GenSym(10)
      ##div_a#7350 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7348::Float64,##a2#7349::Float64))
      ####afactor#7087#7351 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7349::Float64))
      ####bfactor#7088#7352 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7348::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7349::Float64,##a2#7349::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7357 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7085#7093#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7350::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7300::Tuple{Type{Float64}}
  ######types#7079#7080#7301::Tuple{Type{Float64}}
  ##xs#7302::Tuple{}
  ####a1#7286#7303::Float64
  ####a2#7287#7304::Float64
  ########a#7070#7074#7288#7305::Tuple{}
  ########b#7071#7075#7289#7306::Tuple{}
  ########afactor#7072#7076#7290#7307::Float64
  ########bfactor#7073#7077#7291#7308::Float64
  ######_var0#7078#7292#7309::Tuple{}
  ####a1#7293#7310::Float64
  ####a2#7294#7311::Float64
  ########a#7070#7074#7295#7312::Tuple{}
  ########b#7071#7075#7296#7313::Tuple{}
  ########afactor#7072#7076#7297#7314::Float64
  ########bfactor#7073#7077#7298#7315::Float64
  ######_var0#7078#7299#7316::Tuple{}
  ########tup#7124#7218#7222#7317::Tuple{}
  ########x#7125#7219#7223#7318::Float64
  ######_var0#7220#7224#7319::Tuple{}
  ########types#7079#7221#7225#7320::Tuple{Type{Float64}}
  ##a#7321::Float64
  ##exp_a#7322::Float64
  ##deriv#7323::Float64
  ####G#7133#7324::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7325::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7326::Tuple{}
  ##########x#7125#7127#7131#7136#7327::Float64
  ########_var0#7128#7132#7137#7328::Tuple{}
  ##a#7329::Float64
  ##exp_a#7330::Float64
  ##deriv#7331::Float64
  ####G#7133#7332::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7333::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7334::Tuple{}
  ##########x#7125#7127#7131#7136#7335::Float64
  ########_var0#7128#7132#7137#7336::Tuple{}
  ######a#7276#7278#7337::Tuple{}
  ######b#7277#7279#7338::Tuple{}
  ####_var0#7280#7339::Tuple{}
  ######a#7281#7283#7340::Tuple{}
  ######b#7282#7284#7341::Tuple{}
  ####_var0#7285#7342::Tuple{}
  ######types#7079#7080#7343::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7344::Tuple{}
  ########x#7125#7219#7223#7345::Float64
  ######_var0#7220#7224#7346::Tuple{}
  ########types#7079#7221#7225#7347::Tuple{Type{Float64}}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ##div_a#7350::Float64
  ####afactor#7087#7351::Float64
  ####bfactor#7088#7352::Float64
  ########a#7070#7081#7089#7353::Tuple{}
  ########b#7071#7082#7090#7354::Tuple{}
  ########afactor#7072#7083#7091#7355::Float64
  ########bfactor#7073#7084#7092#7356::Float64
  ######_var0#7085#7093#7357::Tuple{}
  ######types#7086#7094#7358::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7329 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7330 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7331 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7133#7332 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7336 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7330::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7321 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7322 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7323 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7324 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7328 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7128#7132#7137#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7322::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7280#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7280#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7319 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7220#7224#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7285#7342 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7285#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7346 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7220#7224#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7286#7303 = GenSym(0)
      ####a2#7287#7304 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7292#7309 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7078#7292#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7286#7303::Float64,####a2#7287#7304::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7293#7310 = GenSym(3)
      ####a2#7294#7311 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7299#7316 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7078#7299#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7293#7310::Float64,####a2#7294#7311::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7348 = GenSym(9)
      ##a2#7349 = GenSym(10)
      ##div_a#7350 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7348::Float64,##a2#7349::Float64))
      ####afactor#7087#7351 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7349::Float64))
      ####bfactor#7088#7352 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7348::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7349::Float64,##a2#7349::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7357 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7085#7093#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7350::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7079#7080#7300::Tuple{Type{Float64}}
  ######types#7079#7080#7301::Tuple{Type{Float64}}
  ##xs#7302::Tuple{}
  ####a1#7286#7303::Float64
  ####a2#7287#7304::Float64
  ########a#7070#7074#7288#7305::Tuple{}
  ########b#7071#7075#7289#7306::Tuple{}
  ########afactor#7072#7076#7290#7307::Float64
  ########bfactor#7073#7077#7291#7308::Float64
  ######_var0#7078#7292#7309::Tuple{}
  ####a1#7293#7310::Float64
  ####a2#7294#7311::Float64
  ########a#7070#7074#7295#7312::Tuple{}
  ########b#7071#7075#7296#7313::Tuple{}
  ########afactor#7072#7076#7297#7314::Float64
  ########bfactor#7073#7077#7298#7315::Float64
  ######_var0#7078#7299#7316::Tuple{}
  ########tup#7124#7218#7222#7317::Tuple{}
  ########x#7125#7219#7223#7318::Float64
  ######_var0#7220#7224#7319::Tuple{}
  ########types#7079#7221#7225#7320::Tuple{Type{Float64}}
  ##a#7321::Float64
  ##exp_a#7322::Float64
  ##deriv#7323::Float64
  ####G#7133#7324::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7325::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7326::Tuple{}
  ##########x#7125#7127#7131#7136#7327::Float64
  ########_var0#7128#7132#7137#7328::Tuple{}
  ##a#7329::Float64
  ##exp_a#7330::Float64
  ##deriv#7331::Float64
  ####G#7133#7332::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7134#7333::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7135#7334::Tuple{}
  ##########x#7125#7127#7131#7136#7335::Float64
  ########_var0#7128#7132#7137#7336::Tuple{}
  ######a#7276#7278#7337::Tuple{}
  ######b#7277#7279#7338::Tuple{}
  ####_var0#7280#7339::Tuple{}
  ######a#7281#7283#7340::Tuple{}
  ######b#7282#7284#7341::Tuple{}
  ####_var0#7285#7342::Tuple{}
  ######types#7079#7080#7343::Tuple{Type{Float64}}
  ########tup#7124#7218#7222#7344::Tuple{}
  ########x#7125#7219#7223#7345::Float64
  ######_var0#7220#7224#7346::Tuple{}
  ########types#7079#7221#7225#7347::Tuple{Type{Float64}}
  ##a1#7348::Float64
  ##a2#7349::Float64
  ##div_a#7350::Float64
  ####afactor#7087#7351::Float64
  ####bfactor#7088#7352::Float64
  ########a#7070#7081#7089#7353::Tuple{}
  ########b#7071#7082#7090#7354::Tuple{}
  ########afactor#7072#7083#7091#7355::Float64
  ########bfactor#7073#7084#7092#7356::Float64
  ######_var0#7085#7093#7357::Tuple{}
  ######types#7086#7094#7358::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 69:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 70:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7329 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7330 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7331 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7329::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7133#7332 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7336 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7128#7132#7137#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7330::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7321 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7322 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7323 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7321::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7133#7324 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7137#7328 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7128#7132#7137#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7322::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7280#7339 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7280#7339 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7319 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7220#7224#7319 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7285#7342 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7285#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7224#7346 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7220#7224#7346 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7286#7303 = GenSym(0)
      ####a2#7287#7304 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7292#7309 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7078#7292#7309 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7286#7303::Float64,####a2#7287#7304::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7293#7310 = GenSym(3)
      ####a2#7294#7311 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7299#7316 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7078#7299#7316 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7293#7310::Float64,####a2#7294#7311::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7348 = GenSym(9)
      ##a2#7349 = GenSym(10)
      ##div_a#7350 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7348::Float64,##a2#7349::Float64))
      ####afactor#7087#7351 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7349::Float64))
      ####bfactor#7088#7352 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7348::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7349::Float64,##a2#7349::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7357 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7085#7093#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7350::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.NaN
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7359::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7359::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7369::Float64
  ##div_a#7370::Float64
  ##deriv#7371::Float64
  ####G#7181#7372::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7373::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7374::Tuple{}
  ##########x#7125#7127#7131#7184#7375::Float64
  ########_var0#7128#7132#7185#7376::Tuple{}
  ##a1#7377::Float64
  ##a2#7378::Float64
  ##div_a#7379::Float64
  ####afactor#7087#7380::Float64
  ####bfactor#7088#7381::Float64
  ########a#7070#7081#7089#7382::Tuple{}
  ########b#7071#7082#7090#7383::Tuple{}
  ########afactor#7072#7083#7091#7384::Float64
  ########bfactor#7073#7084#7092#7385::Float64
  ######_var0#7085#7093#7386::Tuple{}
  ######types#7086#7094#7387::Tuple{Type{Float64}}
  ##a#7388::Float64
  ####G#7360#7389::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7361#7390::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7362#7391::Tuple{}
  ##########x#7125#7127#7131#7363#7392::Float64
  ########_var0#7128#7132#7364#7393::Tuple{}
  ##xs#7394::Tuple{}
  ########a#7276#7278#7365#7395::Tuple{}
  ########b#7277#7279#7366#7396::Tuple{}
  ######_var0#7280#7367#7397::Tuple{}
  ########types#7079#7216#7368#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7377 = GenSym(3)
      ##a2#7378 = GenSym(4)
      ##div_a#7379 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7377::Float64,##a2#7378::Float64))
      ####afactor#7087#7380 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7378::Float64))
      ####bfactor#7088#7381 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7377::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7378::Float64,##a2#7378::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7386 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7379::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7388 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7388::Float64,0)::Float64
      ####G#7360#7389 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7364#7393 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7364#7393 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7388::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7369 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7370 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7369::Float64))
      ##deriv#7371 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7370::Float64,##a#7369::Float64))))
      ####G#7181#7372 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7376 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7370::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7280#7367#7397 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7280#7367#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7359::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7359::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7369::Float64
  ##div_a#7370::Float64
  ##deriv#7371::Float64
  ####G#7181#7372::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7373::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7374::Tuple{}
  ##########x#7125#7127#7131#7184#7375::Float64
  ########_var0#7128#7132#7185#7376::Tuple{}
  ##a1#7377::Float64
  ##a2#7378::Float64
  ##div_a#7379::Float64
  ####afactor#7087#7380::Float64
  ####bfactor#7088#7381::Float64
  ########a#7070#7081#7089#7382::Tuple{}
  ########b#7071#7082#7090#7383::Tuple{}
  ########afactor#7072#7083#7091#7384::Float64
  ########bfactor#7073#7084#7092#7385::Float64
  ######_var0#7085#7093#7386::Tuple{}
  ######types#7086#7094#7387::Tuple{Type{Float64}}
  ##a#7388::Float64
  ####G#7360#7389::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7361#7390::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7362#7391::Tuple{}
  ##########x#7125#7127#7131#7363#7392::Float64
  ########_var0#7128#7132#7364#7393::Tuple{}
  ##xs#7394::Tuple{}
  ########a#7276#7278#7365#7395::Tuple{}
  ########b#7277#7279#7366#7396::Tuple{}
  ######_var0#7280#7367#7397::Tuple{}
  ########types#7079#7216#7368#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7377 = GenSym(3)
      ##a2#7378 = GenSym(4)
      ##div_a#7379 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7377::Float64,##a2#7378::Float64))
      ####afactor#7087#7380 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7378::Float64))
      ####bfactor#7088#7381 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7377::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7378::Float64,##a2#7378::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7386 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7379::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7388 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7388::Float64,0)::Float64
      ####G#7360#7389 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7364#7393 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7364#7393 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7388::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7369 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7370 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7369::Float64))
      ##deriv#7371 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7370::Float64,##a#7369::Float64))))
      ####G#7181#7372 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7376 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7370::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7280#7367#7397 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7280#7367#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7369::Float64
  ##div_a#7370::Float64
  ##deriv#7371::Float64
  ####G#7181#7372::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7373::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7374::Tuple{}
  ##########x#7125#7127#7131#7184#7375::Float64
  ########_var0#7128#7132#7185#7376::Tuple{}
  ##a1#7377::Float64
  ##a2#7378::Float64
  ##div_a#7379::Float64
  ####afactor#7087#7380::Float64
  ####bfactor#7088#7381::Float64
  ########a#7070#7081#7089#7382::Tuple{}
  ########b#7071#7082#7090#7383::Tuple{}
  ########afactor#7072#7083#7091#7384::Float64
  ########bfactor#7073#7084#7092#7385::Float64
  ######_var0#7085#7093#7386::Tuple{}
  ######types#7086#7094#7387::Tuple{Type{Float64}}
  ##a#7388::Float64
  ####G#7360#7389::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7361#7390::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7362#7391::Tuple{}
  ##########x#7125#7127#7131#7363#7392::Float64
  ########_var0#7128#7132#7364#7393::Tuple{}
  ##xs#7394::Tuple{}
  ########a#7276#7278#7365#7395::Tuple{}
  ########b#7277#7279#7366#7396::Tuple{}
  ######_var0#7280#7367#7397::Tuple{}
  ########types#7079#7216#7368#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7377 = GenSym(3)
      ##a2#7378 = GenSym(4)
      ##div_a#7379 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7377::Float64,##a2#7378::Float64))
      ####afactor#7087#7380 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7378::Float64))
      ####bfactor#7088#7381 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7377::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7378::Float64,##a2#7378::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7386 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7379::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7388 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7388::Float64,0)::Float64
      ####G#7360#7389 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7364#7393 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7364#7393 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7388::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7369 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7370 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7369::Float64))
      ##deriv#7371 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7370::Float64,##a#7369::Float64))))
      ####G#7181#7372 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7376 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7370::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7280#7367#7397 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7280#7367#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7369::Float64
  ##div_a#7370::Float64
  ##deriv#7371::Float64
  ####G#7181#7372::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7373::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7374::Tuple{}
  ##########x#7125#7127#7131#7184#7375::Float64
  ########_var0#7128#7132#7185#7376::Tuple{}
  ##a1#7377::Float64
  ##a2#7378::Float64
  ##div_a#7379::Float64
  ####afactor#7087#7380::Float64
  ####bfactor#7088#7381::Float64
  ########a#7070#7081#7089#7382::Tuple{}
  ########b#7071#7082#7090#7383::Tuple{}
  ########afactor#7072#7083#7091#7384::Float64
  ########bfactor#7073#7084#7092#7385::Float64
  ######_var0#7085#7093#7386::Tuple{}
  ######types#7086#7094#7387::Tuple{Type{Float64}}
  ##a#7388::Float64
  ####G#7360#7389::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7361#7390::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7362#7391::Tuple{}
  ##########x#7125#7127#7131#7363#7392::Float64
  ########_var0#7128#7132#7364#7393::Tuple{}
  ##xs#7394::Tuple{}
  ########a#7276#7278#7365#7395::Tuple{}
  ########b#7277#7279#7366#7396::Tuple{}
  ######_var0#7280#7367#7397::Tuple{}
  ########types#7079#7216#7368#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7377 = GenSym(3)
      ##a2#7378 = GenSym(4)
      ##div_a#7379 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7377::Float64,##a2#7378::Float64))
      ####afactor#7087#7380 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7378::Float64))
      ####bfactor#7088#7381 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7377::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7378::Float64,##a2#7378::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7386 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7379::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7388 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7388::Float64,0)::Float64
      ####G#7360#7389 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7364#7393 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7364#7393 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7388::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7369 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7370 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7369::Float64))
      ##deriv#7371 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7370::Float64,##a#7369::Float64))))
      ####G#7181#7372 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7376 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7370::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7280#7367#7397 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7280#7367#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7369::Float64
  ##div_a#7370::Float64
  ##deriv#7371::Float64
  ####G#7181#7372::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7373::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7374::Tuple{}
  ##########x#7125#7127#7131#7184#7375::Float64
  ########_var0#7128#7132#7185#7376::Tuple{}
  ##a1#7377::Float64
  ##a2#7378::Float64
  ##div_a#7379::Float64
  ####afactor#7087#7380::Float64
  ####bfactor#7088#7381::Float64
  ########a#7070#7081#7089#7382::Tuple{}
  ########b#7071#7082#7090#7383::Tuple{}
  ########afactor#7072#7083#7091#7384::Float64
  ########bfactor#7073#7084#7092#7385::Float64
  ######_var0#7085#7093#7386::Tuple{}
  ######types#7086#7094#7387::Tuple{Type{Float64}}
  ##a#7388::Float64
  ####G#7360#7389::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7361#7390::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7362#7391::Tuple{}
  ##########x#7125#7127#7131#7363#7392::Float64
  ########_var0#7128#7132#7364#7393::Tuple{}
  ##xs#7394::Tuple{}
  ########a#7276#7278#7365#7395::Tuple{}
  ########b#7277#7279#7366#7396::Tuple{}
  ######_var0#7280#7367#7397::Tuple{}
  ########types#7079#7216#7368#7398::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7377 = GenSym(3)
      ##a2#7378 = GenSym(4)
      ##div_a#7379 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7377::Float64,##a2#7378::Float64))
      ####afactor#7087#7380 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7378::Float64))
      ####bfactor#7088#7381 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7377::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7378::Float64,##a2#7378::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7085#7093#7386 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7085#7093#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7379::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7388 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7388::Float64,0)::Float64
      ####G#7360#7389 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7364#7393 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7364#7393 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7388::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7369 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7370 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7369::Float64))
      ##deriv#7371 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7370::Float64,##a#7369::Float64))))
      ####G#7181#7372 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7376 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7128#7132#7185#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7370::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7280#7367#7397 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7280#7367#7397 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7409#7414::UInt64
  ####idx#7410#7415::UInt64
  ####x#7411#7416::Float64
  ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7418::Float64
  ##_var0#7419::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7417 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7417 = false
      2: 
      ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7418 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7414 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7418::Float64),0x000fffffffffffff))
      ####idx#7410#7415 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7414::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7414::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7414::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7419 = ####x#7411#7416::Float64
      goto 5
      4: 
      ##_var0#7419 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7415::UInt64,####x#7411#7416::Float64)::Float64
      goto 5
      ##_var0#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7419::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7409#7414::UInt64
  ####idx#7410#7415::UInt64
  ####x#7411#7416::Float64
  ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7418::Float64
  ##_var0#7419::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7417 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7417 = false
      2: 
      ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7418 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7414 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7418::Float64),0x000fffffffffffff))
      ####idx#7410#7415 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7414::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7414::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7414::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7419 = ####x#7411#7416::Float64
      goto 5
      4: 
      ##_var0#7419 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7415::UInt64,####x#7411#7416::Float64)::Float64
      goto 5
      ##_var0#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7419::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7409#7426::UInt64
  ####idx#7410#7427::UInt64
  ####x#7411#7428::Float64
  ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7430::Float64
  ##_var0#7431::Float64
  ##a#7432::Float64
  ##div_a#7433::Float64
  ##deriv#7434::Float64
  ####G#7181#7435::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7436::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7437::Tuple{}
  ##########x#7125#7127#7131#7184#7438::Float64
  ########_var0#7128#7132#7185#7439::Tuple{}
  ##exp_a#7440::Float64
  ####G#7421#7441::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7422#7442::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7423#7443::Tuple{}
  ##########x#7125#7127#7131#7424#7444::Float64
  ########_var0#7128#7132#7425#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ######a#7070#7074#7448::Tuple{}
  ######b#7071#7075#7449::Tuple{}
  ######afactor#7072#7076#7450::Float64
  ######bfactor#7073#7077#7451::Float64
  ####_var0#7078#7452::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7429 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7429 = false
      2: 
      ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7430 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7430 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7426 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7430::Float64),0x000fffffffffffff))
      ####idx#7410#7427 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7426::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7428 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7426::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7426::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7431 = ####x#7411#7428::Float64
      goto 5
      4: 
      ##_var0#7431 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7427::UInt64,####x#7411#7428::Float64)::Float64
      goto 5
      ##_var0#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7431::Float64
      ##a#7432 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7433 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7432::Float64))
      ##deriv#7434 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7433::Float64,##a#7432::Float64))))
      ####G#7181#7435 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7439 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7185#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7433::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7440 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7421#7441 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7425#7445 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7425#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7446 = GenSym(6)
      ##a2#7447 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7452 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7446::Float64,##a2#7447::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7409#7414::UInt64
  ####idx#7410#7415::UInt64
  ####x#7411#7416::Float64
  ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7418::Float64
  ##_var0#7419::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7417 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7417 = false
      2: 
      ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7418 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7414 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7418::Float64),0x000fffffffffffff))
      ####idx#7410#7415 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7414::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7414::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7414::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7419 = ####x#7411#7416::Float64
      goto 5
      4: 
      ##_var0#7419 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7415::UInt64,####x#7411#7416::Float64)::Float64
      goto 5
      ##_var0#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7419::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7409#7414::UInt64
  ####idx#7410#7415::UInt64
  ####x#7411#7416::Float64
  ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7418::Float64
  ##_var0#7419::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7417 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7417 = false
      2: 
      ########_var0#7401#7407#7412#7417::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7418 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7418 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7414 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7418::Float64),0x000fffffffffffff))
      ####idx#7410#7415 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7414::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7416 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7414::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7414::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7415::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7419 = ####x#7411#7416::Float64
      goto 5
      4: 
      ##_var0#7419 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7415::UInt64,####x#7411#7416::Float64)::Float64
      goto 5
      ##_var0#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7419::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7409#7426::UInt64
  ####idx#7410#7427::UInt64
  ####x#7411#7428::Float64
  ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7430::Float64
  ##_var0#7431::Float64
  ##a#7432::Float64
  ##div_a#7433::Float64
  ##deriv#7434::Float64
  ####G#7181#7435::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7436::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7437::Tuple{}
  ##########x#7125#7127#7131#7184#7438::Float64
  ########_var0#7128#7132#7185#7439::Tuple{}
  ##exp_a#7440::Float64
  ####G#7421#7441::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7422#7442::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7423#7443::Tuple{}
  ##########x#7125#7127#7131#7424#7444::Float64
  ########_var0#7128#7132#7425#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ######a#7070#7074#7448::Tuple{}
  ######b#7071#7075#7449::Tuple{}
  ######afactor#7072#7076#7450::Float64
  ######bfactor#7073#7077#7451::Float64
  ####_var0#7078#7452::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7429 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7429 = false
      2: 
      ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7430 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7430 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7426 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7430::Float64),0x000fffffffffffff))
      ####idx#7410#7427 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7426::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7428 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7426::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7426::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7431 = ####x#7411#7428::Float64
      goto 5
      4: 
      ##_var0#7431 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7427::UInt64,####x#7411#7428::Float64)::Float64
      goto 5
      ##_var0#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7431::Float64
      ##a#7432 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7433 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7432::Float64))
      ##deriv#7434 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7433::Float64,##a#7432::Float64))))
      ####G#7181#7435 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7439 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7185#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7433::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7440 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7421#7441 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7425#7445 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7425#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7446 = GenSym(6)
      ##a2#7447 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7452 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7446::Float64,##a2#7447::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7409#7426::UInt64
  ####idx#7410#7427::UInt64
  ####x#7411#7428::Float64
  ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7430::Float64
  ##_var0#7431::Float64
  ##a#7432::Float64
  ##div_a#7433::Float64
  ##deriv#7434::Float64
  ####G#7181#7435::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7436::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7437::Tuple{}
  ##########x#7125#7127#7131#7184#7438::Float64
  ########_var0#7128#7132#7185#7439::Tuple{}
  ##exp_a#7440::Float64
  ####G#7421#7441::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7422#7442::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7423#7443::Tuple{}
  ##########x#7125#7127#7131#7424#7444::Float64
  ########_var0#7128#7132#7425#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ######a#7070#7074#7448::Tuple{}
  ######b#7071#7075#7449::Tuple{}
  ######afactor#7072#7076#7450::Float64
  ######bfactor#7073#7077#7451::Float64
  ####_var0#7078#7452::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7429 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7429 = false
      2: 
      ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7430 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7430 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7426 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7430::Float64),0x000fffffffffffff))
      ####idx#7410#7427 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7426::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7428 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7426::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7426::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7431 = ####x#7411#7428::Float64
      goto 5
      4: 
      ##_var0#7431 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7427::UInt64,####x#7411#7428::Float64)::Float64
      goto 5
      ##_var0#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7431::Float64
      ##a#7432 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7433 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7432::Float64))
      ##deriv#7434 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7433::Float64,##a#7432::Float64))))
      ####G#7181#7435 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7439 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7185#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7433::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7440 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7421#7441 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7425#7445 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7425#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7446 = GenSym(6)
      ##a2#7447 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7452 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7446::Float64,##a2#7447::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7409#7426::UInt64
  ####idx#7410#7427::UInt64
  ####x#7411#7428::Float64
  ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7430::Float64
  ##_var0#7431::Float64
  ##a#7432::Float64
  ##div_a#7433::Float64
  ##deriv#7434::Float64
  ####G#7181#7435::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7436::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7437::Tuple{}
  ##########x#7125#7127#7131#7184#7438::Float64
  ########_var0#7128#7132#7185#7439::Tuple{}
  ##exp_a#7440::Float64
  ####G#7421#7441::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7422#7442::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7423#7443::Tuple{}
  ##########x#7125#7127#7131#7424#7444::Float64
  ########_var0#7128#7132#7425#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ######a#7070#7074#7448::Tuple{}
  ######b#7071#7075#7449::Tuple{}
  ######afactor#7072#7076#7450::Float64
  ######bfactor#7073#7077#7451::Float64
  ####_var0#7078#7452::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7429 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7429 = false
      2: 
      ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7430 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7430 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7426 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7430::Float64),0x000fffffffffffff))
      ####idx#7410#7427 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7426::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7428 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7426::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7426::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7431 = ####x#7411#7428::Float64
      goto 5
      4: 
      ##_var0#7431 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7427::UInt64,####x#7411#7428::Float64)::Float64
      goto 5
      ##_var0#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7431::Float64
      ##a#7432 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7433 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7432::Float64))
      ##deriv#7434 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7433::Float64,##a#7432::Float64))))
      ####G#7181#7435 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7439 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7185#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7433::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7440 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7421#7441 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7425#7445 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7425#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7446 = GenSym(6)
      ##a2#7447 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7452 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7446::Float64,##a2#7447::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7409#7426::UInt64
  ####idx#7410#7427::UInt64
  ####x#7411#7428::Float64
  ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
  ############_var0#7399#7400#7402#7408#7413#7430::Float64
  ##_var0#7431::Float64
  ##a#7432::Float64
  ##div_a#7433::Float64
  ##deriv#7434::Float64
  ####G#7181#7435::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7182#7436::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7183#7437::Tuple{}
  ##########x#7125#7127#7131#7184#7438::Float64
  ########_var0#7128#7132#7185#7439::Tuple{}
  ##exp_a#7440::Float64
  ####G#7421#7441::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7123#7129#7422#7442::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7124#7126#7130#7423#7443::Tuple{}
  ##########x#7125#7127#7131#7424#7444::Float64
  ########_var0#7128#7132#7425#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ######a#7070#7074#7448::Tuple{}
  ######b#7071#7075#7449::Tuple{}
  ######afactor#7072#7076#7450::Float64
  ######bfactor#7073#7077#7451::Float64
  ####_var0#7078#7452::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 108:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7401#7407#7412#7429 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7401#7407#7412#7429 = false
      2: 
      ########_var0#7401#7407#7412#7429::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7399#7400#7402#7408#7413#7430 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7399#7400#7402#7408#7413#7430 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7409#7426 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7399#7400#7402#7408#7413#7430::Float64),0x000fffffffffffff))
      ####idx#7410#7427 = (Base.box)(UInt64,(Base.and_int)(####ri#7409#7426::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7411#7428 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7409#7426::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7409#7426::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7410#7427::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7431 = ####x#7411#7428::Float64
      goto 5
      4: 
      ##_var0#7431 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7410#7427::UInt64,####x#7411#7428::Float64)::Float64
      goto 5
      ##_var0#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7431::Float64
      ##a#7432 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7433 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7432::Float64))
      ##deriv#7434 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7433::Float64,##a#7432::Float64))))
      ####G#7181#7435 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7185#7439 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7128#7132#7185#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7433::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7440 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7421#7441 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7128#7132#7425#7445 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7128#7132#7425#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7446 = GenSym(6)
      ##a2#7447 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7078#7452 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7078#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7446::Float64,##a2#7447::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7453#7454::Float64
  ##xs#7455::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      ####fy#7453#7454 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.lt_float)(####fy#7453#7454::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7453#7454::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7453#7454::Float64
  ##xs#7455::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      ####fy#7453#7454 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.lt_float)(####fy#7453#7454::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7453#7454::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7456#7457#7494::Float64
  ##div_a#7495::Float64
  ######tup#7458#7460#7496::Tuple{}
  ######x#7459#7461#7497::Int64
  ####_var0#7462#7498::Tuple{}
  ######types#7079#7463#7499::Tuple{Type{Float64}}
  ##a1#7500::Float64
  ##a2#7501::Float64
  ##exp_a#7502::Float64
  ##powval#7503::Float64
  ##logval#7504::Float64
  ##new_bs#7505::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7469#7506::Float64
  ####exp_a#7470#7507::Float64
  ####deriv#7471#7508::Float64
  ######G#7464#7472#7509::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7129#7465#7473#7510::Tuple{Type{Float64},Type{Float64}}
  ############tup#7124#7126#7130#7466#7474#7511::Tuple{}
  ############x#7125#7127#7131#7467#7475#7512::Float64
  ##########_var0#7128#7132#7468#7476#7513::Tuple{}
  ######a#7070#7477#7514::Tuple{}
  ######b#7071#7478#7515::Tuple{}
  ######afactor#7072#7479#7516::Float64
  ######bfactor#7073#7480#7517::Float64
  ####_var0#7481#7518::Tuple{}
  ######types#7086#7482#7519::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7520::Tuple{}
  ####a1#7483#7521::Float64
  ####a2#7484#7522::Float64
  ########a#7070#7074#7485#7523::Tuple{}
  ########b#7071#7075#7486#7524::Tuple{}
  ########afactor#7072#7076#7487#7525::Float64
  ########bfactor#7073#7077#7488#7526::Float64
  ######_var0#7078#7489#7527::Tuple{}
  ########tup#7124#7218#7490#7528::Tuple{}
  ########x#7125#7219#7491#7529::Float64
  ######_var0#7220#7492#7530::Tuple{}
  ########types#7079#7221#7493#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7456#7457#7494 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.lt_float)(######fy#7456#7457#7494::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7456#7457#7494::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7495 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7462#7498 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7462#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7495::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7500"))
      NewvarNode(symbol("##a2#7501"))
      NewvarNode(symbol("##exp_a#7502"))
      NewvarNode(symbol("##powval#7503"))
      NewvarNode(symbol("##logval#7504"))
      NewvarNode(symbol("##new_bs#7505"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7469#7506 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7470#7507 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(11),0)::Float64
      ####deriv#7471#7508 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(11))))::Float64))
      ######G#7464#7472#7509 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7128#7132#7468#7476#7513 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7128#7132#7468#7476#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7470#7507::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7500 = GenSym(5)
      ##a2#7501 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,##a2#7501::Float64,0)::Float64
      ##exp_a#7502 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,##a2#7501::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7501::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,GenSym(18),0)::Float64
      ##powval#7503 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7501::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0)::Float64
      ##logval#7504 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7502::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7500::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7481#7518 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7481#7518 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7505 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7502::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7483#7521 = GenSym(25)
      ####a2#7484#7522 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7489#7527 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7078#7489#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7483#7521::Float64,####a2#7484#7522::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7492#7530 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7220#7492#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7453#7454::Float64
  ##xs#7455::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      ####fy#7453#7454 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.lt_float)(####fy#7453#7454::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7453#7454::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7453#7454::Float64
  ##xs#7455::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      ####fy#7453#7454 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7453#7454::Float64)::Bool,(Base.lt_float)(####fy#7453#7454::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7453#7454::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7456#7457#7494::Float64
  ##div_a#7495::Float64
  ######tup#7458#7460#7496::Tuple{}
  ######x#7459#7461#7497::Int64
  ####_var0#7462#7498::Tuple{}
  ######types#7079#7463#7499::Tuple{Type{Float64}}
  ##a1#7500::Float64
  ##a2#7501::Float64
  ##exp_a#7502::Float64
  ##powval#7503::Float64
  ##logval#7504::Float64
  ##new_bs#7505::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7469#7506::Float64
  ####exp_a#7470#7507::Float64
  ####deriv#7471#7508::Float64
  ######G#7464#7472#7509::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7129#7465#7473#7510::Tuple{Type{Float64},Type{Float64}}
  ############tup#7124#7126#7130#7466#7474#7511::Tuple{}
  ############x#7125#7127#7131#7467#7475#7512::Float64
  ##########_var0#7128#7132#7468#7476#7513::Tuple{}
  ######a#7070#7477#7514::Tuple{}
  ######b#7071#7478#7515::Tuple{}
  ######afactor#7072#7479#7516::Float64
  ######bfactor#7073#7480#7517::Float64
  ####_var0#7481#7518::Tuple{}
  ######types#7086#7482#7519::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7520::Tuple{}
  ####a1#7483#7521::Float64
  ####a2#7484#7522::Float64
  ########a#7070#7074#7485#7523::Tuple{}
  ########b#7071#7075#7486#7524::Tuple{}
  ########afactor#7072#7076#7487#7525::Float64
  ########bfactor#7073#7077#7488#7526::Float64
  ######_var0#7078#7489#7527::Tuple{}
  ########tup#7124#7218#7490#7528::Tuple{}
  ########x#7125#7219#7491#7529::Float64
  ######_var0#7220#7492#7530::Tuple{}
  ########types#7079#7221#7493#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7456#7457#7494 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.lt_float)(######fy#7456#7457#7494::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7456#7457#7494::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7495 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7462#7498 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7462#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7495::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7500"))
      NewvarNode(symbol("##a2#7501"))
      NewvarNode(symbol("##exp_a#7502"))
      NewvarNode(symbol("##powval#7503"))
      NewvarNode(symbol("##logval#7504"))
      NewvarNode(symbol("##new_bs#7505"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7469#7506 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7470#7507 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(11),0)::Float64
      ####deriv#7471#7508 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(11))))::Float64))
      ######G#7464#7472#7509 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7128#7132#7468#7476#7513 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7128#7132#7468#7476#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7470#7507::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7500 = GenSym(5)
      ##a2#7501 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,##a2#7501::Float64,0)::Float64
      ##exp_a#7502 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,##a2#7501::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7501::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,GenSym(18),0)::Float64
      ##powval#7503 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7501::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0)::Float64
      ##logval#7504 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7502::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7500::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7481#7518 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7481#7518 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7505 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7502::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7483#7521 = GenSym(25)
      ####a2#7484#7522 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7489#7527 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7078#7489#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7483#7521::Float64,####a2#7484#7522::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7492#7530 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7220#7492#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7456#7457#7494::Float64
  ##div_a#7495::Float64
  ######tup#7458#7460#7496::Tuple{}
  ######x#7459#7461#7497::Int64
  ####_var0#7462#7498::Tuple{}
  ######types#7079#7463#7499::Tuple{Type{Float64}}
  ##a1#7500::Float64
  ##a2#7501::Float64
  ##exp_a#7502::Float64
  ##powval#7503::Float64
  ##logval#7504::Float64
  ##new_bs#7505::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7469#7506::Float64
  ####exp_a#7470#7507::Float64
  ####deriv#7471#7508::Float64
  ######G#7464#7472#7509::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7129#7465#7473#7510::Tuple{Type{Float64},Type{Float64}}
  ############tup#7124#7126#7130#7466#7474#7511::Tuple{}
  ############x#7125#7127#7131#7467#7475#7512::Float64
  ##########_var0#7128#7132#7468#7476#7513::Tuple{}
  ######a#7070#7477#7514::Tuple{}
  ######b#7071#7478#7515::Tuple{}
  ######afactor#7072#7479#7516::Float64
  ######bfactor#7073#7480#7517::Float64
  ####_var0#7481#7518::Tuple{}
  ######types#7086#7482#7519::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7520::Tuple{}
  ####a1#7483#7521::Float64
  ####a2#7484#7522::Float64
  ########a#7070#7074#7485#7523::Tuple{}
  ########b#7071#7075#7486#7524::Tuple{}
  ########afactor#7072#7076#7487#7525::Float64
  ########bfactor#7073#7077#7488#7526::Float64
  ######_var0#7078#7489#7527::Tuple{}
  ########tup#7124#7218#7490#7528::Tuple{}
  ########x#7125#7219#7491#7529::Float64
  ######_var0#7220#7492#7530::Tuple{}
  ########types#7079#7221#7493#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7456#7457#7494 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.lt_float)(######fy#7456#7457#7494::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7456#7457#7494::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7495 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7462#7498 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7462#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7495::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7500"))
      NewvarNode(symbol("##a2#7501"))
      NewvarNode(symbol("##exp_a#7502"))
      NewvarNode(symbol("##powval#7503"))
      NewvarNode(symbol("##logval#7504"))
      NewvarNode(symbol("##new_bs#7505"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7469#7506 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7470#7507 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(11),0)::Float64
      ####deriv#7471#7508 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(11))))::Float64))
      ######G#7464#7472#7509 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7128#7132#7468#7476#7513 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7128#7132#7468#7476#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7470#7507::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7500 = GenSym(5)
      ##a2#7501 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,##a2#7501::Float64,0)::Float64
      ##exp_a#7502 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,##a2#7501::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7501::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,GenSym(18),0)::Float64
      ##powval#7503 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7501::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0)::Float64
      ##logval#7504 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7502::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7500::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7481#7518 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7481#7518 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7505 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7502::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7483#7521 = GenSym(25)
      ####a2#7484#7522 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7489#7527 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7078#7489#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7483#7521::Float64,####a2#7484#7522::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7492#7530 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7220#7492#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7456#7457#7494::Float64
  ##div_a#7495::Float64
  ######tup#7458#7460#7496::Tuple{}
  ######x#7459#7461#7497::Int64
  ####_var0#7462#7498::Tuple{}
  ######types#7079#7463#7499::Tuple{Type{Float64}}
  ##a1#7500::Float64
  ##a2#7501::Float64
  ##exp_a#7502::Float64
  ##powval#7503::Float64
  ##logval#7504::Float64
  ##new_bs#7505::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7469#7506::Float64
  ####exp_a#7470#7507::Float64
  ####deriv#7471#7508::Float64
  ######G#7464#7472#7509::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7129#7465#7473#7510::Tuple{Type{Float64},Type{Float64}}
  ############tup#7124#7126#7130#7466#7474#7511::Tuple{}
  ############x#7125#7127#7131#7467#7475#7512::Float64
  ##########_var0#7128#7132#7468#7476#7513::Tuple{}
  ######a#7070#7477#7514::Tuple{}
  ######b#7071#7478#7515::Tuple{}
  ######afactor#7072#7479#7516::Float64
  ######bfactor#7073#7480#7517::Float64
  ####_var0#7481#7518::Tuple{}
  ######types#7086#7482#7519::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7520::Tuple{}
  ####a1#7483#7521::Float64
  ####a2#7484#7522::Float64
  ########a#7070#7074#7485#7523::Tuple{}
  ########b#7071#7075#7486#7524::Tuple{}
  ########afactor#7072#7076#7487#7525::Float64
  ########bfactor#7073#7077#7488#7526::Float64
  ######_var0#7078#7489#7527::Tuple{}
  ########tup#7124#7218#7490#7528::Tuple{}
  ########x#7125#7219#7491#7529::Float64
  ######_var0#7220#7492#7530::Tuple{}
  ########types#7079#7221#7493#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7456#7457#7494 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.lt_float)(######fy#7456#7457#7494::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7456#7457#7494::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7495 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7462#7498 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7462#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7495::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7500"))
      NewvarNode(symbol("##a2#7501"))
      NewvarNode(symbol("##exp_a#7502"))
      NewvarNode(symbol("##powval#7503"))
      NewvarNode(symbol("##logval#7504"))
      NewvarNode(symbol("##new_bs#7505"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7469#7506 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7470#7507 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(11),0)::Float64
      ####deriv#7471#7508 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(11))))::Float64))
      ######G#7464#7472#7509 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7128#7132#7468#7476#7513 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7128#7132#7468#7476#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7470#7507::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7500 = GenSym(5)
      ##a2#7501 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,##a2#7501::Float64,0)::Float64
      ##exp_a#7502 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,##a2#7501::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7501::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,GenSym(18),0)::Float64
      ##powval#7503 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7501::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0)::Float64
      ##logval#7504 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7502::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7500::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7481#7518 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7481#7518 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7505 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7502::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7483#7521 = GenSym(25)
      ####a2#7484#7522 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7489#7527 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7078#7489#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7483#7521::Float64,####a2#7484#7522::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7492#7530 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7220#7492#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7456#7457#7494::Float64
  ##div_a#7495::Float64
  ######tup#7458#7460#7496::Tuple{}
  ######x#7459#7461#7497::Int64
  ####_var0#7462#7498::Tuple{}
  ######types#7079#7463#7499::Tuple{Type{Float64}}
  ##a1#7500::Float64
  ##a2#7501::Float64
  ##exp_a#7502::Float64
  ##powval#7503::Float64
  ##logval#7504::Float64
  ##new_bs#7505::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7469#7506::Float64
  ####exp_a#7470#7507::Float64
  ####deriv#7471#7508::Float64
  ######G#7464#7472#7509::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7129#7465#7473#7510::Tuple{Type{Float64},Type{Float64}}
  ############tup#7124#7126#7130#7466#7474#7511::Tuple{}
  ############x#7125#7127#7131#7467#7475#7512::Float64
  ##########_var0#7128#7132#7468#7476#7513::Tuple{}
  ######a#7070#7477#7514::Tuple{}
  ######b#7071#7478#7515::Tuple{}
  ######afactor#7072#7479#7516::Float64
  ######bfactor#7073#7480#7517::Float64
  ####_var0#7481#7518::Tuple{}
  ######types#7086#7482#7519::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7520::Tuple{}
  ####a1#7483#7521::Float64
  ####a2#7484#7522::Float64
  ########a#7070#7074#7485#7523::Tuple{}
  ########b#7071#7075#7486#7524::Tuple{}
  ########afactor#7072#7076#7487#7525::Float64
  ########bfactor#7073#7077#7488#7526::Float64
  ######_var0#7078#7489#7527::Tuple{}
  ########tup#7124#7218#7490#7528::Tuple{}
  ########x#7125#7219#7491#7529::Float64
  ######_var0#7220#7492#7530::Tuple{}
  ########types#7079#7221#7493#7531::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 79:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 80:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7456#7457#7494 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7456#7457#7494::Float64)::Bool,(Base.lt_float)(######fy#7456#7457#7494::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7456#7457#7494::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7495 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7462#7498 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7462#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7495::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7500"))
      NewvarNode(symbol("##a2#7501"))
      NewvarNode(symbol("##exp_a#7502"))
      NewvarNode(symbol("##powval#7503"))
      NewvarNode(symbol("##logval#7504"))
      NewvarNode(symbol("##new_bs#7505"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7469#7506 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7470#7507 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7469#7506::Float64,0,GenSym(11),0)::Float64
      ####deriv#7471#7508 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7469#7506::Float64,GenSym(11))))::Float64))
      ######G#7464#7472#7509 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7128#7132#7468#7476#7513 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7128#7132#7468#7476#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7470#7507::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7500 = GenSym(5)
      ##a2#7501 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,##a2#7501::Float64,0)::Float64
      ##exp_a#7502 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,##a2#7501::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7501::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0,GenSym(18),0)::Float64
      ##powval#7503 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7501::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7500::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7500::Float64,0)::Float64
      ##logval#7504 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7502::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7500::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7481#7518 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7481#7518 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7505 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7502::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7483#7521 = GenSym(25)
      ####a2#7484#7522 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7078#7489#7527 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7078#7489#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7483#7521::Float64,####a2#7484#7522::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7220#7492#7530 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7220#7492#7530 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





