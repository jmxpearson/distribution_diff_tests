____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 49:
      return (top(tuple))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7132::Tuple{Type{Float64}}
  ##a1#7133::Float64
  ##a2#7134::Float64
  ######a#7107#7111#7135::Tuple{}
  ######b#7108#7112#7136::Tuple{}
  ######afactor#7109#7113#7137::Float64
  ######bfactor#7110#7114#7138::Float64
  ####_var0#7115#7139::Tuple{}
  ##a1#7140::Float64
  ##a2#7141::Float64
  ##div_a#7142::Float64
  ####afactor#7124#7143::Float64
  ####bfactor#7125#7144::Float64
  ########a#7107#7118#7126#7145::Tuple{}
  ########b#7108#7119#7127#7146::Tuple{}
  ########afactor#7109#7120#7128#7147::Float64
  ########bfactor#7110#7121#7129#7148::Float64
  ######_var0#7122#7130#7149::Tuple{}
  ######types#7123#7131#7150::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7133 = GenSym(3)
      ##a2#7134 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7139 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7115#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7133::Float64,##a2#7134::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7140 = GenSym(6)
      ##a2#7141 = GenSym(7)
      ##div_a#7142 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7140::Float64,##a2#7141::Float64))
      ####afactor#7124#7143 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7141::Float64))
      ####bfactor#7125#7144 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7140::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7141::Float64,##a2#7141::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7149 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7122#7130#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7142::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,θ::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7132::Tuple{Type{Float64}}
  ##a1#7133::Float64
  ##a2#7134::Float64
  ######a#7107#7111#7135::Tuple{}
  ######b#7108#7112#7136::Tuple{}
  ######afactor#7109#7113#7137::Float64
  ######bfactor#7110#7114#7138::Float64
  ####_var0#7115#7139::Tuple{}
  ##a1#7140::Float64
  ##a2#7141::Float64
  ##div_a#7142::Float64
  ####afactor#7124#7143::Float64
  ####bfactor#7125#7144::Float64
  ########a#7107#7118#7126#7145::Tuple{}
  ########b#7108#7119#7127#7146::Tuple{}
  ########afactor#7109#7120#7128#7147::Float64
  ########bfactor#7110#7121#7129#7148::Float64
  ######_var0#7122#7130#7149::Tuple{}
  ######types#7123#7131#7150::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7133 = GenSym(3)
      ##a2#7134 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7139 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7115#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7133::Float64,##a2#7134::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7140 = GenSym(6)
      ##a2#7141 = GenSym(7)
      ##div_a#7142 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7140::Float64,##a2#7141::Float64))
      ####afactor#7124#7143 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7141::Float64))
      ####bfactor#7125#7144 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7140::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7141::Float64,##a2#7141::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7149 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7122#7130#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7142::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7132::Tuple{Type{Float64}}
  ##a1#7133::Float64
  ##a2#7134::Float64
  ######a#7107#7111#7135::Tuple{}
  ######b#7108#7112#7136::Tuple{}
  ######afactor#7109#7113#7137::Float64
  ######bfactor#7110#7114#7138::Float64
  ####_var0#7115#7139::Tuple{}
  ##a1#7140::Float64
  ##a2#7141::Float64
  ##div_a#7142::Float64
  ####afactor#7124#7143::Float64
  ####bfactor#7125#7144::Float64
  ########a#7107#7118#7126#7145::Tuple{}
  ########b#7108#7119#7127#7146::Tuple{}
  ########afactor#7109#7120#7128#7147::Float64
  ########bfactor#7110#7121#7129#7148::Float64
  ######_var0#7122#7130#7149::Tuple{}
  ######types#7123#7131#7150::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7133 = GenSym(3)
      ##a2#7134 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7139 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7115#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7133::Float64,##a2#7134::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7140 = GenSym(6)
      ##a2#7141 = GenSym(7)
      ##div_a#7142 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7140::Float64,##a2#7141::Float64))
      ####afactor#7124#7143 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7141::Float64))
      ####bfactor#7125#7144 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7140::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7141::Float64,##a2#7141::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7149 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7122#7130#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7142::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7132::Tuple{Type{Float64}}
  ##a1#7133::Float64
  ##a2#7134::Float64
  ######a#7107#7111#7135::Tuple{}
  ######b#7108#7112#7136::Tuple{}
  ######afactor#7109#7113#7137::Float64
  ######bfactor#7110#7114#7138::Float64
  ####_var0#7115#7139::Tuple{}
  ##a1#7140::Float64
  ##a2#7141::Float64
  ##div_a#7142::Float64
  ####afactor#7124#7143::Float64
  ####bfactor#7125#7144::Float64
  ########a#7107#7118#7126#7145::Tuple{}
  ########b#7108#7119#7127#7146::Tuple{}
  ########afactor#7109#7120#7128#7147::Float64
  ########bfactor#7110#7121#7129#7148::Float64
  ######_var0#7122#7130#7149::Tuple{}
  ######types#7123#7131#7150::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7133 = GenSym(3)
      ##a2#7134 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7139 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7115#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7133::Float64,##a2#7134::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7140 = GenSym(6)
      ##a2#7141 = GenSym(7)
      ##div_a#7142 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7140::Float64,##a2#7141::Float64))
      ####afactor#7124#7143 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7141::Float64))
      ####bfactor#7125#7144 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7140::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7141::Float64,##a2#7141::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7149 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7122#7130#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7142::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7132::Tuple{Type{Float64}}
  ##a1#7133::Float64
  ##a2#7134::Float64
  ######a#7107#7111#7135::Tuple{}
  ######b#7108#7112#7136::Tuple{}
  ######afactor#7109#7113#7137::Float64
  ######bfactor#7110#7114#7138::Float64
  ####_var0#7115#7139::Tuple{}
  ##a1#7140::Float64
  ##a2#7141::Float64
  ##div_a#7142::Float64
  ####afactor#7124#7143::Float64
  ####bfactor#7125#7144::Float64
  ########a#7107#7118#7126#7145::Tuple{}
  ########b#7108#7119#7127#7146::Tuple{}
  ########afactor#7109#7120#7128#7147::Float64
  ########bfactor#7110#7121#7129#7148::Float64
  ######_var0#7122#7130#7149::Tuple{}
  ######types#7123#7131#7150::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 55:
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(8)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 56:
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      GenSym(3) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7133 = GenSym(3)
      ##a2#7134 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7139 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7115#7139 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7133::Float64,##a2#7134::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7140 = GenSym(6)
      ##a2#7141 = GenSym(7)
      ##div_a#7142 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7140::Float64,##a2#7141::Float64))
      ####afactor#7124#7143 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7141::Float64))
      ####bfactor#7125#7144 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7140::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7141::Float64,##a2#7141::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7149 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7122#7130#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7142::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7173::Tuple{Type{Float64}}
  ######types#7116#7117#7174::Tuple{Type{Float64}}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7168#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7180::Tuple{}
  ##########x#7160#7162#7166#7171#7181::Float64
  ########_var0#7163#7167#7172#7182::Tuple{}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ######a#7107#7111#7185::Tuple{}
  ######b#7108#7112#7186::Tuple{}
  ######afactor#7109#7113#7187::Float64
  ######bfactor#7110#7114#7188::Float64
  ####_var0#7115#7189::Tuple{}
  ##a#7190::Float64
  ##exp_a#7191::Float64
  ##deriv#7192::Float64
  ####G#7168#7193::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7194::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7195::Tuple{}
  ##########x#7160#7162#7166#7171#7196::Float64
  ########_var0#7163#7167#7172#7197::Tuple{}
  ##a1#7198::Float64
  ##a2#7199::Float64
  ######a#7107#7111#7200::Tuple{}
  ######b#7108#7112#7201::Tuple{}
  ######afactor#7109#7113#7202::Float64
  ######bfactor#7110#7114#7203::Float64
  ####_var0#7115#7204::Tuple{}
  ##a1#7205::Float64
  ##a2#7206::Float64
  ##div_a#7207::Float64
  ####afactor#7124#7208::Float64
  ####bfactor#7125#7209::Float64
  ########a#7107#7118#7126#7210::Tuple{}
  ########b#7108#7119#7127#7211::Tuple{}
  ########afactor#7109#7120#7128#7212::Float64
  ########bfactor#7110#7121#7129#7213::Float64
  ######_var0#7122#7130#7214::Tuple{}
  ######types#7123#7131#7215::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7190 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7191 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7193 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7197 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7197 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7191::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7198 = GenSym(7)
      ##a2#7199 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7204 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7198::Float64,##a2#7199::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7182 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7172#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(4)
      ##a2#7184 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7189 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7189 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7183::Float64,##a2#7184::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7205 = GenSym(11)
      ##a2#7206 = GenSym(12)
      ##div_a#7207 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7205::Float64,##a2#7206::Float64))
      ####afactor#7124#7208 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7206::Float64))
      ####bfactor#7125#7209 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7205::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7206::Float64,##a2#7206::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7214 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7130#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7207::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(3) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(4) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(5)
      #s25 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(7)
      #s25 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,θ::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,1.0)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0))))))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7173::Tuple{Type{Float64}}
  ######types#7116#7117#7174::Tuple{Type{Float64}}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7168#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7180::Tuple{}
  ##########x#7160#7162#7166#7171#7181::Float64
  ########_var0#7163#7167#7172#7182::Tuple{}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ######a#7107#7111#7185::Tuple{}
  ######b#7108#7112#7186::Tuple{}
  ######afactor#7109#7113#7187::Float64
  ######bfactor#7110#7114#7188::Float64
  ####_var0#7115#7189::Tuple{}
  ##a#7190::Float64
  ##exp_a#7191::Float64
  ##deriv#7192::Float64
  ####G#7168#7193::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7194::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7195::Tuple{}
  ##########x#7160#7162#7166#7171#7196::Float64
  ########_var0#7163#7167#7172#7197::Tuple{}
  ##a1#7198::Float64
  ##a2#7199::Float64
  ######a#7107#7111#7200::Tuple{}
  ######b#7108#7112#7201::Tuple{}
  ######afactor#7109#7113#7202::Float64
  ######bfactor#7110#7114#7203::Float64
  ####_var0#7115#7204::Tuple{}
  ##a1#7205::Float64
  ##a2#7206::Float64
  ##div_a#7207::Float64
  ####afactor#7124#7208::Float64
  ####bfactor#7125#7209::Float64
  ########a#7107#7118#7126#7210::Tuple{}
  ########b#7108#7119#7127#7211::Tuple{}
  ########afactor#7109#7120#7128#7212::Float64
  ########bfactor#7110#7121#7129#7213::Float64
  ######_var0#7122#7130#7214::Tuple{}
  ######types#7123#7131#7215::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7190 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7191 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7193 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7197 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7197 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7191::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7198 = GenSym(7)
      ##a2#7199 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7204 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7198::Float64,##a2#7199::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7182 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7172#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(4)
      ##a2#7184 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7189 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7189 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7183::Float64,##a2#7184::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7205 = GenSym(11)
      ##a2#7206 = GenSym(12)
      ##div_a#7207 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7205::Float64,##a2#7206::Float64))
      ####afactor#7124#7208 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7206::Float64))
      ####bfactor#7125#7209 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7205::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7206::Float64,##a2#7206::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7214 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7130#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7207::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7173::Tuple{Type{Float64}}
  ######types#7116#7117#7174::Tuple{Type{Float64}}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7168#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7180::Tuple{}
  ##########x#7160#7162#7166#7171#7181::Float64
  ########_var0#7163#7167#7172#7182::Tuple{}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ######a#7107#7111#7185::Tuple{}
  ######b#7108#7112#7186::Tuple{}
  ######afactor#7109#7113#7187::Float64
  ######bfactor#7110#7114#7188::Float64
  ####_var0#7115#7189::Tuple{}
  ##a#7190::Float64
  ##exp_a#7191::Float64
  ##deriv#7192::Float64
  ####G#7168#7193::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7194::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7195::Tuple{}
  ##########x#7160#7162#7166#7171#7196::Float64
  ########_var0#7163#7167#7172#7197::Tuple{}
  ##a1#7198::Float64
  ##a2#7199::Float64
  ######a#7107#7111#7200::Tuple{}
  ######b#7108#7112#7201::Tuple{}
  ######afactor#7109#7113#7202::Float64
  ######bfactor#7110#7114#7203::Float64
  ####_var0#7115#7204::Tuple{}
  ##a1#7205::Float64
  ##a2#7206::Float64
  ##div_a#7207::Float64
  ####afactor#7124#7208::Float64
  ####bfactor#7125#7209::Float64
  ########a#7107#7118#7126#7210::Tuple{}
  ########b#7108#7119#7127#7211::Tuple{}
  ########afactor#7109#7120#7128#7212::Float64
  ########bfactor#7110#7121#7129#7213::Float64
  ######_var0#7122#7130#7214::Tuple{}
  ######types#7123#7131#7215::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7190 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7191 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7193 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7197 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7197 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7191::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7198 = GenSym(7)
      ##a2#7199 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7204 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7198::Float64,##a2#7199::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7182 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7172#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(4)
      ##a2#7184 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7189 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7189 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7183::Float64,##a2#7184::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7205 = GenSym(11)
      ##a2#7206 = GenSym(12)
      ##div_a#7207 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7205::Float64,##a2#7206::Float64))
      ####afactor#7124#7208 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7206::Float64))
      ####bfactor#7125#7209 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7205::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7206::Float64,##a2#7206::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7214 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7130#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7207::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7173::Tuple{Type{Float64}}
  ######types#7116#7117#7174::Tuple{Type{Float64}}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7168#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7180::Tuple{}
  ##########x#7160#7162#7166#7171#7181::Float64
  ########_var0#7163#7167#7172#7182::Tuple{}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ######a#7107#7111#7185::Tuple{}
  ######b#7108#7112#7186::Tuple{}
  ######afactor#7109#7113#7187::Float64
  ######bfactor#7110#7114#7188::Float64
  ####_var0#7115#7189::Tuple{}
  ##a#7190::Float64
  ##exp_a#7191::Float64
  ##deriv#7192::Float64
  ####G#7168#7193::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7194::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7195::Tuple{}
  ##########x#7160#7162#7166#7171#7196::Float64
  ########_var0#7163#7167#7172#7197::Tuple{}
  ##a1#7198::Float64
  ##a2#7199::Float64
  ######a#7107#7111#7200::Tuple{}
  ######b#7108#7112#7201::Tuple{}
  ######afactor#7109#7113#7202::Float64
  ######bfactor#7110#7114#7203::Float64
  ####_var0#7115#7204::Tuple{}
  ##a1#7205::Float64
  ##a2#7206::Float64
  ##div_a#7207::Float64
  ####afactor#7124#7208::Float64
  ####bfactor#7125#7209::Float64
  ########a#7107#7118#7126#7210::Tuple{}
  ########b#7108#7119#7127#7211::Tuple{}
  ########afactor#7109#7120#7128#7212::Float64
  ########bfactor#7110#7121#7129#7213::Float64
  ######_var0#7122#7130#7214::Tuple{}
  ######types#7123#7131#7215::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7190 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7191 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7193 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7197 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7197 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7191::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7198 = GenSym(7)
      ##a2#7199 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7204 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7198::Float64,##a2#7199::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7182 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7172#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(4)
      ##a2#7184 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7189 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7189 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7183::Float64,##a2#7184::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7205 = GenSym(11)
      ##a2#7206 = GenSym(12)
      ##div_a#7207 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7205::Float64,##a2#7206::Float64))
      ####afactor#7124#7208 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7206::Float64))
      ####bfactor#7125#7209 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7205::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7206::Float64,##a2#7206::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7214 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7130#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7207::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######types#7116#7117#7173::Tuple{Type{Float64}}
  ######types#7116#7117#7174::Tuple{Type{Float64}}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7168#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7180::Tuple{}
  ##########x#7160#7162#7166#7171#7181::Float64
  ########_var0#7163#7167#7172#7182::Tuple{}
  ##a1#7183::Float64
  ##a2#7184::Float64
  ######a#7107#7111#7185::Tuple{}
  ######b#7108#7112#7186::Tuple{}
  ######afactor#7109#7113#7187::Float64
  ######bfactor#7110#7114#7188::Float64
  ####_var0#7115#7189::Tuple{}
  ##a#7190::Float64
  ##exp_a#7191::Float64
  ##deriv#7192::Float64
  ####G#7168#7193::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7194::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7195::Tuple{}
  ##########x#7160#7162#7166#7171#7196::Float64
  ########_var0#7163#7167#7172#7197::Tuple{}
  ##a1#7198::Float64
  ##a2#7199::Float64
  ######a#7107#7111#7200::Tuple{}
  ######b#7108#7112#7201::Tuple{}
  ######afactor#7109#7113#7202::Float64
  ######bfactor#7110#7114#7203::Float64
  ####_var0#7115#7204::Tuple{}
  ##a1#7205::Float64
  ##a2#7206::Float64
  ##div_a#7207::Float64
  ####afactor#7124#7208::Float64
  ####bfactor#7125#7209::Float64
  ########a#7107#7118#7126#7210::Tuple{}
  ########b#7108#7119#7127#7211::Tuple{}
  ########afactor#7109#7120#7128#7212::Float64
  ########bfactor#7110#7121#7129#7213::Float64
  ######_var0#7122#7130#7214::Tuple{}
  ######types#7123#7131#7215::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 62:
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(13)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 63:
      unless (Base.lt_float)(2.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7190 = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7191 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7192 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7190::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7193 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7197 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7197 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7191::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(6),:value)::Float64
      GenSym(8) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7198 = GenSym(7)
      ##a2#7199 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7204 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7198::Float64,##a2#7199::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7182 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7172#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7183 = GenSym(4)
      ##a2#7184 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7189 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7189 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7183::Float64,##a2#7184::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      GenSym(12) = (top(getfield))(GenSym(10),:value)::Float64
      ##a1#7205 = GenSym(11)
      ##a2#7206 = GenSym(12)
      ##div_a#7207 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7205::Float64,##a2#7206::Float64))
      ####afactor#7124#7208 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7206::Float64))
      ####bfactor#7125#7209 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7205::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7206::Float64,##a2#7206::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7214 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7122#7130#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7207::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 59:
      return (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7229::Float64
  ##div_a#7230::Float64
  ##deriv#7231::Float64
  ####G#7219#7232::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7233::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7234::Tuple{}
  ##########x#7160#7162#7166#7222#7235::Float64
  ########_var0#7163#7167#7223#7236::Tuple{}
  ##a#7237::Float64
  ##exp_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7224#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7225#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7226#7242::Tuple{}
  ##########x#7160#7162#7166#7227#7243::Float64
  ########_var0#7163#7167#7228#7244::Tuple{}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7107#7111#7247::Tuple{}
  ######b#7108#7112#7248::Tuple{}
  ######afactor#7109#7113#7249::Float64
  ######bfactor#7110#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7229 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7230 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7229::Float64))
      ##deriv#7231 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7230::Float64,##a#7229::Float64))))
      ####G#7219#7232 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7236 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7230::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7237 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7237::Float64,0)::Float64
      ##exp_a#7238 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7237::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7238::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7224#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7228#7244 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7228#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7245 = GenSym(10)
      ##a2#7246 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)(θ::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,GenSym(3))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7229::Float64
  ##div_a#7230::Float64
  ##deriv#7231::Float64
  ####G#7219#7232::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7233::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7234::Tuple{}
  ##########x#7160#7162#7166#7222#7235::Float64
  ########_var0#7163#7167#7223#7236::Tuple{}
  ##a#7237::Float64
  ##exp_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7224#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7225#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7226#7242::Tuple{}
  ##########x#7160#7162#7166#7227#7243::Float64
  ########_var0#7163#7167#7228#7244::Tuple{}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7107#7111#7247::Tuple{}
  ######b#7108#7112#7248::Tuple{}
  ######afactor#7109#7113#7249::Float64
  ######bfactor#7110#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7229 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7230 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7229::Float64))
      ##deriv#7231 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7230::Float64,##a#7229::Float64))))
      ####G#7219#7232 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7236 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7230::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7237 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7237::Float64,0)::Float64
      ##exp_a#7238 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7237::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7238::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7224#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7228#7244 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7228#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7245 = GenSym(10)
      ##a2#7246 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7229::Float64
  ##div_a#7230::Float64
  ##deriv#7231::Float64
  ####G#7219#7232::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7233::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7234::Tuple{}
  ##########x#7160#7162#7166#7222#7235::Float64
  ########_var0#7163#7167#7223#7236::Tuple{}
  ##a#7237::Float64
  ##exp_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7224#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7225#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7226#7242::Tuple{}
  ##########x#7160#7162#7166#7227#7243::Float64
  ########_var0#7163#7167#7228#7244::Tuple{}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7107#7111#7247::Tuple{}
  ######b#7108#7112#7248::Tuple{}
  ######afactor#7109#7113#7249::Float64
  ######bfactor#7110#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7229 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7230 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7229::Float64))
      ##deriv#7231 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7230::Float64,##a#7229::Float64))))
      ####G#7219#7232 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7236 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7230::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7237 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7237::Float64,0)::Float64
      ##exp_a#7238 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7237::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7238::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7224#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7228#7244 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7228#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7245 = GenSym(10)
      ##a2#7246 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7229::Float64
  ##div_a#7230::Float64
  ##deriv#7231::Float64
  ####G#7219#7232::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7233::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7234::Tuple{}
  ##########x#7160#7162#7166#7222#7235::Float64
  ########_var0#7163#7167#7223#7236::Tuple{}
  ##a#7237::Float64
  ##exp_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7224#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7225#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7226#7242::Tuple{}
  ##########x#7160#7162#7166#7227#7243::Float64
  ########_var0#7163#7167#7228#7244::Tuple{}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7107#7111#7247::Tuple{}
  ######b#7108#7112#7248::Tuple{}
  ######afactor#7109#7113#7249::Float64
  ######bfactor#7110#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7229 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7230 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7229::Float64))
      ##deriv#7231 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7230::Float64,##a#7229::Float64))))
      ####G#7219#7232 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7236 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7230::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7237 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7237::Float64,0)::Float64
      ##exp_a#7238 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7237::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7238::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7224#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7228#7244 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7228#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7245 = GenSym(10)
      ##a2#7246 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7229::Float64
  ##div_a#7230::Float64
  ##deriv#7231::Float64
  ####G#7219#7232::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7233::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7234::Tuple{}
  ##########x#7160#7162#7166#7222#7235::Float64
  ########_var0#7163#7167#7223#7236::Tuple{}
  ##a#7237::Float64
  ##exp_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7224#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7225#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7226#7242::Tuple{}
  ##########x#7160#7162#7166#7227#7243::Float64
  ########_var0#7163#7167#7228#7244::Tuple{}
  ##a1#7245::Float64
  ##a2#7246::Float64
  ######a#7107#7111#7247::Tuple{}
  ######b#7108#7112#7248::Tuple{}
  ######afactor#7109#7113#7249::Float64
  ######bfactor#7110#7114#7250::Float64
  ####_var0#7115#7251::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 58:
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(16)
      #s25 = GenSym(17)
      ##a#7229 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7230 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7229::Float64))
      ##deriv#7231 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7230::Float64,##a#7229::Float64))))
      ####G#7219#7232 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7236 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7236 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7230::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7237 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,2.0,0,##a#7237::Float64,0)::Float64
      ##exp_a#7238 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(2.0,##a#7237::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,2.0,0)::Float64
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7238::Float64,(Base.Math.nan_dom_err)(GenSym(8),2.0)::Float64))
      ####G#7224#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7228#7244 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7228#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7245 = GenSym(10)
      ##a2#7246 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7251 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7115#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7245::Float64,##a2#7246::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7269::Tuple{Type{Float64}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ##div_a#7272::Float64
  ####afactor#7124#7273::Float64
  ####bfactor#7125#7274::Float64
  ########a#7107#7118#7126#7275::Tuple{}
  ########b#7108#7119#7127#7276::Tuple{}
  ########afactor#7109#7120#7128#7277::Float64
  ########bfactor#7110#7121#7129#7278::Float64
  ######_var0#7122#7130#7279::Tuple{}
  ######types#7123#7131#7280::Tuple{Type{Float64}}
  ##sqrt_a#7281::Float64
  ##deriv#7282::Float64
  ####G#7264#7283::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7265#7284::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7266#7285::Tuple{}
  ##########x#7160#7162#7166#7267#7286::Float64
  ########_var0#7163#7167#7268#7287::Tuple{}
  ######types#7116#7117#7288::Tuple{Type{Float64}}
  ########types#7116#7254#7255#7289::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7290::Tuple{}
  ########x#7160#7257#7261#7291::Float64
  ######_var0#7258#7262#7292::Tuple{}
  ########types#7116#7259#7263#7293::Tuple{Type{Float64}}
  ##a1#7294::Float64
  ##a2#7295::Float64
  ##div_a#7296::Float64
  ####afactor#7124#7297::Float64
  ####bfactor#7125#7298::Float64
  ########a#7107#7118#7126#7299::Tuple{}
  ########b#7108#7119#7127#7300::Tuple{}
  ########afactor#7109#7120#7128#7301::Float64
  ########bfactor#7110#7121#7129#7302::Float64
  ######_var0#7122#7130#7303::Tuple{}
  ######types#7123#7131#7304::Tuple{Type{Float64}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7107#7111#7307::Tuple{}
  ######b#7108#7112#7308::Tuple{}
  ######afactor#7109#7113#7309::Float64
  ######bfactor#7110#7114#7310::Float64
  ####_var0#7115#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7292 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7258#7262#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7294 = GenSym(3)
      ##a2#7295 = GenSym(4)
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7294::Float64,##a2#7295::Float64))
      ####afactor#7124#7297 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7295::Float64))
      ####bfactor#7125#7298 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7294::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7295::Float64,##a2#7295::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7303 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7122#7130#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7270 = GenSym(0)
      ##a2#7271 = GenSym(1)
      ##div_a#7272 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7270::Float64,##a2#7271::Float64))
      ####afactor#7124#7273 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7271::Float64))
      ####bfactor#7125#7274 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7270::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7271::Float64,##a2#7271::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7279 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7122#7130#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7272::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7281 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7282 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7281::Float64))
      ####G#7264#7283 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7268#7287 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7268#7287 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7305 = GenSym(7)
      ##a2#7306 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7311 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.add_float)(1.0,α::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(α::Float64,2.0)),α::Float64))))::Float64))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7269::Tuple{Type{Float64}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ##div_a#7272::Float64
  ####afactor#7124#7273::Float64
  ####bfactor#7125#7274::Float64
  ########a#7107#7118#7126#7275::Tuple{}
  ########b#7108#7119#7127#7276::Tuple{}
  ########afactor#7109#7120#7128#7277::Float64
  ########bfactor#7110#7121#7129#7278::Float64
  ######_var0#7122#7130#7279::Tuple{}
  ######types#7123#7131#7280::Tuple{Type{Float64}}
  ##sqrt_a#7281::Float64
  ##deriv#7282::Float64
  ####G#7264#7283::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7265#7284::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7266#7285::Tuple{}
  ##########x#7160#7162#7166#7267#7286::Float64
  ########_var0#7163#7167#7268#7287::Tuple{}
  ######types#7116#7117#7288::Tuple{Type{Float64}}
  ########types#7116#7254#7255#7289::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7290::Tuple{}
  ########x#7160#7257#7261#7291::Float64
  ######_var0#7258#7262#7292::Tuple{}
  ########types#7116#7259#7263#7293::Tuple{Type{Float64}}
  ##a1#7294::Float64
  ##a2#7295::Float64
  ##div_a#7296::Float64
  ####afactor#7124#7297::Float64
  ####bfactor#7125#7298::Float64
  ########a#7107#7118#7126#7299::Tuple{}
  ########b#7108#7119#7127#7300::Tuple{}
  ########afactor#7109#7120#7128#7301::Float64
  ########bfactor#7110#7121#7129#7302::Float64
  ######_var0#7122#7130#7303::Tuple{}
  ######types#7123#7131#7304::Tuple{Type{Float64}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7107#7111#7307::Tuple{}
  ######b#7108#7112#7308::Tuple{}
  ######afactor#7109#7113#7309::Float64
  ######bfactor#7110#7114#7310::Float64
  ####_var0#7115#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7292 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7258#7262#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7294 = GenSym(3)
      ##a2#7295 = GenSym(4)
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7294::Float64,##a2#7295::Float64))
      ####afactor#7124#7297 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7295::Float64))
      ####bfactor#7125#7298 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7294::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7295::Float64,##a2#7295::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7303 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7122#7130#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7270 = GenSym(0)
      ##a2#7271 = GenSym(1)
      ##div_a#7272 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7270::Float64,##a2#7271::Float64))
      ####afactor#7124#7273 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7271::Float64))
      ####bfactor#7125#7274 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7270::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7271::Float64,##a2#7271::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7279 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7122#7130#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7272::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7281 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7282 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7281::Float64))
      ####G#7264#7283 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7268#7287 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7268#7287 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7305 = GenSym(7)
      ##a2#7306 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7311 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7269::Tuple{Type{Float64}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ##div_a#7272::Float64
  ####afactor#7124#7273::Float64
  ####bfactor#7125#7274::Float64
  ########a#7107#7118#7126#7275::Tuple{}
  ########b#7108#7119#7127#7276::Tuple{}
  ########afactor#7109#7120#7128#7277::Float64
  ########bfactor#7110#7121#7129#7278::Float64
  ######_var0#7122#7130#7279::Tuple{}
  ######types#7123#7131#7280::Tuple{Type{Float64}}
  ##sqrt_a#7281::Float64
  ##deriv#7282::Float64
  ####G#7264#7283::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7265#7284::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7266#7285::Tuple{}
  ##########x#7160#7162#7166#7267#7286::Float64
  ########_var0#7163#7167#7268#7287::Tuple{}
  ######types#7116#7117#7288::Tuple{Type{Float64}}
  ########types#7116#7254#7255#7289::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7290::Tuple{}
  ########x#7160#7257#7261#7291::Float64
  ######_var0#7258#7262#7292::Tuple{}
  ########types#7116#7259#7263#7293::Tuple{Type{Float64}}
  ##a1#7294::Float64
  ##a2#7295::Float64
  ##div_a#7296::Float64
  ####afactor#7124#7297::Float64
  ####bfactor#7125#7298::Float64
  ########a#7107#7118#7126#7299::Tuple{}
  ########b#7108#7119#7127#7300::Tuple{}
  ########afactor#7109#7120#7128#7301::Float64
  ########bfactor#7110#7121#7129#7302::Float64
  ######_var0#7122#7130#7303::Tuple{}
  ######types#7123#7131#7304::Tuple{Type{Float64}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7107#7111#7307::Tuple{}
  ######b#7108#7112#7308::Tuple{}
  ######afactor#7109#7113#7309::Float64
  ######bfactor#7110#7114#7310::Float64
  ####_var0#7115#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7292 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7258#7262#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7294 = GenSym(3)
      ##a2#7295 = GenSym(4)
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7294::Float64,##a2#7295::Float64))
      ####afactor#7124#7297 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7295::Float64))
      ####bfactor#7125#7298 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7294::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7295::Float64,##a2#7295::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7303 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7122#7130#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7270 = GenSym(0)
      ##a2#7271 = GenSym(1)
      ##div_a#7272 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7270::Float64,##a2#7271::Float64))
      ####afactor#7124#7273 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7271::Float64))
      ####bfactor#7125#7274 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7270::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7271::Float64,##a2#7271::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7279 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7122#7130#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7272::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7281 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7282 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7281::Float64))
      ####G#7264#7283 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7268#7287 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7268#7287 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7305 = GenSym(7)
      ##a2#7306 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7311 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7269::Tuple{Type{Float64}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ##div_a#7272::Float64
  ####afactor#7124#7273::Float64
  ####bfactor#7125#7274::Float64
  ########a#7107#7118#7126#7275::Tuple{}
  ########b#7108#7119#7127#7276::Tuple{}
  ########afactor#7109#7120#7128#7277::Float64
  ########bfactor#7110#7121#7129#7278::Float64
  ######_var0#7122#7130#7279::Tuple{}
  ######types#7123#7131#7280::Tuple{Type{Float64}}
  ##sqrt_a#7281::Float64
  ##deriv#7282::Float64
  ####G#7264#7283::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7265#7284::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7266#7285::Tuple{}
  ##########x#7160#7162#7166#7267#7286::Float64
  ########_var0#7163#7167#7268#7287::Tuple{}
  ######types#7116#7117#7288::Tuple{Type{Float64}}
  ########types#7116#7254#7255#7289::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7290::Tuple{}
  ########x#7160#7257#7261#7291::Float64
  ######_var0#7258#7262#7292::Tuple{}
  ########types#7116#7259#7263#7293::Tuple{Type{Float64}}
  ##a1#7294::Float64
  ##a2#7295::Float64
  ##div_a#7296::Float64
  ####afactor#7124#7297::Float64
  ####bfactor#7125#7298::Float64
  ########a#7107#7118#7126#7299::Tuple{}
  ########b#7108#7119#7127#7300::Tuple{}
  ########afactor#7109#7120#7128#7301::Float64
  ########bfactor#7110#7121#7129#7302::Float64
  ######_var0#7122#7130#7303::Tuple{}
  ######types#7123#7131#7304::Tuple{Type{Float64}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7107#7111#7307::Tuple{}
  ######b#7108#7112#7308::Tuple{}
  ######afactor#7109#7113#7309::Float64
  ######bfactor#7110#7114#7310::Float64
  ####_var0#7115#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7292 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7258#7262#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7294 = GenSym(3)
      ##a2#7295 = GenSym(4)
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7294::Float64,##a2#7295::Float64))
      ####afactor#7124#7297 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7295::Float64))
      ####bfactor#7125#7298 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7294::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7295::Float64,##a2#7295::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7303 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7122#7130#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7270 = GenSym(0)
      ##a2#7271 = GenSym(1)
      ##div_a#7272 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7270::Float64,##a2#7271::Float64))
      ####afactor#7124#7273 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7271::Float64))
      ####bfactor#7125#7274 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7270::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7271::Float64,##a2#7271::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7279 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7122#7130#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7272::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7281 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7282 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7281::Float64))
      ####G#7264#7283 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7268#7287 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7268#7287 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7305 = GenSym(7)
      ##a2#7306 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7311 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7269::Tuple{Type{Float64}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ##div_a#7272::Float64
  ####afactor#7124#7273::Float64
  ####bfactor#7125#7274::Float64
  ########a#7107#7118#7126#7275::Tuple{}
  ########b#7108#7119#7127#7276::Tuple{}
  ########afactor#7109#7120#7128#7277::Float64
  ########bfactor#7110#7121#7129#7278::Float64
  ######_var0#7122#7130#7279::Tuple{}
  ######types#7123#7131#7280::Tuple{Type{Float64}}
  ##sqrt_a#7281::Float64
  ##deriv#7282::Float64
  ####G#7264#7283::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7265#7284::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7266#7285::Tuple{}
  ##########x#7160#7162#7166#7267#7286::Float64
  ########_var0#7163#7167#7268#7287::Tuple{}
  ######types#7116#7117#7288::Tuple{Type{Float64}}
  ########types#7116#7254#7255#7289::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7290::Tuple{}
  ########x#7160#7257#7261#7291::Float64
  ######_var0#7258#7262#7292::Tuple{}
  ########types#7116#7259#7263#7293::Tuple{Type{Float64}}
  ##a1#7294::Float64
  ##a2#7295::Float64
  ##div_a#7296::Float64
  ####afactor#7124#7297::Float64
  ####bfactor#7125#7298::Float64
  ########a#7107#7118#7126#7299::Tuple{}
  ########b#7108#7119#7127#7300::Tuple{}
  ########afactor#7109#7120#7128#7301::Float64
  ########bfactor#7110#7121#7129#7302::Float64
  ######_var0#7122#7130#7303::Tuple{}
  ######types#7123#7131#7304::Tuple{Type{Float64}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7107#7111#7307::Tuple{}
  ######b#7108#7112#7308::Tuple{}
  ######afactor#7109#7113#7309::Float64
  ######bfactor#7110#7114#7310::Float64
  ####_var0#7115#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 67:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 68:
      unless (Base.lt_float)(3.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7292 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7258#7262#7292 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ##a1#7294 = GenSym(3)
      ##a2#7295 = GenSym(4)
      ##div_a#7296 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7294::Float64,##a2#7295::Float64))
      ####afactor#7124#7297 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7295::Float64))
      ####bfactor#7125#7298 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7294::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7295::Float64,##a2#7295::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7303 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7122#7130#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7296::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(1) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7270 = GenSym(0)
      ##a2#7271 = GenSym(1)
      ##div_a#7272 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7270::Float64,##a2#7271::Float64))
      ####afactor#7124#7273 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7271::Float64))
      ####bfactor#7125#7274 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7270::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7271::Float64,##a2#7271::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7279 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7122#7130#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7272::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7281 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7282 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7281::Float64))
      ####G#7264#7283 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7268#7287 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7268#7287 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7281::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7305 = GenSym(7)
      ##a2#7306 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7311 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7115#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7338::Tuple{Type{Float64}}
  ######types#7116#7117#7339::Tuple{Type{Float64}}
  ##xs#7340::Tuple{}
  ####a1#7324#7341::Float64
  ####a2#7325#7342::Float64
  ########a#7107#7111#7326#7343::Tuple{}
  ########b#7108#7112#7327#7344::Tuple{}
  ########afactor#7109#7113#7328#7345::Float64
  ########bfactor#7110#7114#7329#7346::Float64
  ######_var0#7115#7330#7347::Tuple{}
  ####a1#7331#7348::Float64
  ####a2#7332#7349::Float64
  ########a#7107#7111#7333#7350::Tuple{}
  ########b#7108#7112#7334#7351::Tuple{}
  ########afactor#7109#7113#7335#7352::Float64
  ########bfactor#7110#7114#7336#7353::Float64
  ######_var0#7115#7337#7354::Tuple{}
  ########tup#7159#7256#7260#7355::Tuple{}
  ########x#7160#7257#7261#7356::Float64
  ######_var0#7258#7262#7357::Tuple{}
  ########types#7116#7259#7263#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ##exp_a#7360::Float64
  ##deriv#7361::Float64
  ####G#7168#7362::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7363::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7364::Tuple{}
  ##########x#7160#7162#7166#7171#7365::Float64
  ########_var0#7163#7167#7172#7366::Tuple{}
  ##a#7367::Float64
  ##exp_a#7368::Float64
  ##deriv#7369::Float64
  ####G#7168#7370::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7371::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7372::Tuple{}
  ##########x#7160#7162#7166#7171#7373::Float64
  ########_var0#7163#7167#7172#7374::Tuple{}
  ######a#7314#7316#7375::Tuple{}
  ######b#7315#7317#7376::Tuple{}
  ####_var0#7318#7377::Tuple{}
  ######a#7319#7321#7378::Tuple{}
  ######b#7320#7322#7379::Tuple{}
  ####_var0#7323#7380::Tuple{}
  ######types#7116#7117#7381::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7382::Tuple{}
  ########x#7160#7257#7261#7383::Float64
  ######_var0#7258#7262#7384::Tuple{}
  ########types#7116#7259#7263#7385::Tuple{Type{Float64}}
  ##a1#7386::Float64
  ##a2#7387::Float64
  ##div_a#7388::Float64
  ####afactor#7124#7389::Float64
  ####bfactor#7125#7390::Float64
  ########a#7107#7118#7126#7391::Tuple{}
  ########b#7108#7119#7127#7392::Tuple{}
  ########afactor#7109#7120#7128#7393::Float64
  ########bfactor#7110#7121#7129#7394::Float64
  ######_var0#7122#7130#7395::Tuple{}
  ######types#7123#7131#7396::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7367 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7368 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7168#7370 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7374 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7368::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7359 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7360 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7361 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7362 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7366 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7163#7167#7172#7366 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7360::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7318#7377 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7318#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7357 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7258#7262#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7323#7380 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7323#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7384 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7258#7262#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7324#7341 = GenSym(0)
      ####a2#7325#7342 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7330#7347 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7115#7330#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7324#7341::Float64,####a2#7325#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7331#7348 = GenSym(3)
      ####a2#7332#7349 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7337#7354 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7115#7337#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7331#7348::Float64,####a2#7332#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7386 = GenSym(9)
      ##a2#7387 = GenSym(10)
      ##div_a#7388 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7386::Float64,##a2#7387::Float64))
      ####afactor#7124#7389 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7387::Float64))
      ####bfactor#7125#7390 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7386::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7387::Float64,##a2#7387::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7395 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7122#7130#7395 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,α::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(6.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)),α::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(α::Float64,α::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(6.0,α::Float64)))),2.0)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,3.0)))),(Base.box)(Base.Float64,(Base.sub_float)(α::Float64,4.0))))))
      0: 
      return Distributions.NaN
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7338::Tuple{Type{Float64}}
  ######types#7116#7117#7339::Tuple{Type{Float64}}
  ##xs#7340::Tuple{}
  ####a1#7324#7341::Float64
  ####a2#7325#7342::Float64
  ########a#7107#7111#7326#7343::Tuple{}
  ########b#7108#7112#7327#7344::Tuple{}
  ########afactor#7109#7113#7328#7345::Float64
  ########bfactor#7110#7114#7329#7346::Float64
  ######_var0#7115#7330#7347::Tuple{}
  ####a1#7331#7348::Float64
  ####a2#7332#7349::Float64
  ########a#7107#7111#7333#7350::Tuple{}
  ########b#7108#7112#7334#7351::Tuple{}
  ########afactor#7109#7113#7335#7352::Float64
  ########bfactor#7110#7114#7336#7353::Float64
  ######_var0#7115#7337#7354::Tuple{}
  ########tup#7159#7256#7260#7355::Tuple{}
  ########x#7160#7257#7261#7356::Float64
  ######_var0#7258#7262#7357::Tuple{}
  ########types#7116#7259#7263#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ##exp_a#7360::Float64
  ##deriv#7361::Float64
  ####G#7168#7362::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7363::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7364::Tuple{}
  ##########x#7160#7162#7166#7171#7365::Float64
  ########_var0#7163#7167#7172#7366::Tuple{}
  ##a#7367::Float64
  ##exp_a#7368::Float64
  ##deriv#7369::Float64
  ####G#7168#7370::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7371::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7372::Tuple{}
  ##########x#7160#7162#7166#7171#7373::Float64
  ########_var0#7163#7167#7172#7374::Tuple{}
  ######a#7314#7316#7375::Tuple{}
  ######b#7315#7317#7376::Tuple{}
  ####_var0#7318#7377::Tuple{}
  ######a#7319#7321#7378::Tuple{}
  ######b#7320#7322#7379::Tuple{}
  ####_var0#7323#7380::Tuple{}
  ######types#7116#7117#7381::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7382::Tuple{}
  ########x#7160#7257#7261#7383::Float64
  ######_var0#7258#7262#7384::Tuple{}
  ########types#7116#7259#7263#7385::Tuple{Type{Float64}}
  ##a1#7386::Float64
  ##a2#7387::Float64
  ##div_a#7388::Float64
  ####afactor#7124#7389::Float64
  ####bfactor#7125#7390::Float64
  ########a#7107#7118#7126#7391::Tuple{}
  ########b#7108#7119#7127#7392::Tuple{}
  ########afactor#7109#7120#7128#7393::Float64
  ########bfactor#7110#7121#7129#7394::Float64
  ######_var0#7122#7130#7395::Tuple{}
  ######types#7123#7131#7396::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7367 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7368 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7168#7370 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7374 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7368::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7359 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7360 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7361 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7362 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7366 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7163#7167#7172#7366 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7360::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7318#7377 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7318#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7357 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7258#7262#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7323#7380 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7323#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7384 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7258#7262#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7324#7341 = GenSym(0)
      ####a2#7325#7342 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7330#7347 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7115#7330#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7324#7341::Float64,####a2#7325#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7331#7348 = GenSym(3)
      ####a2#7332#7349 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7337#7354 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7115#7337#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7331#7348::Float64,####a2#7332#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7386 = GenSym(9)
      ##a2#7387 = GenSym(10)
      ##div_a#7388 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7386::Float64,##a2#7387::Float64))
      ####afactor#7124#7389 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7387::Float64))
      ####bfactor#7125#7390 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7386::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7387::Float64,##a2#7387::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7395 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7122#7130#7395 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7338::Tuple{Type{Float64}}
  ######types#7116#7117#7339::Tuple{Type{Float64}}
  ##xs#7340::Tuple{}
  ####a1#7324#7341::Float64
  ####a2#7325#7342::Float64
  ########a#7107#7111#7326#7343::Tuple{}
  ########b#7108#7112#7327#7344::Tuple{}
  ########afactor#7109#7113#7328#7345::Float64
  ########bfactor#7110#7114#7329#7346::Float64
  ######_var0#7115#7330#7347::Tuple{}
  ####a1#7331#7348::Float64
  ####a2#7332#7349::Float64
  ########a#7107#7111#7333#7350::Tuple{}
  ########b#7108#7112#7334#7351::Tuple{}
  ########afactor#7109#7113#7335#7352::Float64
  ########bfactor#7110#7114#7336#7353::Float64
  ######_var0#7115#7337#7354::Tuple{}
  ########tup#7159#7256#7260#7355::Tuple{}
  ########x#7160#7257#7261#7356::Float64
  ######_var0#7258#7262#7357::Tuple{}
  ########types#7116#7259#7263#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ##exp_a#7360::Float64
  ##deriv#7361::Float64
  ####G#7168#7362::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7363::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7364::Tuple{}
  ##########x#7160#7162#7166#7171#7365::Float64
  ########_var0#7163#7167#7172#7366::Tuple{}
  ##a#7367::Float64
  ##exp_a#7368::Float64
  ##deriv#7369::Float64
  ####G#7168#7370::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7371::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7372::Tuple{}
  ##########x#7160#7162#7166#7171#7373::Float64
  ########_var0#7163#7167#7172#7374::Tuple{}
  ######a#7314#7316#7375::Tuple{}
  ######b#7315#7317#7376::Tuple{}
  ####_var0#7318#7377::Tuple{}
  ######a#7319#7321#7378::Tuple{}
  ######b#7320#7322#7379::Tuple{}
  ####_var0#7323#7380::Tuple{}
  ######types#7116#7117#7381::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7382::Tuple{}
  ########x#7160#7257#7261#7383::Float64
  ######_var0#7258#7262#7384::Tuple{}
  ########types#7116#7259#7263#7385::Tuple{Type{Float64}}
  ##a1#7386::Float64
  ##a2#7387::Float64
  ##div_a#7388::Float64
  ####afactor#7124#7389::Float64
  ####bfactor#7125#7390::Float64
  ########a#7107#7118#7126#7391::Tuple{}
  ########b#7108#7119#7127#7392::Tuple{}
  ########afactor#7109#7120#7128#7393::Float64
  ########bfactor#7110#7121#7129#7394::Float64
  ######_var0#7122#7130#7395::Tuple{}
  ######types#7123#7131#7396::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7367 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7368 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7168#7370 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7374 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7368::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7359 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7360 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7361 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7362 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7366 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7163#7167#7172#7366 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7360::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7318#7377 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7318#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7357 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7258#7262#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7323#7380 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7323#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7384 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7258#7262#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7324#7341 = GenSym(0)
      ####a2#7325#7342 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7330#7347 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7115#7330#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7324#7341::Float64,####a2#7325#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7331#7348 = GenSym(3)
      ####a2#7332#7349 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7337#7354 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7115#7337#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7331#7348::Float64,####a2#7332#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7386 = GenSym(9)
      ##a2#7387 = GenSym(10)
      ##div_a#7388 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7386::Float64,##a2#7387::Float64))
      ####afactor#7124#7389 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7387::Float64))
      ####bfactor#7125#7390 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7386::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7387::Float64,##a2#7387::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7395 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7122#7130#7395 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7338::Tuple{Type{Float64}}
  ######types#7116#7117#7339::Tuple{Type{Float64}}
  ##xs#7340::Tuple{}
  ####a1#7324#7341::Float64
  ####a2#7325#7342::Float64
  ########a#7107#7111#7326#7343::Tuple{}
  ########b#7108#7112#7327#7344::Tuple{}
  ########afactor#7109#7113#7328#7345::Float64
  ########bfactor#7110#7114#7329#7346::Float64
  ######_var0#7115#7330#7347::Tuple{}
  ####a1#7331#7348::Float64
  ####a2#7332#7349::Float64
  ########a#7107#7111#7333#7350::Tuple{}
  ########b#7108#7112#7334#7351::Tuple{}
  ########afactor#7109#7113#7335#7352::Float64
  ########bfactor#7110#7114#7336#7353::Float64
  ######_var0#7115#7337#7354::Tuple{}
  ########tup#7159#7256#7260#7355::Tuple{}
  ########x#7160#7257#7261#7356::Float64
  ######_var0#7258#7262#7357::Tuple{}
  ########types#7116#7259#7263#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ##exp_a#7360::Float64
  ##deriv#7361::Float64
  ####G#7168#7362::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7363::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7364::Tuple{}
  ##########x#7160#7162#7166#7171#7365::Float64
  ########_var0#7163#7167#7172#7366::Tuple{}
  ##a#7367::Float64
  ##exp_a#7368::Float64
  ##deriv#7369::Float64
  ####G#7168#7370::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7371::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7372::Tuple{}
  ##########x#7160#7162#7166#7171#7373::Float64
  ########_var0#7163#7167#7172#7374::Tuple{}
  ######a#7314#7316#7375::Tuple{}
  ######b#7315#7317#7376::Tuple{}
  ####_var0#7318#7377::Tuple{}
  ######a#7319#7321#7378::Tuple{}
  ######b#7320#7322#7379::Tuple{}
  ####_var0#7323#7380::Tuple{}
  ######types#7116#7117#7381::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7382::Tuple{}
  ########x#7160#7257#7261#7383::Float64
  ######_var0#7258#7262#7384::Tuple{}
  ########types#7116#7259#7263#7385::Tuple{Type{Float64}}
  ##a1#7386::Float64
  ##a2#7387::Float64
  ##div_a#7388::Float64
  ####afactor#7124#7389::Float64
  ####bfactor#7125#7390::Float64
  ########a#7107#7118#7126#7391::Tuple{}
  ########b#7108#7119#7127#7392::Tuple{}
  ########afactor#7109#7120#7128#7393::Float64
  ########bfactor#7110#7121#7129#7394::Float64
  ######_var0#7122#7130#7395::Tuple{}
  ######types#7123#7131#7396::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7367 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7368 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7168#7370 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7374 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7368::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7359 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7360 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7361 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7362 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7366 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7163#7167#7172#7366 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7360::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7318#7377 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7318#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7357 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7258#7262#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7323#7380 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7323#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7384 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7258#7262#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7324#7341 = GenSym(0)
      ####a2#7325#7342 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7330#7347 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7115#7330#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7324#7341::Float64,####a2#7325#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7331#7348 = GenSym(3)
      ####a2#7332#7349 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7337#7354 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7115#7337#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7331#7348::Float64,####a2#7332#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7386 = GenSym(9)
      ##a2#7387 = GenSym(10)
      ##div_a#7388 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7386::Float64,##a2#7387::Float64))
      ####afactor#7124#7389 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7387::Float64))
      ####bfactor#7125#7390 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7386::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7387::Float64,##a2#7387::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7395 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7122#7130#7395 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######types#7116#7117#7338::Tuple{Type{Float64}}
  ######types#7116#7117#7339::Tuple{Type{Float64}}
  ##xs#7340::Tuple{}
  ####a1#7324#7341::Float64
  ####a2#7325#7342::Float64
  ########a#7107#7111#7326#7343::Tuple{}
  ########b#7108#7112#7327#7344::Tuple{}
  ########afactor#7109#7113#7328#7345::Float64
  ########bfactor#7110#7114#7329#7346::Float64
  ######_var0#7115#7330#7347::Tuple{}
  ####a1#7331#7348::Float64
  ####a2#7332#7349::Float64
  ########a#7107#7111#7333#7350::Tuple{}
  ########b#7108#7112#7334#7351::Tuple{}
  ########afactor#7109#7113#7335#7352::Float64
  ########bfactor#7110#7114#7336#7353::Float64
  ######_var0#7115#7337#7354::Tuple{}
  ########tup#7159#7256#7260#7355::Tuple{}
  ########x#7160#7257#7261#7356::Float64
  ######_var0#7258#7262#7357::Tuple{}
  ########types#7116#7259#7263#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ##exp_a#7360::Float64
  ##deriv#7361::Float64
  ####G#7168#7362::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7363::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7364::Tuple{}
  ##########x#7160#7162#7166#7171#7365::Float64
  ########_var0#7163#7167#7172#7366::Tuple{}
  ##a#7367::Float64
  ##exp_a#7368::Float64
  ##deriv#7369::Float64
  ####G#7168#7370::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7169#7371::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7170#7372::Tuple{}
  ##########x#7160#7162#7166#7171#7373::Float64
  ########_var0#7163#7167#7172#7374::Tuple{}
  ######a#7314#7316#7375::Tuple{}
  ######b#7315#7317#7376::Tuple{}
  ####_var0#7318#7377::Tuple{}
  ######a#7319#7321#7378::Tuple{}
  ######b#7320#7322#7379::Tuple{}
  ####_var0#7323#7380::Tuple{}
  ######types#7116#7117#7381::Tuple{Type{Float64}}
  ########tup#7159#7256#7260#7382::Tuple{}
  ########x#7160#7257#7261#7383::Float64
  ######_var0#7258#7262#7384::Tuple{}
  ########types#7116#7259#7263#7385::Tuple{Type{Float64}}
  ##a1#7386::Float64
  ##a2#7387::Float64
  ##div_a#7388::Float64
  ####afactor#7124#7389::Float64
  ####bfactor#7125#7390::Float64
  ########a#7107#7118#7126#7391::Tuple{}
  ########b#7108#7119#7127#7392::Tuple{}
  ########afactor#7109#7120#7128#7393::Float64
  ########bfactor#7110#7121#7129#7394::Float64
  ######_var0#7122#7130#7395::Tuple{}
  ######types#7123#7131#7396::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 72:
      α = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 73:
      unless (Base.lt_float)(4.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7367 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7368 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7367::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7168#7370 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7374 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7163#7167#7172#7374 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7368::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7359 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7360 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7361 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7359::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7168#7362 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7172#7366 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7163#7167#7172#7366 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7360::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7318#7377 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7318#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7357 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7258#7262#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ####_var0#7323#7380 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7323#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,(top(getfield))(GenSym(6),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7262#7384 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7258#7262#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(0) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7324#7341 = GenSym(0)
      ####a2#7325#7342 = GenSym(1)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7330#7347 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7115#7330#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7324#7341::Float64,####a2#7325#7342::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(3) = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      ####a1#7331#7348 = GenSym(3)
      ####a2#7332#7349 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7337#7354 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7115#7337#7354 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7331#7348::Float64,####a2#7332#7349::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,2.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7386 = GenSym(9)
      ##a2#7387 = GenSym(10)
      ##div_a#7388 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7386::Float64,##a2#7387::Float64))
      ####afactor#7124#7389 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7387::Float64))
      ####bfactor#7125#7390 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7386::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7387::Float64,##a2#7387::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7395 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7122#7130#7395 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7388::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.NaN), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7407::Float64
  ##div_a#7408::Float64
  ##deriv#7409::Float64
  ####G#7219#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7412::Tuple{}
  ##########x#7160#7162#7166#7222#7413::Float64
  ########_var0#7163#7167#7223#7414::Tuple{}
  ##a1#7415::Float64
  ##a2#7416::Float64
  ##div_a#7417::Float64
  ####afactor#7124#7418::Float64
  ####bfactor#7125#7419::Float64
  ########a#7107#7118#7126#7420::Tuple{}
  ########b#7108#7119#7127#7421::Tuple{}
  ########afactor#7109#7120#7128#7422::Float64
  ########bfactor#7110#7121#7129#7423::Float64
  ######_var0#7122#7130#7424::Tuple{}
  ######types#7123#7131#7425::Tuple{Type{Float64}}
  ##a#7426::Float64
  ####G#7398#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7399#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7400#7429::Tuple{}
  ##########x#7160#7162#7166#7401#7430::Float64
  ########_var0#7163#7167#7402#7431::Tuple{}
  ##xs#7432::Tuple{}
  ########a#7314#7316#7403#7433::Tuple{}
  ########b#7315#7317#7404#7434::Tuple{}
  ######_var0#7318#7405#7435::Tuple{}
  ########types#7116#7254#7406#7436::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7415 = GenSym(3)
      ##a2#7416 = GenSym(4)
      ##div_a#7417 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7415::Float64,##a2#7416::Float64))
      ####afactor#7124#7418 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7416::Float64))
      ####bfactor#7125#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7415::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7416::Float64,##a2#7416::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7424 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7122#7130#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7426 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7426::Float64,0)::Float64
      ####G#7398#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7402#7431 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7402#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7426::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7407 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7408 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7407::Float64))
      ##deriv#7409 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7408::Float64,##a#7407::Float64))))
      ####G#7219#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7414 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7408::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7318#7405#7435 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7318#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  α::Float64
  θ::Float64
  #s25::Int64
  ##xs#7397::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(6) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(10)
      #s25 = GenSym(11)
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,α::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64)))),1.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7407::Float64
  ##div_a#7408::Float64
  ##deriv#7409::Float64
  ####G#7219#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7412::Tuple{}
  ##########x#7160#7162#7166#7222#7413::Float64
  ########_var0#7163#7167#7223#7414::Tuple{}
  ##a1#7415::Float64
  ##a2#7416::Float64
  ##div_a#7417::Float64
  ####afactor#7124#7418::Float64
  ####bfactor#7125#7419::Float64
  ########a#7107#7118#7126#7420::Tuple{}
  ########b#7108#7119#7127#7421::Tuple{}
  ########afactor#7109#7120#7128#7422::Float64
  ########bfactor#7110#7121#7129#7423::Float64
  ######_var0#7122#7130#7424::Tuple{}
  ######types#7123#7131#7425::Tuple{Type{Float64}}
  ##a#7426::Float64
  ####G#7398#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7399#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7400#7429::Tuple{}
  ##########x#7160#7162#7166#7401#7430::Float64
  ########_var0#7163#7167#7402#7431::Tuple{}
  ##xs#7432::Tuple{}
  ########a#7314#7316#7403#7433::Tuple{}
  ########b#7315#7317#7404#7434::Tuple{}
  ######_var0#7318#7405#7435::Tuple{}
  ########types#7116#7254#7406#7436::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7415 = GenSym(3)
      ##a2#7416 = GenSym(4)
      ##div_a#7417 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7415::Float64,##a2#7416::Float64))
      ####afactor#7124#7418 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7416::Float64))
      ####bfactor#7125#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7415::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7416::Float64,##a2#7416::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7424 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7122#7130#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7426 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7426::Float64,0)::Float64
      ####G#7398#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7402#7431 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7402#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7426::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7407 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7408 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7407::Float64))
      ##deriv#7409 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7408::Float64,##a#7407::Float64))))
      ####G#7219#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7414 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7408::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7318#7405#7435 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7318#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7407::Float64
  ##div_a#7408::Float64
  ##deriv#7409::Float64
  ####G#7219#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7412::Tuple{}
  ##########x#7160#7162#7166#7222#7413::Float64
  ########_var0#7163#7167#7223#7414::Tuple{}
  ##a1#7415::Float64
  ##a2#7416::Float64
  ##div_a#7417::Float64
  ####afactor#7124#7418::Float64
  ####bfactor#7125#7419::Float64
  ########a#7107#7118#7126#7420::Tuple{}
  ########b#7108#7119#7127#7421::Tuple{}
  ########afactor#7109#7120#7128#7422::Float64
  ########bfactor#7110#7121#7129#7423::Float64
  ######_var0#7122#7130#7424::Tuple{}
  ######types#7123#7131#7425::Tuple{Type{Float64}}
  ##a#7426::Float64
  ####G#7398#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7399#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7400#7429::Tuple{}
  ##########x#7160#7162#7166#7401#7430::Float64
  ########_var0#7163#7167#7402#7431::Tuple{}
  ##xs#7432::Tuple{}
  ########a#7314#7316#7403#7433::Tuple{}
  ########b#7315#7317#7404#7434::Tuple{}
  ######_var0#7318#7405#7435::Tuple{}
  ########types#7116#7254#7406#7436::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7415 = GenSym(3)
      ##a2#7416 = GenSym(4)
      ##div_a#7417 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7415::Float64,##a2#7416::Float64))
      ####afactor#7124#7418 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7416::Float64))
      ####bfactor#7125#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7415::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7416::Float64,##a2#7416::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7424 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7122#7130#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7426 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7426::Float64,0)::Float64
      ####G#7398#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7402#7431 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7402#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7426::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7407 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7408 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7407::Float64))
      ##deriv#7409 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7408::Float64,##a#7407::Float64))))
      ####G#7219#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7414 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7408::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7318#7405#7435 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7318#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7407::Float64
  ##div_a#7408::Float64
  ##deriv#7409::Float64
  ####G#7219#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7412::Tuple{}
  ##########x#7160#7162#7166#7222#7413::Float64
  ########_var0#7163#7167#7223#7414::Tuple{}
  ##a1#7415::Float64
  ##a2#7416::Float64
  ##div_a#7417::Float64
  ####afactor#7124#7418::Float64
  ####bfactor#7125#7419::Float64
  ########a#7107#7118#7126#7420::Tuple{}
  ########b#7108#7119#7127#7421::Tuple{}
  ########afactor#7109#7120#7128#7422::Float64
  ########bfactor#7110#7121#7129#7423::Float64
  ######_var0#7122#7130#7424::Tuple{}
  ######types#7123#7131#7425::Tuple{Type{Float64}}
  ##a#7426::Float64
  ####G#7398#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7399#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7400#7429::Tuple{}
  ##########x#7160#7162#7166#7401#7430::Float64
  ########_var0#7163#7167#7402#7431::Tuple{}
  ##xs#7432::Tuple{}
  ########a#7314#7316#7403#7433::Tuple{}
  ########b#7315#7317#7404#7434::Tuple{}
  ######_var0#7318#7405#7435::Tuple{}
  ########types#7116#7254#7406#7436::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7415 = GenSym(3)
      ##a2#7416 = GenSym(4)
      ##div_a#7417 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7415::Float64,##a2#7416::Float64))
      ####afactor#7124#7418 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7416::Float64))
      ####bfactor#7125#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7415::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7416::Float64,##a2#7416::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7424 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7122#7130#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7426 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7426::Float64,0)::Float64
      ####G#7398#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7402#7431 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7402#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7426::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7407 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7408 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7407::Float64))
      ##deriv#7409 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7408::Float64,##a#7407::Float64))))
      ####G#7219#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7414 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7408::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7318#7405#7435 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7318#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7407::Float64
  ##div_a#7408::Float64
  ##deriv#7409::Float64
  ####G#7219#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7412::Tuple{}
  ##########x#7160#7162#7166#7222#7413::Float64
  ########_var0#7163#7167#7223#7414::Tuple{}
  ##a1#7415::Float64
  ##a2#7416::Float64
  ##div_a#7417::Float64
  ####afactor#7124#7418::Float64
  ####bfactor#7125#7419::Float64
  ########a#7107#7118#7126#7420::Tuple{}
  ########b#7108#7119#7127#7421::Tuple{}
  ########afactor#7109#7120#7128#7422::Float64
  ########bfactor#7110#7121#7129#7423::Float64
  ######_var0#7122#7130#7424::Tuple{}
  ######types#7123#7131#7425::Tuple{Type{Float64}}
  ##a#7426::Float64
  ####G#7398#7427::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7399#7428::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7400#7429::Tuple{}
  ##########x#7160#7162#7166#7401#7430::Float64
  ########_var0#7163#7167#7402#7431::Tuple{}
  ##xs#7432::Tuple{}
  ########a#7314#7316#7403#7433::Tuple{}
  ########b#7315#7317#7404#7434::Tuple{}
  ######_var0#7318#7405#7435::Tuple{}
  ########types#7116#7254#7406#7436::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 76:
      GenSym(11) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(12) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(15)
      #s25 = GenSym(16)
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7415 = GenSym(3)
      ##a2#7416 = GenSym(4)
      ##div_a#7417 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7415::Float64,##a2#7416::Float64))
      ####afactor#7124#7418 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7416::Float64))
      ####bfactor#7125#7419 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7415::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7416::Float64,##a2#7416::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7122#7130#7424 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7122#7130#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7426 = (top(getfield))(GenSym(5),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7426::Float64,0)::Float64
      ####G#7398#7427 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7402#7431 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7402#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7426::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7407 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7408 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7407::Float64))
      ##deriv#7409 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7408::Float64,##a#7407::Float64))))
      ####G#7219#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7414 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7163#7167#7223#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7408::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7318#7405#7435 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7318#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(8),:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(10),:value)::Float64,1.0))), :((top(getfield))(GenSym(10),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7447#7452::UInt64
  ####idx#7448#7453::UInt64
  ####x#7449#7454::Float64
  ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7456::Float64
  ##_var0#7457::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7455 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7455 = false
      2: 
      ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7456 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7452 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7456::Float64),0x000fffffffffffff))
      ####idx#7448#7453 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7452::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7454 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7452::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7452::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7457 = ####x#7449#7454::Float64
      goto 5
      4: 
      ##_var0#7457 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7453::UInt64,####x#7449#7454::Float64)::Float64
      goto 5
      ##_var0#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7457::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7447#7452::UInt64
  ####idx#7448#7453::UInt64
  ####x#7449#7454::Float64
  ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7456::Float64
  ##_var0#7457::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7455 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7455 = false
      2: 
      ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7456 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7452 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7456::Float64),0x000fffffffffffff))
      ####idx#7448#7453 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7452::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7454 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7452::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7452::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7457 = ####x#7449#7454::Float64
      goto 5
      4: 
      ##_var0#7457 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7453::UInt64,####x#7449#7454::Float64)::Float64
      goto 5
      ##_var0#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7457::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7447#7464::UInt64
  ####idx#7448#7465::UInt64
  ####x#7449#7466::Float64
  ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7468::Float64
  ##_var0#7469::Float64
  ##a#7470::Float64
  ##div_a#7471::Float64
  ##deriv#7472::Float64
  ####G#7219#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7475::Tuple{}
  ##########x#7160#7162#7166#7222#7476::Float64
  ########_var0#7163#7167#7223#7477::Tuple{}
  ##exp_a#7478::Float64
  ####G#7459#7479::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7460#7480::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7461#7481::Tuple{}
  ##########x#7160#7162#7166#7462#7482::Float64
  ########_var0#7163#7167#7463#7483::Tuple{}
  ##a1#7484::Float64
  ##a2#7485::Float64
  ######a#7107#7111#7486::Tuple{}
  ######b#7108#7112#7487::Tuple{}
  ######afactor#7109#7113#7488::Float64
  ######bfactor#7110#7114#7489::Float64
  ####_var0#7115#7490::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7467 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7467 = false
      2: 
      ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7468 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7464 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7468::Float64),0x000fffffffffffff))
      ####idx#7448#7465 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7464::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7466 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7464::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7464::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7469 = ####x#7449#7466::Float64
      goto 5
      4: 
      ##_var0#7469 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7465::UInt64,####x#7449#7466::Float64)::Float64
      goto 5
      ##_var0#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7469::Float64
      ##a#7470 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7471 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7470::Float64))
      ##deriv#7472 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7471::Float64,##a#7470::Float64))))
      ####G#7219#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7477 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7223#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7471::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7478 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7459#7479 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7463#7483 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7463#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7478::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7484 = GenSym(6)
      ##a2#7485 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7490 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7484::Float64,##a2#7485::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7447#7452::UInt64
  ####idx#7448#7453::UInt64
  ####x#7449#7454::Float64
  ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7456::Float64
  ##_var0#7457::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7455 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7455 = false
      2: 
      ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7456 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7452 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7456::Float64),0x000fffffffffffff))
      ####idx#7448#7453 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7452::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7454 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7452::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7452::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7457 = ####x#7449#7454::Float64
      goto 5
      4: 
      ##_var0#7457 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7453::UInt64,####x#7449#7454::Float64)::Float64
      goto 5
      ##_var0#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7457::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  ####ri#7447#7452::UInt64
  ####idx#7448#7453::UInt64
  ####x#7449#7454::Float64
  ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7456::Float64
  ##_var0#7457::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7455 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7455 = false
      2: 
      ########_var0#7439#7445#7450#7455::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7456 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7452 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7456::Float64),0x000fffffffffffff))
      ####idx#7448#7453 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7452::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7454 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7452::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7452::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7453::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7457 = ####x#7449#7454::Float64
      goto 5
      4: 
      ##_var0#7457 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7453::UInt64,####x#7449#7454::Float64)::Float64
      goto 5
      ##_var0#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(##_var0#7457::Float64,(top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64))
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64,GenSym(4)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7447#7464::UInt64
  ####idx#7448#7465::UInt64
  ####x#7449#7466::Float64
  ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7468::Float64
  ##_var0#7469::Float64
  ##a#7470::Float64
  ##div_a#7471::Float64
  ##deriv#7472::Float64
  ####G#7219#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7475::Tuple{}
  ##########x#7160#7162#7166#7222#7476::Float64
  ########_var0#7163#7167#7223#7477::Tuple{}
  ##exp_a#7478::Float64
  ####G#7459#7479::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7460#7480::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7461#7481::Tuple{}
  ##########x#7160#7162#7166#7462#7482::Float64
  ########_var0#7163#7167#7463#7483::Tuple{}
  ##a1#7484::Float64
  ##a2#7485::Float64
  ######a#7107#7111#7486::Tuple{}
  ######b#7108#7112#7487::Tuple{}
  ######afactor#7109#7113#7488::Float64
  ######bfactor#7110#7114#7489::Float64
  ####_var0#7115#7490::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7467 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7467 = false
      2: 
      ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7468 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7464 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7468::Float64),0x000fffffffffffff))
      ####idx#7448#7465 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7464::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7466 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7464::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7464::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7469 = ####x#7449#7466::Float64
      goto 5
      4: 
      ##_var0#7469 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7465::UInt64,####x#7449#7466::Float64)::Float64
      goto 5
      ##_var0#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7469::Float64
      ##a#7470 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7471 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7470::Float64))
      ##deriv#7472 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7471::Float64,##a#7470::Float64))))
      ####G#7219#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7477 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7223#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7471::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7478 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7459#7479 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7463#7483 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7463#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7478::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7484 = GenSym(6)
      ##a2#7485 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7490 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7484::Float64,##a2#7485::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7447#7464::UInt64
  ####idx#7448#7465::UInt64
  ####x#7449#7466::Float64
  ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7468::Float64
  ##_var0#7469::Float64
  ##a#7470::Float64
  ##div_a#7471::Float64
  ##deriv#7472::Float64
  ####G#7219#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7475::Tuple{}
  ##########x#7160#7162#7166#7222#7476::Float64
  ########_var0#7163#7167#7223#7477::Tuple{}
  ##exp_a#7478::Float64
  ####G#7459#7479::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7460#7480::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7461#7481::Tuple{}
  ##########x#7160#7162#7166#7462#7482::Float64
  ########_var0#7163#7167#7463#7483::Tuple{}
  ##a1#7484::Float64
  ##a2#7485::Float64
  ######a#7107#7111#7486::Tuple{}
  ######b#7108#7112#7487::Tuple{}
  ######afactor#7109#7113#7488::Float64
  ######bfactor#7110#7114#7489::Float64
  ####_var0#7115#7490::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7467 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7467 = false
      2: 
      ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7468 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7464 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7468::Float64),0x000fffffffffffff))
      ####idx#7448#7465 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7464::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7466 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7464::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7464::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7469 = ####x#7449#7466::Float64
      goto 5
      4: 
      ##_var0#7469 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7465::UInt64,####x#7449#7466::Float64)::Float64
      goto 5
      ##_var0#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7469::Float64
      ##a#7470 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7471 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7470::Float64))
      ##deriv#7472 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7471::Float64,##a#7470::Float64))))
      ####G#7219#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7477 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7223#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7471::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7478 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7459#7479 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7463#7483 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7463#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7478::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7484 = GenSym(6)
      ##a2#7485 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7490 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7484::Float64,##a2#7485::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7447#7464::UInt64
  ####idx#7448#7465::UInt64
  ####x#7449#7466::Float64
  ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7468::Float64
  ##_var0#7469::Float64
  ##a#7470::Float64
  ##div_a#7471::Float64
  ##deriv#7472::Float64
  ####G#7219#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7475::Tuple{}
  ##########x#7160#7162#7166#7222#7476::Float64
  ########_var0#7163#7167#7223#7477::Tuple{}
  ##exp_a#7478::Float64
  ####G#7459#7479::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7460#7480::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7461#7481::Tuple{}
  ##########x#7160#7162#7166#7462#7482::Float64
  ########_var0#7163#7167#7463#7483::Tuple{}
  ##a1#7484::Float64
  ##a2#7485::Float64
  ######a#7107#7111#7486::Tuple{}
  ######b#7108#7112#7487::Tuple{}
  ######afactor#7109#7113#7488::Float64
  ######bfactor#7110#7114#7489::Float64
  ####_var0#7115#7490::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7467 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7467 = false
      2: 
      ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7468 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7464 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7468::Float64),0x000fffffffffffff))
      ####idx#7448#7465 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7464::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7466 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7464::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7464::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7469 = ####x#7449#7466::Float64
      goto 5
      4: 
      ##_var0#7469 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7465::UInt64,####x#7449#7466::Float64)::Float64
      goto 5
      ##_var0#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7469::Float64
      ##a#7470 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7471 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7470::Float64))
      ##deriv#7472 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7471::Float64,##a#7470::Float64))))
      ####G#7219#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7477 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7223#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7471::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7478 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7459#7479 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7463#7483 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7463#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7478::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7484 = GenSym(6)
      ##a2#7485 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7490 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7484::Float64,##a2#7485::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####ri#7447#7464::UInt64
  ####idx#7448#7465::UInt64
  ####x#7449#7466::Float64
  ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
  ############_var0#7437#7438#7440#7446#7451#7468::Float64
  ##_var0#7469::Float64
  ##a#7470::Float64
  ##div_a#7471::Float64
  ##deriv#7472::Float64
  ####G#7219#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7220#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7221#7475::Tuple{}
  ##########x#7160#7162#7166#7222#7476::Float64
  ########_var0#7163#7167#7223#7477::Tuple{}
  ##exp_a#7478::Float64
  ####G#7459#7479::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7158#7164#7460#7480::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7159#7161#7165#7461#7481::Tuple{}
  ##########x#7160#7162#7166#7462#7482::Float64
  ########_var0#7163#7167#7463#7483::Tuple{}
  ##a1#7484::Float64
  ##a2#7485::Float64
  ######a#7107#7111#7486::Tuple{}
  ######b#7108#7112#7487::Tuple{}
  ######afactor#7109#7113#7488::Float64
  ######bfactor#7110#7114#7489::Float64
  ####_var0#7115#7490::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 111:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7439#7445#7450#7467 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7439#7445#7450#7467 = false
      2: 
      ########_var0#7439#7445#7450#7467::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7437#7438#7440#7446#7451#7468 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7437#7438#7440#7446#7451#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####ri#7447#7464 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7437#7438#7440#7446#7451#7468::Float64),0x000fffffffffffff))
      ####idx#7448#7465 = (Base.box)(UInt64,(Base.and_int)(####ri#7447#7464::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7449#7466 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7447#7464::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7447#7464::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7448#7465::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 4
      ##_var0#7469 = ####x#7449#7466::Float64
      goto 5
      4: 
      ##_var0#7469 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7448#7465::UInt64,####x#7449#7466::Float64)::Float64
      goto 5
      ##_var0#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7469::Float64
      ##a#7470 = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7471 = (Base.box)(Base.Float64,(Base.div_float)(GenSym(2),##a#7470::Float64))
      ##deriv#7472 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7471::Float64,##a#7470::Float64))))
      ####G#7219#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7223#7477 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7163#7167#7223#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7471::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##exp_a#7478 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(3),:value)::Float64,0)::Float64
      ####G#7459#7479 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7163#7167#7463#7483 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7163#7167#7463#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7478::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))((top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7484 = GenSym(6)
      ##a2#7485 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7115#7490 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7115#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7484::Float64,##a2#7485::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7491#7492::Float64
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      ####fy#7491#7492 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.lt_float)(####fy#7491#7492::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7491#7492::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7491#7492::Float64
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      ####fy#7491#7492 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.lt_float)(####fy#7491#7492::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7491#7492::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7494#7495#7532::Float64
  ##div_a#7533::Float64
  ######tup#7496#7498#7534::Tuple{}
  ######x#7497#7499#7535::Int64
  ####_var0#7500#7536::Tuple{}
  ######types#7116#7501#7537::Tuple{Type{Float64}}
  ##a1#7538::Float64
  ##a2#7539::Float64
  ##exp_a#7540::Float64
  ##powval#7541::Float64
  ##logval#7542::Float64
  ##new_bs#7543::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7507#7544::Float64
  ####exp_a#7508#7545::Float64
  ####deriv#7509#7546::Float64
  ######G#7502#7510#7547::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7158#7164#7503#7511#7548::Tuple{Type{Float64},Type{Float64}}
  ############tup#7159#7161#7165#7504#7512#7549::Tuple{}
  ############x#7160#7162#7166#7505#7513#7550::Float64
  ##########_var0#7163#7167#7506#7514#7551::Tuple{}
  ######a#7107#7515#7552::Tuple{}
  ######b#7108#7516#7553::Tuple{}
  ######afactor#7109#7517#7554::Float64
  ######bfactor#7110#7518#7555::Float64
  ####_var0#7519#7556::Tuple{}
  ######types#7123#7520#7557::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7558::Tuple{}
  ####a1#7521#7559::Float64
  ####a2#7522#7560::Float64
  ########a#7107#7111#7523#7561::Tuple{}
  ########b#7108#7112#7524#7562::Tuple{}
  ########afactor#7109#7113#7525#7563::Float64
  ########bfactor#7110#7114#7526#7564::Float64
  ######_var0#7115#7527#7565::Tuple{}
  ########tup#7159#7256#7528#7566::Tuple{}
  ########x#7160#7257#7529#7567::Float64
  ######_var0#7258#7530#7568::Tuple{}
  ########types#7116#7259#7531#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7494#7495#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.lt_float)(######fy#7494#7495#7532::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7494#7495#7532::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7533 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7500#7536 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7500#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7533::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7538"))
      NewvarNode(symbol("##a2#7539"))
      NewvarNode(symbol("##exp_a#7540"))
      NewvarNode(symbol("##powval#7541"))
      NewvarNode(symbol("##logval#7542"))
      NewvarNode(symbol("##new_bs#7543"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7507#7544 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7508#7545 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(11),0)::Float64
      ####deriv#7509#7546 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(11))))::Float64))
      ######G#7502#7510#7547 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7163#7167#7506#7514#7551 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7163#7167#7506#7514#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7508#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7538 = GenSym(5)
      ##a2#7539 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,##a2#7539::Float64,0)::Float64
      ##exp_a#7540 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,##a2#7539::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7539::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,GenSym(18),0)::Float64
      ##powval#7541 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7539::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0)::Float64
      ##logval#7542 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7540::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7538::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7519#7556 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7519#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7543 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7521#7559 = GenSym(25)
      ####a2#7522#7560 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7527#7565 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7115#7527#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7521#7559::Float64,####a2#7522#7560::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7530#7568 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7258#7530#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7491#7492::Float64
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      ####fy#7491#7492 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.lt_float)(####fy#7491#7492::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7491#7492::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Pareto{Float64}
  x::Int64
  α::Float64
  θ::Float64
  #s25::Int64
  ####fy#7491#7492::Float64
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(7) = (top(getfield))(d::Distributions.Pareto{Float64},:α)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.Pareto{Float64},:θ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      ####fy#7491#7492 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(θ::Float64,####fy#7491#7492::Float64)::Bool,(Base.lt_float)(####fy#7491#7492::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7491#7492::Float64)),x::Int64)::Bool)))) goto 0
      GenSym(3) = (Base.box)(Base.Float64,(Base.div_float)(θ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,α::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(α::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),α::Float64)))::Float64)),(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7494#7495#7532::Float64
  ##div_a#7533::Float64
  ######tup#7496#7498#7534::Tuple{}
  ######x#7497#7499#7535::Int64
  ####_var0#7500#7536::Tuple{}
  ######types#7116#7501#7537::Tuple{Type{Float64}}
  ##a1#7538::Float64
  ##a2#7539::Float64
  ##exp_a#7540::Float64
  ##powval#7541::Float64
  ##logval#7542::Float64
  ##new_bs#7543::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7507#7544::Float64
  ####exp_a#7508#7545::Float64
  ####deriv#7509#7546::Float64
  ######G#7502#7510#7547::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7158#7164#7503#7511#7548::Tuple{Type{Float64},Type{Float64}}
  ############tup#7159#7161#7165#7504#7512#7549::Tuple{}
  ############x#7160#7162#7166#7505#7513#7550::Float64
  ##########_var0#7163#7167#7506#7514#7551::Tuple{}
  ######a#7107#7515#7552::Tuple{}
  ######b#7108#7516#7553::Tuple{}
  ######afactor#7109#7517#7554::Float64
  ######bfactor#7110#7518#7555::Float64
  ####_var0#7519#7556::Tuple{}
  ######types#7123#7520#7557::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7558::Tuple{}
  ####a1#7521#7559::Float64
  ####a2#7522#7560::Float64
  ########a#7107#7111#7523#7561::Tuple{}
  ########b#7108#7112#7524#7562::Tuple{}
  ########afactor#7109#7113#7525#7563::Float64
  ########bfactor#7110#7114#7526#7564::Float64
  ######_var0#7115#7527#7565::Tuple{}
  ########tup#7159#7256#7528#7566::Tuple{}
  ########x#7160#7257#7529#7567::Float64
  ######_var0#7258#7530#7568::Tuple{}
  ########types#7116#7259#7531#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7494#7495#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.lt_float)(######fy#7494#7495#7532::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7494#7495#7532::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7533 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7500#7536 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7500#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7533::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7538"))
      NewvarNode(symbol("##a2#7539"))
      NewvarNode(symbol("##exp_a#7540"))
      NewvarNode(symbol("##powval#7541"))
      NewvarNode(symbol("##logval#7542"))
      NewvarNode(symbol("##new_bs#7543"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7507#7544 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7508#7545 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(11),0)::Float64
      ####deriv#7509#7546 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(11))))::Float64))
      ######G#7502#7510#7547 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7163#7167#7506#7514#7551 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7163#7167#7506#7514#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7508#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7538 = GenSym(5)
      ##a2#7539 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,##a2#7539::Float64,0)::Float64
      ##exp_a#7540 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,##a2#7539::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7539::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,GenSym(18),0)::Float64
      ##powval#7541 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7539::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0)::Float64
      ##logval#7542 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7540::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7538::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7519#7556 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7519#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7543 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7521#7559 = GenSym(25)
      ####a2#7522#7560 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7527#7565 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7115#7527#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7521#7559::Float64,####a2#7522#7560::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7530#7568 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7258#7530#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7494#7495#7532::Float64
  ##div_a#7533::Float64
  ######tup#7496#7498#7534::Tuple{}
  ######x#7497#7499#7535::Int64
  ####_var0#7500#7536::Tuple{}
  ######types#7116#7501#7537::Tuple{Type{Float64}}
  ##a1#7538::Float64
  ##a2#7539::Float64
  ##exp_a#7540::Float64
  ##powval#7541::Float64
  ##logval#7542::Float64
  ##new_bs#7543::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7507#7544::Float64
  ####exp_a#7508#7545::Float64
  ####deriv#7509#7546::Float64
  ######G#7502#7510#7547::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7158#7164#7503#7511#7548::Tuple{Type{Float64},Type{Float64}}
  ############tup#7159#7161#7165#7504#7512#7549::Tuple{}
  ############x#7160#7162#7166#7505#7513#7550::Float64
  ##########_var0#7163#7167#7506#7514#7551::Tuple{}
  ######a#7107#7515#7552::Tuple{}
  ######b#7108#7516#7553::Tuple{}
  ######afactor#7109#7517#7554::Float64
  ######bfactor#7110#7518#7555::Float64
  ####_var0#7519#7556::Tuple{}
  ######types#7123#7520#7557::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7558::Tuple{}
  ####a1#7521#7559::Float64
  ####a2#7522#7560::Float64
  ########a#7107#7111#7523#7561::Tuple{}
  ########b#7108#7112#7524#7562::Tuple{}
  ########afactor#7109#7113#7525#7563::Float64
  ########bfactor#7110#7114#7526#7564::Float64
  ######_var0#7115#7527#7565::Tuple{}
  ########tup#7159#7256#7528#7566::Tuple{}
  ########x#7160#7257#7529#7567::Float64
  ######_var0#7258#7530#7568::Tuple{}
  ########types#7116#7259#7531#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7494#7495#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.lt_float)(######fy#7494#7495#7532::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7494#7495#7532::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7533 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7500#7536 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7500#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7533::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7538"))
      NewvarNode(symbol("##a2#7539"))
      NewvarNode(symbol("##exp_a#7540"))
      NewvarNode(symbol("##powval#7541"))
      NewvarNode(symbol("##logval#7542"))
      NewvarNode(symbol("##new_bs#7543"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7507#7544 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7508#7545 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(11),0)::Float64
      ####deriv#7509#7546 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(11))))::Float64))
      ######G#7502#7510#7547 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7163#7167#7506#7514#7551 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7163#7167#7506#7514#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7508#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7538 = GenSym(5)
      ##a2#7539 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,##a2#7539::Float64,0)::Float64
      ##exp_a#7540 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,##a2#7539::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7539::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,GenSym(18),0)::Float64
      ##powval#7541 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7539::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0)::Float64
      ##logval#7542 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7540::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7538::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7519#7556 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7519#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7543 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7521#7559 = GenSym(25)
      ####a2#7522#7560 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7527#7565 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7115#7527#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7521#7559::Float64,####a2#7522#7560::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7530#7568 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7258#7530#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7494#7495#7532::Float64
  ##div_a#7533::Float64
  ######tup#7496#7498#7534::Tuple{}
  ######x#7497#7499#7535::Int64
  ####_var0#7500#7536::Tuple{}
  ######types#7116#7501#7537::Tuple{Type{Float64}}
  ##a1#7538::Float64
  ##a2#7539::Float64
  ##exp_a#7540::Float64
  ##powval#7541::Float64
  ##logval#7542::Float64
  ##new_bs#7543::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7507#7544::Float64
  ####exp_a#7508#7545::Float64
  ####deriv#7509#7546::Float64
  ######G#7502#7510#7547::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7158#7164#7503#7511#7548::Tuple{Type{Float64},Type{Float64}}
  ############tup#7159#7161#7165#7504#7512#7549::Tuple{}
  ############x#7160#7162#7166#7505#7513#7550::Float64
  ##########_var0#7163#7167#7506#7514#7551::Tuple{}
  ######a#7107#7515#7552::Tuple{}
  ######b#7108#7516#7553::Tuple{}
  ######afactor#7109#7517#7554::Float64
  ######bfactor#7110#7518#7555::Float64
  ####_var0#7519#7556::Tuple{}
  ######types#7123#7520#7557::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7558::Tuple{}
  ####a1#7521#7559::Float64
  ####a2#7522#7560::Float64
  ########a#7107#7111#7523#7561::Tuple{}
  ########b#7108#7112#7524#7562::Tuple{}
  ########afactor#7109#7113#7525#7563::Float64
  ########bfactor#7110#7114#7526#7564::Float64
  ######_var0#7115#7527#7565::Tuple{}
  ########tup#7159#7256#7528#7566::Tuple{}
  ########x#7160#7257#7529#7567::Float64
  ######_var0#7258#7530#7568::Tuple{}
  ########types#7116#7259#7531#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7494#7495#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.lt_float)(######fy#7494#7495#7532::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7494#7495#7532::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7533 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7500#7536 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7500#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7533::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7538"))
      NewvarNode(symbol("##a2#7539"))
      NewvarNode(symbol("##exp_a#7540"))
      NewvarNode(symbol("##powval#7541"))
      NewvarNode(symbol("##logval#7542"))
      NewvarNode(symbol("##new_bs#7543"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7507#7544 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7508#7545 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(11),0)::Float64
      ####deriv#7509#7546 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(11))))::Float64))
      ######G#7502#7510#7547 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7163#7167#7506#7514#7551 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7163#7167#7506#7514#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7508#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7538 = GenSym(5)
      ##a2#7539 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,##a2#7539::Float64,0)::Float64
      ##exp_a#7540 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,##a2#7539::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7539::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,GenSym(18),0)::Float64
      ##powval#7541 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7539::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0)::Float64
      ##logval#7542 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7540::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7538::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7519#7556 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7519#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7543 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7521#7559 = GenSym(25)
      ####a2#7522#7560 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7527#7565 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7115#7527#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7521#7559::Float64,####a2#7522#7560::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7530#7568 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7258#7530#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######fy#7494#7495#7532::Float64
  ##div_a#7533::Float64
  ######tup#7496#7498#7534::Tuple{}
  ######x#7497#7499#7535::Int64
  ####_var0#7500#7536::Tuple{}
  ######types#7116#7501#7537::Tuple{Type{Float64}}
  ##a1#7538::Float64
  ##a2#7539::Float64
  ##exp_a#7540::Float64
  ##powval#7541::Float64
  ##logval#7542::Float64
  ##new_bs#7543::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7507#7544::Float64
  ####exp_a#7508#7545::Float64
  ####deriv#7509#7546::Float64
  ######G#7502#7510#7547::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7158#7164#7503#7511#7548::Tuple{Type{Float64},Type{Float64}}
  ############tup#7159#7161#7165#7504#7512#7549::Tuple{}
  ############x#7160#7162#7166#7505#7513#7550::Float64
  ##########_var0#7163#7167#7506#7514#7551::Tuple{}
  ######a#7107#7515#7552::Tuple{}
  ######b#7108#7516#7553::Tuple{}
  ######afactor#7109#7517#7554::Float64
  ######bfactor#7110#7518#7555::Float64
  ####_var0#7519#7556::Tuple{}
  ######types#7123#7520#7557::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##xs#7558::Tuple{}
  ####a1#7521#7559::Float64
  ####a2#7522#7560::Float64
  ########a#7107#7111#7523#7561::Tuple{}
  ########b#7108#7112#7524#7562::Tuple{}
  ########afactor#7109#7113#7525#7563::Float64
  ########bfactor#7110#7114#7526#7564::Float64
  ######_var0#7115#7527#7565::Tuple{}
  ########tup#7159#7256#7528#7566::Tuple{}
  ########x#7160#7257#7529#7567::Float64
  ######_var0#7258#7530#7568::Tuple{}
  ########types#7116#7259#7531#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 82:
      GenSym(28) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.Pareto{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(28)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      α = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(29)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      θ = GenSym(32)
      #s25 = GenSym(33) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/pareto.jl, line 83:
      GenSym(3) = (top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fy#7494#7495#7532 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(GenSym(3),######fy#7494#7495#7532::Float64)::Bool,(Base.lt_float)(######fy#7494#7495#7532::Float64,9.223372036854776e18)::Bool)),(Base.sle_int)((Base.box)(Int64,(Base.fptosi)(Int64,######fy#7494#7495#7532::Float64)),x::Int64)::Bool)))) goto 0
      ##div_a#7533 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(θ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7500#7536 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7500#7536 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7533::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7538"))
      NewvarNode(symbol("##a2#7539"))
      NewvarNode(symbol("##exp_a#7540"))
      NewvarNode(symbol("##powval#7541"))
      NewvarNode(symbol("##logval#7542"))
      NewvarNode(symbol("##new_bs#7543"))
      unless (top(getfield))((top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 11
      GenSym(7) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7507#7544 = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(7),0)::Float64
      ####exp_a#7508#7545 = (Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(7))))::Float64
      GenSym(11) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(7),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(14) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7507#7544::Float64,0,GenSym(11),0)::Float64
      ####deriv#7509#7546 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(Base.Math.nan_dom_err)(GenSym(14),(Base.box)(Base.Float64,(Base.add_float)(####a#7507#7544::Float64,GenSym(11))))::Float64))
      ######G#7502#7510#7547 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7163#7167#7506#7514#7551 = (top(tuple))()::Tuple{}
      goto 10
      ##########_var0#7163#7167#7506#7514#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7508#7545::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 13
      11: 
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7538 = GenSym(5)
      ##a2#7539 = GenSym(6)
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,##a2#7539::Float64,0)::Float64
      ##exp_a#7540 = (Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,##a2#7539::Float64)))::Float64
      GenSym(18) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7539::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(21) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0,GenSym(18),0)::Float64
      ##powval#7541 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7539::Float64,(Base.Math.nan_dom_err)(GenSym(21),(Base.box)(Base.Float64,(Base.add_float)(##a1#7538::Float64,GenSym(18))))::Float64))
      GenSym(23) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7538::Float64,0)::Float64
      ##logval#7542 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7540::Float64,(Base.Math.nan_dom_err)(GenSym(23),##a1#7538::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7519#7556 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7519#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##new_bs#7543 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7540::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      13: 
      GenSym(24) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(25) = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(26) = (top(getfield))(GenSym(24),:value)::Float64
      ####a1#7521#7559 = GenSym(25)
      ####a2#7522#7560 = GenSym(26)
      $(Expr(:boundscheck, false))
      ######_var0#7115#7527#7565 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7115#7527#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7521#7559::Float64,####a2#7522#7560::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7258#7530#7568 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7258#7530#7568 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(27),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





