____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 60:
      return (top(tuple))((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 60:
      return (top(tuple))((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 60:
      return (top(tuple))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  ##xs#7094::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 67:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64)),(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  ##xs#7094::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 67:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64)),(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,3))))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##xs#7120::Tuple{}
  ########a#7102#7104#7107#7121::Tuple{}
  ########b#7103#7105#7108#7122::Tuple{}
  ######_var0#7106#7109#7123::Tuple{}
  ########a#7102#7104#7110#7124::Tuple{}
  ########b#7103#7105#7111#7125::Tuple{}
  ######_var0#7106#7112#7126::Tuple{}
  ##div_a#7127::Float64
  ######tup#7113#7116#7128::Tuple{}
  ######x#7114#7117#7129::Int64
  ####_var0#7118#7130::Tuple{}
  ######types#7115#7119#7131::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7106#7109#7123 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7106#7109#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ######_var0#7106#7112#7126 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7106#7112#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##div_a#7127 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))
      $(Expr(:boundscheck, false))
      ####_var0#7118#7130 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7118#7130 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7127::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7135#7136::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 79:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 80:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,18))))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7135#7136::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 79:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 80:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,18))))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##div_a#7213::Float64
  ######tup#7113#7116#7214::Tuple{}
  ######x#7114#7117#7215::Int64
  ####_var0#7118#7216::Tuple{}
  ######types#7115#7119#7217::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 79:
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(7) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(6)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(7)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(12)
      #s25 = GenSym(13) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 80:
      GenSym(4) = (Distributions._pretvar)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},c::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##div_a#7213 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,18))))
      $(Expr(:boundscheck, false))
      ####_var0#7118#7216 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7118#7216 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 65:
      return (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 65:
      return (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 65:
      return (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  m::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 70:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 71:
      m = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 72:
      unless (Base.le_float)(m::Float64,c::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,2))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,2))))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  m::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 70:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 71:
      m = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 72:
      unless (Base.le_float)(m::Float64,c::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,2))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,2))))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  m::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7150#7152#7246::Tuple{}
  ######b#7151#7153#7247::Tuple{}
  ####_var0#7154#7248::Tuple{}
  ######a#7150#7152#7249::Tuple{}
  ######b#7151#7153#7250::Tuple{}
  ####_var0#7154#7251::Tuple{}
  ##a1#7252::Float64
  ##a2#7253::Float64
  ######a#7141#7145#7254::Tuple{}
  ######b#7142#7146#7255::Tuple{}
  ######afactor#7143#7147#7256::Float64
  ######bfactor#7144#7148#7257::Float64
  ####_var0#7149#7258::Tuple{}
  ##div_a#7259::Float64
  ######tup#7113#7116#7260::Tuple{}
  ######x#7114#7117#7261::Int64
  ####_var0#7118#7262::Tuple{}
  ######types#7115#7119#7263::Tuple{Type{Float64}}
  ##sqrt_a#7264::Float64
  ##deriv#7265::Float64
  ####G#7241#7266::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7242#7267::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7243#7268::Tuple{}
  ##########x#7233#7235#7239#7244#7269::Float64
  ########_var0#7236#7240#7245#7270::Tuple{}
  ######a#7102#7104#7271::Tuple{}
  ######b#7103#7105#7272::Tuple{}
  ####_var0#7106#7273::Tuple{}
  ######a#7150#7152#7274::Tuple{}
  ######b#7151#7153#7275::Tuple{}
  ####_var0#7154#7276::Tuple{}
  ######a#7150#7152#7277::Tuple{}
  ######b#7151#7153#7278::Tuple{}
  ####_var0#7154#7279::Tuple{}
  ##a1#7280::Float64
  ##a2#7281::Float64
  ######a#7141#7145#7282::Tuple{}
  ######b#7142#7146#7283::Tuple{}
  ######afactor#7143#7147#7284::Float64
  ######bfactor#7144#7148#7285::Float64
  ####_var0#7149#7286::Tuple{}
  ##div_a#7287::Float64
  ######tup#7113#7116#7288::Tuple{}
  ######x#7114#7117#7289::Int64
  ####_var0#7118#7290::Tuple{}
  ######types#7115#7119#7291::Tuple{Type{Float64}}
  ##sqrt_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7241#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7242#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7243#7296::Tuple{}
  ##########x#7233#7235#7239#7244#7297::Float64
  ########_var0#7236#7240#7245#7298::Tuple{}
  ######a#7150#7152#7299::Tuple{}
  ######b#7151#7153#7300::Tuple{}
  ####_var0#7154#7301::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 70:
      GenSym(14) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(15)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(16)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 71:
      m = (Distributions.middle)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 72:
      unless (Base.le_float)((top(getfield))(m::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7154#7251 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7154#7251 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7248 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7154#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7252 = GenSym(4)
      ##a2#7253 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7258 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7149#7258 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7252::Float64,##a2#7253::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7259 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(6),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))
      $(Expr(:boundscheck, false))
      ####_var0#7118#7262 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7118#7262 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7259::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7264 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(7),:value)::Float64)::ANY)::Float64
      ##deriv#7265 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7264::Float64))
      ####G#7241#7266 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7245#7270 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7236#7240#7245#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7264::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7106#7273 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7106#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7279 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7154#7279 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7276 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7154#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7280 = GenSym(9)
      ##a2#7281 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7286 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7149#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7280::Float64,##a2#7281::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7287 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(11),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))
      $(Expr(:boundscheck, false))
      ####_var0#7118#7290 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7118#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7292 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7292::Float64))
      ####G#7241#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7245#7298 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7236#7240#7245#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7154#7301 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7154#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7135#7306::Tuple{}
  ##xs#7307::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 84:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 85:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(1.4142135623730951,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),c::Float64)))))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),a::Float64)),b::Float64)),c::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),b::Float64)))),c::Float64)))) / (5 * (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64 // 2::ANY)::ANY::ANY
  end::ANY

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7135#7306::Tuple{}
  ##xs#7307::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 84:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 85:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(1.4142135623730951,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),c::Float64)))))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),a::Float64)),b::Float64)),c::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),b::Float64)))),c::Float64)))) / (5 * (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64 // 2::ANY)::ANY::ANY
  end::ANY

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7353::Float64
  ##exp_a#7354::Float64
  ##deriv#7355::Float64
  ####G#7348#7356::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7349#7357::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7350#7358::Tuple{}
  ##########x#7233#7235#7239#7351#7359::Float64
  ########_var0#7236#7240#7352#7360::Tuple{}
  ########tup#7308#7311#7315#7361::Tuple{}
  ########x#7309#7312#7316#7362::Int64
  ######_var0#7313#7317#7363::Tuple{}
  ########types#7310#7314#7318#7364::Tuple{Type{Int64}}
  ######a#7150#7152#7365::Tuple{}
  ######b#7151#7153#7366::Tuple{}
  ####_var0#7154#7367::Tuple{}
  ######a#7102#7104#7368::Tuple{}
  ######b#7103#7105#7369::Tuple{}
  ####_var0#7106#7370::Tuple{}
  ########tup#7308#7311#7315#7371::Tuple{}
  ########x#7309#7312#7316#7372::Int64
  ######_var0#7313#7317#7373::Tuple{}
  ########types#7310#7314#7318#7374::Tuple{Type{Int64}}
  ######a#7150#7152#7375::Tuple{}
  ######b#7151#7153#7376::Tuple{}
  ####_var0#7154#7377::Tuple{}
  ######a#7150#7152#7378::Tuple{}
  ######b#7151#7153#7379::Tuple{}
  ####_var0#7154#7380::Tuple{}
  ########tup#7308#7311#7315#7381::Tuple{}
  ########x#7309#7312#7316#7382::Int64
  ######_var0#7313#7317#7383::Tuple{}
  ########types#7310#7314#7318#7384::Tuple{Type{Int64}}
  ######a#7102#7104#7385::Tuple{}
  ######b#7103#7105#7386::Tuple{}
  ####_var0#7106#7387::Tuple{}
  ######a#7150#7152#7388::Tuple{}
  ######b#7151#7153#7389::Tuple{}
  ####_var0#7154#7390::Tuple{}
  ##xs#7391::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7319#7322#7326#7337#7392::Tuple{}
  ##########x#7320#7323#7327#7338#7393::Irrational{:sqrt2}
  ########_var0#7324#7328#7339#7394::Tuple{}
  ##########types#7321#7325#7329#7340#7395::Tuple{Type{Irrational{:sqrt2}}}
  ####a1#7341#7396::Float64
  ####a2#7342#7397::Float64
  ########a#7141#7145#7343#7398::Tuple{}
  ########b#7142#7146#7344#7399::Tuple{}
  ########afactor#7143#7147#7345#7400::Float64
  ########bfactor#7144#7148#7346#7401::Float64
  ######_var0#7149#7347#7402::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 84:
      GenSym(9) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(11) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(12) = GenSym(9)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(10)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(11)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 85:
      $(Expr(:boundscheck, false))
      ####_var0#7106#7387 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7106#7387 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ######_var0#7313#7317#7383 = (top(tuple))()::Tuple{}
      goto 20
      ######_var0#7313#7317#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7390 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7154#7390 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      $(Expr(:boundscheck, false))
      ######_var0#7313#7317#7373 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7313#7317#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7377 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7154#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7380 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7154#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ######_var0#7313#7317#7363 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7313#7317#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7367 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7154#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7106#7370 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7106#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7324#7328#7339#7394 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7324#7328#7339#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,1.4142135623730951))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7341#7396 = GenSym(5)
      ####a2#7342#7397 = GenSym(6)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7347#7402 = (top(tuple))()::Tuple{}
      goto 27
      ######_var0#7149#7347#7402 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7341#7396::Float64,####a2#7342#7397::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(8) = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(7),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(4) = (Distributions._pretvar)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},c::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7353 = (top(getfield))(GenSym(4),:value)::Float64
      ##exp_a#7354 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7353::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7355 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7353::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7348#7356 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7352#7360 = (top(tuple))()::Tuple{}
      goto 6
      ########_var0#7236#7240#7352#7360 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      return GenSym(8) / (5 * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7354::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) // 2::ANY)::ANY::ANY
  end::ANY




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 88:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,-3)),(Base.box)(Float64,(Base.sitofp)(Float64,5)))),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 88:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,-3)),(Base.box)(Float64,(Base.sitofp)(Float64,5)))),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7232#7406#7410#7414::Tuple{}
  ########x#7233#7407#7411#7415::Float64
  ######_var0#7408#7412#7416::Tuple{}
  ########types#7115#7409#7413#7417::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 88:
      $(Expr(:boundscheck, false))
      ######_var0#7408#7412#7416 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7408#7412#7416 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,-3)),(Base.box)(Float64,(Base.sitofp)(Float64,5))))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  ######P#7419#7420#7421::Type{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 90:
      GenSym(3) = call(Rational{Int64},1,2)::Rational{Int64}
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2))))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      ######P#7419#7420#7421 = Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:num)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:den)::Int64)))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  ######P#7419#7420#7421::Type{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 90:
      GenSym(3) = call(Rational{Int64},1,2)::Rational{Int64}
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64)),(Base.box)(Float64,(Base.sitofp)(Float64,2))))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      ######P#7419#7420#7421 = Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:num)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:den)::Int64)))),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7150#7152#7436::Tuple{}
  ######b#7151#7153#7437::Tuple{}
  ####_var0#7154#7438::Tuple{}
  ##div_a#7439::Float64
  ######tup#7113#7116#7440::Tuple{}
  ######x#7114#7117#7441::Int64
  ####_var0#7118#7442::Tuple{}
  ######types#7115#7119#7443::Tuple{Type{Float64}}
  ##a#7444::Float64
  ####G#7424#7445::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7425#7446::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7426#7447::Tuple{}
  ##########x#7233#7235#7239#7427#7448::Float64
  ########_var0#7236#7240#7428#7449::Tuple{}
  ##########P#7429#7430#7432#7434#7450::Type{Float64}
  ########types#7431#7433#7435#7451::Tuple{Type{Rational{Int64}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 90:
      GenSym(3) = call(Rational{Int64},1,2)::Rational{Int64}
      $(Expr(:boundscheck, false))
      ####_var0#7154#7438 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7154#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##div_a#7439 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))
      $(Expr(:boundscheck, false))
      ####_var0#7118#7442 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7118#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7439::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7444 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7444::Float64,0)::Float64
      ####G#7424#7445 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7428#7449 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7236#7240#7428#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7444::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##########P#7429#7430#7432#7434#7450 = Float64
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(4),:value)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:num)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(3),:den)::Int64))))))), :((top(getfield))(GenSym(4),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  b_m_a::Float64
  u::Float64
  ####_var0#7454#7456::UNION{BOOL,INT64}
  ########_var0#7452#7453#7455#7457::Float64
  ##xs#7458::Tuple{}
  ##xs#7459::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 147:
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 148:
      b_m_a = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 149:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7454#7456 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7454#7456 = false
      9: 
      ####_var0#7454#7456::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7452#7453#7455#7457 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7452#7453#7455#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7452#7453#7455#7457::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 150:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.mul_float)(b_m_a::Float64,u::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(u::Float64,b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),u::Float64)),b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  b_m_a::Float64
  u::Float64
  ####_var0#7454#7456::UNION{BOOL,INT64}
  ########_var0#7452#7453#7455#7457::Float64
  ##xs#7458::Tuple{}
  ##xs#7459::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 147:
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 148:
      b_m_a = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 149:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7454#7456 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7454#7456 = false
      9: 
      ####_var0#7454#7456::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7452#7453#7455#7457 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7452#7453#7455#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7452#7453#7455#7457::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 150:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.mul_float)(b_m_a::Float64,u::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(u::Float64,b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),u::Float64)),b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ######a#7150#7152#7471::Tuple{}
  ######b#7151#7153#7472::Tuple{}
  ####_var0#7154#7473::Tuple{}
  ####_var0#7454#7474::UNION{BOOL,INT64}
  ########_var0#7452#7453#7455#7475::Float64
  ######a#7150#7152#7476::Tuple{}
  ######b#7151#7153#7477::Tuple{}
  ####_var0#7154#7478::Tuple{}
  ######tup#7232#7406#7479::Tuple{}
  ######x#7233#7407#7480::Float64
  ####_var0#7408#7481::Tuple{}
  ######types#7115#7409#7482::Tuple{Type{Float64}}
  ######a#7150#7152#7483::Tuple{}
  ######b#7151#7153#7484::Tuple{}
  ####_var0#7154#7485::Tuple{}
  ##xs#7486::Tuple{}
  ##########tup#7232#7406#7410#7460#7487::Tuple{}
  ##########x#7233#7407#7411#7461#7488::Float64
  ########_var0#7408#7412#7462#7489::Tuple{}
  ##########types#7115#7409#7413#7463#7490::Tuple{Type{Float64}}
  ####a1#7464#7491::Float64
  ####a2#7465#7492::Float64
  ########a#7141#7145#7466#7493::Tuple{}
  ########b#7142#7146#7467#7494::Tuple{}
  ########afactor#7143#7147#7468#7495::Float64
  ########bfactor#7144#7148#7469#7496::Float64
  ######_var0#7149#7470#7497::Tuple{}
  ##sqrt_a#7498::Float64
  ##deriv#7499::Float64
  ####G#7241#7500::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7242#7501::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7243#7502::Tuple{}
  ##########x#7233#7235#7239#7244#7503::Float64
  ########_var0#7236#7240#7245#7504::Tuple{}
  ######a#7102#7104#7505::Tuple{}
  ######b#7103#7105#7506::Tuple{}
  ####_var0#7106#7507::Tuple{}
  ######a#7150#7152#7508::Tuple{}
  ######b#7151#7153#7509::Tuple{}
  ####_var0#7154#7510::Tuple{}
  ##xs#7511::Tuple{}
  ##########tup#7232#7406#7410#7460#7512::Tuple{}
  ##########x#7233#7407#7411#7461#7513::Float64
  ########_var0#7408#7412#7462#7514::Tuple{}
  ##########types#7115#7409#7413#7463#7515::Tuple{Type{Float64}}
  ####a1#7464#7516::Float64
  ####a2#7465#7517::Float64
  ########a#7141#7145#7466#7518::Tuple{}
  ########b#7142#7146#7467#7519::Tuple{}
  ########afactor#7143#7147#7468#7520::Float64
  ########bfactor#7144#7148#7469#7521::Float64
  ######_var0#7149#7470#7522::Tuple{}
  ##sqrt_a#7523::Float64
  ##deriv#7524::Float64
  ####G#7241#7525::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7242#7526::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7243#7527::Tuple{}
  ##########x#7233#7235#7239#7244#7528::Float64
  ########_var0#7236#7240#7245#7529::Tuple{}
  ######a#7150#7152#7530::Tuple{}
  ######b#7151#7153#7531::Tuple{}
  ####_var0#7154#7532::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 147:
      GenSym(14) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(15)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(16)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 148:
      $(Expr(:boundscheck, false))
      ####_var0#7154#7473 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7154#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      b_m_a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 149:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 9
      ####_var0#7454#7474 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 10
      9: 
      ####_var0#7454#7474 = false
      10: 
      ####_var0#7454#7474::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7452#7453#7455#7475 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 11
      ########_var0#7452#7453#7455#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7452#7453#7455#7475::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 150:
      $(Expr(:boundscheck, false))
      ####_var0#7408#7481 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7408#7481 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7478 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7154#7478 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      unless (Base.lt_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7154#7485 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7154#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ########_var0#7408#7412#7462#7489 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7408#7412#7462#7489 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7464#7491 = GenSym(6)
      ####a2#7465#7492 = GenSym(7)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7470#7497 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7149#7470#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7464#7491::Float64,####a2#7465#7492::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7498 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(8),:value)::Float64)::ANY)::Float64
      ##deriv#7499 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7498::Float64))
      ####G#7241#7500 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7245#7504 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7236#7240#7245#7504 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7498::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7106#7507 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7106#7507 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7510 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7154#7510 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ########_var0#7408#7412#7462#7514 = (top(tuple))()::Tuple{}
      goto 30
      ########_var0#7408#7412#7462#7514 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),u::Float64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7464#7516 = GenSym(10)
      ####a2#7465#7517 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7470#7522 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7149#7470#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7464#7516::Float64,####a2#7465#7517::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7523 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7524 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7523::Float64))
      ####G#7241#7525 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7245#7529 = (top(tuple))()::Tuple{}
      goto 33
      ########_var0#7236#7240#7245#7529 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7523::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7154#7532 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7154#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  x::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ##fx#7533::Float64
  ##fx#7534::Float64
  ####fy#2548#7535::Float64
  ##fx#7536::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 96:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 97:
      ##fx#7533 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7533::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7533::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7533::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7533::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      ##fx#7534 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7534::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7534::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7534::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7534::Float64)))::Bool)))))) goto 1
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),a::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))
      1: 
      ####fy#2548#7535 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(c::Float64,####fy#2548#7535::Float64)::Bool,(Base.ne_float)(####fy#2548#7535::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7535::Float64))::Bool)) goto 2
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))))
      2: 
      ##fx#7536 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7536::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7536::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7536::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7536::Float64)))::Bool)))))) goto 3
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))
      3: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  x::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ##fx#7533::Float64
  ##fx#7534::Float64
  ####fy#2548#7535::Float64
  ##fx#7536::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 96:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 97:
      ##fx#7533 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7533::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7533::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7533::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7533::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      ##fx#7534 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7534::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7534::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7534::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7534::Float64)))::Bool)))))) goto 1
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),a::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))
      1: 
      ####fy#2548#7535 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(c::Float64,####fy#2548#7535::Float64)::Bool,(Base.ne_float)(####fy#2548#7535::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7535::Float64))::Bool)) goto 2
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))))
      2: 
      ##fx#7536 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7536::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7536::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7536::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7536::Float64)))::Bool)))))) goto 3
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))
      3: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fx#7537#7566::Float64
  ######fx#7538#7539#7567::Float64
  ######a#7150#7152#7568::Tuple{}
  ######b#7151#7153#7569::Tuple{}
  ####_var0#7154#7570::Tuple{}
  ######a#7150#7152#7571::Tuple{}
  ######b#7151#7153#7572::Tuple{}
  ####_var0#7154#7573::Tuple{}
  ##a1#7574::Float64
  ##a2#7575::Float64
  ######a#7141#7145#7576::Tuple{}
  ######b#7142#7146#7577::Tuple{}
  ######afactor#7143#7147#7578::Float64
  ######bfactor#7144#7148#7579::Float64
  ####_var0#7149#7580::Tuple{}
  ######tup#7540#7541#7581::Tuple{}
  ####_var0#7542#7582::Tuple{}
  ######types#7310#7543#7583::Tuple{Type{Int64}}
  ########tup#7308#7311#7315#7584::Tuple{}
  ########x#7309#7312#7316#7585::Int64
  ######_var0#7313#7317#7586::Tuple{}
  ########types#7310#7314#7318#7587::Tuple{Type{Int64}}
  ##a1#7588::Float64
  ##a2#7589::Float64
  ##div_a#7590::Float64
  ####afactor#7550#7591::Float64
  ####bfactor#7551#7592::Float64
  ########a#7141#7544#7552#7593::Tuple{}
  ########b#7142#7545#7553#7594::Tuple{}
  ########afactor#7143#7546#7554#7595::Float64
  ########bfactor#7144#7547#7555#7596::Float64
  ######_var0#7548#7556#7597::Tuple{}
  ######types#7549#7557#7598::Tuple{Type{Float64}}
  ######a#7150#7152#7599::Tuple{}
  ######b#7151#7153#7600::Tuple{}
  ####_var0#7154#7601::Tuple{}
  ##a#7602::Float64
  ##div_a#7603::Float64
  ##deriv#7604::Float64
  ####G#7560#7605::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7561#7606::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7562#7607::Tuple{}
  ##########x#7233#7235#7239#7563#7608::Float64
  ########_var0#7236#7240#7564#7609::Tuple{}
  ####fx#7537#7610::Float64
  ######a#7150#7152#7611::Tuple{}
  ######b#7151#7153#7612::Tuple{}
  ####_var0#7154#7613::Tuple{}
  ######a#7150#7152#7614::Tuple{}
  ######b#7151#7153#7615::Tuple{}
  ####_var0#7154#7616::Tuple{}
  ##a1#7617::Float64
  ##a2#7618::Float64
  ######a#7141#7145#7619::Tuple{}
  ######b#7142#7146#7620::Tuple{}
  ######afactor#7143#7147#7621::Float64
  ######bfactor#7144#7148#7622::Float64
  ####_var0#7149#7623::Tuple{}
  ######types#7310#7565#7624::Tuple{Type{Int64}}
  ########tup#7308#7311#7315#7625::Tuple{}
  ########x#7309#7312#7316#7626::Int64
  ######_var0#7313#7317#7627::Tuple{}
  ########types#7310#7314#7318#7628::Tuple{Type{Int64}}
  ##a1#7629::Float64
  ##a2#7630::Float64
  ##div_a#7631::Float64
  ####afactor#7550#7632::Float64
  ####bfactor#7551#7633::Float64
  ########a#7141#7544#7552#7634::Tuple{}
  ########b#7142#7545#7553#7635::Tuple{}
  ########afactor#7143#7546#7554#7636::Float64
  ########bfactor#7144#7547#7555#7637::Float64
  ######_var0#7548#7556#7638::Tuple{}
  ######types#7549#7557#7639::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 96:
      GenSym(17) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(19) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(20)
      #s25 = GenSym(21)
      GenSym(22) = GenSym(18)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(19)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 97:
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####fx#7537#7566 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#7537#7566::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#7537#7566::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#7537#7566::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#7537#7566::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7538#7539#7567 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7538#7539#7567::Float64,GenSym(5))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7538#7539#7567::Float64,GenSym(5))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7538#7539#7567::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7538#7539#7567::Float64)))::Bool)))))) goto 1
      $(Expr(:boundscheck, false))
      ####_var0#7542#7582 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7542#7582 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7313#7317#7586 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7313#7317#7586 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7573 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7154#7573 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7570 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7154#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7574 = GenSym(6)
      ##a2#7575 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7580 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7149#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7574::Float64,##a2#7575::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7588 = GenSym(9)
      ##a2#7589 = GenSym(10)
      ##div_a#7590 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7588::Float64,##a2#7589::Float64))
      ####afactor#7550#7591 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7589::Float64))
      ####bfactor#7551#7592 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7588::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7589::Float64,##a2#7589::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7548#7556#7597 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7548#7556#7597 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7590::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
      unless x::Int64 == c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Bool goto 2
      $(Expr(:boundscheck, false))
      ####_var0#7154#7601 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7154#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7602 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7603 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),##a#7602::Float64))
      ##deriv#7604 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7603::Float64,##a#7602::Float64))))
      ####G#7560#7605 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7564#7609 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7236#7240#7564#7609 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7603::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
      GenSym(11) = (top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####fx#7537#7610 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#7537#7610::Float64,GenSym(11))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#7537#7610::Float64,GenSym(11))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#7537#7610::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#7537#7610::Float64)))::Bool)))))) goto 3
      $(Expr(:boundscheck, false))
      ######_var0#7313#7317#7627 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7313#7317#7627 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7616 = (top(tuple))()::Tuple{}
      goto 32
      ####_var0#7154#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7613 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7154#7613 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7617 = GenSym(12)
      ##a2#7618 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7623 = (top(tuple))()::Tuple{}
      goto 34
      ####_var0#7149#7623 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7617::Float64,##a2#7618::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7629 = GenSym(15)
      ##a2#7630 = GenSym(16)
      ##div_a#7631 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7629::Float64,##a2#7630::Float64))
      ####afactor#7550#7632 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7630::Float64))
      ####bfactor#7551#7633 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7629::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7630::Float64,##a2#7630::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7548#7556#7638 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7548#7556#7638 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7631::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7640::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 121:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 122:
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 124:
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(11)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(12)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 125:
      GenSym(9) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      u = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)),GenSym(9))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),GenSym(7))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)),GenSym(5))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 126:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 127:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),u::Float64)),v::Float64))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7640::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 121:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 122:
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 124:
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(11)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(12)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 125:
      GenSym(9) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      u = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)),GenSym(9))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),GenSym(7))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)),GenSym(5))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 126:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 127:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),u::Float64)),v::Float64))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7308#7311#7667::Tuple{}
  ######x#7309#7312#7668::Int64
  ####_var0#7313#7669::Tuple{}
  ######types#7310#7314#7670::Tuple{Type{Int64}}
  ##exp_a#7671::Float64
  ####G#7644#7672::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7645#7673::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7646#7674::Tuple{}
  ##########x#7233#7235#7239#7647#7675::Float64
  ########_var0#7236#7240#7648#7676::Tuple{}
  ######a#7150#7152#7677::Tuple{}
  ######b#7151#7153#7678::Tuple{}
  ####_var0#7154#7679::Tuple{}
  ##a1#7680::Float64
  ##a2#7681::Float64
  ######a#7141#7145#7682::Tuple{}
  ######b#7142#7146#7683::Tuple{}
  ######afactor#7143#7147#7684::Float64
  ######bfactor#7144#7148#7685::Float64
  ####_var0#7149#7686::Tuple{}
  ######tup#7308#7311#7687::Tuple{}
  ######x#7309#7312#7688::Int64
  ####_var0#7313#7689::Tuple{}
  ######types#7310#7314#7690::Tuple{Type{Int64}}
  ##exp_a#7691::Float64
  ####G#7644#7692::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7645#7693::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7646#7694::Tuple{}
  ##########x#7233#7235#7239#7647#7695::Float64
  ########_var0#7236#7240#7648#7696::Tuple{}
  ######a#7150#7152#7697::Tuple{}
  ######b#7151#7153#7698::Tuple{}
  ####_var0#7154#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ######a#7141#7145#7702::Tuple{}
  ######b#7142#7146#7703::Tuple{}
  ######afactor#7143#7147#7704::Float64
  ######bfactor#7144#7148#7705::Float64
  ####_var0#7149#7706::Tuple{}
  ######tup#7308#7311#7707::Tuple{}
  ######x#7309#7312#7708::Int64
  ####_var0#7313#7709::Tuple{}
  ######types#7310#7314#7710::Tuple{Type{Int64}}
  ##exp_a#7711::Float64
  ####G#7644#7712::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7231#7237#7645#7713::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7232#7234#7238#7646#7714::Tuple{}
  ##########x#7233#7235#7239#7647#7715::Float64
  ########_var0#7236#7240#7648#7716::Tuple{}
  ######a#7150#7152#7717::Tuple{}
  ######b#7151#7153#7718::Tuple{}
  ####_var0#7154#7719::Tuple{}
  ##a1#7720::Float64
  ##a2#7721::Float64
  ######a#7141#7145#7722::Tuple{}
  ######b#7142#7146#7723::Tuple{}
  ######afactor#7143#7147#7724::Float64
  ######bfactor#7144#7148#7725::Float64
  ####_var0#7149#7726::Tuple{}
  ######a#7150#7152#7727::Tuple{}
  ######b#7151#7153#7728::Tuple{}
  ####_var0#7154#7729::Tuple{}
  ######a#7102#7104#7730::Tuple{}
  ######b#7103#7105#7731::Tuple{}
  ####_var0#7106#7732::Tuple{}
  ######a#7150#7152#7733::Tuple{}
  ######b#7151#7153#7734::Tuple{}
  ####_var0#7154#7735::Tuple{}
  ######a#7150#7152#7736::Tuple{}
  ######b#7151#7153#7737::Tuple{}
  ####_var0#7154#7738::Tuple{}
  ######a#7150#7152#7739::Tuple{}
  ######b#7151#7153#7740::Tuple{}
  ####_var0#7154#7741::Tuple{}
  ##xs#7742::Tuple{Int64}
  ####a1#7653#7743::Float64
  ####a2#7654#7744::Float64
  ########a#7141#7145#7655#7745::Tuple{}
  ########b#7142#7146#7656#7746::Tuple{}
  ########afactor#7143#7147#7657#7747::Float64
  ########bfactor#7144#7148#7658#7748::Float64
  ######_var0#7149#7659#7749::Tuple{}
  ####a1#7660#7750::Float64
  ####a2#7661#7751::Float64
  ########a#7141#7145#7662#7752::Tuple{}
  ########b#7142#7146#7663#7753::Tuple{}
  ########afactor#7143#7147#7664#7754::Float64
  ########bfactor#7144#7148#7665#7755::Float64
  ######_var0#7149#7666#7756::Tuple{}
  ########tup#7308#7311#7315#7757::Tuple{}
  ########x#7309#7312#7316#7758::Int64
  ######_var0#7313#7317#7759::Tuple{}
  ########types#7310#7314#7318#7760::Tuple{Type{Int64}}
  ##a1#7761::Float64
  ##a2#7762::Float64
  ##div_a#7763::Float64
  ####afactor#7550#7764::Float64
  ####bfactor#7551#7765::Float64
  ########a#7141#7544#7552#7766::Tuple{}
  ########b#7142#7545#7553#7767::Tuple{}
  ########afactor#7143#7546#7554#7768::Float64
  ########bfactor#7144#7547#7555#7769::Float64
  ######_var0#7548#7556#7770::Tuple{}
  ######types#7549#7557#7771::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 121:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 122:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 124:
      GenSym(27) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(28) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(27)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(28)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(29)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(34)
      #s25 = GenSym(35) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 125:
      $(Expr(:boundscheck, false))
      ####_var0#7154#7719 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7154#7719 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      $(Expr(:boundscheck, false))
      ####_var0#7313#7709 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7313#7709 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##exp_a#7711 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7644#7712 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7648#7716 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7236#7240#7648#7716 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7711::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7720 = GenSym(14)
      ##a2#7721 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7726 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7149#7726 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7720::Float64,##a2#7721::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7154#7699 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7154#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ####_var0#7313#7689 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7313#7689 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      ##exp_a#7691 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7644#7692 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7648#7696 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7236#7240#7648#7696 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7691::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7700 = GenSym(10)
      ##a2#7701 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7706 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7149#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7700::Float64,##a2#7701::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7154#7729 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7154#7729 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7679 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7154#7679 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7313#7669 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7313#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      ##exp_a#7671 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7644#7672 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7236#7240#7648#7676 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7236#7240#7648#7676 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7671::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7680 = GenSym(6)
      ##a2#7681 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7149#7686 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7149#7686 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(18) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7680::Float64,##a2#7681::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7106#7732 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7106#7732 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(16),:value)::Float64,(top(getfield))(GenSym(17),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(18),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 126:
      $(Expr(:boundscheck, false))
      ####_var0#7154#7741 = (top(tuple))()::Tuple{}
      goto 44
      ####_var0#7154#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7738 = (top(tuple))()::Tuple{}
      goto 42
      ####_var0#7154#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7735 = (top(tuple))()::Tuple{}
      goto 40
      ####_var0#7154#7735 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(20) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7653#7743 = GenSym(19)
      ####a2#7654#7744 = GenSym(20)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7659#7749 = (top(tuple))()::Tuple{}
      goto 46
      ######_var0#7149#7659#7749 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      46: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7653#7743::Float64,####a2#7654#7744::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7660#7750 = GenSym(22)
      ####a2#7661#7751 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7666#7756 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7149#7666#7756 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7660#7750::Float64,####a2#7661#7751::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      v = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(24),(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 127:
      $(Expr(:boundscheck, false))
      ######_var0#7313#7317#7759 = (top(tuple))()::Tuple{}
      goto 49
      ######_var0#7313#7317#7759 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      GenSym(25) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(26) = (top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7761 = GenSym(25)
      ##a2#7762 = GenSym(26)
      ##div_a#7763 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7761::Float64,##a2#7762::Float64))
      ####afactor#7550#7764 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7762::Float64))
      ####bfactor#7551#7765 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7761::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7762::Float64,##a2#7762::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7548#7556#7770 = (top(tuple))()::Tuple{}
      goto 51
      ######_var0#7548#7556#7770 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7763::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Complex{Float64}
  v::Float64
  ##xs#7772::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 133:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 134:
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 136:
      GenSym(30) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 137:
      GenSym(18) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(22) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(20) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(24) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))
      GenSym(23) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(22),GenSym(18))::Float64), :((Base.Math.nan_dom_err)(GenSym(20),GenSym(18))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(11))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(26) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:im)::Float64)))))
      GenSym(25) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:im)::Float64)))))
      GenSym(4) = (Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(4))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(28) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:re)::Float64,(top(getfield))(GenSym(25),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:im)::Float64,(top(getfield))(GenSym(25),:im)::Float64)))))
      GenSym(27) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:im)::Float64)))))
      u = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:re)::Float64,(top(getfield))(GenSym(27),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:im)::Float64,(top(getfield))(GenSym(27),:im)::Float64))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 138:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 139:
      GenSym(29) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,-2)),(top(getfield))(u::Complex{Float64},:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,-2)),(top(getfield))(u::Complex{Float64},:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:re)::Float64,v::Float64))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:im)::Float64,v::Float64)))))
      1: 
  end::Complex{Float64}

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Complex{Float64}
  v::Float64
  ##xs#7772::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 133:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 134:
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 136:
      GenSym(30) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 137:
      GenSym(18) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(22) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(20) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(24) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))
      GenSym(23) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(22),GenSym(18))::Float64), :((Base.Math.nan_dom_err)(GenSym(20),GenSym(18))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(11))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(26) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:im)::Float64)))))
      GenSym(25) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:im)::Float64)))))
      GenSym(4) = (Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(4))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(28) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:re)::Float64,(top(getfield))(GenSym(25),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:im)::Float64,(top(getfield))(GenSym(25),:im)::Float64)))))
      GenSym(27) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:im)::Float64)))))
      u = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:re)::Float64,(top(getfield))(GenSym(27),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:im)::Float64,(top(getfield))(GenSym(27),:im)::Float64))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 138:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 139:
      GenSym(29) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,-2)),(top(getfield))(u::Complex{Float64},:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,-2)),(top(getfield))(u::Complex{Float64},:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:re)::Float64,v::Float64))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:im)::Float64,v::Float64)))))
      1: 
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7308#7311#7851::Tuple{}
  ######x#7309#7312#7852::Int64
  ####_var0#7313#7853::Tuple{}
  ######types#7310#7314#7854::Tuple{Type{Int64}}
  ######a#7150#7152#7855::Tuple{}
  ######b#7151#7153#7856::Tuple{}
  ####_var0#7154#7857::Tuple{}
  ######tup#7308#7311#7858::Tuple{}
  ######x#7309#7312#7859::Int64
  ####_var0#7313#7860::Tuple{}
  ######types#7310#7314#7861::Tuple{Type{Int64}}
  ######a#7150#7152#7862::Tuple{}
  ######b#7151#7153#7863::Tuple{}
  ####_var0#7154#7864::Tuple{}
  ######tup#7308#7311#7865::Tuple{}
  ######x#7309#7312#7866::Int64
  ####_var0#7313#7867::Tuple{}
  ######types#7310#7314#7868::Tuple{Type{Int64}}
  ######a#7150#7152#7869::Tuple{}
  ######b#7151#7153#7870::Tuple{}
  ####_var0#7154#7871::Tuple{}
  ######a#7150#7152#7872::Tuple{}
  ######b#7151#7153#7873::Tuple{}
  ####_var0#7154#7874::Tuple{}
  ######a#7150#7152#7875::Tuple{}
  ######b#7151#7153#7876::Tuple{}
  ####_var0#7154#7877::Tuple{}
  ######a#7150#7152#7878::Tuple{}
  ######b#7151#7153#7879::Tuple{}
  ####_var0#7154#7880::Tuple{}
  ##xs#7881::Tuple{Int64}
  ####a1#7653#7882::Float64
  ####a2#7654#7883::Float64
  ########a#7141#7145#7655#7884::Tuple{}
  ########b#7142#7146#7656#7885::Tuple{}
  ########afactor#7143#7147#7657#7886::Float64
  ########bfactor#7144#7148#7658#7887::Float64
  ######_var0#7149#7659#7888::Tuple{}
  ####a1#7660#7889::Float64
  ####a2#7661#7890::Float64
  ########a#7141#7145#7662#7891::Tuple{}
  ########b#7142#7146#7663#7892::Tuple{}
  ########afactor#7143#7147#7664#7893::Float64
  ########bfactor#7144#7148#7665#7894::Float64
  ######_var0#7149#7666#7895::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 133:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 134:
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 136:
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(13)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(14)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 137:
      $(Expr(:boundscheck, false))
      ####_var0#7154#7871 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7154#7871 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      $(Expr(:boundscheck, false))
      ####_var0#7313#7867 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7313#7867 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7154#7864 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7154#7864 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7313#7860 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7313#7860 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = GenSym(4) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7154#7857 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7154#7857 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ####_var0#7313#7853 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7313#7853 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      u = GenSym(5) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 138:
      $(Expr(:boundscheck, false))
      ####_var0#7154#7880 = (top(tuple))()::Tuple{}
      goto 28
      ####_var0#7154#7880 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7877 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7154#7877 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      $(Expr(:boundscheck, false))
      ####_var0#7154#7874 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7154#7874 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7653#7882 = GenSym(6)
      ####a2#7654#7883 = GenSym(7)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7659#7888 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7149#7659#7888 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7653#7882::Float64,####a2#7654#7883::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7660#7889 = GenSym(9)
      ####a2#7661#7890 = GenSym(10)
      $(Expr(:boundscheck, false))
      ######_var0#7149#7666#7895 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7149#7666#7895 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7660#7889::Float64,####a2#7661#7890::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      v = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(11),(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 139:
      return (-2 * u::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} / v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      1: 
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




