____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----


----float----


----dual----





____________________________
failprob
____________________________

----integer----


----float----


----dual----





____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 60:
      return (top(tuple))((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 60:
      return (top(tuple))((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Tuple{Float64,Float64,Float64}
  end::Tuple{Float64,Float64,Float64}

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 60:
      return (top(tuple))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  ##xs#7057::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 67:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64)),(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)),3.0))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  ##xs#7057::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 67:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64)),(top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)),3.0))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##xs#7080::Tuple{}
  ########a#7062#7064#7067#7081::Tuple{}
  ########b#7063#7065#7068#7082::Tuple{}
  ######_var0#7066#7069#7083::Tuple{}
  ########a#7062#7064#7070#7084::Tuple{}
  ########b#7063#7065#7071#7085::Tuple{}
  ######_var0#7066#7072#7086::Tuple{}
  ##div_a#7087::Float64
  ######tup#7073#7076#7088::Tuple{}
  ######x#7074#7077#7089::Float64
  ####_var0#7078#7090::Tuple{}
  ######types#7075#7079#7091::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 67:
      $(Expr(:boundscheck, false))
      ######_var0#7066#7069#7083 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7066#7069#7083 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      $(Expr(:boundscheck, false))
      ######_var0#7066#7072#7086 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7066#7072#7086 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      ##div_a#7087 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,3.0))
      $(Expr(:boundscheck, false))
      ####_var0#7078#7090 = (top(tuple))()::Tuple{}
      goto 4
      ####_var0#7078#7090 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7087::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7096#7097::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 79:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 80:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64)))),18.0))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7096#7097::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 79:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 80:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64)))),18.0))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 79:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 80:
      return (Distributions._pretvar)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},c::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ANY / 18.0::ANY
  end::ANY




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 65:
      return (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 65:
      return (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 65:
      return (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  m::Float64
  ##xs#7105::Tuple{}
  ##xs#7106::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 70:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 71:
      m = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 72:
      unless (Base.le_float)(m::Float64,c::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  m::Float64
  ##xs#7105::Tuple{}
  ##xs#7106::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 70:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 71:
      m = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.div_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))),(Base.box)(Base.Float64,(Base.div_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 72:
      unless (Base.le_float)(m::Float64,c::Float64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)(a::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  m::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######a#7129#7131#7177::Tuple{}
  ######b#7130#7132#7178::Tuple{}
  ####_var0#7133#7179::Tuple{}
  ######a#7129#7131#7180::Tuple{}
  ######b#7130#7132#7181::Tuple{}
  ####_var0#7133#7182::Tuple{}
  ##xs#7183::Tuple{}
  ##########tup#7134#7136#7140#7153#7184::Tuple{}
  ##########x#7135#7137#7141#7154#7185::Float64
  ########_var0#7138#7142#7155#7186::Tuple{}
  ##########types#7075#7139#7143#7156#7187::Tuple{Type{Float64}}
  ####a1#7157#7188::Float64
  ####a2#7158#7189::Float64
  ########a#7144#7148#7159#7190::Tuple{}
  ########b#7145#7149#7160#7191::Tuple{}
  ########afactor#7146#7150#7161#7192::Float64
  ########bfactor#7147#7151#7162#7193::Float64
  ######_var0#7152#7163#7194::Tuple{}
  ##sqrt_a#7195::Float64
  ##deriv#7196::Float64
  ####G#7172#7197::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7173#7198::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7174#7199::Tuple{}
  ##########x#7135#7166#7170#7175#7200::Float64
  ########_var0#7167#7171#7176#7201::Tuple{}
  ######a#7062#7064#7202::Tuple{}
  ######b#7063#7065#7203::Tuple{}
  ####_var0#7066#7204::Tuple{}
  ######a#7129#7131#7205::Tuple{}
  ######b#7130#7132#7206::Tuple{}
  ####_var0#7133#7207::Tuple{}
  ######a#7129#7131#7208::Tuple{}
  ######b#7130#7132#7209::Tuple{}
  ####_var0#7133#7210::Tuple{}
  ##xs#7211::Tuple{}
  ##########tup#7134#7136#7140#7153#7212::Tuple{}
  ##########x#7135#7137#7141#7154#7213::Float64
  ########_var0#7138#7142#7155#7214::Tuple{}
  ##########types#7075#7139#7143#7156#7215::Tuple{Type{Float64}}
  ####a1#7157#7216::Float64
  ####a2#7158#7217::Float64
  ########a#7144#7148#7159#7218::Tuple{}
  ########b#7145#7149#7160#7219::Tuple{}
  ########afactor#7146#7150#7161#7220::Float64
  ########bfactor#7147#7151#7162#7221::Float64
  ######_var0#7152#7163#7222::Tuple{}
  ##sqrt_a#7223::Float64
  ##deriv#7224::Float64
  ####G#7172#7225::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7173#7226::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7174#7227::Tuple{}
  ##########x#7135#7166#7170#7175#7228::Float64
  ########_var0#7167#7171#7176#7229::Tuple{}
  ######a#7129#7131#7230::Tuple{}
  ######b#7130#7132#7231::Tuple{}
  ####_var0#7133#7232::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 70:
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(13)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(14)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 71:
      m = (Distributions.middle)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},b::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 72:
      unless (Base.le_float)((top(getfield))(m::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7133#7182 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7133#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7179 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7133#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ########_var0#7138#7142#7155#7186 = (top(tuple))()::Tuple{}
      goto 12
      ########_var0#7138#7142#7155#7186 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7157#7188 = GenSym(4)
      ####a2#7158#7189 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7163#7194 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7152#7163#7194 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7157#7188::Float64,####a2#7158#7189::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7195 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(6),:value)::Float64)::ANY)::Float64
      ##deriv#7196 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7195::Float64))
      ####G#7172#7197 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7201 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7167#7171#7176#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7195::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7066#7204 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7066#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(7),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7210 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7133#7210 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7207 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7133#7207 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ########_var0#7138#7142#7155#7214 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7138#7142#7155#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(8) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7157#7216 = GenSym(8)
      ####a2#7158#7217 = GenSym(9)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7163#7222 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7152#7163#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7157#7216::Float64,####a2#7158#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7223 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(10),:value)::Float64)::ANY)::Float64
      ##deriv#7224 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7223::Float64))
      ####G#7172#7225 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7229 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7167#7171#7176#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7223::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7133#7232 = (top(tuple))()::Tuple{}
      goto 28
      ####_var0#7133#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(11),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7096#7233::Tuple{}
  ##xs#7234::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 84:
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(9)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(10)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 85:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(4),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(1.4142135623730951,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,c::Float64)))))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,a::Float64)),b::Float64)),c::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,b::Float64)))),c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(5.0,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(GenSym(4),1.5)))::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ####xs#7096#7233::Tuple{}
  ##xs#7234::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 84:
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(9) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(9)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(10)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 85:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,b::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,c::Float64))))
      GenSym(7) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(4),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(1.4142135623730951,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)(a::Float64,b::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(2.0,c::Float64)))))),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,a::Float64)),b::Float64)),c::Float64)))),(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(a::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,b::Float64)))),c::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(5.0,(Base.Math.nan_dom_err)(GenSym(7),(Base.box)(Base.Float64,(Base.add_float)(GenSym(4),1.5)))::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ########tup#7134#7136#7140#7264::Tuple{}
  ########x#7135#7137#7141#7265::Float64
  ######_var0#7138#7142#7266::Tuple{}
  ########types#7075#7139#7143#7267::Tuple{Type{Float64}}
  ######a#7129#7131#7268::Tuple{}
  ######b#7130#7132#7269::Tuple{}
  ####_var0#7133#7270::Tuple{}
  ######a#7062#7064#7271::Tuple{}
  ######b#7063#7065#7272::Tuple{}
  ####_var0#7066#7273::Tuple{}
  ########tup#7134#7136#7140#7274::Tuple{}
  ########x#7135#7137#7141#7275::Float64
  ######_var0#7138#7142#7276::Tuple{}
  ########types#7075#7139#7143#7277::Tuple{Type{Float64}}
  ######a#7129#7131#7278::Tuple{}
  ######b#7130#7132#7279::Tuple{}
  ####_var0#7133#7280::Tuple{}
  ######a#7129#7131#7281::Tuple{}
  ######b#7130#7132#7282::Tuple{}
  ####_var0#7133#7283::Tuple{}
  ########tup#7134#7136#7140#7284::Tuple{}
  ########x#7135#7137#7141#7285::Float64
  ######_var0#7138#7142#7286::Tuple{}
  ########types#7075#7139#7143#7287::Tuple{Type{Float64}}
  ######a#7062#7064#7288::Tuple{}
  ######b#7063#7065#7289::Tuple{}
  ####_var0#7066#7290::Tuple{}
  ######a#7129#7131#7291::Tuple{}
  ######b#7130#7132#7292::Tuple{}
  ####_var0#7133#7293::Tuple{}
  ##xs#7294::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########tup#7235#7238#7242#7253#7295::Tuple{}
  ##########x#7236#7239#7243#7254#7296::Irrational{:sqrt2}
  ########_var0#7240#7244#7255#7297::Tuple{}
  ##########types#7237#7241#7245#7256#7298::Tuple{Type{Irrational{:sqrt2}}}
  ####a1#7257#7299::Float64
  ####a2#7258#7300::Float64
  ########a#7144#7148#7259#7301::Tuple{}
  ########b#7145#7149#7260#7302::Tuple{}
  ########afactor#7146#7150#7261#7303::Float64
  ########bfactor#7147#7151#7262#7304::Float64
  ######_var0#7152#7263#7305::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 84:
      GenSym(7) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(9) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(10)
      #s25 = GenSym(11)
      GenSym(12) = GenSym(8)
      GenSym(13) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(12)
      #s25 = GenSym(13)
      GenSym(14) = GenSym(9)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(14)
      #s25 = GenSym(15) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 85:
      $(Expr(:boundscheck, false))
      ####_var0#7066#7290 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7066#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7286 = (top(tuple))()::Tuple{}
      goto 18
      ######_var0#7138#7142#7286 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7293 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7133#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7276 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7138#7142#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7280 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7133#7280 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7283 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7133#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7266 = (top(tuple))()::Tuple{}
      goto 6
      ######_var0#7138#7142#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7270 = (top(tuple))()::Tuple{}
      goto 8
      ####_var0#7133#7270 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      $(Expr(:boundscheck, false))
      ####_var0#7066#7273 = (top(tuple))()::Tuple{}
      goto 10
      ####_var0#7066#7273 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ########_var0#7240#7244#7255#7297 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7240#7244#7255#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,1.4142135623730951))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7257#7299 = GenSym(4)
      ####a2#7258#7300 = GenSym(5)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7263#7305 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7152#7263#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7257#7299::Float64,####a2#7258#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(6),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} / (5.0 * (Distributions._pretvar)(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},c::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::ANY ^ 1.5::ANY)::ANY::ANY
  end::ANY




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 88:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.6,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 88:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.6,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7134#7136#7140#7309::Tuple{}
  ########x#7135#7137#7141#7310::Float64
  ######_var0#7138#7142#7311::Tuple{}
  ########types#7075#7139#7143#7312::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 88:
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7311 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7138#7142#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.6))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 90:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64)),2.0))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.5,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 90:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64)),2.0))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.5,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######a#7129#7131#7322::Tuple{}
  ######b#7130#7132#7323::Tuple{}
  ####_var0#7133#7324::Tuple{}
  ##div_a#7325::Float64
  ######tup#7073#7076#7326::Tuple{}
  ######x#7074#7077#7327::Float64
  ####_var0#7078#7328::Tuple{}
  ######types#7075#7079#7329::Tuple{Type{Float64}}
  ##a#7330::Float64
  ####G#7315#7331::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7316#7332::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7317#7333::Tuple{}
  ##########x#7135#7166#7170#7318#7334::Float64
  ########_var0#7167#7171#7319#7335::Tuple{}
  ########types#7075#7320#7321#7336::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 90:
      $(Expr(:boundscheck, false))
      ####_var0#7133#7324 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7133#7324 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      ##div_a#7325 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))
      $(Expr(:boundscheck, false))
      ####_var0#7078#7328 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7078#7328 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7325::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7330 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7330::Float64,0)::Float64
      ####G#7315#7331 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7319#7335 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7167#7171#7319#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7330::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(3),:value)::Float64,0.5))), :((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  b_m_a::Float64
  u::Float64
  ####_var0#7339#7341::UNION{BOOL,INT64}
  ########_var0#7337#7338#7340#7342::Float64
  ##xs#7343::Tuple{}
  ##xs#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 147:
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 148:
      b_m_a = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 149:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7339#7341 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7339#7341 = false
      9: 
      ####_var0#7339#7341::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7337#7338#7340#7342 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7337#7338#7340#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7337#7338#7340#7342::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 150:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.mul_float)(b_m_a::Float64,u::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(u::Float64,b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,u::Float64)),b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  b_m_a::Float64
  u::Float64
  ####_var0#7339#7341::UNION{BOOL,INT64}
  ########_var0#7337#7338#7340#7342::Float64
  ##xs#7343::Tuple{}
  ##xs#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 147:
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(7)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(8)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 148:
      b_m_a = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 149:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 8
      ####_var0#7339#7341 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 9
      8: 
      ####_var0#7339#7341 = false
      9: 
      ####_var0#7339#7341::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7337#7338#7340#7342 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 10
      ########_var0#7337#7338#7340#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7337#7338#7340#7342::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 150:
      unless (Base.lt_float)((Base.box)(Base.Float64,(Base.mul_float)(b_m_a::Float64,u::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))::Bool goto 0
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(u::Float64,b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))::Float64))
      0: 
      return (Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,u::Float64)),b_m_a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  u::Float64
  ######a#7129#7131#7345::Tuple{}
  ######b#7130#7132#7346::Tuple{}
  ####_var0#7133#7347::Tuple{}
  ####_var0#7339#7348::UNION{BOOL,INT64}
  ########_var0#7337#7338#7340#7349::Float64
  ######a#7129#7131#7350::Tuple{}
  ######b#7130#7132#7351::Tuple{}
  ####_var0#7133#7352::Tuple{}
  ######tup#7134#7136#7353::Tuple{}
  ######x#7135#7137#7354::Float64
  ####_var0#7138#7355::Tuple{}
  ######types#7075#7139#7356::Tuple{Type{Float64}}
  ######a#7129#7131#7357::Tuple{}
  ######b#7130#7132#7358::Tuple{}
  ####_var0#7133#7359::Tuple{}
  ##xs#7360::Tuple{}
  ##########tup#7134#7136#7140#7153#7361::Tuple{}
  ##########x#7135#7137#7141#7154#7362::Float64
  ########_var0#7138#7142#7155#7363::Tuple{}
  ##########types#7075#7139#7143#7156#7364::Tuple{Type{Float64}}
  ####a1#7157#7365::Float64
  ####a2#7158#7366::Float64
  ########a#7144#7148#7159#7367::Tuple{}
  ########b#7145#7149#7160#7368::Tuple{}
  ########afactor#7146#7150#7161#7369::Float64
  ########bfactor#7147#7151#7162#7370::Float64
  ######_var0#7152#7163#7371::Tuple{}
  ##sqrt_a#7372::Float64
  ##deriv#7373::Float64
  ####G#7172#7374::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7173#7375::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7174#7376::Tuple{}
  ##########x#7135#7166#7170#7175#7377::Float64
  ########_var0#7167#7171#7176#7378::Tuple{}
  ######a#7062#7064#7379::Tuple{}
  ######b#7063#7065#7380::Tuple{}
  ####_var0#7066#7381::Tuple{}
  ######a#7129#7131#7382::Tuple{}
  ######b#7130#7132#7383::Tuple{}
  ####_var0#7133#7384::Tuple{}
  ##xs#7385::Tuple{}
  ##########tup#7134#7136#7140#7153#7386::Tuple{}
  ##########x#7135#7137#7141#7154#7387::Float64
  ########_var0#7138#7142#7155#7388::Tuple{}
  ##########types#7075#7139#7143#7156#7389::Tuple{Type{Float64}}
  ####a1#7157#7390::Float64
  ####a2#7158#7391::Float64
  ########a#7144#7148#7159#7392::Tuple{}
  ########b#7145#7149#7160#7393::Tuple{}
  ########afactor#7146#7150#7161#7394::Float64
  ########bfactor#7147#7151#7162#7395::Float64
  ######_var0#7152#7163#7396::Tuple{}
  ##sqrt_a#7397::Float64
  ##deriv#7398::Float64
  ####G#7172#7399::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7173#7400::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7174#7401::Tuple{}
  ##########x#7135#7166#7170#7175#7402::Float64
  ########_var0#7167#7171#7176#7403::Tuple{}
  ######a#7129#7131#7404::Tuple{}
  ######b#7130#7132#7405::Tuple{}
  ####_var0#7133#7406::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 147:
      GenSym(14) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(15) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(14)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(15)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(19)
      #s25 = GenSym(20)
      GenSym(21) = GenSym(16)
      GenSym(22) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(21)
      #s25 = GenSym(22) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 148:
      $(Expr(:boundscheck, false))
      ####_var0#7133#7347 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7133#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      b_m_a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 149:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 9
      ####_var0#7339#7348 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 10
      9: 
      ####_var0#7339#7348 = false
      10: 
      ####_var0#7339#7348::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(5) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(4) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7337#7338#7340#7349 = (Base.arrayref)(GenSym(5),GenSym(4))::Float64
      goto 11
      ########_var0#7337#7338#7340#7349 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      u = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7337#7338#7340#7349::Float64,1.0)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 150:
      $(Expr(:boundscheck, false))
      ####_var0#7138#7355 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7138#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7352 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7133#7352 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      unless (Base.lt_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64)::Bool goto 0
      $(Expr(:boundscheck, false))
      ####_var0#7133#7359 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7133#7359 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ########_var0#7138#7142#7155#7363 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7138#7142#7155#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,u::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7157#7365 = GenSym(6)
      ####a2#7158#7366 = GenSym(7)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7163#7371 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7152#7163#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7157#7365::Float64,####a2#7158#7366::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7372 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(8),:value)::Float64)::ANY)::Float64
      ##deriv#7373 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7372::Float64))
      ####G#7172#7374 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7378 = (top(tuple))()::Tuple{}
      goto 23
      ########_var0#7167#7171#7176#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7372::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7066#7381 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7066#7381 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(9),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7384 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7133#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      $(Expr(:boundscheck, false))
      ########_var0#7138#7142#7155#7388 = (top(tuple))()::Tuple{}
      goto 30
      ########_var0#7138#7142#7155#7388 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b_m_a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,u::Float64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7157#7390 = GenSym(10)
      ####a2#7158#7391 = GenSym(11)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7163#7396 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7152#7163#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7157#7390::Float64,####a2#7158#7391::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7397 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(12),:value)::Float64)::ANY)::Float64
      ##deriv#7398 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7397::Float64))
      ####G#7172#7399 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7176#7403 = (top(tuple))()::Tuple{}
      goto 33
      ########_var0#7167#7171#7176#7403 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7397::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7133#7406 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7133#7406 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))((top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(13),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  x::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ##fx#7407::Float64
  ##fx#7408::Float64
  ####fy#2548#7409::Float64
  ##fx#7410::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 96:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 97:
      ##fx#7407 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7407::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7407::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7407::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7407::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      ##fx#7408 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7408::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7408::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7408::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7408::Float64)))::Bool)))))) goto 1
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),a::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))
      1: 
      ####fy#2548#7409 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(c::Float64,####fy#2548#7409::Float64)::Bool,(Base.ne_float)(####fy#2548#7409::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7409::Float64))::Bool)) goto 2
      return (Base.box)(Base.Float64,(Base.div_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))))
      2: 
      ##fx#7410 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7410::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7410::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7410::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7410::Float64)))::Bool)))))) goto 3
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))
      3: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  x::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  ##fx#7407::Float64
  ##fx#7408::Float64
  ####fy#2548#7409::Float64
  ##fx#7410::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 96:
      GenSym(4) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(6) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(5)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(6)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 97:
      ##fx#7407 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7407::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7407::Float64,a::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7407::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7407::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      ##fx#7408 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7408::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7408::Float64,c::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7408::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7408::Float64)))::Bool)))))) goto 1
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),a::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))))))
      1: 
      ####fy#2548#7409 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(c::Float64,####fy#2548#7409::Float64)::Bool,(Base.ne_float)(####fy#2548#7409::Float64,9.223372036854776e18)::Bool)),x::Int64 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#2548#7409::Float64))::Bool)) goto 2
      return (Base.box)(Base.Float64,(Base.div_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))))
      2: 
      ##fx#7410 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(##fx#7410::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(##fx#7410::Float64,b::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(##fx#7410::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,##fx#7410::Float64)))::Bool)))))) goto 3
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))))))
      3: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ####fx#7411#7441::Float64
  ######fx#7412#7413#7442::Float64
  ######a#7129#7131#7443::Tuple{}
  ######b#7130#7132#7444::Tuple{}
  ####_var0#7133#7445::Tuple{}
  ######a#7129#7131#7446::Tuple{}
  ######b#7130#7132#7447::Tuple{}
  ####_var0#7133#7448::Tuple{}
  ##a1#7449::Float64
  ##a2#7450::Float64
  ######a#7144#7148#7451::Tuple{}
  ######b#7145#7149#7452::Tuple{}
  ######afactor#7146#7150#7453::Float64
  ######bfactor#7147#7151#7454::Float64
  ####_var0#7152#7455::Tuple{}
  ######tup#7414#7416#7456::Tuple{}
  ####_var0#7417#7457::Tuple{}
  ######types#7415#7418#7458::Tuple{Type{Int64}}
  ########tup#7134#7136#7140#7459::Tuple{}
  ########x#7135#7137#7141#7460::Float64
  ######_var0#7138#7142#7461::Tuple{}
  ########types#7075#7139#7143#7462::Tuple{Type{Float64}}
  ##a1#7463::Float64
  ##a2#7464::Float64
  ##div_a#7465::Float64
  ####afactor#7425#7466::Float64
  ####bfactor#7426#7467::Float64
  ########a#7144#7419#7427#7468::Tuple{}
  ########b#7145#7420#7428#7469::Tuple{}
  ########afactor#7146#7421#7429#7470::Float64
  ########bfactor#7147#7422#7430#7471::Float64
  ######_var0#7423#7431#7472::Tuple{}
  ######types#7424#7432#7473::Tuple{Type{Float64}}
  ######a#7129#7131#7474::Tuple{}
  ######b#7130#7132#7475::Tuple{}
  ####_var0#7133#7476::Tuple{}
  ##a#7477::Float64
  ##div_a#7478::Float64
  ##deriv#7479::Float64
  ####G#7435#7480::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7436#7481::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7437#7482::Tuple{}
  ##########x#7135#7166#7170#7438#7483::Float64
  ########_var0#7167#7171#7439#7484::Tuple{}
  ####fx#7411#7485::Float64
  ######a#7129#7131#7486::Tuple{}
  ######b#7130#7132#7487::Tuple{}
  ####_var0#7133#7488::Tuple{}
  ######a#7129#7131#7489::Tuple{}
  ######b#7130#7132#7490::Tuple{}
  ####_var0#7133#7491::Tuple{}
  ##a1#7492::Float64
  ##a2#7493::Float64
  ######a#7144#7148#7494::Tuple{}
  ######b#7145#7149#7495::Tuple{}
  ######afactor#7146#7150#7496::Float64
  ######bfactor#7147#7151#7497::Float64
  ####_var0#7152#7498::Tuple{}
  ######types#7415#7440#7499::Tuple{Type{Int64}}
  ########tup#7134#7136#7140#7500::Tuple{}
  ########x#7135#7137#7141#7501::Float64
  ######_var0#7138#7142#7502::Tuple{}
  ########types#7075#7139#7143#7503::Tuple{Type{Float64}}
  ##a1#7504::Float64
  ##a2#7505::Float64
  ##div_a#7506::Float64
  ####afactor#7425#7507::Float64
  ####bfactor#7426#7508::Float64
  ########a#7144#7419#7427#7509::Tuple{}
  ########b#7145#7420#7428#7510::Tuple{}
  ########afactor#7146#7421#7429#7511::Float64
  ########bfactor#7147#7422#7430#7512::Float64
  ######_var0#7423#7431#7513::Tuple{}
  ######types#7424#7432#7514::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 96:
      GenSym(17) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(18) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(19) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(20) = GenSym(17)
      GenSym(21) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(20)
      #s25 = GenSym(21)
      GenSym(22) = GenSym(18)
      GenSym(23) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(22)
      #s25 = GenSym(23)
      GenSym(24) = GenSym(19)
      GenSym(25) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(24)
      #s25 = GenSym(25) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 97:
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####fx#7411#7441 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#7411#7441::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#7411#7441::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#7411#7441::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#7411#7441::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      GenSym(5) = (top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7412#7413#7442 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7412#7413#7442::Float64,GenSym(5))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7412#7413#7442::Float64,GenSym(5))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7412#7413#7442::Float64,9.223372036854776e18)::Bool,(Base.slt_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7412#7413#7442::Float64)))::Bool)))))) goto 1
      $(Expr(:boundscheck, false))
      ####_var0#7417#7457 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7417#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7461 = (top(tuple))()::Tuple{}
      goto 21
      ######_var0#7138#7142#7461 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7448 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7133#7448 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7445 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7133#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7449 = GenSym(6)
      ##a2#7450 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7152#7455 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7152#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7449::Float64,##a2#7450::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7463 = GenSym(9)
      ##a2#7464 = GenSym(10)
      ##div_a#7465 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7463::Float64,##a2#7464::Float64))
      ####afactor#7425#7466 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7464::Float64))
      ####bfactor#7426#7467 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7463::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7464::Float64,##a2#7464::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7423#7431#7472 = (top(tuple))()::Tuple{}
      goto 23
      ######_var0#7423#7431#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7465::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
      unless x::Int64 == c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Bool goto 2
      $(Expr(:boundscheck, false))
      ####_var0#7133#7476 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7133#7476 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      ##a#7477 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##div_a#7478 = (Base.box)(Base.Float64,(Base.div_float)(2.0,##a#7477::Float64))
      ##deriv#7479 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7478::Float64,##a#7477::Float64))))
      ####G#7435#7480 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7439#7484 = (top(tuple))()::Tuple{}
      goto 27
      ########_var0#7167#7171#7439#7484 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7478::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
      GenSym(11) = (top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####fx#7411#7485 = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#7411#7485::Float64,GenSym(11))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#7411#7485::Float64,GenSym(11))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#7411#7485::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(x::Int64,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#7411#7485::Float64)))::Bool)))))) goto 3
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7502 = (top(tuple))()::Tuple{}
      goto 37
      ######_var0#7138#7142#7502 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7491 = (top(tuple))()::Tuple{}
      goto 32
      ####_var0#7133#7491 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7488 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7133#7488 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7492 = GenSym(12)
      ##a2#7493 = GenSym(13)
      $(Expr(:boundscheck, false))
      ####_var0#7152#7498 = (top(tuple))()::Tuple{}
      goto 34
      ####_var0#7152#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7492::Float64,##a2#7493::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))), :((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7504 = GenSym(15)
      ##a2#7505 = GenSym(16)
      ##div_a#7506 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7504::Float64,##a2#7505::Float64))
      ####afactor#7425#7507 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7505::Float64))
      ####bfactor#7426#7508 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7504::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7505::Float64,##a2#7505::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7423#7431#7513 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7423#7431#7513 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7506::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7515::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 121:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 122:
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 124:
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(11)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(12)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 125:
      GenSym(9) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      u = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)),GenSym(9))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),GenSym(7))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)),GenSym(5))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 126:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 127:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,u::Float64)),v::Float64))
      1: 
  end::Float64

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Float64
  v::Float64
  ##xs#7515::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 121:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 122:
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 124:
      GenSym(10) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(11) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(11)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(12)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(17)
      #s25 = GenSym(18) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 125:
      GenSym(9) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      u = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)),GenSym(9))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),GenSym(7))))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)),GenSym(5))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 126:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 127:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,u::Float64)),v::Float64))
      1: 
  end::Float64

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7519#7521#7548::Tuple{}
  ######x#7520#7522#7549::Int64
  ####_var0#7523#7550::Tuple{}
  ######types#7415#7524#7551::Tuple{Type{Int64}}
  ##exp_a#7552::Float64
  ####G#7525#7553::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7526#7554::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7527#7555::Tuple{}
  ##########x#7135#7166#7170#7528#7556::Float64
  ########_var0#7167#7171#7529#7557::Tuple{}
  ######a#7129#7131#7558::Tuple{}
  ######b#7130#7132#7559::Tuple{}
  ####_var0#7133#7560::Tuple{}
  ##a1#7561::Float64
  ##a2#7562::Float64
  ######a#7144#7148#7563::Tuple{}
  ######b#7145#7149#7564::Tuple{}
  ######afactor#7146#7150#7565::Float64
  ######bfactor#7147#7151#7566::Float64
  ####_var0#7152#7567::Tuple{}
  ######tup#7519#7521#7568::Tuple{}
  ######x#7520#7522#7569::Int64
  ####_var0#7523#7570::Tuple{}
  ######types#7415#7524#7571::Tuple{Type{Int64}}
  ##exp_a#7572::Float64
  ####G#7525#7573::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7526#7574::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7527#7575::Tuple{}
  ##########x#7135#7166#7170#7528#7576::Float64
  ########_var0#7167#7171#7529#7577::Tuple{}
  ######a#7129#7131#7578::Tuple{}
  ######b#7130#7132#7579::Tuple{}
  ####_var0#7133#7580::Tuple{}
  ##a1#7581::Float64
  ##a2#7582::Float64
  ######a#7144#7148#7583::Tuple{}
  ######b#7145#7149#7584::Tuple{}
  ######afactor#7146#7150#7585::Float64
  ######bfactor#7147#7151#7586::Float64
  ####_var0#7152#7587::Tuple{}
  ######tup#7519#7521#7588::Tuple{}
  ######x#7520#7522#7589::Int64
  ####_var0#7523#7590::Tuple{}
  ######types#7415#7524#7591::Tuple{Type{Int64}}
  ##exp_a#7592::Float64
  ####G#7525#7593::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7164#7168#7526#7594::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7134#7165#7169#7527#7595::Tuple{}
  ##########x#7135#7166#7170#7528#7596::Float64
  ########_var0#7167#7171#7529#7597::Tuple{}
  ######a#7129#7131#7598::Tuple{}
  ######b#7130#7132#7599::Tuple{}
  ####_var0#7133#7600::Tuple{}
  ##a1#7601::Float64
  ##a2#7602::Float64
  ######a#7144#7148#7603::Tuple{}
  ######b#7145#7149#7604::Tuple{}
  ######afactor#7146#7150#7605::Float64
  ######bfactor#7147#7151#7606::Float64
  ####_var0#7152#7607::Tuple{}
  ######a#7129#7131#7608::Tuple{}
  ######b#7130#7132#7609::Tuple{}
  ####_var0#7133#7610::Tuple{}
  ######a#7062#7064#7611::Tuple{}
  ######b#7063#7065#7612::Tuple{}
  ####_var0#7066#7613::Tuple{}
  ######a#7129#7131#7614::Tuple{}
  ######b#7130#7132#7615::Tuple{}
  ####_var0#7133#7616::Tuple{}
  ######a#7129#7131#7617::Tuple{}
  ######b#7130#7132#7618::Tuple{}
  ####_var0#7133#7619::Tuple{}
  ######a#7129#7131#7620::Tuple{}
  ######b#7130#7132#7621::Tuple{}
  ####_var0#7133#7622::Tuple{}
  ##xs#7623::Tuple{Int64}
  ####a1#7534#7624::Float64
  ####a2#7535#7625::Float64
  ########a#7144#7148#7536#7626::Tuple{}
  ########b#7145#7149#7537#7627::Tuple{}
  ########afactor#7146#7150#7538#7628::Float64
  ########bfactor#7147#7151#7539#7629::Float64
  ######_var0#7152#7540#7630::Tuple{}
  ####a1#7541#7631::Float64
  ####a2#7542#7632::Float64
  ########a#7144#7148#7543#7633::Tuple{}
  ########b#7145#7149#7544#7634::Tuple{}
  ########afactor#7146#7150#7545#7635::Float64
  ########bfactor#7147#7151#7546#7636::Float64
  ######_var0#7152#7547#7637::Tuple{}
  ########tup#7134#7136#7140#7638::Tuple{}
  ########x#7135#7137#7141#7639::Float64
  ######_var0#7138#7142#7640::Tuple{}
  ########types#7075#7139#7143#7641::Tuple{Type{Float64}}
  ##a1#7642::Float64
  ##a2#7643::Float64
  ##div_a#7644::Float64
  ####afactor#7425#7645::Float64
  ####bfactor#7426#7646::Float64
  ########a#7144#7419#7427#7647::Tuple{}
  ########b#7145#7420#7428#7648::Tuple{}
  ########afactor#7146#7421#7429#7649::Float64
  ########bfactor#7147#7422#7430#7650::Float64
  ######_var0#7423#7431#7651::Tuple{}
  ######types#7424#7432#7652::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 121:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 122:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 124:
      GenSym(27) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(28) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(29) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(30) = GenSym(27)
      GenSym(31) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(30)
      #s25 = GenSym(31)
      GenSym(32) = GenSym(28)
      GenSym(33) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(32)
      #s25 = GenSym(33)
      GenSym(34) = GenSym(29)
      GenSym(35) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(34)
      #s25 = GenSym(35) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 125:
      $(Expr(:boundscheck, false))
      ####_var0#7133#7600 = (top(tuple))()::Tuple{}
      goto 31
      ####_var0#7133#7600 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      $(Expr(:boundscheck, false))
      ####_var0#7523#7590 = (top(tuple))()::Tuple{}
      goto 27
      ####_var0#7523#7590 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      27: 
      ##exp_a#7592 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7525#7593 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7529#7597 = (top(tuple))()::Tuple{}
      goto 29
      ########_var0#7167#7171#7529#7597 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      29: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7592::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      ##a1#7601 = GenSym(14)
      ##a2#7602 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7152#7607 = (top(tuple))()::Tuple{}
      goto 33
      ####_var0#7152#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(16) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7601::Float64,##a2#7602::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7133#7580 = (top(tuple))()::Tuple{}
      goto 23
      ####_var0#7133#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      23: 
      $(Expr(:boundscheck, false))
      ####_var0#7523#7570 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7523#7570 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      ##exp_a#7572 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7525#7573 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7529#7577 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7167#7171#7529#7577 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7572::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7581 = GenSym(10)
      ##a2#7582 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7152#7587 = (top(tuple))()::Tuple{}
      goto 25
      ####_var0#7152#7587 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      GenSym(17) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7581::Float64,##a2#7582::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7133#7610 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7133#7610 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7560 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7133#7560 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ####_var0#7523#7550 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7523#7550 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      ##exp_a#7552 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7525#7553 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7167#7171#7529#7557 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7167#7171#7529#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7552::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))(GenSym(5),:value)::Float64
      ##a1#7561 = GenSym(6)
      ##a2#7562 = GenSym(7)
      $(Expr(:boundscheck, false))
      ####_var0#7152#7567 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7152#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(18) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7561::Float64,##a2#7562::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7066#7613 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7066#7613 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(16),:value)::Float64,(top(getfield))(GenSym(17),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(18),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 126:
      $(Expr(:boundscheck, false))
      ####_var0#7133#7622 = (top(tuple))()::Tuple{}
      goto 44
      ####_var0#7133#7622 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      44: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7619 = (top(tuple))()::Tuple{}
      goto 42
      ####_var0#7133#7619 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      42: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7616 = (top(tuple))()::Tuple{}
      goto 40
      ####_var0#7133#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      40: 
      GenSym(19) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(20) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7534#7624 = GenSym(19)
      ####a2#7535#7625 = GenSym(20)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7540#7630 = (top(tuple))()::Tuple{}
      goto 46
      ######_var0#7152#7540#7630 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      46: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7534#7624::Float64,####a2#7535#7625::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(22) = (top(getfield))(GenSym(21),:value)::Float64
      GenSym(23) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7541#7631 = GenSym(22)
      ####a2#7542#7632 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7547#7637 = (top(tuple))()::Tuple{}
      goto 47
      ######_var0#7152#7547#7637 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      47: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7541#7631::Float64,####a2#7542#7632::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      v = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(24),(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 127:
      $(Expr(:boundscheck, false))
      ######_var0#7138#7142#7640 = (top(tuple))()::Tuple{}
      goto 49
      ######_var0#7138#7142#7640 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      49: 
      GenSym(25) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(26) = (top(getfield))(v::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7642 = GenSym(25)
      ##a2#7643 = GenSym(26)
      ##div_a#7644 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7642::Float64,##a2#7643::Float64))
      ####afactor#7425#7645 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7643::Float64))
      ####bfactor#7426#7646 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7642::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7643::Float64,##a2#7643::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7423#7431#7651 = (top(tuple))()::Tuple{}
      goto 51
      ######_var0#7423#7431#7651 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      51: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7644::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Complex{Float64}
  v::Float64
  ##xs#7653::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 133:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 134:
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 136:
      GenSym(30) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 137:
      GenSym(18) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(22) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(20) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(24) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))
      GenSym(23) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(22),GenSym(18))::Float64), :((Base.Math.nan_dom_err)(GenSym(20),GenSym(18))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(11))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(26) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:im)::Float64)))))
      GenSym(25) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:im)::Float64)))))
      GenSym(4) = (Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(4))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(28) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:re)::Float64,(top(getfield))(GenSym(25),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:im)::Float64,(top(getfield))(GenSym(25),:im)::Float64)))))
      GenSym(27) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:im)::Float64)))))
      u = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:re)::Float64,(top(getfield))(GenSym(27),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:im)::Float64,(top(getfield))(GenSym(27),:im)::Float64))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 138:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 139:
      GenSym(29) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-2.0,(top(getfield))(u::Complex{Float64},:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-2.0,(top(getfield))(u::Complex{Float64},:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:re)::Float64,v::Float64))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:im)::Float64,v::Float64)))))
      1: 
  end::UNION{COMPLEX{FLOAT64},FLOAT64}

----float----

Variables:
  d::Distributions.TriangularDist{Float64}
  t::Int64
  a::Float64
  b::Float64
  c::Float64
  #s25::Int64
  u::Complex{Float64}
  v::Float64
  ##xs#7653::Tuple{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 133:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 134:
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 136:
      GenSym(30) = (top(getfield))(d::Distributions.TriangularDist{Float64},:a)::Float64
      GenSym(31) = (top(getfield))(d::Distributions.TriangularDist{Float64},:b)::Float64
      GenSym(32) = (top(getfield))(d::Distributions.TriangularDist{Float64},:c)::Float64
      #s25 = 1
      GenSym(33) = GenSym(30)
      GenSym(34) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(33)
      #s25 = GenSym(34)
      GenSym(35) = GenSym(31)
      GenSym(36) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(35)
      #s25 = GenSym(36)
      GenSym(37) = GenSym(32)
      GenSym(38) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(37)
      #s25 = GenSym(38) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 137:
      GenSym(18) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(22) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(20) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(18),0)::Float64
      GenSym(24) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64))
      GenSym(23) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(22),GenSym(18))::Float64), :((Base.Math.nan_dom_err)(GenSym(20),GenSym(18))::Float64)))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(c::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(15) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(13) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(11),0)::Float64
      GenSym(17) = (Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64))
      GenSym(16) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(15),GenSym(11))::Float64), :((Base.Math.nan_dom_err)(GenSym(13),GenSym(11))::Float64)))
      GenSym(26) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(24),(top(getfield))(GenSym(23),:im)::Float64)))))
      GenSym(25) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(17),(top(getfield))(GenSym(16),:im)::Float64)))))
      GenSym(4) = (Base.box)(Base.Float64,(Base.mul_float)(b::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64))
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(4))::Float64), :((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64)))
      GenSym(28) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:re)::Float64,(top(getfield))(GenSym(25),:re)::Float64))), :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(26),:im)::Float64,(top(getfield))(GenSym(25),:im)::Float64)))))
      GenSym(27) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(10),(top(getfield))(GenSym(9),:im)::Float64)))))
      u = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:re)::Float64,(top(getfield))(GenSym(27),:re)::Float64))), :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(28),:im)::Float64,(top(getfield))(GenSym(27),:im)::Float64))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 138:
      v = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(b::Float64,a::Float64)),(Base.box)(Base.Float64,(Base.sub_float)(c::Float64,a::Float64)))),(Base.box)(Base.Float64,(Base.sub_float)(b::Float64,c::Float64)))),(Base.box)(Float64,(Base.sitofp)(Float64,(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 139:
      GenSym(29) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-2.0,(top(getfield))(u::Complex{Float64},:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-2.0,(top(getfield))(u::Complex{Float64},:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:re)::Float64,v::Float64))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(29),:im)::Float64,v::Float64)))))
      1: 
  end::UNION{COMPLEX{FLOAT64},FLOAT64}

----dual----

Variables:
  d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  b::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  c::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  u::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7519#7521#7732::Tuple{}
  ######x#7520#7522#7733::Int64
  ####_var0#7523#7734::Tuple{}
  ######types#7415#7524#7735::Tuple{Type{Int64}}
  ######a#7129#7131#7736::Tuple{}
  ######b#7130#7132#7737::Tuple{}
  ####_var0#7133#7738::Tuple{}
  ######tup#7519#7521#7739::Tuple{}
  ######x#7520#7522#7740::Int64
  ####_var0#7523#7741::Tuple{}
  ######types#7415#7524#7742::Tuple{Type{Int64}}
  ######a#7129#7131#7743::Tuple{}
  ######b#7130#7132#7744::Tuple{}
  ####_var0#7133#7745::Tuple{}
  ######tup#7519#7521#7746::Tuple{}
  ######x#7520#7522#7747::Int64
  ####_var0#7523#7748::Tuple{}
  ######types#7415#7524#7749::Tuple{Type{Int64}}
  ######a#7129#7131#7750::Tuple{}
  ######b#7130#7132#7751::Tuple{}
  ####_var0#7133#7752::Tuple{}
  ######a#7129#7131#7753::Tuple{}
  ######b#7130#7132#7754::Tuple{}
  ####_var0#7133#7755::Tuple{}
  ######a#7129#7131#7756::Tuple{}
  ######b#7130#7132#7757::Tuple{}
  ####_var0#7133#7758::Tuple{}
  ######a#7129#7131#7759::Tuple{}
  ######b#7130#7132#7760::Tuple{}
  ####_var0#7133#7761::Tuple{}
  ##xs#7762::Tuple{Int64}
  ####a1#7534#7763::Float64
  ####a2#7535#7764::Float64
  ########a#7144#7148#7536#7765::Tuple{}
  ########b#7145#7149#7537#7766::Tuple{}
  ########afactor#7146#7150#7538#7767::Float64
  ########bfactor#7147#7151#7539#7768::Float64
  ######_var0#7152#7540#7769::Tuple{}
  ####a1#7541#7770::Float64
  ####a2#7542#7771::Float64
  ########a#7144#7148#7543#7772::Tuple{}
  ########b#7145#7149#7544#7773::Tuple{}
  ########afactor#7146#7150#7545#7774::Float64
  ########bfactor#7147#7151#7546#7775::Float64
  ######_var0#7152#7547#7776::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 133:
      NewvarNode(:a)
      NewvarNode(:b)
      NewvarNode(:c)
      NewvarNode(symbol("#s25"))
      NewvarNode(:u)
      NewvarNode(:v)
      unless t::Int64 === 0::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 134:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 136:
      GenSym(12) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:a)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(13) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:b)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(14) = (top(getfield))(d::Distributions.TriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:c)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      a = GenSym(15)
      #s25 = GenSym(16)
      GenSym(17) = GenSym(13)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      b = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(14)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(3,1))
      c = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 137:
      $(Expr(:boundscheck, false))
      ####_var0#7133#7752 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7133#7752 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      $(Expr(:boundscheck, false))
      ####_var0#7523#7748 = (top(tuple))()::Tuple{}
      goto 19
      ####_var0#7523#7748 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7133#7745 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7133#7745 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      $(Expr(:boundscheck, false))
      ####_var0#7523#7741 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7523#7741 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(5) = GenSym(4) - $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ####_var0#7133#7738 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7133#7738 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ####_var0#7523#7734 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7523#7734 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      u = GenSym(5) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 138:
      $(Expr(:boundscheck, false))
      ####_var0#7133#7761 = (top(tuple))()::Tuple{}
      goto 28
      ####_var0#7133#7761 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7758 = (top(tuple))()::Tuple{}
      goto 26
      ####_var0#7133#7758 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      $(Expr(:boundscheck, false))
      ####_var0#7133#7755 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7133#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7534#7763 = GenSym(6)
      ####a2#7535#7764 = GenSym(7)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7540#7769 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7152#7540#7769 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7534#7763::Float64,####a2#7535#7764::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(b::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(c::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7541#7770 = GenSym(9)
      ####a2#7542#7771 = GenSym(10)
      $(Expr(:boundscheck, false))
      ######_var0#7152#7547#7776 = (top(tuple))()::Tuple{}
      goto 31
      ######_var0#7152#7547#7776 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      31: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7541#7770::Float64,####a2#7542#7771::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      v = call($(Expr(:new, :((top(getfield))(Base,:MulFun)::Type{Base.MulFun}))),GenSym(11),(Base.box)(Int64,(Base.mul_int)(t::Int64,t::Int64)))::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/triangular.jl, line 139:
      return (-2.0 * u::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} / v::ForwardDiff.GradientNumber{0,Float64,Tuple{}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      1: 
  end::UNION{COMPLEX{FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}},FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




