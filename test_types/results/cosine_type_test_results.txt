____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 39:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,0.1306909660486578))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,0.1306909660486578))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7079#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7094::Tuple{}
  ##########x#7071#7073#7077#7082#7095::Float64
  ########_var0#7074#7078#7083#7096::Tuple{}
  ######tup#7070#7085#7097::Tuple{}
  ######x#7071#7086#7098::Float64
  ####_var0#7087#7099::Tuple{}
  ######types#7084#7088#7100::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.1306909660486578))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,0.1306909660486578))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,0.1306909660486578))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7079#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7094::Tuple{}
  ##########x#7071#7073#7077#7082#7095::Float64
  ########_var0#7074#7078#7083#7096::Tuple{}
  ######tup#7070#7085#7097::Tuple{}
  ######x#7071#7086#7098::Float64
  ####_var0#7087#7099::Tuple{}
  ######types#7084#7088#7100::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.1306909660486578))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7079#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7094::Tuple{}
  ##########x#7071#7073#7077#7082#7095::Float64
  ########_var0#7074#7078#7083#7096::Tuple{}
  ######tup#7070#7085#7097::Tuple{}
  ######x#7071#7086#7098::Float64
  ####_var0#7087#7099::Tuple{}
  ######types#7084#7088#7100::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.1306909660486578))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7079#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7094::Tuple{}
  ##########x#7071#7073#7077#7082#7095::Float64
  ########_var0#7074#7078#7083#7096::Tuple{}
  ######tup#7070#7085#7097::Tuple{}
  ######x#7071#7086#7098::Float64
  ####_var0#7087#7099::Tuple{}
  ######types#7084#7088#7100::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.1306909660486578))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7089::Float64
  ##exp_a#7090::Float64
  ##deriv#7091::Float64
  ####G#7079#7092::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7093::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7094::Tuple{}
  ##########x#7071#7073#7077#7082#7095::Float64
  ########_var0#7074#7078#7083#7096::Tuple{}
  ######tup#7070#7085#7097::Tuple{}
  ######x#7071#7086#7098::Float64
  ####_var0#7087#7099::Tuple{}
  ######types#7084#7088#7100::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 45:
      ##a#7089 = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7090 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7091 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7089::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7092 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7096 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7096 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7090::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7087#7099 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7087#7099 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(0),:value)::Float64,0.1306909660486578))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 43:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 41:
      return (top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 47:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.593762875598281,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.593762875598281,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7085#7111#7115::Tuple{}
  ########x#7071#7086#7112#7116::Float64
  ######_var0#7087#7113#7117::Tuple{}
  ########types#7084#7088#7114#7118::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      $(Expr(:boundscheck, false))
      ######_var0#7087#7113#7117 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7087#7113#7117 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.593762875598281))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.593762875598281,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.593762875598281,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7085#7111#7115::Tuple{}
  ########x#7071#7086#7112#7116::Float64
  ######_var0#7087#7113#7117::Tuple{}
  ########types#7084#7088#7114#7118::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      $(Expr(:boundscheck, false))
      ######_var0#7087#7113#7117 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7087#7113#7117 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.593762875598281))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7085#7111#7115::Tuple{}
  ########x#7071#7086#7112#7116::Float64
  ######_var0#7087#7113#7117::Tuple{}
  ########types#7084#7088#7114#7118::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      $(Expr(:boundscheck, false))
      ######_var0#7087#7113#7117 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7087#7113#7117 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.593762875598281))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7085#7111#7115::Tuple{}
  ########x#7071#7086#7112#7116::Float64
  ######_var0#7087#7113#7117::Tuple{}
  ########types#7084#7088#7114#7118::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      $(Expr(:boundscheck, false))
      ######_var0#7087#7113#7117 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7087#7113#7117 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.593762875598281))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7085#7111#7115::Tuple{}
  ########x#7071#7086#7112#7116::Float64
  ######_var0#7087#7113#7117::Tuple{}
  ########types#7084#7088#7114#7118::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 49:
      $(Expr(:boundscheck, false))
      ######_var0#7087#7113#7117 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7087#7113#7117 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.593762875598281))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}
  ####_var0#7121#7136::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7137::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7136 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7136 = false
      2: 
      ####_var0#7121#7136::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7137 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7137::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{Float64},GenSym(2),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}
  ####_var0#7121#7136::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7137::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7136 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7136 = false
      2: 
      ####_var0#7121#7136::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7137 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7137::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{Float64},GenSym(2),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7121#7249::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7250::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7249 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7249 = false
      2: 
      ####_var0#7121#7249::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7250 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7250::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(Distributions.minimum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Distributions.maximum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}
  ####_var0#7121#7136::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7137::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7136 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7136 = false
      2: 
      ####_var0#7121#7136::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7137 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7137::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{Float64},GenSym(2),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}
  ####_var0#7121#7136::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7137::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7136 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7136 = false
      2: 
      ####_var0#7121#7136::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7137 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7137 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7137::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{Float64},GenSym(2),(Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),(Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)),1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7121#7249::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7250::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7249 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7249 = false
      2: 
      ####_var0#7121#7249::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7250 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7250::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(Distributions.minimum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Distributions.maximum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7121#7249::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7250::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7249 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7249 = false
      2: 
      ####_var0#7121#7249::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7250 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7250::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(Distributions.minimum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Distributions.maximum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7121#7249::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7250::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7249 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7249 = false
      2: 
      ####_var0#7121#7249::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7250 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7250::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(Distributions.minimum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Distributions.maximum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7121#7249::UNION{BOOL,INT64}
  ########_var0#7119#7120#7122#7250::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7121#7249 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7121#7249 = false
      2: 
      ####_var0#7121#7249::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7119#7120#7122#7250 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7119#7120#7122#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7119#7120#7122#7250::Float64,1.0))
      return (Distributions.quantile_bisect)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(Distributions.minimum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Distributions.maximum)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Cosine{Float64}
  x::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{Float64},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(0) = (Distributions.cospi)(z::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,GenSym(0))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Cosine{Float64}
  x::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{Float64},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(0) = (Distributions.cospi)(z::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,GenSym(0))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7179#7262#7281::Tuple{}
  ####_var0#7263#7282::Tuple{}
  ######types#7261#7264#7283::Tuple{Type{Int64}}
  ##a1#7284::Float64
  ##a2#7285::Float64
  ##div_a#7286::Float64
  ####afactor#7164#7287::Float64
  ####bfactor#7165#7288::Float64
  ########a#7154#7158#7166#7289::Tuple{}
  ########b#7155#7159#7167#7290::Tuple{}
  ########afactor#7156#7160#7168#7291::Float64
  ########bfactor#7157#7161#7169#7292::Float64
  ######_var0#7162#7170#7293::Tuple{}
  ######types#7163#7171#7294::Tuple{Type{Float64}}
  ########tup#7271#7273#7277#7295::Tuple{}
  ########x#7272#7274#7278#7296::Int64
  ######_var0#7275#7279#7297::Tuple{}
  ########types#7261#7276#7280#7298::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      $(Expr(:boundscheck, false))
      ####_var0#7263#7282 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7263#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7284 = GenSym(0)
      ##a2#7285 = GenSym(1)
      ##div_a#7286 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7284::Float64,##a2#7285::Float64))
      ####afactor#7164#7287 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7285::Float64))
      ####bfactor#7165#7288 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7284::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7285::Float64,##a2#7285::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7162#7170#7293 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7162#7170#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7286::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(2) = 1.0 + (Distributions.cospi)(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{}::UNION{}
      $(Expr(:boundscheck, false))
      ######_var0#7275#7279#7297 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7275#7279#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return GenSym(2) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Cosine{Float64}
  x::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{Float64},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(0) = (Distributions.cospi)(z::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,GenSym(0))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Cosine{Float64}
  x::Int64
  z::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{Float64},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      z = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Cosine{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(0) = (Distributions.cospi)(z::Float64)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,GenSym(0))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(top(getfield))(d::Distributions.Cosine{Float64},:σ)::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7179#7262#7281::Tuple{}
  ####_var0#7263#7282::Tuple{}
  ######types#7261#7264#7283::Tuple{Type{Int64}}
  ##a1#7284::Float64
  ##a2#7285::Float64
  ##div_a#7286::Float64
  ####afactor#7164#7287::Float64
  ####bfactor#7165#7288::Float64
  ########a#7154#7158#7166#7289::Tuple{}
  ########b#7155#7159#7167#7290::Tuple{}
  ########afactor#7156#7160#7168#7291::Float64
  ########bfactor#7157#7161#7169#7292::Float64
  ######_var0#7162#7170#7293::Tuple{}
  ######types#7163#7171#7294::Tuple{Type{Float64}}
  ########tup#7271#7273#7277#7295::Tuple{}
  ########x#7272#7274#7278#7296::Int64
  ######_var0#7275#7279#7297::Tuple{}
  ########types#7261#7276#7280#7298::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      $(Expr(:boundscheck, false))
      ####_var0#7263#7282 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7263#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7284 = GenSym(0)
      ##a2#7285 = GenSym(1)
      ##div_a#7286 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7284::Float64,##a2#7285::Float64))
      ####afactor#7164#7287 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7285::Float64))
      ####bfactor#7165#7288 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7284::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7285::Float64,##a2#7285::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7162#7170#7293 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7162#7170#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7286::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(2) = 1.0 + (Distributions.cospi)(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{}::UNION{}
      $(Expr(:boundscheck, false))
      ######_var0#7275#7279#7297 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7275#7279#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return GenSym(2) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7179#7262#7281::Tuple{}
  ####_var0#7263#7282::Tuple{}
  ######types#7261#7264#7283::Tuple{Type{Int64}}
  ##a1#7284::Float64
  ##a2#7285::Float64
  ##div_a#7286::Float64
  ####afactor#7164#7287::Float64
  ####bfactor#7165#7288::Float64
  ########a#7154#7158#7166#7289::Tuple{}
  ########b#7155#7159#7167#7290::Tuple{}
  ########afactor#7156#7160#7168#7291::Float64
  ########bfactor#7157#7161#7169#7292::Float64
  ######_var0#7162#7170#7293::Tuple{}
  ######types#7163#7171#7294::Tuple{Type{Float64}}
  ########tup#7271#7273#7277#7295::Tuple{}
  ########x#7272#7274#7278#7296::Int64
  ######_var0#7275#7279#7297::Tuple{}
  ########types#7261#7276#7280#7298::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      $(Expr(:boundscheck, false))
      ####_var0#7263#7282 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7263#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7284 = GenSym(0)
      ##a2#7285 = GenSym(1)
      ##div_a#7286 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7284::Float64,##a2#7285::Float64))
      ####afactor#7164#7287 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7285::Float64))
      ####bfactor#7165#7288 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7284::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7285::Float64,##a2#7285::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7162#7170#7293 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7162#7170#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7286::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(2) = 1.0 + (Distributions.cospi)(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{}::UNION{}
      $(Expr(:boundscheck, false))
      ######_var0#7275#7279#7297 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7275#7279#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return GenSym(2) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7179#7262#7281::Tuple{}
  ####_var0#7263#7282::Tuple{}
  ######types#7261#7264#7283::Tuple{Type{Int64}}
  ##a1#7284::Float64
  ##a2#7285::Float64
  ##div_a#7286::Float64
  ####afactor#7164#7287::Float64
  ####bfactor#7165#7288::Float64
  ########a#7154#7158#7166#7289::Tuple{}
  ########b#7155#7159#7167#7290::Tuple{}
  ########afactor#7156#7160#7168#7291::Float64
  ########bfactor#7157#7161#7169#7292::Float64
  ######_var0#7162#7170#7293::Tuple{}
  ######types#7163#7171#7294::Tuple{Type{Float64}}
  ########tup#7271#7273#7277#7295::Tuple{}
  ########x#7272#7274#7278#7296::Int64
  ######_var0#7275#7279#7297::Tuple{}
  ########types#7261#7276#7280#7298::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      $(Expr(:boundscheck, false))
      ####_var0#7263#7282 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7263#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7284 = GenSym(0)
      ##a2#7285 = GenSym(1)
      ##div_a#7286 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7284::Float64,##a2#7285::Float64))
      ####afactor#7164#7287 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7285::Float64))
      ####bfactor#7165#7288 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7284::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7285::Float64,##a2#7285::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7162#7170#7293 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7162#7170#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7286::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(2) = 1.0 + (Distributions.cospi)(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{}::UNION{}
      $(Expr(:boundscheck, false))
      ######_var0#7275#7279#7297 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7275#7279#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return GenSym(2) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  z::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7179#7262#7281::Tuple{}
  ####_var0#7263#7282::Tuple{}
  ######types#7261#7264#7283::Tuple{Type{Int64}}
  ##a1#7284::Float64
  ##a2#7285::Float64
  ##div_a#7286::Float64
  ####afactor#7164#7287::Float64
  ####bfactor#7165#7288::Float64
  ########a#7154#7158#7166#7289::Tuple{}
  ########b#7155#7159#7167#7290::Tuple{}
  ########afactor#7156#7160#7168#7291::Float64
  ########bfactor#7157#7161#7169#7292::Float64
  ######_var0#7162#7170#7293::Tuple{}
  ######types#7163#7171#7294::Tuple{Type{Float64}}
  ########tup#7271#7273#7277#7295::Tuple{}
  ########x#7272#7274#7278#7296::Int64
  ######_var0#7275#7279#7297::Tuple{}
  ########types#7261#7276#7280#7298::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 55:
      NewvarNode(:z)
      unless (Distributions.insupport)(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 56:
      $(Expr(:boundscheck, false))
      ####_var0#7263#7282 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7263#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7284 = GenSym(0)
      ##a2#7285 = GenSym(1)
      ##div_a#7286 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7284::Float64,##a2#7285::Float64))
      ####afactor#7164#7287 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7285::Float64))
      ####bfactor#7165#7288 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7284::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7285::Float64,##a2#7285::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7162#7170#7293 = (top(tuple))()::Tuple{}
      goto 5
      ######_var0#7162#7170#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      z = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7286::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 57:
      GenSym(2) = 1.0 + (Distributions.cospi)(z::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::UNION{}::UNION{}
      $(Expr(:boundscheck, false))
      ######_var0#7275#7279#7297 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7275#7279#7297 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return GenSym(2) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Cosine{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::UNION{}
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/cosine.jl, line 59:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





