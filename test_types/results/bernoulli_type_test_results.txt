____________________________
ntrials
____________________________

----integer----


----float----


----dual----





____________________________
succprob
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 48:
      return (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 48:
      return (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 48:
      return (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
failprob
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 49:
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 49:
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7098#7100#7103::Tuple{}
  ####_var0#7101#7104::Tuple{}
  ######types#7099#7102#7105::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 49:
      $(Expr(:boundscheck, false))
      ####_var0#7101#7104 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7101#7104 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)::Tuple{Float64}
  end::Tuple{Float64}

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 51:
      return (top(tuple))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 56:
      return (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 56:
      return (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 56:
      return (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 57:
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 57:
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a1#7117::Float64
  ##a2#7118::Float64
  ######a#7108#7112#7119::Tuple{}
  ######b#7109#7113#7120::Tuple{}
  ######afactor#7110#7114#7121::Float64
  ######bfactor#7111#7115#7122::Float64
  ####_var0#7116#7123::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 57:
      GenSym(0) = (Distributions.failprob)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ##a1#7117 = GenSym(1)
      ##a2#7118 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7116#7123 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7116#7123 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7117::Float64,##a2#7118::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 62:
      return ((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.lt_float)(0.5,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)::Bool,1,0)::Int64
  end::Int64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 62:
      return ((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.lt_float)(0.5,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)::Bool,1,0)::Int64
  end::Int64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 62:
      return ((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.lt_float)(0.5,(top(getfield))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool,1,0)::Int64
  end::Int64




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 65:
      p = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 66:
      unless (Base.lt_float)(p::Float64,0.5)::Bool goto 0
      return (top(vect))(0)::Array{Int64,1}
      0: 
      unless (Base.lt_float)(0.5,p::Float64)::Bool goto 1
      return (top(vect))(1)::Array{Int64,1}
      1: 
      return (top(vect))(0,1)::Array{Int64,1}
  end::Array{Int64,1}

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  p::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 65:
      p = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 66:
      unless (Base.lt_float)(p::Float64,0.5)::Bool goto 0
      return (top(vect))(0)::Array{Int64,1}
      0: 
      unless (Base.lt_float)(0.5,p::Float64)::Bool goto 1
      return (top(vect))(1)::Array{Int64,1}
      1: 
      return (top(vect))(0,1)::Array{Int64,1}
  end::Array{Int64,1}

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 65:
      p = (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 66:
      unless (Base.lt_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5)::Bool goto 0
      return (top(vect))(0)::Array{Int64,1}
      0: 
      unless (Base.lt_float)(0.5,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 1
      return (top(vect))(1)::Array{Int64,1}
      1: 
      return (top(vect))(0,1)::Array{Int64,1}
  end::Array{Int64,1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 70:
      return ((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.le_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,0.5)::Bool,0,1)::Int64
  end::Int64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 70:
      return ((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.le_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,0.5)::Bool,0,1)::Int64
  end::Int64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 70:
      return ((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.le_float)((top(getfield))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5)::Bool,0,1)::Int64
  end::Int64




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  p0::Float64
  p1::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 58:
      p0 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))
      p1 = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p0::Float64,p1::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(p0::Float64,p1::Float64))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  p0::Float64
  p1::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 58:
      p0 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))
      p1 = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p0::Float64,p1::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)(p0::Float64,p1::Float64))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7163::Float64
  ##a2#7164::Float64
  ######a#7108#7112#7165::Tuple{}
  ######b#7109#7113#7166::Tuple{}
  ######afactor#7110#7114#7167::Float64
  ######bfactor#7111#7115#7168::Float64
  ####_var0#7116#7169::Tuple{}
  ##sqrt_a#7170::Float64
  ##deriv#7171::Float64
  ####G#7144#7172::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7134#7140#7145#7173::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7135#7137#7141#7146#7174::Tuple{}
  ##########x#7136#7138#7142#7147#7175::Float64
  ########_var0#7139#7143#7148#7176::Tuple{}
  ######a#7129#7131#7177::Tuple{}
  ######b#7130#7132#7178::Tuple{}
  ####_var0#7133#7179::Tuple{}
  ##a1#7180::Float64
  ##a2#7181::Float64
  ##div_a#7182::Float64
  ####afactor#7155#7183::Float64
  ####bfactor#7156#7184::Float64
  ########a#7108#7149#7157#7185::Tuple{}
  ########b#7109#7150#7158#7186::Tuple{}
  ########afactor#7110#7151#7159#7187::Float64
  ########bfactor#7111#7152#7160#7188::Float64
  ######_var0#7153#7161#7189::Tuple{}
  ######types#7154#7162#7190::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 58:
      p0 = (Distributions.failprob)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      p1 = (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7133#7179 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7133#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(0) = (top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7163 = GenSym(0)
      ##a2#7164 = GenSym(1)
      $(Expr(:boundscheck, false))
      ####_var0#7116#7169 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7116#7169 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7163::Float64,##a2#7164::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7170 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(2),:value)::Float64)::ANY)::Float64
      ##deriv#7171 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7170::Float64))
      ####G#7144#7172 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7139#7143#7148#7176 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7139#7143#7148#7176 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7170::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7180 = GenSym(4)
      ##a2#7181 = GenSym(5)
      ##div_a#7182 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7180::Float64,##a2#7181::Float64))
      ####afactor#7155#7183 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7181::Float64))
      ####bfactor#7156#7184 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7180::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7181::Float64,##a2#7181::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7153#7161#7189 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7153#7161#7189 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7182::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 59:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)))))),6.0))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 59:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)))))),6.0))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7205::Float64
  ##div_a#7206::Float64
  ##deriv#7207::Float64
  ####G#7199#7208::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7134#7140#7200#7209::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7135#7137#7141#7201#7210::Tuple{}
  ##########x#7136#7138#7142#7202#7211::Float64
  ########_var0#7139#7143#7203#7212::Tuple{}
  ######types#7099#7204#7213::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 59:
      GenSym(0) = (Distributions.var)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##a#7205 = (top(getfield))(GenSym(0),:value)::Float64
      ##div_a#7206 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7205::Float64))
      ##deriv#7207 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7206::Float64,##a#7205::Float64))))
      ####G#7199#7208 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7139#7143#7203#7212 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7139#7143#7203#7212 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7206::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(1),:value)::Float64,6.0))), :((top(getfield))(GenSym(1),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  p0::Float64
  p1::Float64
  #s8::Bool
  #s7::Bool
  ##fy#7214::Float64
  ##fy#7215::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 73:
      NewvarNode(symbol("#s7"))
      p0 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 74:
      p1 = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 75:
      ##fy#7214 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      #s8 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p0::Float64,##fy#7214::Float64)::Bool,(Base.ne_float)(##fy#7214::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7214::Float64))::Bool))
      unless #s8::Bool goto 0
      #s7 = #s8::Bool
      goto 1
      0: 
      ##fy#7215 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      #s7 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p0::Float64,##fy#7215::Float64)::Bool,(Base.ne_float)(##fy#7215::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7215::Float64))::Bool))
      1: 
      GenSym(0) = #s7::Bool
      unless GenSym(0) goto 2
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      2: 
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,p0::Float64,0)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,p1::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(p0::Float64,(Base.Math.nan_dom_err)(GenSym(4),p0::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p1::Float64,(Base.Math.nan_dom_err)(GenSym(2),p1::Float64)::Float64))))))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  p0::Float64
  p1::Float64
  #s8::Bool
  #s7::Bool
  ##fy#7214::Float64
  ##fy#7215::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 73:
      NewvarNode(symbol("#s7"))
      p0 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 74:
      p1 = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 75:
      ##fy#7214 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      #s8 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p0::Float64,##fy#7214::Float64)::Bool,(Base.ne_float)(##fy#7214::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7214::Float64))::Bool))
      unless #s8::Bool goto 0
      #s7 = #s8::Bool
      goto 1
      0: 
      ##fy#7215 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      #s7 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(p0::Float64,##fy#7215::Float64)::Bool,(Base.ne_float)(##fy#7215::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7215::Float64))::Bool))
      1: 
      GenSym(0) = #s7::Bool
      unless GenSym(0) goto 2
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      2: 
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,p0::Float64,0)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,p1::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(p0::Float64,(Base.Math.nan_dom_err)(GenSym(4),p0::Float64)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p1::Float64,(Base.Math.nan_dom_err)(GenSym(2),p1::Float64)::Float64))))))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s8::Bool
  #s7::Bool
  ####fy#7221#7234::Float64
  _var0::Bool
  ####fy#7221#7235::Float64
  _var1::Bool
  ##a#7236::Float64
  ####G#7222#7237::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7134#7140#7223#7238::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7135#7137#7141#7224#7239::Tuple{}
  ##########x#7136#7138#7142#7225#7240::Float64
  ########_var0#7139#7143#7226#7241::Tuple{}
  ##a1#7242::Float64
  ##a2#7243::Float64
  ######a#7108#7112#7244::Tuple{}
  ######b#7109#7113#7245::Tuple{}
  ######afactor#7110#7114#7246::Float64
  ######bfactor#7111#7115#7247::Float64
  ####_var0#7116#7248::Tuple{}
  ##a#7249::Float64
  ####G#7222#7250::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7134#7140#7223#7251::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7135#7137#7141#7224#7252::Tuple{}
  ##########x#7136#7138#7142#7225#7253::Float64
  ########_var0#7139#7143#7226#7254::Tuple{}
  ##a1#7255::Float64
  ##a2#7256::Float64
  ######a#7108#7112#7257::Tuple{}
  ######b#7109#7113#7258::Tuple{}
  ######afactor#7110#7114#7259::Float64
  ######bfactor#7111#7115#7260::Float64
  ####_var0#7116#7261::Tuple{}
  ######a#7227#7229#7262::Tuple{}
  ######b#7228#7230#7263::Tuple{}
  ####_var0#7231#7264::Tuple{}
  ######tup#7098#7232#7265::Tuple{}
  ####_var0#7233#7266::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 73:
      NewvarNode(symbol("#s7"))
      p0 = (Distributions.failprob)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 74:
      p1 = (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 75:
      unless (ForwardDiff.iszero)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 5
      ####fy#7221#7234 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7221#7234::Float64)::Bool,(Base.ne_float)(####fy#7221#7234::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7221#7234::Float64))::Bool))
      goto 6
      5: 
      _var0 = false
      6: 
      #s8 = _var0::Bool
      unless #s8::Bool goto 0
      #s7 = #s8::Bool
      goto 1
      0: 
      unless (ForwardDiff.iszero)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 7
      ####fy#7221#7235 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      _var1 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7221#7235::Float64)::Bool,(Base.ne_float)(####fy#7221#7235::Float64,9.223372036854776e18)::Bool)),1 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7221#7235::Float64))::Bool))
      goto 8
      7: 
      _var1 = false
      8: 
      #s7 = _var1::Bool
      1: 
      GenSym(0) = #s7::Bool
      unless GenSym(0) goto 2
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      2: 
      ##a#7249 = (top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7249::Float64,0)::Float64
      ####G#7222#7250 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7139#7143#7226#7254 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7139#7143#7226#7254 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7249::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(getfield))(GenSym(8),:value)::Float64
      ##a1#7255 = GenSym(9)
      ##a2#7256 = GenSym(10)
      $(Expr(:boundscheck, false))
      ####_var0#7116#7261 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7116#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7255::Float64,##a2#7256::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7236 = (top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7236::Float64,0)::Float64
      ####G#7222#7237 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7139#7143#7226#7241 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7139#7143#7226#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(2),##a#7236::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(4) = (top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(5) = (top(getfield))(GenSym(3),:value)::Float64
      ##a1#7242 = GenSym(4)
      ##a2#7243 = GenSym(5)
      $(Expr(:boundscheck, false))
      ####_var0#7116#7248 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7116#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7242::Float64,##a2#7243::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7231#7264 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7231#7264 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      $(Expr(:boundscheck, false))
      ####_var0#7233#7266 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7233#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  ####_var0#7269#7271::UNION{BOOL,INT64}
  ########_var0#7267#7268#7270#7272::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 107:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ####_var0#7269#7271 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ####_var0#7269#7271 = false
      3: 
      ####_var0#7269#7271::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7267#7268#7270#7272 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ########_var0#7267#7268#7270#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return (Base.box)(Int64,(Base.zext_int)(Int64,(Base.le_float)((Base.box)(Base.Float64,(Base.sub_float)(########_var0#7267#7268#7270#7272::Float64,1.0)),(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)::Bool))
  end::Int64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  ####_var0#7269#7271::UNION{BOOL,INT64}
  ########_var0#7267#7268#7270#7272::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 107:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ####_var0#7269#7271 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ####_var0#7269#7271 = false
      3: 
      ####_var0#7269#7271::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7267#7268#7270#7272 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ########_var0#7267#7268#7270#7272 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return (Base.box)(Int64,(Base.zext_int)(Int64,(Base.le_float)((Base.box)(Base.Float64,(Base.sub_float)(########_var0#7267#7268#7270#7272::Float64,1.0)),(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)::Bool))
  end::Int64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7269#7273::UNION{BOOL,INT64}
  ########_var0#7267#7268#7270#7274::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 107:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ####_var0#7269#7273 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ####_var0#7269#7273 = false
      3: 
      ####_var0#7269#7273::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7267#7268#7270#7274 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ########_var0#7267#7268#7270#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return (Base.box)(Int64,(Base.zext_int)(Int64,(Base.le_float)((Base.box)(Base.Float64,(Base.sub_float)(########_var0#7267#7268#7270#7274::Float64,1.0)),(top(getfield))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool))
  end::Int64




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 81:
      unless x::Int64 === 0::Bool goto 0
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))
      0: 
      unless x::Int64 === 1::Bool goto 1
      return (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
      1: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 81:
      unless x::Int64 === 0::Bool goto 0
      return (Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64))
      0: 
      unless x::Int64 === 1::Bool goto 1
      return (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
      1: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 81:
      unless x::Int64 === 0::Bool goto 0
      return (Distributions.failprob)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      0: 
      unless x::Int64 === 1::Bool goto 1
      return (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 101:
      GenSym(1) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,GenSym(1)))))
  end::Float64

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 101:
      GenSym(1) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)),(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64,GenSym(1)))))
  end::Float64

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  ######tup#7135#7275#7279::Tuple{}
  ######x#7136#7276#7280::Float64
  ####_var0#7277#7281::Tuple{}
  ######types#7099#7278#7282::Tuple{Type{Float64}}
  ######a#7227#7229#7283::Tuple{}
  ######b#7228#7230#7284::Tuple{}
  ####_var0#7231#7285::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 101:
      GenSym(2) = (Distributions.failprob)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(1) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7277#7281 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7277#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      $(Expr(:boundscheck, false))
      ####_var0#7231#7285 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7231#7285 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(1)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.Bernoulli{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 102:
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64), :((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))
      GenSym(8) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(top(getfield))(GenSym(6),:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)),(top(getfield))(GenSym(8),:re)::Float64))), :((top(getfield))(GenSym(8),:im)::Float64)))
  end::Complex{Float64}

----float----

Variables:
  d::Distributions.Bernoulli{Float64}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 102:
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64
      GenSym(6) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64), :((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))
      GenSym(8) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(top(getfield))(GenSym(6),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(7),(top(getfield))(GenSym(6),:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(d::Distributions.Bernoulli{Float64},:p)::Float64)),(top(getfield))(GenSym(8),:re)::Float64))), :((top(getfield))(GenSym(8),:im)::Float64)))
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/bernoulli.jl, line 102:
      GenSym(6) = (Distributions.failprob)(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return GenSym(6) + (top(getfield))(d::Distributions.Bernoulli{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64), :((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




