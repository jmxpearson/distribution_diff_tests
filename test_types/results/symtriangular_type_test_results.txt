____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 50:
      return (top(tuple))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 55:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,6.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,6.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,6.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,6.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7091::Float64
  ##exp_a#7092::Float64
  ##deriv#7093::Float64
  ####G#7079#7094::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7095::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7096::Tuple{}
  ##########x#7071#7073#7077#7082#7097::Float64
  ########_var0#7074#7078#7083#7098::Tuple{}
  ##div_a#7099::Float64
  ######tup#7084#7087#7100::Tuple{}
  ######x#7085#7088#7101::Float64
  ####_var0#7089#7102::Tuple{}
  ######types#7086#7090#7103::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 59:
      ##a#7091 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7092 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7093 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7091::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7094 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7098 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7083#7098 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7092::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7099 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,6.0))
      $(Expr(:boundscheck, false))
      ####_var0#7089#7102 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7089#7102 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7099::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 57:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 56:
      return (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 60:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.6,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.6,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.6))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.6,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      return (Base.box)(Base.Float64,(Base.mul_float)(-0.6,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.6))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.6))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.6))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7070#7114#7118#7122::Tuple{}
  ########x#7071#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7086#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 61:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-0.6))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.5,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.5,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7135::Float64
  ####G#7128#7136::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7129#7137::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7130#7138::Tuple{}
  ##########x#7071#7073#7077#7131#7139::Float64
  ########_var0#7074#7078#7132#7140::Tuple{}
  ########types#7086#7133#7134#7141::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      ##a#7135 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7135::Float64,0)::Float64
      ####G#7128#7136 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7132#7140 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7132#7140 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7135::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,0.5))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.5,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      GenSym(0) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)(0.5,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7135::Float64
  ####G#7128#7136::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7129#7137::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7130#7138::Tuple{}
  ##########x#7071#7073#7077#7131#7139::Float64
  ########_var0#7074#7078#7132#7140::Tuple{}
  ########types#7086#7133#7134#7141::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      ##a#7135 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7135::Float64,0)::Float64
      ####G#7128#7136 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7132#7140 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7132#7140 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7135::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,0.5))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7135::Float64
  ####G#7128#7136::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7129#7137::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7130#7138::Tuple{}
  ##########x#7071#7073#7077#7131#7139::Float64
  ########_var0#7074#7078#7132#7140::Tuple{}
  ########types#7086#7133#7134#7141::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      ##a#7135 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7135::Float64,0)::Float64
      ####G#7128#7136 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7132#7140 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7132#7140 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7135::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,0.5))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7135::Float64
  ####G#7128#7136::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7129#7137::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7130#7138::Tuple{}
  ##########x#7071#7073#7077#7131#7139::Float64
  ########_var0#7074#7078#7132#7140::Tuple{}
  ########types#7086#7133#7134#7141::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      ##a#7135 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7135::Float64,0)::Float64
      ####G#7128#7136 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7132#7140 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7132#7140 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7135::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,0.5))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7135::Float64
  ####G#7128#7136::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7129#7137::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7130#7138::Tuple{}
  ##########x#7071#7073#7077#7131#7139::Float64
  ########_var0#7074#7078#7132#7140::Tuple{}
  ########types#7086#7133#7134#7141::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 63:
      ##a#7135 = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7135::Float64,0)::Float64
      ####G#7128#7136 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7132#7140 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7074#7078#7132#7140 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(1),##a#7135::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(2),:value)::Float64,0.5))), :((top(getfield))(GenSym(2),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  ####_var0#7144#7146::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7147::Float64
  ####_var0#7144#7148::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7149::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7148 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7148 = false
      6: 
      ####_var0#7144#7148::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7149 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7149::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7146 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7146 = false
      2: 
      ####_var0#7144#7146::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7147 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7147::Float64,1.0)))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  ####_var0#7144#7146::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7147::Float64
  ####_var0#7144#7148::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7149::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7148 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7148 = false
      6: 
      ####_var0#7144#7148::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7149 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7149::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7146 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7146 = false
      2: 
      ####_var0#7144#7146::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7147 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7147::Float64,1.0)))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7144#7162::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7163::Float64
  ####_var0#7144#7164::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7165::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7164 = false
      6: 
      ####_var0#7144#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7165 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7165::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7162 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7162 = false
      2: 
      ####_var0#7144#7162::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7163 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.xval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7163::Float64,1.0)))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  ####_var0#7144#7146::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7147::Float64
  ####_var0#7144#7148::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7149::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7148 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7148 = false
      6: 
      ####_var0#7144#7148::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7149 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7149::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7146 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7146 = false
      2: 
      ####_var0#7144#7146::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7147 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7147::Float64,1.0)))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  ####_var0#7144#7146::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7147::Float64
  ####_var0#7144#7148::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7149::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7148 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7148 = false
      6: 
      ####_var0#7144#7148::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7149 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7149 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7149::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7146 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7146 = false
      2: 
      ####_var0#7144#7146::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7147 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7147 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Base.box)(Base.Float64,(Base.add_float)((top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7147::Float64,1.0)))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7144#7162::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7163::Float64
  ####_var0#7144#7164::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7165::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7164 = false
      6: 
      ####_var0#7144#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7165 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7165::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7162 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7162 = false
      2: 
      ####_var0#7144#7162::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7163 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.xval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7163::Float64,1.0)))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7144#7162::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7163::Float64
  ####_var0#7144#7164::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7165::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7164 = false
      6: 
      ####_var0#7144#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7165 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7165::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7162 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7162 = false
      2: 
      ####_var0#7144#7162::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7163 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.xval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7163::Float64,1.0)))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7144#7162::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7163::Float64
  ####_var0#7144#7164::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7165::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7164 = false
      6: 
      ####_var0#7144#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7165 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7165::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7162 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7162 = false
      2: 
      ####_var0#7144#7162::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7163 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.xval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7163::Float64,1.0)))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7144#7162::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7163::Float64
  ####_var0#7144#7164::UNION{BOOL,INT64}
  ########_var0#7142#7143#7145#7165::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 136:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 5
      ####_var0#7144#7164 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 6
      5: 
      ####_var0#7144#7164 = false
      6: 
      ####_var0#7144#7164::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(3) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(2) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7165 = (Base.arrayref)(GenSym(3),GenSym(2))::Float64
      goto 7
      ########_var0#7142#7143#7145#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7165::Float64,1.0))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7144#7162 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7144#7162 = false
      2: 
      ####_var0#7144#7162::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7142#7143#7145#7163 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7142#7143#7145#7163 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return (Distributions.xval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},(Base.box)(Base.Float64,(Base.sub_float)(GenSym(4),(Base.box)(Base.Float64,(Base.sub_float)(########_var0#7142#7143#7145#7163::Float64,1.0)))))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)))))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)))))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ########tup#7183#7220#7222#7227::Tuple{}
  ######_var0#7221#7223#7228::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7183#7224#7229::Tuple{}
  ####_var0#7225#7230::Tuple{}
  ######types#7086#7226#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7198#7235::Float64
  ####bfactor#7199#7236::Float64
  ########a#7188#7192#7200#7237::Tuple{}
  ########b#7189#7193#7201#7238::Tuple{}
  ########afactor#7190#7194#7202#7239::Float64
  ########bfactor#7191#7195#7203#7240::Float64
  ######_var0#7196#7204#7241::Tuple{}
  ######types#7197#7205#7242::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      GenSym(0) = (Distributions.zval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 4
      $(Expr(:boundscheck, false))
      ######_var0#7221#7223#7228 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7221#7223#7228 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 5
      4: 
      _var0 = GenSym(0)
      5: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7225#7230 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7225#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(1),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(2)
      ##a2#7233 = GenSym(3)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7198#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7199#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7241 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7196#7204#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)))))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{Float64},x::Int64)::Bool goto 0
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64)),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64)))))),(top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64))
      0: 
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ########tup#7183#7220#7222#7227::Tuple{}
  ######_var0#7221#7223#7228::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7183#7224#7229::Tuple{}
  ####_var0#7225#7230::Tuple{}
  ######types#7086#7226#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7198#7235::Float64
  ####bfactor#7199#7236::Float64
  ########a#7188#7192#7200#7237::Tuple{}
  ########b#7189#7193#7201#7238::Tuple{}
  ########afactor#7190#7194#7202#7239::Float64
  ########bfactor#7191#7195#7203#7240::Float64
  ######_var0#7196#7204#7241::Tuple{}
  ######types#7197#7205#7242::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      GenSym(0) = (Distributions.zval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 4
      $(Expr(:boundscheck, false))
      ######_var0#7221#7223#7228 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7221#7223#7228 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 5
      4: 
      _var0 = GenSym(0)
      5: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7225#7230 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7225#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(1),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(2)
      ##a2#7233 = GenSym(3)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7198#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7199#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7241 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7196#7204#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ########tup#7183#7220#7222#7227::Tuple{}
  ######_var0#7221#7223#7228::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7183#7224#7229::Tuple{}
  ####_var0#7225#7230::Tuple{}
  ######types#7086#7226#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7198#7235::Float64
  ####bfactor#7199#7236::Float64
  ########a#7188#7192#7200#7237::Tuple{}
  ########b#7189#7193#7201#7238::Tuple{}
  ########afactor#7190#7194#7202#7239::Float64
  ########bfactor#7191#7195#7203#7240::Float64
  ######_var0#7196#7204#7241::Tuple{}
  ######types#7197#7205#7242::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      GenSym(0) = (Distributions.zval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 4
      $(Expr(:boundscheck, false))
      ######_var0#7221#7223#7228 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7221#7223#7228 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 5
      4: 
      _var0 = GenSym(0)
      5: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7225#7230 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7225#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(1),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(2)
      ##a2#7233 = GenSym(3)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7198#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7199#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7241 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7196#7204#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ########tup#7183#7220#7222#7227::Tuple{}
  ######_var0#7221#7223#7228::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7183#7224#7229::Tuple{}
  ####_var0#7225#7230::Tuple{}
  ######types#7086#7226#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7198#7235::Float64
  ####bfactor#7199#7236::Float64
  ########a#7188#7192#7200#7237::Tuple{}
  ########b#7189#7193#7201#7238::Tuple{}
  ########afactor#7190#7194#7202#7239::Float64
  ########bfactor#7191#7195#7203#7240::Float64
  ######_var0#7196#7204#7241::Tuple{}
  ######types#7197#7205#7242::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      GenSym(0) = (Distributions.zval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 4
      $(Expr(:boundscheck, false))
      ######_var0#7221#7223#7228 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7221#7223#7228 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 5
      4: 
      _var0 = GenSym(0)
      5: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7225#7230 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7225#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(1),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(2)
      ##a2#7233 = GenSym(3)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7198#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7199#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7241 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7196#7204#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ########tup#7183#7220#7222#7227::Tuple{}
  ######_var0#7221#7223#7228::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7183#7224#7229::Tuple{}
  ####_var0#7225#7230::Tuple{}
  ######types#7086#7226#7231::Tuple{Type{Float64}}
  ##a1#7232::Float64
  ##a2#7233::Float64
  ##div_a#7234::Float64
  ####afactor#7198#7235::Float64
  ####bfactor#7199#7236::Float64
  ########a#7188#7192#7200#7237::Tuple{}
  ########b#7189#7193#7201#7238::Tuple{}
  ########afactor#7190#7194#7202#7239::Float64
  ########bfactor#7191#7195#7203#7240::Float64
  ######_var0#7196#7204#7241::Tuple{}
  ######types#7197#7205#7242::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 72:
      unless (Distributions.insupport)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Bool goto 0
      GenSym(0) = (Distributions.zval)(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 4
      $(Expr(:boundscheck, false))
      ######_var0#7221#7223#7228 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7221#7223#7228 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 5
      4: 
      _var0 = GenSym(0)
      5: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ####_var0#7225#7230 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7225#7230 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(1),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7232 = GenSym(2)
      ##a2#7233 = GenSym(3)
      ##div_a#7234 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7232::Float64,##a2#7233::Float64))
      ####afactor#7198#7235 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7233::Float64))
      ####bfactor#7199#7236 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7232::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7233::Float64,##a2#7233::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7241 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7196#7204#7241 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7234::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7243::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(7) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,GenSym(6))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(GenSym(4),a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7243::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(7) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,GenSym(6))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(GenSym(4),a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7276::Tuple{}
  ######x#7245#7247#7277::Int64
  ####_var0#7248#7278::Tuple{}
  ######types#7184#7249#7279::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7280::Tuple{}
  ########x#7071#7115#7119#7281::Float64
  ######_var0#7116#7120#7282::Tuple{}
  ########types#7086#7117#7121#7283::Tuple{Type{Float64}}
  ##a#7284::Float64
  ####G#7255#7285::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7256#7286::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7257#7287::Tuple{}
  ##########x#7071#7073#7077#7258#7288::Float64
  ########_var0#7074#7078#7259#7289::Tuple{}
  ##a1#7290::Float64
  ##a2#7291::Float64
  ##div_a#7292::Float64
  ####afactor#7198#7293::Float64
  ####bfactor#7199#7294::Float64
  ########a#7188#7192#7200#7295::Tuple{}
  ########b#7189#7193#7201#7296::Tuple{}
  ########afactor#7190#7194#7202#7297::Float64
  ########bfactor#7191#7195#7203#7298::Float64
  ######_var0#7196#7204#7299::Tuple{}
  ######types#7197#7205#7300::Tuple{Type{Float64}}
  ##a#7301::Float64
  ##exp_a#7302::Float64
  ##deriv#7303::Float64
  ####G#7079#7304::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7305::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7306::Tuple{}
  ##########x#7071#7073#7077#7082#7307::Float64
  ########_var0#7074#7078#7083#7308::Tuple{}
  ######tup#7244#7246#7309::Tuple{}
  ######x#7245#7247#7310::Int64
  ####_var0#7248#7311::Tuple{}
  ######types#7184#7249#7312::Tuple{Type{Int64}}
  ##exp_a#7313::Float64
  ####G#7250#7314::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7251#7315::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7252#7316::Tuple{}
  ##########x#7071#7073#7077#7253#7317::Float64
  ########_var0#7074#7078#7254#7318::Tuple{}
  ##xs#7319::Tuple{}
  ##########tup#7070#7114#7118#7265#7320::Tuple{}
  ##########x#7071#7115#7119#7266#7321::Float64
  ########_var0#7116#7120#7267#7322::Tuple{}
  ##########types#7086#7117#7121#7268#7323::Tuple{Type{Float64}}
  ####a1#7269#7324::Float64
  ####a2#7270#7325::Float64
  ########a#7188#7260#7271#7326::Tuple{}
  ########b#7189#7261#7272#7327::Tuple{}
  ########afactor#7190#7262#7273#7328::Float64
  ########bfactor#7191#7263#7274#7329::Float64
  ######_var0#7264#7275#7330::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7278 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7311 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7248#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##exp_a#7313 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7250#7314 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7254#7318 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7074#7078#7254#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7282 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7116#7120#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7284 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      ####G#7255#7285 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7259#7289 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7074#7078#7259#7289 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7290 = GenSym(7)
      ##a2#7291 = GenSym(8)
      ##div_a#7292 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7290::Float64,##a2#7291::Float64))
      ####afactor#7198#7293 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7291::Float64))
      ####bfactor#7199#7294 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7290::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7291::Float64,##a2#7291::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7299 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7196#7204#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7301 = (top(getfield))(GenSym(9),:value)::Float64
      ##exp_a#7302 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7303 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7304 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7308 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7074#7078#7083#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7302::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7267#7322 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7116#7120#7267#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ####a1#7269#7324 = GenSym(13)
      ####a2#7270#7325 = GenSym(14)
      $(Expr(:boundscheck, false))
      ######_var0#7264#7275#7330 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7264#7275#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7269#7324::Float64,####a2#7270#7325::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7243::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(7) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,GenSym(6))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(GenSym(4),a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7243::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(7) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,GenSym(6))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)(GenSym(4),a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7276::Tuple{}
  ######x#7245#7247#7277::Int64
  ####_var0#7248#7278::Tuple{}
  ######types#7184#7249#7279::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7280::Tuple{}
  ########x#7071#7115#7119#7281::Float64
  ######_var0#7116#7120#7282::Tuple{}
  ########types#7086#7117#7121#7283::Tuple{Type{Float64}}
  ##a#7284::Float64
  ####G#7255#7285::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7256#7286::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7257#7287::Tuple{}
  ##########x#7071#7073#7077#7258#7288::Float64
  ########_var0#7074#7078#7259#7289::Tuple{}
  ##a1#7290::Float64
  ##a2#7291::Float64
  ##div_a#7292::Float64
  ####afactor#7198#7293::Float64
  ####bfactor#7199#7294::Float64
  ########a#7188#7192#7200#7295::Tuple{}
  ########b#7189#7193#7201#7296::Tuple{}
  ########afactor#7190#7194#7202#7297::Float64
  ########bfactor#7191#7195#7203#7298::Float64
  ######_var0#7196#7204#7299::Tuple{}
  ######types#7197#7205#7300::Tuple{Type{Float64}}
  ##a#7301::Float64
  ##exp_a#7302::Float64
  ##deriv#7303::Float64
  ####G#7079#7304::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7305::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7306::Tuple{}
  ##########x#7071#7073#7077#7082#7307::Float64
  ########_var0#7074#7078#7083#7308::Tuple{}
  ######tup#7244#7246#7309::Tuple{}
  ######x#7245#7247#7310::Int64
  ####_var0#7248#7311::Tuple{}
  ######types#7184#7249#7312::Tuple{Type{Int64}}
  ##exp_a#7313::Float64
  ####G#7250#7314::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7251#7315::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7252#7316::Tuple{}
  ##########x#7071#7073#7077#7253#7317::Float64
  ########_var0#7074#7078#7254#7318::Tuple{}
  ##xs#7319::Tuple{}
  ##########tup#7070#7114#7118#7265#7320::Tuple{}
  ##########x#7071#7115#7119#7266#7321::Float64
  ########_var0#7116#7120#7267#7322::Tuple{}
  ##########types#7086#7117#7121#7268#7323::Tuple{Type{Float64}}
  ####a1#7269#7324::Float64
  ####a2#7270#7325::Float64
  ########a#7188#7260#7271#7326::Tuple{}
  ########b#7189#7261#7272#7327::Tuple{}
  ########afactor#7190#7262#7273#7328::Float64
  ########bfactor#7191#7263#7274#7329::Float64
  ######_var0#7264#7275#7330::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7278 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7311 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7248#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##exp_a#7313 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7250#7314 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7254#7318 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7074#7078#7254#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7282 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7116#7120#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7284 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      ####G#7255#7285 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7259#7289 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7074#7078#7259#7289 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7290 = GenSym(7)
      ##a2#7291 = GenSym(8)
      ##div_a#7292 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7290::Float64,##a2#7291::Float64))
      ####afactor#7198#7293 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7291::Float64))
      ####bfactor#7199#7294 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7290::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7291::Float64,##a2#7291::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7299 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7196#7204#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7301 = (top(getfield))(GenSym(9),:value)::Float64
      ##exp_a#7302 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7303 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7304 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7308 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7074#7078#7083#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7302::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7267#7322 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7116#7120#7267#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ####a1#7269#7324 = GenSym(13)
      ####a2#7270#7325 = GenSym(14)
      $(Expr(:boundscheck, false))
      ######_var0#7264#7275#7330 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7264#7275#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7269#7324::Float64,####a2#7270#7325::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7276::Tuple{}
  ######x#7245#7247#7277::Int64
  ####_var0#7248#7278::Tuple{}
  ######types#7184#7249#7279::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7280::Tuple{}
  ########x#7071#7115#7119#7281::Float64
  ######_var0#7116#7120#7282::Tuple{}
  ########types#7086#7117#7121#7283::Tuple{Type{Float64}}
  ##a#7284::Float64
  ####G#7255#7285::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7256#7286::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7257#7287::Tuple{}
  ##########x#7071#7073#7077#7258#7288::Float64
  ########_var0#7074#7078#7259#7289::Tuple{}
  ##a1#7290::Float64
  ##a2#7291::Float64
  ##div_a#7292::Float64
  ####afactor#7198#7293::Float64
  ####bfactor#7199#7294::Float64
  ########a#7188#7192#7200#7295::Tuple{}
  ########b#7189#7193#7201#7296::Tuple{}
  ########afactor#7190#7194#7202#7297::Float64
  ########bfactor#7191#7195#7203#7298::Float64
  ######_var0#7196#7204#7299::Tuple{}
  ######types#7197#7205#7300::Tuple{Type{Float64}}
  ##a#7301::Float64
  ##exp_a#7302::Float64
  ##deriv#7303::Float64
  ####G#7079#7304::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7305::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7306::Tuple{}
  ##########x#7071#7073#7077#7082#7307::Float64
  ########_var0#7074#7078#7083#7308::Tuple{}
  ######tup#7244#7246#7309::Tuple{}
  ######x#7245#7247#7310::Int64
  ####_var0#7248#7311::Tuple{}
  ######types#7184#7249#7312::Tuple{Type{Int64}}
  ##exp_a#7313::Float64
  ####G#7250#7314::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7251#7315::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7252#7316::Tuple{}
  ##########x#7071#7073#7077#7253#7317::Float64
  ########_var0#7074#7078#7254#7318::Tuple{}
  ##xs#7319::Tuple{}
  ##########tup#7070#7114#7118#7265#7320::Tuple{}
  ##########x#7071#7115#7119#7266#7321::Float64
  ########_var0#7116#7120#7267#7322::Tuple{}
  ##########types#7086#7117#7121#7268#7323::Tuple{Type{Float64}}
  ####a1#7269#7324::Float64
  ####a2#7270#7325::Float64
  ########a#7188#7260#7271#7326::Tuple{}
  ########b#7189#7261#7272#7327::Tuple{}
  ########afactor#7190#7262#7273#7328::Float64
  ########bfactor#7191#7263#7274#7329::Float64
  ######_var0#7264#7275#7330::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7278 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7311 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7248#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##exp_a#7313 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7250#7314 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7254#7318 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7074#7078#7254#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7282 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7116#7120#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7284 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      ####G#7255#7285 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7259#7289 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7074#7078#7259#7289 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7290 = GenSym(7)
      ##a2#7291 = GenSym(8)
      ##div_a#7292 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7290::Float64,##a2#7291::Float64))
      ####afactor#7198#7293 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7291::Float64))
      ####bfactor#7199#7294 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7290::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7291::Float64,##a2#7291::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7299 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7196#7204#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7301 = (top(getfield))(GenSym(9),:value)::Float64
      ##exp_a#7302 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7303 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7304 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7308 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7074#7078#7083#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7302::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7267#7322 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7116#7120#7267#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ####a1#7269#7324 = GenSym(13)
      ####a2#7270#7325 = GenSym(14)
      $(Expr(:boundscheck, false))
      ######_var0#7264#7275#7330 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7264#7275#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7269#7324::Float64,####a2#7270#7325::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7276::Tuple{}
  ######x#7245#7247#7277::Int64
  ####_var0#7248#7278::Tuple{}
  ######types#7184#7249#7279::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7280::Tuple{}
  ########x#7071#7115#7119#7281::Float64
  ######_var0#7116#7120#7282::Tuple{}
  ########types#7086#7117#7121#7283::Tuple{Type{Float64}}
  ##a#7284::Float64
  ####G#7255#7285::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7256#7286::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7257#7287::Tuple{}
  ##########x#7071#7073#7077#7258#7288::Float64
  ########_var0#7074#7078#7259#7289::Tuple{}
  ##a1#7290::Float64
  ##a2#7291::Float64
  ##div_a#7292::Float64
  ####afactor#7198#7293::Float64
  ####bfactor#7199#7294::Float64
  ########a#7188#7192#7200#7295::Tuple{}
  ########b#7189#7193#7201#7296::Tuple{}
  ########afactor#7190#7194#7202#7297::Float64
  ########bfactor#7191#7195#7203#7298::Float64
  ######_var0#7196#7204#7299::Tuple{}
  ######types#7197#7205#7300::Tuple{Type{Float64}}
  ##a#7301::Float64
  ##exp_a#7302::Float64
  ##deriv#7303::Float64
  ####G#7079#7304::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7305::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7306::Tuple{}
  ##########x#7071#7073#7077#7082#7307::Float64
  ########_var0#7074#7078#7083#7308::Tuple{}
  ######tup#7244#7246#7309::Tuple{}
  ######x#7245#7247#7310::Int64
  ####_var0#7248#7311::Tuple{}
  ######types#7184#7249#7312::Tuple{Type{Int64}}
  ##exp_a#7313::Float64
  ####G#7250#7314::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7251#7315::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7252#7316::Tuple{}
  ##########x#7071#7073#7077#7253#7317::Float64
  ########_var0#7074#7078#7254#7318::Tuple{}
  ##xs#7319::Tuple{}
  ##########tup#7070#7114#7118#7265#7320::Tuple{}
  ##########x#7071#7115#7119#7266#7321::Float64
  ########_var0#7116#7120#7267#7322::Tuple{}
  ##########types#7086#7117#7121#7268#7323::Tuple{Type{Float64}}
  ####a1#7269#7324::Float64
  ####a2#7270#7325::Float64
  ########a#7188#7260#7271#7326::Tuple{}
  ########b#7189#7261#7272#7327::Tuple{}
  ########afactor#7190#7262#7273#7328::Float64
  ########bfactor#7191#7263#7274#7329::Float64
  ######_var0#7264#7275#7330::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7278 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7311 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7248#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##exp_a#7313 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7250#7314 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7254#7318 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7074#7078#7254#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7282 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7116#7120#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7284 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      ####G#7255#7285 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7259#7289 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7074#7078#7259#7289 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7290 = GenSym(7)
      ##a2#7291 = GenSym(8)
      ##div_a#7292 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7290::Float64,##a2#7291::Float64))
      ####afactor#7198#7293 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7291::Float64))
      ####bfactor#7199#7294 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7290::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7291::Float64,##a2#7291::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7299 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7196#7204#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7301 = (top(getfield))(GenSym(9),:value)::Float64
      ##exp_a#7302 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7303 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7304 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7308 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7074#7078#7083#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7302::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7267#7322 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7116#7120#7267#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ####a1#7269#7324 = GenSym(13)
      ####a2#7270#7325 = GenSym(14)
      $(Expr(:boundscheck, false))
      ######_var0#7264#7275#7330 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7264#7275#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7269#7324::Float64,####a2#7270#7325::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7276::Tuple{}
  ######x#7245#7247#7277::Int64
  ####_var0#7248#7278::Tuple{}
  ######types#7184#7249#7279::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7280::Tuple{}
  ########x#7071#7115#7119#7281::Float64
  ######_var0#7116#7120#7282::Tuple{}
  ########types#7086#7117#7121#7283::Tuple{Type{Float64}}
  ##a#7284::Float64
  ####G#7255#7285::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7256#7286::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7257#7287::Tuple{}
  ##########x#7071#7073#7077#7258#7288::Float64
  ########_var0#7074#7078#7259#7289::Tuple{}
  ##a1#7290::Float64
  ##a2#7291::Float64
  ##div_a#7292::Float64
  ####afactor#7198#7293::Float64
  ####bfactor#7199#7294::Float64
  ########a#7188#7192#7200#7295::Tuple{}
  ########b#7189#7193#7201#7296::Tuple{}
  ########afactor#7190#7194#7202#7297::Float64
  ########bfactor#7191#7195#7203#7298::Float64
  ######_var0#7196#7204#7299::Tuple{}
  ######types#7197#7205#7300::Tuple{Type{Float64}}
  ##a#7301::Float64
  ##exp_a#7302::Float64
  ##deriv#7303::Float64
  ####G#7079#7304::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7305::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7306::Tuple{}
  ##########x#7071#7073#7077#7082#7307::Float64
  ########_var0#7074#7078#7083#7308::Tuple{}
  ######tup#7244#7246#7309::Tuple{}
  ######x#7245#7247#7310::Int64
  ####_var0#7248#7311::Tuple{}
  ######types#7184#7249#7312::Tuple{Type{Int64}}
  ##exp_a#7313::Float64
  ####G#7250#7314::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7251#7315::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7252#7316::Tuple{}
  ##########x#7071#7073#7077#7253#7317::Float64
  ########_var0#7074#7078#7254#7318::Tuple{}
  ##xs#7319::Tuple{}
  ##########tup#7070#7114#7118#7265#7320::Tuple{}
  ##########x#7071#7115#7119#7266#7321::Float64
  ########_var0#7116#7120#7267#7322::Tuple{}
  ##########types#7086#7117#7121#7268#7323::Tuple{Type{Float64}}
  ####a1#7269#7324::Float64
  ####a2#7270#7325::Float64
  ########a#7188#7260#7271#7326::Tuple{}
  ########b#7189#7261#7272#7327::Tuple{}
  ########afactor#7190#7262#7273#7328::Float64
  ########bfactor#7191#7263#7274#7329::Float64
  ######_var0#7264#7275#7330::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 120:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 121:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7278 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7278 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 122:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 123:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7311 = (top(tuple))()::Tuple{}
      goto 20
      ####_var0#7248#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      ##exp_a#7313 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7250#7314 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7254#7318 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7074#7078#7254#7318 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7282 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7116#7120#7282 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7284 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7284::Float64,0)::Float64
      ####G#7255#7285 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7259#7289 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7074#7078#7259#7289 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(6), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7290 = GenSym(7)
      ##a2#7291 = GenSym(8)
      ##div_a#7292 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7290::Float64,##a2#7291::Float64))
      ####afactor#7198#7293 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7291::Float64))
      ####bfactor#7199#7294 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7290::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7291::Float64,##a2#7291::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7299 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7196#7204#7299 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7301 = (top(getfield))(GenSym(9),:value)::Float64
      ##exp_a#7302 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7303 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7301::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7304 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7308 = (top(tuple))()::Tuple{}
      goto 18
      ########_var0#7074#7078#7083#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7302::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7267#7322 = (top(tuple))()::Tuple{}
      goto 24
      ########_var0#7116#7120#7267#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      GenSym(13) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(11),:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(getfield))(GenSym(12),:value)::Float64
      ####a1#7269#7324 = GenSym(13)
      ####a2#7270#7325 = GenSym(14)
      $(Expr(:boundscheck, false))
      ######_var0#7264#7275#7330 = (top(tuple))()::Tuple{}
      goto 25
      ######_var0#7264#7275#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      25: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7269#7324::Float64,####a2#7270#7325::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7331::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(14) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7331::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(14) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7376::Tuple{}
  ######x#7245#7247#7377::Int64
  ####_var0#7248#7378::Tuple{}
  ######types#7184#7249#7379::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7380::Tuple{}
  ########x#7071#7115#7119#7381::Float64
  ######_var0#7116#7120#7382::Tuple{}
  ########types#7086#7117#7121#7383::Tuple{Type{Float64}}
  ##a#7384::Float64
  ####G#7337#7385::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7338#7386::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7339#7387::Tuple{}
  ##########x#7071#7073#7077#7340#7388::Float64
  ########_var0#7074#7078#7341#7389::Tuple{}
  ##a1#7390::Float64
  ##a2#7391::Float64
  ##div_a#7392::Float64
  ####afactor#7198#7393::Float64
  ####bfactor#7199#7394::Float64
  ########a#7188#7192#7200#7395::Tuple{}
  ########b#7189#7193#7201#7396::Tuple{}
  ########afactor#7190#7194#7202#7397::Float64
  ########bfactor#7191#7195#7203#7398::Float64
  ######_var0#7196#7204#7399::Tuple{}
  ######types#7197#7205#7400::Tuple{Type{Float64}}
  ##a#7401::Float64
  ##exp_a#7402::Float64
  ##deriv#7403::Float64
  ####G#7079#7404::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7405::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7406::Tuple{}
  ##########x#7071#7073#7077#7082#7407::Float64
  ########_var0#7074#7078#7083#7408::Tuple{}
  ######tup#7244#7246#7409::Tuple{}
  ######x#7245#7247#7410::Int64
  ####_var0#7248#7411::Tuple{}
  ######types#7184#7249#7412::Tuple{Type{Int64}}
  ##xs#7413::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7378 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7411 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7248#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(12) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7382 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7116#7120#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7384 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      ####G#7337#7385 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7341#7389 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7341#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7384::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7390 = GenSym(9)
      ##a2#7391 = GenSym(10)
      ##div_a#7392 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7390::Float64,##a2#7391::Float64))
      ####afactor#7198#7393 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7391::Float64))
      ####bfactor#7199#7394 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7390::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7391::Float64,##a2#7391::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7399 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7196#7204#7399 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7401 = (top(getfield))(GenSym(11),:value)::Float64
      ##exp_a#7402 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7403 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7404 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7408 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7074#7078#7083#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7402::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (4.0 * GenSym(12))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * GenSym(13)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return GenSym(14)
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7331::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(14) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.SymTriangularDist{Float64}
  t::Int64
  μ::Float64
  σ::Float64
  #s25::Int64
  a::Float64
  ##xs#7331::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(14) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:μ)::Float64
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{Float64},:σ)::Float64
      #s25 = 1
      GenSym(16) = GenSym(14)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(16)
      #s25 = GenSym(17)
      GenSym(18) = GenSym(15)
      GenSym(19) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(18)
      #s25 = GenSym(19) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      a = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      unless (Base.eq_float)(a::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Bool goto 0
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :((Base.box)(Float64,(Base.sitofp)(Float64,0)))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      GenSym(6) = (Base.box)(Base.Float64,(Base.mul_float)(μ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(0.5,a::Float64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(10),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64)))
      GenSym(11) = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,a::Float64)),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      GenSym(13) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(4.0,(top(getfield))(GenSym(12),:im)::Float64)))))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(11),(top(getfield))(GenSym(13),:im)::Float64)))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7376::Tuple{}
  ######x#7245#7247#7377::Int64
  ####_var0#7248#7378::Tuple{}
  ######types#7184#7249#7379::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7380::Tuple{}
  ########x#7071#7115#7119#7381::Float64
  ######_var0#7116#7120#7382::Tuple{}
  ########types#7086#7117#7121#7383::Tuple{Type{Float64}}
  ##a#7384::Float64
  ####G#7337#7385::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7338#7386::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7339#7387::Tuple{}
  ##########x#7071#7073#7077#7340#7388::Float64
  ########_var0#7074#7078#7341#7389::Tuple{}
  ##a1#7390::Float64
  ##a2#7391::Float64
  ##div_a#7392::Float64
  ####afactor#7198#7393::Float64
  ####bfactor#7199#7394::Float64
  ########a#7188#7192#7200#7395::Tuple{}
  ########b#7189#7193#7201#7396::Tuple{}
  ########afactor#7190#7194#7202#7397::Float64
  ########bfactor#7191#7195#7203#7398::Float64
  ######_var0#7196#7204#7399::Tuple{}
  ######types#7197#7205#7400::Tuple{Type{Float64}}
  ##a#7401::Float64
  ##exp_a#7402::Float64
  ##deriv#7403::Float64
  ####G#7079#7404::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7405::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7406::Tuple{}
  ##########x#7071#7073#7077#7082#7407::Float64
  ########_var0#7074#7078#7083#7408::Tuple{}
  ######tup#7244#7246#7409::Tuple{}
  ######x#7245#7247#7410::Int64
  ####_var0#7248#7411::Tuple{}
  ######types#7184#7249#7412::Tuple{Type{Int64}}
  ##xs#7413::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7378 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7411 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7248#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(12) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7382 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7116#7120#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7384 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      ####G#7337#7385 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7341#7389 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7341#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7384::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7390 = GenSym(9)
      ##a2#7391 = GenSym(10)
      ##div_a#7392 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7390::Float64,##a2#7391::Float64))
      ####afactor#7198#7393 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7391::Float64))
      ####bfactor#7199#7394 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7390::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7391::Float64,##a2#7391::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7399 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7196#7204#7399 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7401 = (top(getfield))(GenSym(11),:value)::Float64
      ##exp_a#7402 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7403 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7404 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7408 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7074#7078#7083#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7402::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (4.0 * GenSym(12))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * GenSym(13)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return GenSym(14)
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7376::Tuple{}
  ######x#7245#7247#7377::Int64
  ####_var0#7248#7378::Tuple{}
  ######types#7184#7249#7379::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7380::Tuple{}
  ########x#7071#7115#7119#7381::Float64
  ######_var0#7116#7120#7382::Tuple{}
  ########types#7086#7117#7121#7383::Tuple{Type{Float64}}
  ##a#7384::Float64
  ####G#7337#7385::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7338#7386::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7339#7387::Tuple{}
  ##########x#7071#7073#7077#7340#7388::Float64
  ########_var0#7074#7078#7341#7389::Tuple{}
  ##a1#7390::Float64
  ##a2#7391::Float64
  ##div_a#7392::Float64
  ####afactor#7198#7393::Float64
  ####bfactor#7199#7394::Float64
  ########a#7188#7192#7200#7395::Tuple{}
  ########b#7189#7193#7201#7396::Tuple{}
  ########afactor#7190#7194#7202#7397::Float64
  ########bfactor#7191#7195#7203#7398::Float64
  ######_var0#7196#7204#7399::Tuple{}
  ######types#7197#7205#7400::Tuple{Type{Float64}}
  ##a#7401::Float64
  ##exp_a#7402::Float64
  ##deriv#7403::Float64
  ####G#7079#7404::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7405::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7406::Tuple{}
  ##########x#7071#7073#7077#7082#7407::Float64
  ########_var0#7074#7078#7083#7408::Tuple{}
  ######tup#7244#7246#7409::Tuple{}
  ######x#7245#7247#7410::Int64
  ####_var0#7248#7411::Tuple{}
  ######types#7184#7249#7412::Tuple{Type{Int64}}
  ##xs#7413::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7378 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7411 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7248#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(12) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7382 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7116#7120#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7384 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      ####G#7337#7385 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7341#7389 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7341#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7384::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7390 = GenSym(9)
      ##a2#7391 = GenSym(10)
      ##div_a#7392 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7390::Float64,##a2#7391::Float64))
      ####afactor#7198#7393 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7391::Float64))
      ####bfactor#7199#7394 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7390::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7391::Float64,##a2#7391::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7399 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7196#7204#7399 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7401 = (top(getfield))(GenSym(11),:value)::Float64
      ##exp_a#7402 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7403 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7404 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7408 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7074#7078#7083#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7402::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (4.0 * GenSym(12))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * GenSym(13)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return GenSym(14)
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7376::Tuple{}
  ######x#7245#7247#7377::Int64
  ####_var0#7248#7378::Tuple{}
  ######types#7184#7249#7379::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7380::Tuple{}
  ########x#7071#7115#7119#7381::Float64
  ######_var0#7116#7120#7382::Tuple{}
  ########types#7086#7117#7121#7383::Tuple{Type{Float64}}
  ##a#7384::Float64
  ####G#7337#7385::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7338#7386::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7339#7387::Tuple{}
  ##########x#7071#7073#7077#7340#7388::Float64
  ########_var0#7074#7078#7341#7389::Tuple{}
  ##a1#7390::Float64
  ##a2#7391::Float64
  ##div_a#7392::Float64
  ####afactor#7198#7393::Float64
  ####bfactor#7199#7394::Float64
  ########a#7188#7192#7200#7395::Tuple{}
  ########b#7189#7193#7201#7396::Tuple{}
  ########afactor#7190#7194#7202#7397::Float64
  ########bfactor#7191#7195#7203#7398::Float64
  ######_var0#7196#7204#7399::Tuple{}
  ######types#7197#7205#7400::Tuple{Type{Float64}}
  ##a#7401::Float64
  ##exp_a#7402::Float64
  ##deriv#7403::Float64
  ####G#7079#7404::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7405::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7406::Tuple{}
  ##########x#7071#7073#7077#7082#7407::Float64
  ########_var0#7074#7078#7083#7408::Tuple{}
  ######tup#7244#7246#7409::Tuple{}
  ######x#7245#7247#7410::Int64
  ####_var0#7248#7411::Tuple{}
  ######types#7184#7249#7412::Tuple{Type{Int64}}
  ##xs#7413::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7378 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7411 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7248#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(12) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7382 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7116#7120#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7384 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      ####G#7337#7385 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7341#7389 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7341#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7384::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7390 = GenSym(9)
      ##a2#7391 = GenSym(10)
      ##div_a#7392 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7390::Float64,##a2#7391::Float64))
      ####afactor#7198#7393 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7391::Float64))
      ####bfactor#7199#7394 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7390::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7391::Float64,##a2#7391::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7399 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7196#7204#7399 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7401 = (top(getfield))(GenSym(11),:value)::Float64
      ##exp_a#7402 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7403 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7404 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7408 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7074#7078#7083#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7402::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (4.0 * GenSym(12))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * GenSym(13)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return GenSym(14)
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7244#7246#7376::Tuple{}
  ######x#7245#7247#7377::Int64
  ####_var0#7248#7378::Tuple{}
  ######types#7184#7249#7379::Tuple{Type{Int64}}
  _var0::Bool
  ########tup#7070#7114#7118#7380::Tuple{}
  ########x#7071#7115#7119#7381::Float64
  ######_var0#7116#7120#7382::Tuple{}
  ########types#7086#7117#7121#7383::Tuple{Type{Float64}}
  ##a#7384::Float64
  ####G#7337#7385::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7338#7386::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7339#7387::Tuple{}
  ##########x#7071#7073#7077#7340#7388::Float64
  ########_var0#7074#7078#7341#7389::Tuple{}
  ##a1#7390::Float64
  ##a2#7391::Float64
  ##div_a#7392::Float64
  ####afactor#7198#7393::Float64
  ####bfactor#7199#7394::Float64
  ########a#7188#7192#7200#7395::Tuple{}
  ########b#7189#7193#7201#7396::Tuple{}
  ########afactor#7190#7194#7202#7397::Float64
  ########bfactor#7191#7195#7203#7398::Float64
  ######_var0#7196#7204#7399::Tuple{}
  ######types#7197#7205#7400::Tuple{Type{Float64}}
  ##a#7401::Float64
  ##exp_a#7402::Float64
  ##deriv#7403::Float64
  ####G#7079#7404::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7069#7075#7080#7405::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7070#7072#7076#7081#7406::Tuple{}
  ##########x#7071#7073#7077#7082#7407::Float64
  ########_var0#7074#7078#7083#7408::Tuple{}
  ######tup#7244#7246#7409::Tuple{}
  ######x#7245#7247#7410::Int64
  ####_var0#7248#7411::Tuple{}
  ######types#7184#7249#7412::Tuple{Type{Int64}}
  ##xs#7413::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 127:
      GenSym(15) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(16) = (top(getfield))(d::Distributions.SymTriangularDist{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(17) = GenSym(15)
      GenSym(18) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(17)
      #s25 = GenSym(18)
      GenSym(19) = GenSym(16)
      GenSym(20) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(19)
      #s25 = GenSym(20) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 128:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7378 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7248#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 129:
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64)::Bool goto 9
      _var0 = (top(getfield))((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))((top(getfield))(GenSym(3),:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{}::Bool
      goto 10
      9: 
      _var0 = false
      10: 
      unless _var0::Bool goto 0
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/symtriangular.jl, line 130:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7411 = (top(tuple))()::Tuple{}
      goto 21
      ####_var0#7248#7411 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(12) = (Distributions.cis)($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7382 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7116#7120#7382 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7384 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7384::Float64,0)::Float64
      ####G#7337#7385 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7341#7389 = (top(tuple))()::Tuple{}
      goto 15
      ########_var0#7074#7078#7341#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(7),##a#7384::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(9) = (top(getfield))(GenSym(8),:value)::Float64
      GenSym(10) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7390 = GenSym(9)
      ##a2#7391 = GenSym(10)
      ##div_a#7392 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7390::Float64,##a2#7391::Float64))
      ####afactor#7198#7393 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7391::Float64))
      ####bfactor#7199#7394 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7390::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7391::Float64,##a2#7391::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7196#7204#7399 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7196#7204#7399 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7401 = (top(getfield))(GenSym(11),:value)::Float64
      ##exp_a#7402 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7403 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7401::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7079#7404 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7074#7078#7083#7408 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7074#7078#7083#7408 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7402::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(14) = (4.0 * GenSym(12))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * GenSym(13)::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      return GenSym(14)
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




