____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 47:
      return (top(tuple))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))))),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))))),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7106::Float64
  ##exp_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7082#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7111::Tuple{}
  ##########x#7074#7076#7080#7085#7112::Float64
  ########_var0#7077#7081#7086#7113::Tuple{}
  ########tup#7073#7088#7092#7114::Tuple{}
  ########x#7074#7089#7093#7115::Float64
  ######_var0#7090#7094#7116::Tuple{}
  ########types#7087#7091#7095#7117::Tuple{Type{Float64}}
  ######a#7096#7098#7118::Tuple{}
  ######b#7097#7099#7119::Tuple{}
  ####_var0#7100#7120::Tuple{}
  ##exp_a#7121::Float64
  ####G#7101#7122::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7123::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7124::Tuple{}
  ##########x#7074#7076#7080#7104#7125::Float64
  ########_var0#7077#7081#7105#7126::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7106 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7107 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7113 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7116 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7120 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7121 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7122 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7126 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))))),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))))),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7106::Float64
  ##exp_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7082#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7111::Tuple{}
  ##########x#7074#7076#7080#7085#7112::Float64
  ########_var0#7077#7081#7086#7113::Tuple{}
  ########tup#7073#7088#7092#7114::Tuple{}
  ########x#7074#7089#7093#7115::Float64
  ######_var0#7090#7094#7116::Tuple{}
  ########types#7087#7091#7095#7117::Tuple{Type{Float64}}
  ######a#7096#7098#7118::Tuple{}
  ######b#7097#7099#7119::Tuple{}
  ####_var0#7100#7120::Tuple{}
  ##exp_a#7121::Float64
  ####G#7101#7122::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7123::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7124::Tuple{}
  ##########x#7074#7076#7080#7104#7125::Float64
  ########_var0#7077#7081#7105#7126::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7106 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7107 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7113 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7116 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7120 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7121 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7122 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7126 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7106::Float64
  ##exp_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7082#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7111::Tuple{}
  ##########x#7074#7076#7080#7085#7112::Float64
  ########_var0#7077#7081#7086#7113::Tuple{}
  ########tup#7073#7088#7092#7114::Tuple{}
  ########x#7074#7089#7093#7115::Float64
  ######_var0#7090#7094#7116::Tuple{}
  ########types#7087#7091#7095#7117::Tuple{Type{Float64}}
  ######a#7096#7098#7118::Tuple{}
  ######b#7097#7099#7119::Tuple{}
  ####_var0#7100#7120::Tuple{}
  ##exp_a#7121::Float64
  ####G#7101#7122::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7123::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7124::Tuple{}
  ##########x#7074#7076#7080#7104#7125::Float64
  ########_var0#7077#7081#7105#7126::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7106 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7107 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7113 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7116 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7120 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7121 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7122 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7126 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7106::Float64
  ##exp_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7082#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7111::Tuple{}
  ##########x#7074#7076#7080#7085#7112::Float64
  ########_var0#7077#7081#7086#7113::Tuple{}
  ########tup#7073#7088#7092#7114::Tuple{}
  ########x#7074#7089#7093#7115::Float64
  ######_var0#7090#7094#7116::Tuple{}
  ########types#7087#7091#7095#7117::Tuple{Type{Float64}}
  ######a#7096#7098#7118::Tuple{}
  ######b#7097#7099#7119::Tuple{}
  ####_var0#7100#7120::Tuple{}
  ##exp_a#7121::Float64
  ####G#7101#7122::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7123::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7124::Tuple{}
  ##########x#7074#7076#7080#7104#7125::Float64
  ########_var0#7077#7081#7105#7126::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7106 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7107 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7113 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7116 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7120 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7121 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7122 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7126 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7106::Float64
  ##exp_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7082#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7111::Tuple{}
  ##########x#7074#7076#7080#7085#7112::Float64
  ########_var0#7077#7081#7086#7113::Tuple{}
  ########tup#7073#7088#7092#7114::Tuple{}
  ########x#7074#7089#7093#7115::Float64
  ######_var0#7090#7094#7116::Tuple{}
  ########types#7087#7091#7095#7117::Tuple{Type{Float64}}
  ######a#7096#7098#7118::Tuple{}
  ######b#7097#7099#7119::Tuple{}
  ####_var0#7100#7120::Tuple{}
  ##exp_a#7121::Float64
  ####G#7101#7122::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7123::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7124::Tuple{}
  ##########x#7074#7076#7080#7104#7125::Float64
  ########_var0#7077#7081#7105#7126::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 55:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7106 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7107 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7106::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7113 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7116 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7116 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7120 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7121 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7122 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7126 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7126 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7121::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64
  σ2::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,μ::Float64)),σ2::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),1.0)),GenSym(6)))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64
  σ2::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,μ::Float64)),σ2::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),1.0)),GenSym(6)))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7146::Float64
  ##exp_a#7147::Float64
  ##deriv#7148::Float64
  ####G#7082#7149::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7150::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7151::Tuple{}
  ##########x#7074#7076#7080#7085#7152::Float64
  ########_var0#7077#7081#7086#7153::Tuple{}
  ########tup#7073#7088#7092#7154::Tuple{}
  ########x#7074#7089#7093#7155::Float64
  ######_var0#7090#7094#7156::Tuple{}
  ########types#7087#7091#7095#7157::Tuple{Type{Float64}}
  ######a#7096#7098#7158::Tuple{}
  ######b#7097#7099#7159::Tuple{}
  ####_var0#7100#7160::Tuple{}
  ##exp_a#7161::Float64
  ####G#7101#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7164::Tuple{}
  ##########x#7074#7076#7080#7104#7165::Float64
  ########_var0#7077#7081#7105#7166::Tuple{}
  ##exp_a#7167::Float64
  ####G#7101#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7170::Tuple{}
  ##########x#7074#7076#7080#7104#7171::Float64
  ########_var0#7077#7081#7105#7172::Tuple{}
  ######types#7087#7136#7173::Tuple{Type{Float64}}
  ##a1#7174::Float64
  ##a2#7175::Float64
  ######a#7137#7141#7176::Tuple{}
  ######b#7138#7142#7177::Tuple{}
  ######afactor#7139#7143#7178::Float64
  ######bfactor#7140#7144#7179::Float64
  ####_var0#7145#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(9) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      ##a#7146 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7147 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7148 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7149 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7153 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      σ2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      ##exp_a#7167 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7172 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7077#7081#7105#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7167::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7156 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7160 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7161 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7166 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7174 = GenSym(7)
      ##a2#7175 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7180 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7145#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7174::Float64,##a2#7175::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64
  σ2::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,μ::Float64)),σ2::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),1.0)),GenSym(6)))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64
  σ2::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(2.0,μ::Float64)),σ2::Float64)),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.sub_float)(GenSym(5),1.0)),GenSym(6)))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7146::Float64
  ##exp_a#7147::Float64
  ##deriv#7148::Float64
  ####G#7082#7149::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7150::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7151::Tuple{}
  ##########x#7074#7076#7080#7085#7152::Float64
  ########_var0#7077#7081#7086#7153::Tuple{}
  ########tup#7073#7088#7092#7154::Tuple{}
  ########x#7074#7089#7093#7155::Float64
  ######_var0#7090#7094#7156::Tuple{}
  ########types#7087#7091#7095#7157::Tuple{Type{Float64}}
  ######a#7096#7098#7158::Tuple{}
  ######b#7097#7099#7159::Tuple{}
  ####_var0#7100#7160::Tuple{}
  ##exp_a#7161::Float64
  ####G#7101#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7164::Tuple{}
  ##########x#7074#7076#7080#7104#7165::Float64
  ########_var0#7077#7081#7105#7166::Tuple{}
  ##exp_a#7167::Float64
  ####G#7101#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7170::Tuple{}
  ##########x#7074#7076#7080#7104#7171::Float64
  ########_var0#7077#7081#7105#7172::Tuple{}
  ######types#7087#7136#7173::Tuple{Type{Float64}}
  ##a1#7174::Float64
  ##a2#7175::Float64
  ######a#7137#7141#7176::Tuple{}
  ######b#7138#7142#7177::Tuple{}
  ######afactor#7139#7143#7178::Float64
  ######bfactor#7140#7144#7179::Float64
  ####_var0#7145#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(9) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      ##a#7146 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7147 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7148 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7149 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7153 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      σ2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      ##exp_a#7167 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7172 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7077#7081#7105#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7167::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7156 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7160 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7161 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7166 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7174 = GenSym(7)
      ##a2#7175 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7180 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7145#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7174::Float64,##a2#7175::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7146::Float64
  ##exp_a#7147::Float64
  ##deriv#7148::Float64
  ####G#7082#7149::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7150::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7151::Tuple{}
  ##########x#7074#7076#7080#7085#7152::Float64
  ########_var0#7077#7081#7086#7153::Tuple{}
  ########tup#7073#7088#7092#7154::Tuple{}
  ########x#7074#7089#7093#7155::Float64
  ######_var0#7090#7094#7156::Tuple{}
  ########types#7087#7091#7095#7157::Tuple{Type{Float64}}
  ######a#7096#7098#7158::Tuple{}
  ######b#7097#7099#7159::Tuple{}
  ####_var0#7100#7160::Tuple{}
  ##exp_a#7161::Float64
  ####G#7101#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7164::Tuple{}
  ##########x#7074#7076#7080#7104#7165::Float64
  ########_var0#7077#7081#7105#7166::Tuple{}
  ##exp_a#7167::Float64
  ####G#7101#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7170::Tuple{}
  ##########x#7074#7076#7080#7104#7171::Float64
  ########_var0#7077#7081#7105#7172::Tuple{}
  ######types#7087#7136#7173::Tuple{Type{Float64}}
  ##a1#7174::Float64
  ##a2#7175::Float64
  ######a#7137#7141#7176::Tuple{}
  ######b#7138#7142#7177::Tuple{}
  ######afactor#7139#7143#7178::Float64
  ######bfactor#7140#7144#7179::Float64
  ####_var0#7145#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(9) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      ##a#7146 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7147 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7148 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7149 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7153 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      σ2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      ##exp_a#7167 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7172 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7077#7081#7105#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7167::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7156 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7160 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7161 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7166 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7174 = GenSym(7)
      ##a2#7175 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7180 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7145#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7174::Float64,##a2#7175::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7146::Float64
  ##exp_a#7147::Float64
  ##deriv#7148::Float64
  ####G#7082#7149::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7150::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7151::Tuple{}
  ##########x#7074#7076#7080#7085#7152::Float64
  ########_var0#7077#7081#7086#7153::Tuple{}
  ########tup#7073#7088#7092#7154::Tuple{}
  ########x#7074#7089#7093#7155::Float64
  ######_var0#7090#7094#7156::Tuple{}
  ########types#7087#7091#7095#7157::Tuple{Type{Float64}}
  ######a#7096#7098#7158::Tuple{}
  ######b#7097#7099#7159::Tuple{}
  ####_var0#7100#7160::Tuple{}
  ##exp_a#7161::Float64
  ####G#7101#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7164::Tuple{}
  ##########x#7074#7076#7080#7104#7165::Float64
  ########_var0#7077#7081#7105#7166::Tuple{}
  ##exp_a#7167::Float64
  ####G#7101#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7170::Tuple{}
  ##########x#7074#7076#7080#7104#7171::Float64
  ########_var0#7077#7081#7105#7172::Tuple{}
  ######types#7087#7136#7173::Tuple{Type{Float64}}
  ##a1#7174::Float64
  ##a2#7175::Float64
  ######a#7137#7141#7176::Tuple{}
  ######b#7138#7142#7177::Tuple{}
  ######afactor#7139#7143#7178::Float64
  ######bfactor#7140#7144#7179::Float64
  ####_var0#7145#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(9) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      ##a#7146 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7147 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7148 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7149 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7153 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      σ2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      ##exp_a#7167 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7172 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7077#7081#7105#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7167::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7156 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7160 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7161 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7166 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7174 = GenSym(7)
      ##a2#7175 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7180 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7145#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7174::Float64,##a2#7175::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7146::Float64
  ##exp_a#7147::Float64
  ##deriv#7148::Float64
  ####G#7082#7149::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7150::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7151::Tuple{}
  ##########x#7074#7076#7080#7085#7152::Float64
  ########_var0#7077#7081#7086#7153::Tuple{}
  ########tup#7073#7088#7092#7154::Tuple{}
  ########x#7074#7089#7093#7155::Float64
  ######_var0#7090#7094#7156::Tuple{}
  ########types#7087#7091#7095#7157::Tuple{Type{Float64}}
  ######a#7096#7098#7158::Tuple{}
  ######b#7097#7099#7159::Tuple{}
  ####_var0#7100#7160::Tuple{}
  ##exp_a#7161::Float64
  ####G#7101#7162::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7163::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7164::Tuple{}
  ##########x#7074#7076#7080#7104#7165::Float64
  ########_var0#7077#7081#7105#7166::Tuple{}
  ##exp_a#7167::Float64
  ####G#7101#7168::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7169::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7170::Tuple{}
  ##########x#7074#7076#7080#7104#7171::Float64
  ########_var0#7077#7081#7105#7172::Tuple{}
  ######types#7087#7136#7173::Tuple{Type{Float64}}
  ##a1#7174::Float64
  ##a2#7175::Float64
  ######a#7137#7141#7176::Tuple{}
  ######b#7138#7142#7177::Tuple{}
  ######afactor#7139#7143#7178::Float64
  ######bfactor#7140#7144#7179::Float64
  ####_var0#7145#7180::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 60:
      GenSym(9) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(10) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(11)
      #s25 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(13)
      #s25 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 61:
      ##a#7146 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7147 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7148 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7146::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7149 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7153 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7153 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      σ2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7147::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 62:
      ##exp_a#7167 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7168 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7172 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7077#7081#7105#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7167::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7156 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7156 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7160 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7160 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7161 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7162 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7166 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7161::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7174 = GenSym(7)
      ##a2#7175 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7180 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7145#7180 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7174::Float64,##a2#7175::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7186::Float64
  ##exp_a#7187::Float64
  ##deriv#7188::Float64
  ####G#7082#7189::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7190::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7191::Tuple{}
  ##########x#7074#7076#7080#7085#7192::Float64
  ########_var0#7077#7081#7086#7193::Tuple{}
  ######a#7181#7183#7194::Tuple{}
  ######b#7182#7184#7195::Tuple{}
  ####_var0#7185#7196::Tuple{}
  ##exp_a#7197::Float64
  ####G#7101#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7200::Tuple{}
  ##########x#7074#7076#7080#7104#7201::Float64
  ########_var0#7077#7081#7105#7202::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7186 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7187 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7188 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7189 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7193 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7185#7196 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7185#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##exp_a#7197 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7202 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7105#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7197::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(4) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(6) = GenSym(4)
      GenSym(7) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(6)
      #s25 = GenSym(7)
      GenSym(8) = GenSym(5)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(8)
      #s25 = GenSym(9)
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.sub_float)(μ::Float64,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64)))),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7186::Float64
  ##exp_a#7187::Float64
  ##deriv#7188::Float64
  ####G#7082#7189::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7190::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7191::Tuple{}
  ##########x#7074#7076#7080#7085#7192::Float64
  ########_var0#7077#7081#7086#7193::Tuple{}
  ######a#7181#7183#7194::Tuple{}
  ######b#7182#7184#7195::Tuple{}
  ####_var0#7185#7196::Tuple{}
  ##exp_a#7197::Float64
  ####G#7101#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7200::Tuple{}
  ##########x#7074#7076#7080#7104#7201::Float64
  ########_var0#7077#7081#7105#7202::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7186 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7187 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7188 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7189 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7193 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7185#7196 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7185#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##exp_a#7197 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7202 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7105#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7197::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7186::Float64
  ##exp_a#7187::Float64
  ##deriv#7188::Float64
  ####G#7082#7189::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7190::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7191::Tuple{}
  ##########x#7074#7076#7080#7085#7192::Float64
  ########_var0#7077#7081#7086#7193::Tuple{}
  ######a#7181#7183#7194::Tuple{}
  ######b#7182#7184#7195::Tuple{}
  ####_var0#7185#7196::Tuple{}
  ##exp_a#7197::Float64
  ####G#7101#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7200::Tuple{}
  ##########x#7074#7076#7080#7104#7201::Float64
  ########_var0#7077#7081#7105#7202::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7186 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7187 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7188 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7189 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7193 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7185#7196 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7185#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##exp_a#7197 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7202 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7105#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7197::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7186::Float64
  ##exp_a#7187::Float64
  ##deriv#7188::Float64
  ####G#7082#7189::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7190::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7191::Tuple{}
  ##########x#7074#7076#7080#7085#7192::Float64
  ########_var0#7077#7081#7086#7193::Tuple{}
  ######a#7181#7183#7194::Tuple{}
  ######b#7182#7184#7195::Tuple{}
  ####_var0#7185#7196::Tuple{}
  ##exp_a#7197::Float64
  ####G#7101#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7200::Tuple{}
  ##########x#7074#7076#7080#7104#7201::Float64
  ########_var0#7077#7081#7105#7202::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7186 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7187 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7188 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7189 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7193 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7185#7196 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7185#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##exp_a#7197 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7202 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7105#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7197::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7186::Float64
  ##exp_a#7187::Float64
  ##deriv#7188::Float64
  ####G#7082#7189::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7190::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7191::Tuple{}
  ##########x#7074#7076#7080#7085#7192::Float64
  ########_var0#7077#7081#7086#7193::Tuple{}
  ######a#7181#7183#7194::Tuple{}
  ######b#7182#7184#7195::Tuple{}
  ####_var0#7185#7196::Tuple{}
  ##exp_a#7197::Float64
  ####G#7101#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7200::Tuple{}
  ##########x#7074#7076#7080#7104#7201::Float64
  ########_var0#7077#7081#7105#7202::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 57:
      GenSym(5) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(9)
      #s25 = GenSym(10)
      ##a#7186 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7187 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7188 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7186::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7189 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7193 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7187::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7185#7196 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7185#7196 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##exp_a#7197 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(3),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7202 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7105#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7197::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{Float64})::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##exp_a#7203::Float64
  ####G#7101#7204::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7205::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7206::Tuple{}
  ##########x#7074#7076#7080#7104#7207::Float64
  ########_var0#7077#7081#7105#7208::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      ##exp_a#7203 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7204 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7208 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7208 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7203::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64,0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##exp_a#7203::Float64
  ####G#7101#7204::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7205::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7206::Tuple{}
  ##########x#7074#7076#7080#7104#7207::Float64
  ########_var0#7077#7081#7105#7208::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      ##exp_a#7203 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7204 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7208 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7208 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7203::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##exp_a#7203::Float64
  ####G#7101#7204::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7205::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7206::Tuple{}
  ##########x#7074#7076#7080#7104#7207::Float64
  ########_var0#7077#7081#7105#7208::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      ##exp_a#7203 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7204 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7208 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7208 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7203::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##exp_a#7203::Float64
  ####G#7101#7204::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7205::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7206::Tuple{}
  ##########x#7074#7076#7080#7104#7207::Float64
  ########_var0#7077#7081#7105#7208::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      ##exp_a#7203 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7204 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7208 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7208 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7203::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##exp_a#7203::Float64
  ####G#7101#7204::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7205::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7206::Tuple{}
  ##########x#7074#7076#7080#7104#7207::Float64
  ########_var0#7077#7081#7105#7208::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 56:
      ##exp_a#7203 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7204 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7208 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7208 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7203::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(e::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(e::Float64,1.0))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(e::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(e::Float64,1.0))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7226::Float64
  ####G#7101#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7229::Tuple{}
  ##########x#7074#7076#7080#7104#7230::Float64
  ########_var0#7077#7081#7105#7231::Tuple{}
  ######types#7087#7136#7232::Tuple{Type{Float64}}
  ##sqrt_a#7233::Float64
  ##deriv#7234::Float64
  ####G#7221#7235::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7222#7236::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7223#7237::Tuple{}
  ##########x#7074#7076#7080#7224#7238::Float64
  ########_var0#7077#7081#7225#7239::Tuple{}
  ######types#7087#7220#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7137#7141#7243::Tuple{}
  ######b#7138#7142#7244::Tuple{}
  ######afactor#7139#7143#7245::Float64
  ######bfactor#7140#7144#7246::Float64
  ####_var0#7145#7247::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      ##exp_a#7226 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7231 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      ##sqrt_a#7233 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7234 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7233::Float64))
      ####G#7221#7235 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7225#7239 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7077#7081#7225#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7233::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(3) = (top(getfield))(GenSym(1),:value)::Float64
      ##a1#7241 = GenSym(2)
      ##a2#7242 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7247 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(e::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(e::Float64,1.0))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.add_float)(e::Float64,2.0)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.sub_float)(e::Float64,1.0))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7226::Float64
  ####G#7101#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7229::Tuple{}
  ##########x#7074#7076#7080#7104#7230::Float64
  ########_var0#7077#7081#7105#7231::Tuple{}
  ######types#7087#7136#7232::Tuple{Type{Float64}}
  ##sqrt_a#7233::Float64
  ##deriv#7234::Float64
  ####G#7221#7235::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7222#7236::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7223#7237::Tuple{}
  ##########x#7074#7076#7080#7224#7238::Float64
  ########_var0#7077#7081#7225#7239::Tuple{}
  ######types#7087#7220#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7137#7141#7243::Tuple{}
  ######b#7138#7142#7244::Tuple{}
  ######afactor#7139#7143#7245::Float64
  ######bfactor#7140#7144#7246::Float64
  ####_var0#7145#7247::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      ##exp_a#7226 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7231 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      ##sqrt_a#7233 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7234 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7233::Float64))
      ####G#7221#7235 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7225#7239 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7077#7081#7225#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7233::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(3) = (top(getfield))(GenSym(1),:value)::Float64
      ##a1#7241 = GenSym(2)
      ##a2#7242 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7247 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7226::Float64
  ####G#7101#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7229::Tuple{}
  ##########x#7074#7076#7080#7104#7230::Float64
  ########_var0#7077#7081#7105#7231::Tuple{}
  ######types#7087#7136#7232::Tuple{Type{Float64}}
  ##sqrt_a#7233::Float64
  ##deriv#7234::Float64
  ####G#7221#7235::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7222#7236::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7223#7237::Tuple{}
  ##########x#7074#7076#7080#7224#7238::Float64
  ########_var0#7077#7081#7225#7239::Tuple{}
  ######types#7087#7220#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7137#7141#7243::Tuple{}
  ######b#7138#7142#7244::Tuple{}
  ######afactor#7139#7143#7245::Float64
  ######bfactor#7140#7144#7246::Float64
  ####_var0#7145#7247::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      ##exp_a#7226 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7231 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      ##sqrt_a#7233 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7234 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7233::Float64))
      ####G#7221#7235 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7225#7239 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7077#7081#7225#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7233::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(3) = (top(getfield))(GenSym(1),:value)::Float64
      ##a1#7241 = GenSym(2)
      ##a2#7242 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7247 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7226::Float64
  ####G#7101#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7229::Tuple{}
  ##########x#7074#7076#7080#7104#7230::Float64
  ########_var0#7077#7081#7105#7231::Tuple{}
  ######types#7087#7136#7232::Tuple{Type{Float64}}
  ##sqrt_a#7233::Float64
  ##deriv#7234::Float64
  ####G#7221#7235::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7222#7236::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7223#7237::Tuple{}
  ##########x#7074#7076#7080#7224#7238::Float64
  ########_var0#7077#7081#7225#7239::Tuple{}
  ######types#7087#7220#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7137#7141#7243::Tuple{}
  ######b#7138#7142#7244::Tuple{}
  ######afactor#7139#7143#7245::Float64
  ######bfactor#7140#7144#7246::Float64
  ####_var0#7145#7247::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      ##exp_a#7226 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7231 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      ##sqrt_a#7233 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7234 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7233::Float64))
      ####G#7221#7235 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7225#7239 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7077#7081#7225#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7233::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(3) = (top(getfield))(GenSym(1),:value)::Float64
      ##a1#7241 = GenSym(2)
      ##a2#7242 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7247 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7226::Float64
  ####G#7101#7227::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7228::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7229::Tuple{}
  ##########x#7074#7076#7080#7104#7230::Float64
  ########_var0#7077#7081#7105#7231::Tuple{}
  ######types#7087#7136#7232::Tuple{Type{Float64}}
  ##sqrt_a#7233::Float64
  ##deriv#7234::Float64
  ####G#7221#7235::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7222#7236::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7223#7237::Tuple{}
  ##########x#7074#7076#7080#7224#7238::Float64
  ########_var0#7077#7081#7225#7239::Tuple{}
  ######types#7087#7220#7240::Tuple{Type{Float64}}
  ##a1#7241::Float64
  ##a2#7242::Float64
  ######a#7137#7141#7243::Tuple{}
  ######b#7138#7142#7244::Tuple{}
  ######afactor#7139#7143#7245::Float64
  ######bfactor#7140#7144#7246::Float64
  ####_var0#7145#7247::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 66:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 67:
      ##exp_a#7226 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7227 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7231 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7231 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7226::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 68:
      ##sqrt_a#7233 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,1.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64)::ANY)::Float64
      ##deriv#7234 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7233::Float64))
      ####G#7221#7235 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7225#7239 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7077#7081#7225#7239 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      GenSym(1) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7233::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(2) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :((top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64
      GenSym(3) = (top(getfield))(GenSym(1),:value)::Float64
      ##a1#7241 = GenSym(2)
      ##a2#7242 = GenSym(3)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7247 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7247 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7241::Float64,##a2#7242::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64
  e2::Float64
  e3::Float64
  e4::Float64
  ##xs#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      e2 = (Base.box)(Base.Float64,(Base.mul_float)(e::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      e3 = (Base.box)(Base.Float64,(Base.mul_float)(e2::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      e4 = (Base.box)(Base.Float64,(Base.mul_float)(e3::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(e4::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,e3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,e2::Float64)))),6.0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64
  e2::Float64
  e3::Float64
  e4::Float64
  ##xs#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      e2 = (Base.box)(Base.Float64,(Base.mul_float)(e::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      e3 = (Base.box)(Base.Float64,(Base.mul_float)(e2::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      e4 = (Base.box)(Base.Float64,(Base.mul_float)(e3::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(e4::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,e3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,e2::Float64)))),6.0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7255::Float64
  ####G#7101#7256::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7257::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7258::Tuple{}
  ##########x#7074#7076#7080#7104#7259::Float64
  ########_var0#7077#7081#7105#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7137#7141#7263::Tuple{}
  ######b#7138#7142#7264::Tuple{}
  ######afactor#7139#7143#7265::Float64
  ######bfactor#7140#7144#7266::Float64
  ####_var0#7145#7267::Tuple{}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7137#7141#7270::Tuple{}
  ######b#7138#7142#7271::Tuple{}
  ######afactor#7139#7143#7272::Float64
  ######bfactor#7140#7144#7273::Float64
  ####_var0#7145#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ######a#7137#7141#7277::Tuple{}
  ######b#7138#7142#7278::Tuple{}
  ######afactor#7139#7143#7279::Float64
  ######bfactor#7140#7144#7280::Float64
  ####_var0#7145#7281::Tuple{}
  ########tup#7073#7088#7092#7282::Tuple{}
  ########x#7074#7089#7093#7283::Float64
  ######_var0#7090#7094#7284::Tuple{}
  ########types#7087#7091#7095#7285::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7286::Tuple{}
  ########x#7074#7089#7093#7287::Float64
  ######_var0#7090#7094#7288::Tuple{}
  ########types#7087#7091#7095#7289::Tuple{Type{Float64}}
  ##xs#7290::Tuple{}
  ########a#7096#7098#7249#7291::Tuple{}
  ########b#7097#7099#7250#7292::Tuple{}
  ######_var0#7100#7251#7293::Tuple{}
  ########a#7096#7098#7252#7294::Tuple{}
  ########b#7097#7099#7253#7295::Tuple{}
  ######_var0#7100#7254#7296::Tuple{}
  ######types#7087#7136#7297::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      ##exp_a#7255 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7256 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7260 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      GenSym(1) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7267 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7145#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      e2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      GenSym(3) = (top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7268 = GenSym(3)
      ##a2#7269 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7274 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7145#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      e3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      GenSym(5) = (top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7275 = GenSym(5)
      ##a2#7276 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7281 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      e4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7275::Float64,##a2#7276::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7288 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7090#7094#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7284 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7090#7094#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7251#7293 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7100#7251#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7254#7296 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7100#7254#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,6.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64
  e2::Float64
  e3::Float64
  e4::Float64
  ##xs#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      e2 = (Base.box)(Base.Float64,(Base.mul_float)(e::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      e3 = (Base.box)(Base.Float64,(Base.mul_float)(e2::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      e4 = (Base.box)(Base.Float64,(Base.mul_float)(e3::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(e4::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,e3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,e2::Float64)))),6.0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  σ2::Float64
  e::Float64
  e2::Float64
  e3::Float64
  e4::Float64
  ##xs#7248::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      GenSym(0) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      σ2 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(0),GenSym(0))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      e = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,σ2::Float64,0)::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      e2 = (Base.box)(Base.Float64,(Base.mul_float)(e::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      e3 = (Base.box)(Base.Float64,(Base.mul_float)(e2::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      e4 = (Base.box)(Base.Float64,(Base.mul_float)(e3::Float64,e::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(e4::Float64,(Base.box)(Base.Float64,(Base.mul_float)(2.0,e3::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)(3.0,e2::Float64)))),6.0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7255::Float64
  ####G#7101#7256::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7257::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7258::Tuple{}
  ##########x#7074#7076#7080#7104#7259::Float64
  ########_var0#7077#7081#7105#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7137#7141#7263::Tuple{}
  ######b#7138#7142#7264::Tuple{}
  ######afactor#7139#7143#7265::Float64
  ######bfactor#7140#7144#7266::Float64
  ####_var0#7145#7267::Tuple{}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7137#7141#7270::Tuple{}
  ######b#7138#7142#7271::Tuple{}
  ######afactor#7139#7143#7272::Float64
  ######bfactor#7140#7144#7273::Float64
  ####_var0#7145#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ######a#7137#7141#7277::Tuple{}
  ######b#7138#7142#7278::Tuple{}
  ######afactor#7139#7143#7279::Float64
  ######bfactor#7140#7144#7280::Float64
  ####_var0#7145#7281::Tuple{}
  ########tup#7073#7088#7092#7282::Tuple{}
  ########x#7074#7089#7093#7283::Float64
  ######_var0#7090#7094#7284::Tuple{}
  ########types#7087#7091#7095#7285::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7286::Tuple{}
  ########x#7074#7089#7093#7287::Float64
  ######_var0#7090#7094#7288::Tuple{}
  ########types#7087#7091#7095#7289::Tuple{Type{Float64}}
  ##xs#7290::Tuple{}
  ########a#7096#7098#7249#7291::Tuple{}
  ########b#7097#7099#7250#7292::Tuple{}
  ######_var0#7100#7251#7293::Tuple{}
  ########a#7096#7098#7252#7294::Tuple{}
  ########b#7097#7099#7253#7295::Tuple{}
  ######_var0#7100#7254#7296::Tuple{}
  ######types#7087#7136#7297::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      ##exp_a#7255 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7256 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7260 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      GenSym(1) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7267 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7145#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      e2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      GenSym(3) = (top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7268 = GenSym(3)
      ##a2#7269 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7274 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7145#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      e3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      GenSym(5) = (top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7275 = GenSym(5)
      ##a2#7276 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7281 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      e4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7275::Float64,##a2#7276::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7288 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7090#7094#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7284 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7090#7094#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7251#7293 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7100#7251#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7254#7296 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7100#7254#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,6.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7255::Float64
  ####G#7101#7256::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7257::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7258::Tuple{}
  ##########x#7074#7076#7080#7104#7259::Float64
  ########_var0#7077#7081#7105#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7137#7141#7263::Tuple{}
  ######b#7138#7142#7264::Tuple{}
  ######afactor#7139#7143#7265::Float64
  ######bfactor#7140#7144#7266::Float64
  ####_var0#7145#7267::Tuple{}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7137#7141#7270::Tuple{}
  ######b#7138#7142#7271::Tuple{}
  ######afactor#7139#7143#7272::Float64
  ######bfactor#7140#7144#7273::Float64
  ####_var0#7145#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ######a#7137#7141#7277::Tuple{}
  ######b#7138#7142#7278::Tuple{}
  ######afactor#7139#7143#7279::Float64
  ######bfactor#7140#7144#7280::Float64
  ####_var0#7145#7281::Tuple{}
  ########tup#7073#7088#7092#7282::Tuple{}
  ########x#7074#7089#7093#7283::Float64
  ######_var0#7090#7094#7284::Tuple{}
  ########types#7087#7091#7095#7285::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7286::Tuple{}
  ########x#7074#7089#7093#7287::Float64
  ######_var0#7090#7094#7288::Tuple{}
  ########types#7087#7091#7095#7289::Tuple{Type{Float64}}
  ##xs#7290::Tuple{}
  ########a#7096#7098#7249#7291::Tuple{}
  ########b#7097#7099#7250#7292::Tuple{}
  ######_var0#7100#7251#7293::Tuple{}
  ########a#7096#7098#7252#7294::Tuple{}
  ########b#7097#7099#7253#7295::Tuple{}
  ######_var0#7100#7254#7296::Tuple{}
  ######types#7087#7136#7297::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      ##exp_a#7255 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7256 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7260 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      GenSym(1) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7267 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7145#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      e2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      GenSym(3) = (top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7268 = GenSym(3)
      ##a2#7269 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7274 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7145#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      e3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      GenSym(5) = (top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7275 = GenSym(5)
      ##a2#7276 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7281 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      e4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7275::Float64,##a2#7276::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7288 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7090#7094#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7284 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7090#7094#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7251#7293 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7100#7251#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7254#7296 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7100#7254#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,6.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7255::Float64
  ####G#7101#7256::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7257::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7258::Tuple{}
  ##########x#7074#7076#7080#7104#7259::Float64
  ########_var0#7077#7081#7105#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7137#7141#7263::Tuple{}
  ######b#7138#7142#7264::Tuple{}
  ######afactor#7139#7143#7265::Float64
  ######bfactor#7140#7144#7266::Float64
  ####_var0#7145#7267::Tuple{}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7137#7141#7270::Tuple{}
  ######b#7138#7142#7271::Tuple{}
  ######afactor#7139#7143#7272::Float64
  ######bfactor#7140#7144#7273::Float64
  ####_var0#7145#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ######a#7137#7141#7277::Tuple{}
  ######b#7138#7142#7278::Tuple{}
  ######afactor#7139#7143#7279::Float64
  ######bfactor#7140#7144#7280::Float64
  ####_var0#7145#7281::Tuple{}
  ########tup#7073#7088#7092#7282::Tuple{}
  ########x#7074#7089#7093#7283::Float64
  ######_var0#7090#7094#7284::Tuple{}
  ########types#7087#7091#7095#7285::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7286::Tuple{}
  ########x#7074#7089#7093#7287::Float64
  ######_var0#7090#7094#7288::Tuple{}
  ########types#7087#7091#7095#7289::Tuple{Type{Float64}}
  ##xs#7290::Tuple{}
  ########a#7096#7098#7249#7291::Tuple{}
  ########b#7097#7099#7250#7292::Tuple{}
  ######_var0#7100#7251#7293::Tuple{}
  ########a#7096#7098#7252#7294::Tuple{}
  ########b#7097#7099#7253#7295::Tuple{}
  ######_var0#7100#7254#7296::Tuple{}
  ######types#7087#7136#7297::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      ##exp_a#7255 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7256 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7260 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      GenSym(1) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7267 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7145#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      e2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      GenSym(3) = (top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7268 = GenSym(3)
      ##a2#7269 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7274 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7145#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      e3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      GenSym(5) = (top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7275 = GenSym(5)
      ##a2#7276 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7281 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      e4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7275::Float64,##a2#7276::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7288 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7090#7094#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7284 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7090#7094#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7251#7293 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7100#7251#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7254#7296 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7100#7254#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,6.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##exp_a#7255::Float64
  ####G#7101#7256::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7257::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7258::Tuple{}
  ##########x#7074#7076#7080#7104#7259::Float64
  ########_var0#7077#7081#7105#7260::Tuple{}
  ##a1#7261::Float64
  ##a2#7262::Float64
  ######a#7137#7141#7263::Tuple{}
  ######b#7138#7142#7264::Tuple{}
  ######afactor#7139#7143#7265::Float64
  ######bfactor#7140#7144#7266::Float64
  ####_var0#7145#7267::Tuple{}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7137#7141#7270::Tuple{}
  ######b#7138#7142#7271::Tuple{}
  ######afactor#7139#7143#7272::Float64
  ######bfactor#7140#7144#7273::Float64
  ####_var0#7145#7274::Tuple{}
  ##a1#7275::Float64
  ##a2#7276::Float64
  ######a#7137#7141#7277::Tuple{}
  ######b#7138#7142#7278::Tuple{}
  ######afactor#7139#7143#7279::Float64
  ######bfactor#7140#7144#7280::Float64
  ####_var0#7145#7281::Tuple{}
  ########tup#7073#7088#7092#7282::Tuple{}
  ########x#7074#7089#7093#7283::Float64
  ######_var0#7090#7094#7284::Tuple{}
  ########types#7087#7091#7095#7285::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7286::Tuple{}
  ########x#7074#7089#7093#7287::Float64
  ######_var0#7090#7094#7288::Tuple{}
  ########types#7087#7091#7095#7289::Tuple{Type{Float64}}
  ##xs#7290::Tuple{}
  ########a#7096#7098#7249#7291::Tuple{}
  ########b#7097#7099#7250#7292::Tuple{}
  ######_var0#7100#7251#7293::Tuple{}
  ########a#7096#7098#7252#7294::Tuple{}
  ########b#7097#7099#7253#7295::Tuple{}
  ######_var0#7100#7254#7296::Tuple{}
  ######types#7087#7136#7297::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 72:
      σ2 = (Distributions.varlogx)(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}} # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 73:
      ##exp_a#7255 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(σ2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,0)::Float64
      ####G#7101#7256 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7260 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7077#7081#7105#7260 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      e = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 74:
      GenSym(1) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7261 = GenSym(1)
      ##a2#7262 = GenSym(2)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7267 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7145#7267 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      e2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7261::Float64,##a2#7262::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 75:
      GenSym(3) = (top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7268 = GenSym(3)
      ##a2#7269 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7274 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7145#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      e3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 76:
      GenSym(5) = (top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(6) = (top(getfield))(e::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7275 = GenSym(5)
      ##a2#7276 = GenSym(6)
      $(Expr(:boundscheck, false))
      ####_var0#7145#7281 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7145#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      e4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7275::Float64,##a2#7276::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 77:
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7288 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7090#7094#7288 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7284 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7090#7094#7284 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7251#7293 = (top(tuple))()::Tuple{}
      goto 13
      ######_var0#7100#7251#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7100#7254#7296 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7100#7254#7296 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(e4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(e2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(7),:value)::Float64,6.0))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))),μ::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))),μ::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7315::Float64
  ##exp_a#7316::Float64
  ##deriv#7317::Float64
  ####G#7082#7318::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7319::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7320::Tuple{}
  ##########x#7074#7076#7080#7085#7321::Float64
  ########_var0#7077#7081#7086#7322::Tuple{}
  ########tup#7298#7301#7305#7323::Tuple{}
  ########x#7299#7302#7306#7324::Irrational{:twoπ}
  ######_var0#7303#7307#7325::Tuple{}
  ########types#7300#7304#7308#7326::Tuple{Type{Irrational{:twoπ}}}
  ##a#7327::Float64
  ####G#7309#7328::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7310#7329::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7311#7330::Tuple{}
  ##########x#7074#7076#7080#7312#7331::Float64
  ########_var0#7077#7081#7313#7332::Tuple{}
  ########types#7087#7220#7314#7333::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7334::Tuple{}
  ########x#7074#7089#7093#7335::Float64
  ######_var0#7090#7094#7336::Tuple{}
  ########types#7087#7091#7095#7337::Tuple{Type{Float64}}
  ######a#7096#7098#7338::Tuple{}
  ######b#7097#7099#7339::Tuple{}
  ####_var0#7100#7340::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      ##a#7315 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7316 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7317 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7318 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7322 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7316::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7303#7307#7325 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7303#7307#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7327 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,6.283185307179586))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7327::Float64,0)::Float64
      ####G#7309#7328 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7313#7332 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7313#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7327::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7336 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7090#7094#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7340 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7100#7340 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))),μ::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  μ::Float64
  σ::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(6) = (top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      #s25 = 1
      GenSym(8) = GenSym(6)
      GenSym(9) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(8)
      #s25 = GenSym(9)
      GenSym(10) = GenSym(7)
      GenSym(11) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(10)
      #s25 = GenSym(11) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      GenSym(3) = (Base.box)(Base.Float64,(Base.mul_float)(6.283185307179586,(Base.box)(Base.Float64,(Base.mul_float)(σ::Float64,σ::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(0.5,(Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))),μ::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7315::Float64
  ##exp_a#7316::Float64
  ##deriv#7317::Float64
  ####G#7082#7318::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7319::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7320::Tuple{}
  ##########x#7074#7076#7080#7085#7321::Float64
  ########_var0#7077#7081#7086#7322::Tuple{}
  ########tup#7298#7301#7305#7323::Tuple{}
  ########x#7299#7302#7306#7324::Irrational{:twoπ}
  ######_var0#7303#7307#7325::Tuple{}
  ########types#7300#7304#7308#7326::Tuple{Type{Irrational{:twoπ}}}
  ##a#7327::Float64
  ####G#7309#7328::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7310#7329::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7311#7330::Tuple{}
  ##########x#7074#7076#7080#7312#7331::Float64
  ########_var0#7077#7081#7313#7332::Tuple{}
  ########types#7087#7220#7314#7333::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7334::Tuple{}
  ########x#7074#7089#7093#7335::Float64
  ######_var0#7090#7094#7336::Tuple{}
  ########types#7087#7091#7095#7337::Tuple{Type{Float64}}
  ######a#7096#7098#7338::Tuple{}
  ######b#7097#7099#7339::Tuple{}
  ####_var0#7100#7340::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      ##a#7315 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7316 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7317 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7318 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7322 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7316::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7303#7307#7325 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7303#7307#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7327 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,6.283185307179586))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7327::Float64,0)::Float64
      ####G#7309#7328 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7313#7332 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7313#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7327::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7336 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7090#7094#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7340 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7100#7340 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7315::Float64
  ##exp_a#7316::Float64
  ##deriv#7317::Float64
  ####G#7082#7318::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7319::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7320::Tuple{}
  ##########x#7074#7076#7080#7085#7321::Float64
  ########_var0#7077#7081#7086#7322::Tuple{}
  ########tup#7298#7301#7305#7323::Tuple{}
  ########x#7299#7302#7306#7324::Irrational{:twoπ}
  ######_var0#7303#7307#7325::Tuple{}
  ########types#7300#7304#7308#7326::Tuple{Type{Irrational{:twoπ}}}
  ##a#7327::Float64
  ####G#7309#7328::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7310#7329::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7311#7330::Tuple{}
  ##########x#7074#7076#7080#7312#7331::Float64
  ########_var0#7077#7081#7313#7332::Tuple{}
  ########types#7087#7220#7314#7333::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7334::Tuple{}
  ########x#7074#7089#7093#7335::Float64
  ######_var0#7090#7094#7336::Tuple{}
  ########types#7087#7091#7095#7337::Tuple{Type{Float64}}
  ######a#7096#7098#7338::Tuple{}
  ######b#7097#7099#7339::Tuple{}
  ####_var0#7100#7340::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      ##a#7315 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7316 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7317 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7318 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7322 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7316::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7303#7307#7325 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7303#7307#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7327 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,6.283185307179586))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7327::Float64,0)::Float64
      ####G#7309#7328 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7313#7332 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7313#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7327::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7336 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7090#7094#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7340 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7100#7340 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7315::Float64
  ##exp_a#7316::Float64
  ##deriv#7317::Float64
  ####G#7082#7318::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7319::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7320::Tuple{}
  ##########x#7074#7076#7080#7085#7321::Float64
  ########_var0#7077#7081#7086#7322::Tuple{}
  ########tup#7298#7301#7305#7323::Tuple{}
  ########x#7299#7302#7306#7324::Irrational{:twoπ}
  ######_var0#7303#7307#7325::Tuple{}
  ########types#7300#7304#7308#7326::Tuple{Type{Irrational{:twoπ}}}
  ##a#7327::Float64
  ####G#7309#7328::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7310#7329::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7311#7330::Tuple{}
  ##########x#7074#7076#7080#7312#7331::Float64
  ########_var0#7077#7081#7313#7332::Tuple{}
  ########types#7087#7220#7314#7333::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7334::Tuple{}
  ########x#7074#7089#7093#7335::Float64
  ######_var0#7090#7094#7336::Tuple{}
  ########types#7087#7091#7095#7337::Tuple{Type{Float64}}
  ######a#7096#7098#7338::Tuple{}
  ######b#7097#7099#7339::Tuple{}
  ####_var0#7100#7340::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      ##a#7315 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7316 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7317 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7318 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7322 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7316::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7303#7307#7325 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7303#7307#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7327 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,6.283185307179586))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7327::Float64,0)::Float64
      ####G#7309#7328 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7313#7332 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7313#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7327::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7336 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7090#7094#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7340 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7100#7340 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ##a#7315::Float64
  ##exp_a#7316::Float64
  ##deriv#7317::Float64
  ####G#7082#7318::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7083#7319::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7084#7320::Tuple{}
  ##########x#7074#7076#7080#7085#7321::Float64
  ########_var0#7077#7081#7086#7322::Tuple{}
  ########tup#7298#7301#7305#7323::Tuple{}
  ########x#7299#7302#7306#7324::Irrational{:twoπ}
  ######_var0#7303#7307#7325::Tuple{}
  ########types#7300#7304#7308#7326::Tuple{Type{Irrational{:twoπ}}}
  ##a#7327::Float64
  ####G#7309#7328::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7310#7329::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7311#7330::Tuple{}
  ##########x#7074#7076#7080#7312#7331::Float64
  ########_var0#7077#7081#7313#7332::Tuple{}
  ########types#7087#7220#7314#7333::Tuple{Type{Float64}}
  ########tup#7073#7088#7092#7334::Tuple{}
  ########x#7074#7089#7093#7335::Float64
  ######_var0#7090#7094#7336::Tuple{}
  ########types#7087#7091#7095#7337::Tuple{Type{Float64}}
  ######a#7096#7098#7338::Tuple{}
  ######b#7097#7099#7339::Tuple{}
  ####_var0#7100#7340::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 81:
      GenSym(7) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(8) = (top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      μ = GenSym(9)
      #s25 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      σ = GenSym(11)
      #s25 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 82:
      ##a#7315 = (top(getfield))(σ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7316 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7317 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7315::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7082#7318 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7086#7322 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7077#7081#7086#7322 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7316::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7303#7307#7325 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7303#7307#7325 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##a#7327 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(3),:value)::Float64,6.283185307179586))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7327::Float64,0)::Float64
      ####G#7309#7328 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7313#7332 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7077#7081#7313#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7327::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7336 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7090#7094#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7340 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7100#7340 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(6),:value)::Float64,1.0))), :((top(getfield))(GenSym(6),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),:value)::Float64,0.5))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(μ::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  ####r#7351#7357::UInt64
  ####rabs#7352#7358::Int64
  ####idx#7353#7359::Int64
  ####x#7354#7360::Float64
  ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7362::Float64
  ##_var0#7363::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7361 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7361 = false
      2: 
      ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7362 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7357 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7362::Float64),0x000fffffffffffff))
      ####rabs#7352#7358 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7357::UInt64,1))))
      ####idx#7353#7359 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7358::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7360 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7357::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7358::Int64)),####rabs#7352#7358::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7358::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7358::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7363 = ####x#7354#7360::Float64
      goto 5
      4: 
      ##_var0#7363 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7359::Int64,####rabs#7352#7358::Int64,####x#7354#7360::Float64)::Float64
      goto 5
      ##_var0#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(##_var0#7363::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)),(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64))
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  ####r#7351#7357::UInt64
  ####rabs#7352#7358::Int64
  ####idx#7353#7359::Int64
  ####x#7354#7360::Float64
  ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7362::Float64
  ##_var0#7363::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7361 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7361 = false
      2: 
      ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7362 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7357 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7362::Float64),0x000fffffffffffff))
      ####rabs#7352#7358 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7357::UInt64,1))))
      ####idx#7353#7359 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7358::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7360 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7357::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7358::Int64)),####rabs#7352#7358::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7358::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7358::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7363 = ####x#7354#7360::Float64
      goto 5
      4: 
      ##_var0#7363 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7359::Int64,####rabs#7352#7358::Int64,####x#7354#7360::Float64)::Float64
      goto 5
      ##_var0#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(##_var0#7363::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)),(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64))
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7351#7366::UInt64
  ####rabs#7352#7367::Int64
  ####idx#7353#7368::Int64
  ####x#7354#7369::Float64
  ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7371::Float64
  ##_var0#7372::Float64
  ########tup#7073#7088#7092#7373::Tuple{}
  ########x#7074#7089#7093#7374::Float64
  ######_var0#7090#7094#7375::Tuple{}
  ########types#7087#7091#7095#7376::Tuple{Type{Float64}}
  ######a#7096#7098#7377::Tuple{}
  ######b#7097#7099#7378::Tuple{}
  ####_var0#7100#7379::Tuple{}
  ##exp_a#7380::Float64
  ####G#7101#7381::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7382::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7383::Tuple{}
  ##########x#7074#7076#7080#7104#7384::Float64
  ########_var0#7077#7081#7105#7385::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7370 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7370 = false
      2: 
      ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7371 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7366 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7371::Float64),0x000fffffffffffff))
      ####rabs#7352#7367 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7366::UInt64,1))))
      ####idx#7353#7368 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7367::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7366::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7367::Int64)),####rabs#7352#7367::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7367::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7367::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7372 = ####x#7354#7369::Float64
      goto 5
      4: 
      ##_var0#7372 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7368::Int64,####rabs#7352#7367::Int64,####x#7354#7369::Float64)::Float64
      goto 5
      ##_var0#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7372::Float64
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7375 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7379 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7380 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7381 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7385 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7380::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  ####r#7351#7357::UInt64
  ####rabs#7352#7358::Int64
  ####idx#7353#7359::Int64
  ####x#7354#7360::Float64
  ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7362::Float64
  ##_var0#7363::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7361 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7361 = false
      2: 
      ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7362 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7357 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7362::Float64),0x000fffffffffffff))
      ####rabs#7352#7358 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7357::UInt64,1))))
      ####idx#7353#7359 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7358::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7360 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7357::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7358::Int64)),####rabs#7352#7358::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7358::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7358::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7363 = ####x#7354#7360::Float64
      goto 5
      4: 
      ##_var0#7363 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7359::Int64,####rabs#7352#7358::Int64,####x#7354#7360::Float64)::Float64
      goto 5
      ##_var0#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(##_var0#7363::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)),(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64))
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  ####r#7351#7357::UInt64
  ####rabs#7352#7358::Int64
  ####idx#7353#7359::Int64
  ####x#7354#7360::Float64
  ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7362::Float64
  ##_var0#7363::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7361 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7361 = false
      2: 
      ########_var0#7343#7349#7355#7361::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7362 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7362 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7357 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7362::Float64),0x000fffffffffffff))
      ####rabs#7352#7358 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7357::UInt64,1))))
      ####idx#7353#7359 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7358::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7360 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7357::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7358::Int64)),####rabs#7352#7358::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7358::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7358::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7359::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7363 = ####x#7354#7360::Float64
      goto 5
      4: 
      ##_var0#7363 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7359::Int64,####rabs#7352#7358::Int64,####x#7354#7360::Float64)::Float64
      goto 5
      ##_var0#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.mul_float)(##_var0#7363::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64)),(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64))
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7351#7366::UInt64
  ####rabs#7352#7367::Int64
  ####idx#7353#7368::Int64
  ####x#7354#7369::Float64
  ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7371::Float64
  ##_var0#7372::Float64
  ########tup#7073#7088#7092#7373::Tuple{}
  ########x#7074#7089#7093#7374::Float64
  ######_var0#7090#7094#7375::Tuple{}
  ########types#7087#7091#7095#7376::Tuple{Type{Float64}}
  ######a#7096#7098#7377::Tuple{}
  ######b#7097#7099#7378::Tuple{}
  ####_var0#7100#7379::Tuple{}
  ##exp_a#7380::Float64
  ####G#7101#7381::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7382::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7383::Tuple{}
  ##########x#7074#7076#7080#7104#7384::Float64
  ########_var0#7077#7081#7105#7385::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7370 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7370 = false
      2: 
      ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7371 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7366 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7371::Float64),0x000fffffffffffff))
      ####rabs#7352#7367 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7366::UInt64,1))))
      ####idx#7353#7368 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7367::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7366::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7367::Int64)),####rabs#7352#7367::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7367::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7367::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7372 = ####x#7354#7369::Float64
      goto 5
      4: 
      ##_var0#7372 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7368::Int64,####rabs#7352#7367::Int64,####x#7354#7369::Float64)::Float64
      goto 5
      ##_var0#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7372::Float64
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7375 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7379 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7380 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7381 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7385 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7380::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7351#7366::UInt64
  ####rabs#7352#7367::Int64
  ####idx#7353#7368::Int64
  ####x#7354#7369::Float64
  ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7371::Float64
  ##_var0#7372::Float64
  ########tup#7073#7088#7092#7373::Tuple{}
  ########x#7074#7089#7093#7374::Float64
  ######_var0#7090#7094#7375::Tuple{}
  ########types#7087#7091#7095#7376::Tuple{Type{Float64}}
  ######a#7096#7098#7377::Tuple{}
  ######b#7097#7099#7378::Tuple{}
  ####_var0#7100#7379::Tuple{}
  ##exp_a#7380::Float64
  ####G#7101#7381::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7382::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7383::Tuple{}
  ##########x#7074#7076#7080#7104#7384::Float64
  ########_var0#7077#7081#7105#7385::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7370 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7370 = false
      2: 
      ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7371 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7366 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7371::Float64),0x000fffffffffffff))
      ####rabs#7352#7367 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7366::UInt64,1))))
      ####idx#7353#7368 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7367::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7366::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7367::Int64)),####rabs#7352#7367::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7367::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7367::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7372 = ####x#7354#7369::Float64
      goto 5
      4: 
      ##_var0#7372 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7368::Int64,####rabs#7352#7367::Int64,####x#7354#7369::Float64)::Float64
      goto 5
      ##_var0#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7372::Float64
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7375 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7379 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7380 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7381 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7385 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7380::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7351#7366::UInt64
  ####rabs#7352#7367::Int64
  ####idx#7353#7368::Int64
  ####x#7354#7369::Float64
  ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7371::Float64
  ##_var0#7372::Float64
  ########tup#7073#7088#7092#7373::Tuple{}
  ########x#7074#7089#7093#7374::Float64
  ######_var0#7090#7094#7375::Tuple{}
  ########types#7087#7091#7095#7376::Tuple{Type{Float64}}
  ######a#7096#7098#7377::Tuple{}
  ######b#7097#7099#7378::Tuple{}
  ####_var0#7100#7379::Tuple{}
  ##exp_a#7380::Float64
  ####G#7101#7381::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7382::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7383::Tuple{}
  ##########x#7074#7076#7080#7104#7384::Float64
  ########_var0#7077#7081#7105#7385::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7370 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7370 = false
      2: 
      ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7371 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7366 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7371::Float64),0x000fffffffffffff))
      ####rabs#7352#7367 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7366::UInt64,1))))
      ####idx#7353#7368 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7367::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7366::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7367::Int64)),####rabs#7352#7367::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7367::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7367::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7372 = ####x#7354#7369::Float64
      goto 5
      4: 
      ##_var0#7372 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7368::Int64,####rabs#7352#7367::Int64,####x#7354#7369::Float64)::Float64
      goto 5
      ##_var0#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7372::Float64
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7375 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7379 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7380 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7381 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7385 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7380::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####r#7351#7366::UInt64
  ####rabs#7352#7367::Int64
  ####idx#7353#7368::Int64
  ####x#7354#7369::Float64
  ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
  ############_var0#7341#7342#7344#7350#7356#7371::Float64
  ##_var0#7372::Float64
  ########tup#7073#7088#7092#7373::Tuple{}
  ########x#7074#7089#7093#7374::Float64
  ######_var0#7090#7094#7375::Tuple{}
  ########types#7087#7091#7095#7376::Tuple{Type{Float64}}
  ######a#7096#7098#7377::Tuple{}
  ######b#7097#7099#7378::Tuple{}
  ####_var0#7100#7379::Tuple{}
  ##exp_a#7380::Float64
  ####G#7101#7381::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7072#7078#7102#7382::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7073#7075#7079#7103#7383::Tuple{}
  ##########x#7074#7076#7080#7104#7384::Float64
  ########_var0#7077#7081#7105#7385::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 119:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ########_var0#7343#7349#7355#7370 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ########_var0#7343#7349#7355#7370 = false
      2: 
      ########_var0#7343#7349#7355#7370::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7341#7342#7344#7350#7356#7371 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ############_var0#7341#7342#7344#7350#7356#7371 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      ####r#7351#7366 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7341#7342#7344#7350#7356#7371::Float64),0x000fffffffffffff))
      ####rabs#7352#7367 = (Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.lshr_int)(####r#7351#7366::UInt64,1))))
      ####idx#7353#7368 = (Base.box)(Int64,(Base.and_int)(####rabs#7352#7367::Int64,(Base.box)(Int64,(Base.zext_int)(Int64,0xff))))
      ####x#7354#7369 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.box)(Base.Bool,(Base.not_int)((Base.box)(Base.Bool,(Base.and_int)((Base.sle_int)(0,0)::Bool,(Base.box)(UInt64,(Base.and_int)(####r#7351#7366::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))) === (Base.box)(UInt64,0)::Bool)))),(Base.box)(Int64,(Base.neg_int)(####rabs#7352#7367::Int64)),####rabs#7352#7367::Int64)::Int64)),(Base.arrayref)(Base.Random.wi,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::Float64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.slt_int)(####rabs#7352#7367::Int64,0)::Bool,(Base.ult_int)((Base.box)(UInt64,####rabs#7352#7367::Int64),(Base.arrayref)(Base.Random.ki,(Base.box)(Base.Int,(Base.add_int)(####idx#7353#7368::Int64,1)))::UInt64)::Bool)) goto 4
      ##_var0#7372 = ####x#7354#7369::Float64
      goto 5
      4: 
      ##_var0#7372 = (Base.Random.randn_unlikely)(Base.Random.GLOBAL_RNG,####idx#7353#7368::Int64,####rabs#7352#7367::Int64,####x#7354#7369::Float64)::Float64
      goto 5
      ##_var0#7372 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(2) = ##_var0#7372::Float64
      $(Expr(:boundscheck, false))
      ######_var0#7090#7094#7375 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7090#7094#7375 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      $(Expr(:boundscheck, false))
      ####_var0#7100#7379 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7100#7379 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      ##exp_a#7380 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(2)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7101#7381 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7105#7385 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7077#7081#7105#7385 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7380::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64)),GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(4),GenSym(4))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),0.3989422804014327)),GenSym(3))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64)),GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(4),GenSym(4))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),0.3989422804014327)),GenSym(3))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##div_a#7467::Float64
  ######tup#7420#7422#7468::Tuple{}
  ######x#7421#7423#7469::Int64
  ####_var0#7424#7470::Tuple{}
  ######types#7087#7425#7471::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (Distributions.normpdf)((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##div_a#7467 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7424#7470 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7424#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.LogNormal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64)),GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(4),GenSym(4))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),0.3989422804014327)),GenSym(3))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.LogNormal{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (top(getfield))(d::Distributions.LogNormal{Float64},:σ)::Float64
      GenSym(4) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(top(getfield))(d::Distributions.LogNormal{Float64},:μ)::Float64)),GenSym(3)))
      GenSym(6) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(4),GenSym(4))))),(Base.box)(Float64,(Base.sitofp)(Float64,2)))),0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(GenSym(6),0.3989422804014327)),GenSym(3))),(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##div_a#7467::Float64
  ######tup#7420#7422#7468::Tuple{}
  ######x#7421#7423#7469::Int64
  ####_var0#7424#7470::Tuple{}
  ######types#7087#7425#7471::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (Distributions.normpdf)((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##div_a#7467 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7424#7470 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7424#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##div_a#7467::Float64
  ######tup#7420#7422#7468::Tuple{}
  ######x#7421#7423#7469::Int64
  ####_var0#7424#7470::Tuple{}
  ######types#7087#7425#7471::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (Distributions.normpdf)((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##div_a#7467 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7424#7470 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7424#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##div_a#7467::Float64
  ######tup#7420#7422#7468::Tuple{}
  ######x#7421#7423#7469::Int64
  ####_var0#7424#7470::Tuple{}
  ######types#7087#7425#7471::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (Distributions.normpdf)((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##div_a#7467 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7424#7470 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7424#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##div_a#7467::Float64
  ######tup#7420#7422#7468::Tuple{}
  ######x#7421#7423#7469::Int64
  ####_var0#7424#7470::Tuple{}
  ######types#7087#7425#7471::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/lognormal.jl, line 88:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      GenSym(3) = (Distributions.normpdf)((top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.LogNormal{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##div_a#7467 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(3),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))))
      $(Expr(:boundscheck, false))
      ####_var0#7424#7470 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7424#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7467::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





