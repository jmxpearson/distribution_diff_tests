____________________________
ntrials
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 30:
      return (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
  end::Int64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 30:
      return (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
  end::Int64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 30:
      return (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
  end::Int64




____________________________
succprob
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 31:
      return (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 31:
      return (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 31:
      return (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
failprob
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 32:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 32:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ######tup#7064#7066#7069::Tuple{}
  ####_var0#7067#7070::Tuple{}
  ######types#7065#7068#7071::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 32:
      $(Expr(:boundscheck, false))
      ####_var0#7067#7070 = (top(tuple))()::Tuple{}
      goto 1
      ####_var0#7067#7070 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))((top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
params
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64)::Tuple{Int64,Float64}
  end::Tuple{Int64,Float64}

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64,(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64)::Tuple{Int64,Float64}
  end::Tuple{Int64,Float64}

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 34:
      return (top(tuple))((top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{Int64,ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 39:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 39:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7073#7075#7079#7083::Tuple{}
  ########x#7074#7076#7080#7084::Int64
  ######_var0#7077#7081#7085::Tuple{}
  ########types#7065#7078#7082#7086::Tuple{Type{Int64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 39:
      $(Expr(:boundscheck, false))
      ######_var0#7077#7081#7085 = (top(tuple))()::Tuple{}
      goto 3
      ######_var0#7077#7081#7085 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  ##xs#7087::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 40:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}
  ##xs#7087::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 40:
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64)),(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##xs#7108::Tuple{}
  ##########tup#7073#7075#7079#7097#7109::Tuple{}
  ##########x#7074#7076#7080#7098#7110::Int64
  ########_var0#7077#7081#7099#7111::Tuple{}
  ##########types#7065#7078#7082#7100#7112::Tuple{Type{Int64}}
  ####a1#7101#7113::Float64
  ####a2#7102#7114::Float64
  ########a#7088#7092#7103#7115::Tuple{}
  ########b#7089#7093#7104#7116::Tuple{}
  ########afactor#7090#7094#7105#7117::Float64
  ########bfactor#7091#7095#7106#7118::Float64
  ######_var0#7096#7107#7119::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 40:
      GenSym(0) = (Distributions.failprob)(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7099#7111 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7077#7081#7099#7111 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(1) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(2) = (top(getfield))(GenSym(0),:value)::Float64
      ####a1#7101#7113 = GenSym(1)
      ####a2#7102#7114 = GenSym(2)
      $(Expr(:boundscheck, false))
      ######_var0#7096#7107#7119 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7096#7107#7119 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7101#7113::Float64,####a2#7102#7114::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  n::Int64
  p::Float64
  #s8::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 41:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(7)
      #s8 = GenSym(8)
      unless (Base.slt_int)(0,n::Int64)::Bool goto 0
      return (Distributions.round)(Distributions.Int,(Base.box)(Base.Int,(Base.add_int)(n::Int64,1)) * (top(getfield))(d::Distributions.Binomial{Float64},:prob)::UNION{}::UNION{})::UNION{}
      0: 
      return 0
  end::Int64

----float----

Variables:
  d::Distributions.Binomial{Float64}
  n::Int64
  p::Float64
  #s8::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 41:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(7)
      #s8 = GenSym(8)
      unless (Base.slt_int)(0,n::Int64)::Bool goto 0
      return (Distributions.round)(Distributions.Int,(Base.box)(Base.Int,(Base.add_int)(n::Int64,1)) * (top(getfield))(d::Distributions.Binomial{Float64},:prob)::UNION{}::UNION{})::UNION{}
      0: 
      return 0
  end::Int64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s8::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 41:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(7)
      #s8 = GenSym(8)
      unless (Base.slt_int)(0,n::Int64)::Bool goto 0
      return (Distributions.round)(Distributions.Int,(Base.box)(Base.Int,(Base.add_int)(n::Int64,1)) * (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:prob)::UNION{}::UNION{})::UNION{}
      0: 
      return 0
  end::Int64




____________________________
modes
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 42:
      return (Distributions.getindex)(Distributions.Int,(Distributions.mode)(d::Distributions.Binomial{Float64})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 42:
      return (Distributions.getindex)(Distributions.Int,(Distributions.mode)(d::Distributions.Binomial{Float64})::Int64)::Array{Int64,1}
  end::Array{Int64,1}

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 42:
      return (Distributions.getindex)(Distributions.Int,(Distributions.mode)(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::Int64)::Array{Int64,1}
  end::Array{Int64,1}




____________________________
median
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 44:
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64)))))::Int64
  end::Int64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 44:
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64)),(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64)))))::Int64
  end::Int64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 44:
      GenSym(0) = (Distributions.mean)(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      return (Base.trunc)(Int64,(Base.box)(Base.Float64,(Base.rint_llvm)((top(getfield))(GenSym(0),:value)::Float64)))::Int64
  end::Int64




____________________________
skewness
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  n::Int64
  p1::Float64
  #s8::Int64
  p0::Float64
  ##xs#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 47:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p1 = GenSym(7)
      #s8 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 48:
      p0 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,p1::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 49:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p0::Float64,p1::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),p0::Float64)),p1::Float64))))::Float64))
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}
  n::Int64
  p1::Float64
  #s8::Int64
  p0::Float64
  ##xs#7127::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 47:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p1 = GenSym(7)
      #s8 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 48:
      p0 = (Base.box)(Base.Float64,(Base.sub_float)(1.0,p1::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 49:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(p0::Float64,p1::Float64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),p0::Float64)),p1::Float64))))::Float64))
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s8::Int64
  p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7064#7130#7167::Tuple{}
  ####_var0#7131#7168::Tuple{}
  ######types#7129#7132#7169::Tuple{Type{Float64}}
  ##xs#7170::Tuple{}
  ##########tup#7073#7075#7079#7097#7171::Tuple{}
  ##########x#7074#7076#7080#7098#7172::Int64
  ########_var0#7077#7081#7099#7173::Tuple{}
  ##########types#7065#7078#7082#7100#7174::Tuple{Type{Int64}}
  ####a1#7101#7175::Float64
  ####a2#7102#7176::Float64
  ########a#7088#7092#7103#7177::Tuple{}
  ########b#7089#7093#7104#7178::Tuple{}
  ########afactor#7090#7094#7105#7179::Float64
  ########bfactor#7091#7095#7106#7180::Float64
  ######_var0#7096#7107#7181::Tuple{}
  ##sqrt_a#7182::Float64
  ##deriv#7183::Float64
  ####G#7148#7184::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7138#7144#7149#7185::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7139#7141#7145#7150#7186::Tuple{}
  ##########x#7140#7142#7146#7151#7187::Float64
  ########_var0#7143#7147#7152#7188::Tuple{}
  ######a#7133#7135#7189::Tuple{}
  ######b#7134#7136#7190::Tuple{}
  ####_var0#7137#7191::Tuple{}
  ##a1#7192::Float64
  ##a2#7193::Float64
  ##div_a#7194::Float64
  ####afactor#7159#7195::Float64
  ####bfactor#7160#7196::Float64
  ########a#7088#7153#7161#7197::Tuple{}
  ########b#7089#7154#7162#7198::Tuple{}
  ########afactor#7090#7155#7163#7199::Float64
  ########bfactor#7091#7156#7164#7200::Float64
  ######_var0#7157#7165#7201::Tuple{}
  ######types#7158#7166#7202::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 47:
      GenSym(9) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(10) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s8 = 1
      GenSym(11) = GenSym(9)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(11)
      #s8 = GenSym(12)
      GenSym(13) = GenSym(10)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p1 = GenSym(13)
      #s8 = GenSym(14) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 48:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7168 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7131#7168 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      p0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 49:
      $(Expr(:boundscheck, false))
      ####_var0#7137#7191 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7137#7191 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ########_var0#7077#7081#7099#7173 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7077#7081#7099#7173 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7101#7175 = GenSym(3)
      ####a2#7102#7176 = GenSym(4)
      $(Expr(:boundscheck, false))
      ######_var0#7096#7107#7181 = (top(tuple))()::Tuple{}
      goto 8
      ######_var0#7096#7107#7181 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7101#7175::Float64,####a2#7102#7176::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##sqrt_a#7182 = (Base.Math.box)(Base.Math.Float64,(Base.Math.sqrt_llvm)((top(getfield))(GenSym(5),:value)::Float64)::ANY)::Float64
      ##deriv#7183 = (Base.box)(Base.Float64,(Base.div_float)(0.5,##sqrt_a#7182::Float64))
      ####G#7148#7184 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7143#7147#7152#7188 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7143#7147#7152#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##sqrt_a#7182::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(p0::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(p1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7192 = GenSym(7)
      ##a2#7193 = GenSym(8)
      ##div_a#7194 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7192::Float64,##a2#7193::Float64))
      ####afactor#7159#7195 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7193::Float64))
      ####bfactor#7160#7196 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7192::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7193::Float64,##a2#7193::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7157#7165#7201 = (top(tuple))()::Tuple{}
      goto 14
      ######_var0#7157#7165#7201 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7194::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  n::Int64
  p::Float64
  #s8::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 53:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(7)
      #s8 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 54:
      u = (Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 55:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(6.0,u::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),u::Float64))))
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}
  n::Int64
  p::Float64
  #s8::Int64
  u::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 53:
      GenSym(3) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(4) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s8 = 1
      GenSym(5) = GenSym(3)
      GenSym(6) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(5)
      #s8 = GenSym(6)
      GenSym(7) = GenSym(4)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(7)
      #s8 = GenSym(8) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 54:
      u = (Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(Base.box)(Base.Float64,(Base.sub_float)(1.0,p::Float64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 55:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(6.0,u::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),u::Float64))))
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  n::Int64
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s8::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7064#7130#7213::Tuple{}
  ####_var0#7131#7214::Tuple{}
  ######types#7129#7132#7215::Tuple{Type{Float64}}
  ##a1#7216::Float64
  ##a2#7217::Float64
  ######a#7088#7092#7218::Tuple{}
  ######b#7089#7093#7219::Tuple{}
  ######afactor#7090#7094#7220::Float64
  ######bfactor#7091#7095#7221::Float64
  ####_var0#7096#7222::Tuple{}
  ########tup#7073#7075#7079#7223::Tuple{}
  ########x#7074#7076#7080#7224::Int64
  ######_var0#7077#7081#7225::Tuple{}
  ########types#7065#7078#7082#7226::Tuple{Type{Int64}}
  ########tup#7139#7205#7209#7227::Tuple{}
  ########x#7140#7206#7210#7228::Float64
  ######_var0#7207#7211#7229::Tuple{}
  ########types#7129#7208#7212#7230::Tuple{Type{Float64}}
  ######tup#7064#7130#7231::Tuple{}
  ####_var0#7131#7232::Tuple{}
  ######types#7129#7132#7233::Tuple{Type{Float64}}
  ##a1#7234::Float64
  ##a2#7235::Float64
  ##div_a#7236::Float64
  ####afactor#7159#7237::Float64
  ####bfactor#7160#7238::Float64
  ########a#7088#7153#7161#7239::Tuple{}
  ########b#7089#7154#7162#7240::Tuple{}
  ########afactor#7090#7155#7163#7241::Float64
  ########bfactor#7091#7156#7164#7242::Float64
  ######_var0#7157#7165#7243::Tuple{}
  ######types#7158#7166#7244::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 53:
      GenSym(7) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(8) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s8 = 1
      GenSym(9) = GenSym(7)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(9)
      #s8 = GenSym(10)
      GenSym(11) = GenSym(8)
      GenSym(12) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(11)
      #s8 = GenSym(12) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 54:
      $(Expr(:boundscheck, false))
      ####_var0#7131#7214 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7131#7214 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(3) = (top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(4) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7216 = GenSym(3)
      ##a2#7217 = GenSym(4)
      $(Expr(:boundscheck, false))
      ####_var0#7096#7222 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7096#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7216::Float64,##a2#7217::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 55:
      $(Expr(:boundscheck, false))
      ######_var0#7207#7211#7229 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7207#7211#7229 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      $(Expr(:boundscheck, false))
      ####_var0#7131#7232 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7131#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7077#7081#7225 = (top(tuple))()::Tuple{}
      goto 9
      ######_var0#7077#7081#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(5) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,6.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,n::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7234 = GenSym(5)
      ##a2#7235 = GenSym(6)
      ##div_a#7236 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7234::Float64,##a2#7235::Float64))
      ####afactor#7159#7237 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7235::Float64))
      ####bfactor#7160#7238 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7234::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7235::Float64,##a2#7235::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7157#7165#7243 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7157#7165#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7236::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin $(Expr(:line, 59, symbol("/Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl"), symbol("")))
      return (Distributions.__entropy#0__)(false,d::Distributions.Binomial{Float64})::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin $(Expr(:line, 59, symbol("/Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl"), symbol("")))
      return (Distributions.__entropy#0__)(false,d::Distributions.Binomial{Float64})::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin $(Expr(:line, 59, symbol("/Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl"), symbol("")))
      return (Distributions.__entropy#0__)(false,d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 81:
      GenSym(48) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64))
      GenSym(50) = (top(ccall))((top(tuple))("rbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(48),0,(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(50)))
  end::Int64

----float----

Variables:
  d::Distributions.Binomial{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 81:
      GenSym(48) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64))
      GenSym(50) = (top(ccall))((top(tuple))("rbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble)::SimpleVector,GenSym(48),0,(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64,0)::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(50)))
  end::Int64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 81:
      GenSym(0) = ((top(getfield))((top(getfield))(Distributions.StatsFuns,:Rmath)::ANY,:binomrand)::F)((top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Float64
      return (Base.box)(Int64,(Base.checked_fptosi)(Int64,GenSym(0)))
  end::Int64




____________________________
pdf
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 331:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(1) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,GenSym(1),0,(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64,0,GenSym(3),0)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 331:
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,x::Int64))
      GenSym(1) = (Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64))
      GenSym(3) = (Base.box)(Int32,(Base.checked_trunc_sint)(Int32,0))
      return (top(ccall))((top(tuple))("dbinom",StatsFuns.Rmath.rmathlib)::Tuple{ASCIIString,ASCIIString},StatsFuns.Rmath.Float64,(top(svec))(StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cdouble,StatsFuns.Rmath.Cint)::SimpleVector,GenSym(0),0,GenSym(1),0,(top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64,0,GenSym(3),0)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 331:
      return (Distributions.binompdf)((top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64,(top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},x::Int64)::Float64
  end::Float64




____________________________
mgf
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  t::Int64
  n::Int64
  p::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 122:
      GenSym(5) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(6) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 123:
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),p::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,GenSym(4))))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,n::Int64)))::ANY)::Float64
  end::Float64

----float----

Variables:
  d::Distributions.Binomial{Float64}
  t::Int64
  n::Int64
  p::Float64
  #s25::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 122:
      GenSym(5) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(6) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 123:
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      return (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),p::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(p::Float64,GenSym(4))))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,n::Int64)))::ANY)::Float64
  end::Float64

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  n::Int64
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######tup#7139#7205#7367::Tuple{}
  ######x#7140#7206#7368::Float64
  ####_var0#7207#7369::Tuple{}
  ######types#7129#7208#7370::Tuple{Type{Float64}}
  ######a#7133#7135#7371::Tuple{}
  ######b#7134#7136#7372::Tuple{}
  ####_var0#7137#7373::Tuple{}
  ######a#7269#7271#7374::Tuple{}
  ######b#7270#7272#7375::Tuple{}
  ####_var0#7273#7376::Tuple{}
  ##a#7377::Float64
  ##exp_a#7378::Float64
  ##deriv#7379::Float64
  ####G#7362#7380::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7138#7144#7363#7381::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7139#7141#7145#7364#7382::Tuple{}
  ##########x#7140#7142#7146#7365#7383::Float64
  ########_var0#7143#7147#7366#7384::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 122:
      GenSym(5) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(6) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(7) = GenSym(5)
      GenSym(8) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(7)
      #s25 = GenSym(8)
      GenSym(9) = GenSym(6)
      GenSym(10) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(9)
      #s25 = GenSym(10) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 123:
      $(Expr(:boundscheck, false))
      ####_var0#7137#7373 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7137#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(4) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),0)::Float64
      $(Expr(:boundscheck, false))
      ####_var0#7207#7369 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7207#7369 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      $(Expr(:boundscheck, false))
      ####_var0#7273#7376 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7273#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      ##a#7377 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,GenSym(4)))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7378 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7377::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,n::Int64)))::ANY)::Float64
      ##deriv#7379 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,n::Int64)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7377::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(n::Int64,1))))))::Float64))
      ####G#7362#7380 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7143#7147#7366#7384 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7143#7147#7366#7384 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7378::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

----integer----

Variables:
  d::Distributions.Binomial{Float64}
  t::Int64
  n::Int64
  p::Float64
  #s25::Int64
  _var0::Complex{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 127:
      GenSym(12) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(13) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 128:
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:im)::Float64)))))
      GenSym(11) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),p::Float64)),(top(getfield))(GenSym(10),:re)::Float64))), :((top(getfield))(GenSym(10),:im)::Float64)))
      unless (Base.sle_int)(0,n::Int64)::Bool goto 10
      _var0 = (Base.power_by_squaring)(GenSym(11),n::Int64)::Complex{Float64}
      goto 11
      10: 
      _var0 = (Base.power_by_squaring)((Base.inv)(GenSym(11))::Complex{Float64},(Base.box)(Int64,(Base.neg_int)(n::Int64)))::Complex{Float64}
      11: 
      return _var0::Complex{Float64}
  end::Complex{Float64}

----float----

Variables:
  d::Distributions.Binomial{Float64}
  t::Int64
  n::Int64
  p::Float64
  #s25::Int64
  _var0::Complex{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 127:
      GenSym(12) = (top(getfield))(d::Distributions.Binomial{Float64},:n)::Int64
      GenSym(13) = (top(getfield))(d::Distributions.Binomial{Float64},:p)::Float64
      #s25 = 1
      GenSym(14) = GenSym(12)
      GenSym(15) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(14)
      #s25 = GenSym(15)
      GenSym(16) = GenSym(13)
      GenSym(17) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(16)
      #s25 = GenSym(17) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 128:
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(p::Float64,(top(getfield))(GenSym(9),:im)::Float64)))))
      GenSym(11) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),p::Float64)),(top(getfield))(GenSym(10),:re)::Float64))), :((top(getfield))(GenSym(10),:im)::Float64)))
      unless (Base.sle_int)(0,n::Int64)::Bool goto 10
      _var0 = (Base.power_by_squaring)(GenSym(11),n::Int64)::Complex{Float64}
      goto 11
      10: 
      _var0 = (Base.power_by_squaring)((Base.inv)(GenSym(11))::Complex{Float64},(Base.box)(Int64,(Base.neg_int)(n::Int64)))::Complex{Float64}
      11: 
      return _var0::Complex{Float64}
  end::Complex{Float64}

----dual----

Variables:
  d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  n::Int64
  p::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  #s25::Int64
  ######a#7133#7135#7586::Tuple{}
  ######b#7134#7136#7587::Tuple{}
  ####_var0#7137#7588::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 127:
      GenSym(11) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:n)::Int64
      GenSym(12) = (top(getfield))(d::Distributions.Binomial{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:p)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      #s25 = 1
      GenSym(13) = GenSym(11)
      GenSym(14) = (Base.box)(Base.Int,(Base.add_int)(1,1))
      n = GenSym(13)
      #s25 = GenSym(14)
      GenSym(15) = GenSym(12)
      GenSym(16) = (Base.box)(Base.Int,(Base.add_int)(2,1))
      p = GenSym(15)
      #s25 = GenSym(16) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/discrete/binomial.jl, line 128:
      $(Expr(:boundscheck, false))
      ####_var0#7137#7588 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7137#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(8) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      GenSym(3) = (Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))
      GenSym(5) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(p::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + p::ForwardDiff.GradientNumber{0,Float64,Tuple{}} * $(Expr(:new, Complex{Float64}, :((Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64), :((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64)))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(10) = $(Expr(:new, Complex{Int64}, :(n::Int64), 0))
      return $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :((top(getfield))(GenSym(9),:re)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}), :((top(getfield))(GenSym(9),:im)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}))) ^ $(Expr(:new, Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}, :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:re)::Int64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))), :($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(GenSym(10),:im)::Int64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




