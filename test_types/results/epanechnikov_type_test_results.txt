____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 31:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7125::Float64
  ##exp_a#7126::Float64
  ##deriv#7127::Float64
  ####G#7113#7128::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7129::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7130::Tuple{}
  ##########x#7105#7107#7111#7116#7131::Float64
  ########_var0#7108#7112#7117#7132::Tuple{}
  ##div_a#7133::Float64
  ######tup#7118#7121#7134::Tuple{}
  ######x#7119#7122#7135::Int64
  ####_var0#7123#7136::Tuple{}
  ######types#7120#7124#7137::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      ##a#7125 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7126 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7127 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7128 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7132 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7108#7112#7117#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7126::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7133 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7123#7136 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7123#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7133::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7125::Float64
  ##exp_a#7126::Float64
  ##deriv#7127::Float64
  ####G#7113#7128::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7129::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7130::Tuple{}
  ##########x#7105#7107#7111#7116#7131::Float64
  ########_var0#7108#7112#7117#7132::Tuple{}
  ##div_a#7133::Float64
  ######tup#7118#7121#7134::Tuple{}
  ######x#7119#7122#7135::Int64
  ####_var0#7123#7136::Tuple{}
  ######types#7120#7124#7137::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      ##a#7125 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7126 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7127 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7128 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7132 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7108#7112#7117#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7126::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7133 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7123#7136 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7123#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7133::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7125::Float64
  ##exp_a#7126::Float64
  ##deriv#7127::Float64
  ####G#7113#7128::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7129::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7130::Tuple{}
  ##########x#7105#7107#7111#7116#7131::Float64
  ########_var0#7108#7112#7117#7132::Tuple{}
  ##div_a#7133::Float64
  ######tup#7118#7121#7134::Tuple{}
  ######x#7119#7122#7135::Int64
  ####_var0#7123#7136::Tuple{}
  ######types#7120#7124#7137::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      ##a#7125 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7126 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7127 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7128 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7132 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7108#7112#7117#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7126::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7133 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7123#7136 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7123#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7133::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7125::Float64
  ##exp_a#7126::Float64
  ##deriv#7127::Float64
  ####G#7113#7128::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7129::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7130::Tuple{}
  ##########x#7105#7107#7111#7116#7131::Float64
  ########_var0#7108#7112#7117#7132::Tuple{}
  ##div_a#7133::Float64
  ######tup#7118#7121#7134::Tuple{}
  ######x#7119#7122#7135::Int64
  ####_var0#7123#7136::Tuple{}
  ######types#7120#7124#7137::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      ##a#7125 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7126 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7127 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7128 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7132 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7108#7112#7117#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7126::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7133 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7123#7136 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7123#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7133::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7125::Float64
  ##exp_a#7126::Float64
  ##deriv#7127::Float64
  ####G#7113#7128::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7129::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7130::Tuple{}
  ##########x#7105#7107#7111#7116#7131::Float64
  ########_var0#7108#7112#7117#7132::Tuple{}
  ##div_a#7133::Float64
  ######tup#7118#7121#7134::Tuple{}
  ######x#7119#7122#7135::Int64
  ####_var0#7123#7136::Tuple{}
  ######types#7120#7124#7137::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      ##a#7125 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7126 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7127 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7125::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7128 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7132 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7108#7112#7117#7132 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7126::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7133 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7123#7136 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7123#7136 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7133::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 35:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 39:
      return 0.0
  end::Float64




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 40:
      return -2.914285714285714
  end::Float64




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7151#7156::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7157::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7156 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7156 = false
      2: 
      ####_var0#7151#7156::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7157 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7157::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7151#7156::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7157::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7156 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7156 = false
      2: 
      ####_var0#7151#7156::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7157 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7157::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7151#7334::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7335::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7334 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7334 = false
      2: 
      ####_var0#7151#7334::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7335 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7335::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7151#7156::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7157::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7156 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7156 = false
      2: 
      ####_var0#7151#7156::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7157 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7157::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7151#7156::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7157::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7156 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7156 = false
      2: 
      ####_var0#7151#7156::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7157 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7157 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7157::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7151#7334::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7335::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7334 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7334 = false
      2: 
      ####_var0#7151#7334::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7335 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7335::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7151#7334::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7335::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7334 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7334 = false
      2: 
      ####_var0#7151#7334::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7335 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7335::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7151#7334::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7335::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7334 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7334 = false
      2: 
      ####_var0#7151#7334::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7335 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7335::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7151#7334::UNION{BOOL,INT64}
  ########_var0#7149#7150#7152#7335::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7151#7334 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7151#7334 = false
      2: 
      ####_var0#7151#7334::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7149#7150#7152#7335 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7149#7150#7152#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7149#7150#7152#7335::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7336::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      ####fx#4193#7336 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7336::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7336::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7336::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      ####fx#4193#7336 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7336::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7336::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7192#7247#7337::Tuple{}
  ####_var0#7248#7338::Tuple{}
  ######types#7246#7249#7339::Tuple{Type{Int64}}
  ########tup#7192#7242#7244#7340::Tuple{}
  ######_var0#7243#7245#7341::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7342::Float64
  ##a2#7343::Float64
  ##div_a#7344::Float64
  ####afactor#7173#7345::Float64
  ####bfactor#7174#7346::Float64
  ########a#7163#7167#7175#7347::Tuple{}
  ########b#7164#7168#7176#7348::Tuple{}
  ########afactor#7165#7169#7177#7349::Float64
  ########bfactor#7166#7170#7178#7350::Float64
  ######_var0#7171#7179#7351::Tuple{}
  ######types#7172#7180#7352::Tuple{Type{Float64}}
  ######fx#7182#7183#7353::Float64
  ##a#7354::Float64
  ##exp_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7113#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7359::Tuple{}
  ##########x#7105#7107#7111#7116#7360::Float64
  ########_var0#7108#7112#7117#7361::Tuple{}
  ######tup#7192#7247#7362::Tuple{}
  ####_var0#7248#7363::Tuple{}
  ######types#7246#7249#7364::Tuple{Type{Int64}}
  ########tup#7104#7184#7188#7365::Tuple{}
  ########x#7105#7185#7189#7366::Float64
  ######_var0#7186#7190#7367::Tuple{}
  ########types#7120#7187#7191#7368::Tuple{Type{Float64}}
  ##a1#7369::Float64
  ##a2#7370::Float64
  ##div_a#7371::Float64
  ####afactor#7173#7372::Float64
  ####bfactor#7174#7373::Float64
  ########a#7163#7167#7175#7374::Tuple{}
  ########b#7164#7168#7176#7375::Tuple{}
  ########afactor#7165#7169#7177#7376::Float64
  ########bfactor#7166#7170#7178#7377::Float64
  ######_var0#7171#7179#7378::Tuple{}
  ######types#7172#7180#7379::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7338 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7248#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7243#7245#7341 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7243#7245#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7342 = GenSym(2)
      ##a2#7343 = GenSym(3)
      ##div_a#7344 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7342::Float64,##a2#7343::Float64))
      ####afactor#7173#7345 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7343::Float64))
      ####bfactor#7174#7346 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7342::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7343::Float64,##a2#7343::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7351 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7171#7179#7351 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7344::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7182#7183#7353 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7182#7183#7353::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7354 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7355 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7361 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7108#7112#7117#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7248#7363 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7248#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7186#7190#7367 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7186#7190#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7369 = GenSym(6)
      ##a2#7370 = GenSym(7)
      ##div_a#7371 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7369::Float64,##a2#7370::Float64))
      ####afactor#7173#7372 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7370::Float64))
      ####bfactor#7174#7373 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7369::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7370::Float64,##a2#7370::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7378 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7171#7179#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7371::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7336::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      ####fx#4193#7336 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7336::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7336::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7336::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      ####fx#4193#7336 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7336::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7336::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7336::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7192#7247#7337::Tuple{}
  ####_var0#7248#7338::Tuple{}
  ######types#7246#7249#7339::Tuple{Type{Int64}}
  ########tup#7192#7242#7244#7340::Tuple{}
  ######_var0#7243#7245#7341::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7342::Float64
  ##a2#7343::Float64
  ##div_a#7344::Float64
  ####afactor#7173#7345::Float64
  ####bfactor#7174#7346::Float64
  ########a#7163#7167#7175#7347::Tuple{}
  ########b#7164#7168#7176#7348::Tuple{}
  ########afactor#7165#7169#7177#7349::Float64
  ########bfactor#7166#7170#7178#7350::Float64
  ######_var0#7171#7179#7351::Tuple{}
  ######types#7172#7180#7352::Tuple{Type{Float64}}
  ######fx#7182#7183#7353::Float64
  ##a#7354::Float64
  ##exp_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7113#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7359::Tuple{}
  ##########x#7105#7107#7111#7116#7360::Float64
  ########_var0#7108#7112#7117#7361::Tuple{}
  ######tup#7192#7247#7362::Tuple{}
  ####_var0#7248#7363::Tuple{}
  ######types#7246#7249#7364::Tuple{Type{Int64}}
  ########tup#7104#7184#7188#7365::Tuple{}
  ########x#7105#7185#7189#7366::Float64
  ######_var0#7186#7190#7367::Tuple{}
  ########types#7120#7187#7191#7368::Tuple{Type{Float64}}
  ##a1#7369::Float64
  ##a2#7370::Float64
  ##div_a#7371::Float64
  ####afactor#7173#7372::Float64
  ####bfactor#7174#7373::Float64
  ########a#7163#7167#7175#7374::Tuple{}
  ########b#7164#7168#7176#7375::Tuple{}
  ########afactor#7165#7169#7177#7376::Float64
  ########bfactor#7166#7170#7178#7377::Float64
  ######_var0#7171#7179#7378::Tuple{}
  ######types#7172#7180#7379::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7338 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7248#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7243#7245#7341 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7243#7245#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7342 = GenSym(2)
      ##a2#7343 = GenSym(3)
      ##div_a#7344 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7342::Float64,##a2#7343::Float64))
      ####afactor#7173#7345 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7343::Float64))
      ####bfactor#7174#7346 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7342::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7343::Float64,##a2#7343::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7351 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7171#7179#7351 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7344::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7182#7183#7353 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7182#7183#7353::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7354 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7355 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7361 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7108#7112#7117#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7248#7363 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7248#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7186#7190#7367 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7186#7190#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7369 = GenSym(6)
      ##a2#7370 = GenSym(7)
      ##div_a#7371 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7369::Float64,##a2#7370::Float64))
      ####afactor#7173#7372 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7370::Float64))
      ####bfactor#7174#7373 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7369::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7370::Float64,##a2#7370::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7378 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7171#7179#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7371::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7192#7247#7337::Tuple{}
  ####_var0#7248#7338::Tuple{}
  ######types#7246#7249#7339::Tuple{Type{Int64}}
  ########tup#7192#7242#7244#7340::Tuple{}
  ######_var0#7243#7245#7341::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7342::Float64
  ##a2#7343::Float64
  ##div_a#7344::Float64
  ####afactor#7173#7345::Float64
  ####bfactor#7174#7346::Float64
  ########a#7163#7167#7175#7347::Tuple{}
  ########b#7164#7168#7176#7348::Tuple{}
  ########afactor#7165#7169#7177#7349::Float64
  ########bfactor#7166#7170#7178#7350::Float64
  ######_var0#7171#7179#7351::Tuple{}
  ######types#7172#7180#7352::Tuple{Type{Float64}}
  ######fx#7182#7183#7353::Float64
  ##a#7354::Float64
  ##exp_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7113#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7359::Tuple{}
  ##########x#7105#7107#7111#7116#7360::Float64
  ########_var0#7108#7112#7117#7361::Tuple{}
  ######tup#7192#7247#7362::Tuple{}
  ####_var0#7248#7363::Tuple{}
  ######types#7246#7249#7364::Tuple{Type{Int64}}
  ########tup#7104#7184#7188#7365::Tuple{}
  ########x#7105#7185#7189#7366::Float64
  ######_var0#7186#7190#7367::Tuple{}
  ########types#7120#7187#7191#7368::Tuple{Type{Float64}}
  ##a1#7369::Float64
  ##a2#7370::Float64
  ##div_a#7371::Float64
  ####afactor#7173#7372::Float64
  ####bfactor#7174#7373::Float64
  ########a#7163#7167#7175#7374::Tuple{}
  ########b#7164#7168#7176#7375::Tuple{}
  ########afactor#7165#7169#7177#7376::Float64
  ########bfactor#7166#7170#7178#7377::Float64
  ######_var0#7171#7179#7378::Tuple{}
  ######types#7172#7180#7379::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7338 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7248#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7243#7245#7341 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7243#7245#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7342 = GenSym(2)
      ##a2#7343 = GenSym(3)
      ##div_a#7344 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7342::Float64,##a2#7343::Float64))
      ####afactor#7173#7345 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7343::Float64))
      ####bfactor#7174#7346 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7342::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7343::Float64,##a2#7343::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7351 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7171#7179#7351 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7344::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7182#7183#7353 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7182#7183#7353::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7354 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7355 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7361 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7108#7112#7117#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7248#7363 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7248#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7186#7190#7367 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7186#7190#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7369 = GenSym(6)
      ##a2#7370 = GenSym(7)
      ##div_a#7371 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7369::Float64,##a2#7370::Float64))
      ####afactor#7173#7372 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7370::Float64))
      ####bfactor#7174#7373 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7369::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7370::Float64,##a2#7370::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7378 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7171#7179#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7371::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7192#7247#7337::Tuple{}
  ####_var0#7248#7338::Tuple{}
  ######types#7246#7249#7339::Tuple{Type{Int64}}
  ########tup#7192#7242#7244#7340::Tuple{}
  ######_var0#7243#7245#7341::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7342::Float64
  ##a2#7343::Float64
  ##div_a#7344::Float64
  ####afactor#7173#7345::Float64
  ####bfactor#7174#7346::Float64
  ########a#7163#7167#7175#7347::Tuple{}
  ########b#7164#7168#7176#7348::Tuple{}
  ########afactor#7165#7169#7177#7349::Float64
  ########bfactor#7166#7170#7178#7350::Float64
  ######_var0#7171#7179#7351::Tuple{}
  ######types#7172#7180#7352::Tuple{Type{Float64}}
  ######fx#7182#7183#7353::Float64
  ##a#7354::Float64
  ##exp_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7113#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7359::Tuple{}
  ##########x#7105#7107#7111#7116#7360::Float64
  ########_var0#7108#7112#7117#7361::Tuple{}
  ######tup#7192#7247#7362::Tuple{}
  ####_var0#7248#7363::Tuple{}
  ######types#7246#7249#7364::Tuple{Type{Int64}}
  ########tup#7104#7184#7188#7365::Tuple{}
  ########x#7105#7185#7189#7366::Float64
  ######_var0#7186#7190#7367::Tuple{}
  ########types#7120#7187#7191#7368::Tuple{Type{Float64}}
  ##a1#7369::Float64
  ##a2#7370::Float64
  ##div_a#7371::Float64
  ####afactor#7173#7372::Float64
  ####bfactor#7174#7373::Float64
  ########a#7163#7167#7175#7374::Tuple{}
  ########b#7164#7168#7176#7375::Tuple{}
  ########afactor#7165#7169#7177#7376::Float64
  ########bfactor#7166#7170#7178#7377::Float64
  ######_var0#7171#7179#7378::Tuple{}
  ######types#7172#7180#7379::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7338 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7248#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7243#7245#7341 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7243#7245#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7342 = GenSym(2)
      ##a2#7343 = GenSym(3)
      ##div_a#7344 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7342::Float64,##a2#7343::Float64))
      ####afactor#7173#7345 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7343::Float64))
      ####bfactor#7174#7346 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7342::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7343::Float64,##a2#7343::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7351 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7171#7179#7351 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7344::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7182#7183#7353 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7182#7183#7353::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7354 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7355 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7361 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7108#7112#7117#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7248#7363 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7248#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7186#7190#7367 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7186#7190#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7369 = GenSym(6)
      ##a2#7370 = GenSym(7)
      ##div_a#7371 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7369::Float64,##a2#7370::Float64))
      ####afactor#7173#7372 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7370::Float64))
      ####bfactor#7174#7373 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7369::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7370::Float64,##a2#7370::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7378 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7171#7179#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7371::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7192#7247#7337::Tuple{}
  ####_var0#7248#7338::Tuple{}
  ######types#7246#7249#7339::Tuple{Type{Int64}}
  ########tup#7192#7242#7244#7340::Tuple{}
  ######_var0#7243#7245#7341::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7342::Float64
  ##a2#7343::Float64
  ##div_a#7344::Float64
  ####afactor#7173#7345::Float64
  ####bfactor#7174#7346::Float64
  ########a#7163#7167#7175#7347::Tuple{}
  ########b#7164#7168#7176#7348::Tuple{}
  ########afactor#7165#7169#7177#7349::Float64
  ########bfactor#7166#7170#7178#7350::Float64
  ######_var0#7171#7179#7351::Tuple{}
  ######types#7172#7180#7352::Tuple{Type{Float64}}
  ######fx#7182#7183#7353::Float64
  ##a#7354::Float64
  ##exp_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7113#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7359::Tuple{}
  ##########x#7105#7107#7111#7116#7360::Float64
  ########_var0#7108#7112#7117#7361::Tuple{}
  ######tup#7192#7247#7362::Tuple{}
  ####_var0#7248#7363::Tuple{}
  ######types#7246#7249#7364::Tuple{Type{Int64}}
  ########tup#7104#7184#7188#7365::Tuple{}
  ########x#7105#7185#7189#7366::Float64
  ######_var0#7186#7190#7367::Tuple{}
  ########types#7120#7187#7191#7368::Tuple{Type{Float64}}
  ##a1#7369::Float64
  ##a2#7370::Float64
  ##div_a#7371::Float64
  ####afactor#7173#7372::Float64
  ####bfactor#7174#7373::Float64
  ########a#7163#7167#7175#7374::Tuple{}
  ########b#7164#7168#7176#7375::Tuple{}
  ########afactor#7165#7169#7177#7376::Float64
  ########bfactor#7166#7170#7178#7377::Float64
  ######_var0#7171#7179#7378::Tuple{}
  ######types#7172#7180#7379::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 44:
      $(Expr(:boundscheck, false))
      ####_var0#7248#7338 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7248#7338 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7243#7245#7341 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7243#7245#7341 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7342 = GenSym(2)
      ##a2#7343 = GenSym(3)
      ##div_a#7344 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7342::Float64,##a2#7343::Float64))
      ####afactor#7173#7345 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7343::Float64))
      ####bfactor#7174#7346 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7342::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7343::Float64,##a2#7343::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7351 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7171#7179#7351 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7344::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 45:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7182#7183#7353 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7182#7183#7353::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7182#7183#7353::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7354 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7355 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7354::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7361 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7108#7112#7117#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7248#7363 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7248#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7186#7190#7367 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7186#7190#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7369 = GenSym(6)
      ##a2#7370 = GenSym(7)
      ##div_a#7371 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7369::Float64,##a2#7370::Float64))
      ####afactor#7173#7372 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7370::Float64))
      ####bfactor#7174#7373 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7369::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7370::Float64,##a2#7370::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7378 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7171#7179#7378 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7371::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7380::Float64
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      ##fy#7380 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7380::Float64)::Bool,(Base.ne_float)(##fy#7380::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7380::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7380::Float64
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      ##fy#7380 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7380::Float64)::Bool,(Base.ne_float)(##fy#7380::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7380::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7417::Tuple{}
  ######x#7385#7387#7418::Int64
  ####_var0#7388#7419::Tuple{}
  ######types#7246#7389#7420::Tuple{Type{Int64}}
  ####fy#7390#7421::Float64
  _var0::Bool
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7113#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7427::Tuple{}
  ##########x#7105#7107#7111#7116#7428::Float64
  ########_var0#7108#7112#7117#7429::Tuple{}
  ##a#7430::Float64
  ####G#7401#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7402#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7403#7433::Tuple{}
  ##########x#7105#7107#7111#7404#7434::Float64
  ########_var0#7108#7112#7405#7435::Tuple{}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7173#7439::Float64
  ####bfactor#7174#7440::Float64
  ########a#7163#7167#7175#7441::Tuple{}
  ########b#7164#7168#7176#7442::Tuple{}
  ########afactor#7165#7169#7177#7443::Float64
  ########bfactor#7166#7170#7178#7444::Float64
  ######_var0#7171#7179#7445::Tuple{}
  ######types#7172#7180#7446::Tuple{Type{Float64}}
  ##a#7447::Float64
  ####G#7396#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7397#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7398#7450::Tuple{}
  ##########x#7105#7107#7111#7399#7451::Float64
  ########_var0#7108#7112#7400#7452::Tuple{}
  ######a#7158#7160#7453::Tuple{}
  ######b#7159#7161#7454::Tuple{}
  ####_var0#7162#7455::Tuple{}
  ######tup#7384#7386#7456::Tuple{}
  ######x#7385#7387#7457::Int64
  ####_var0#7388#7458::Tuple{}
  ######types#7246#7389#7459::Tuple{Type{Int64}}
  ##exp_a#7460::Float64
  ####G#7391#7461::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7392#7462::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7393#7463::Tuple{}
  ##########x#7105#7107#7111#7394#7464::Float64
  ########_var0#7108#7112#7395#7465::Tuple{}
  ##xs#7466::Tuple{}
  ##########tup#7104#7184#7188#7406#7467::Tuple{}
  ##########x#7105#7185#7189#7407#7468::Float64
  ########_var0#7186#7190#7408#7469::Tuple{}
  ##########types#7120#7187#7191#7409#7470::Tuple{Type{Float64}}
  ####a1#7410#7471::Float64
  ####a2#7411#7472::Float64
  ########a#7163#7196#7412#7473::Tuple{}
  ########b#7164#7197#7413#7474::Tuple{}
  ########afactor#7165#7198#7414#7475::Float64
  ########bfactor#7166#7199#7415#7476::Float64
  ######_var0#7200#7416#7477::Tuple{}
  ##a1#7478::Float64
  ##a2#7479::Float64
  ##div_a#7480::Float64
  ####afactor#7173#7481::Float64
  ####bfactor#7174#7482::Float64
  ########a#7163#7167#7175#7483::Tuple{}
  ########b#7164#7168#7176#7484::Tuple{}
  ########afactor#7165#7169#7177#7485::Float64
  ########bfactor#7166#7170#7178#7486::Float64
  ######_var0#7171#7179#7487::Tuple{}
  ######types#7172#7180#7488::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7419 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7421::Float64)::Bool,(Base.ne_float)(####fy#7390#7421::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7421::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7388#7458 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7388#7458 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7460 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7391#7461 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7395#7465 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7108#7112#7395#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7460::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7447 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      ####G#7396#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7400#7452 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7108#7112#7400#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7430 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      ####G#7401#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7405#7435 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7108#7112#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(3)
      ##a2#7437 = GenSym(4)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7173#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7174#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7445 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7171#7179#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7455 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7162#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7186#7190#7408#7469 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7186#7190#7408#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7410#7471 = GenSym(11)
      ####a2#7411#7472 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7200#7416#7477 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7200#7416#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7410#7471::Float64,####a2#7411#7472::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7422 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7429 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7108#7112#7117#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7478 = GenSym(15)
      ##a2#7479 = GenSym(16)
      ##div_a#7480 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7478::Float64,##a2#7479::Float64))
      ####afactor#7173#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7479::Float64))
      ####bfactor#7174#7482 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7478::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7479::Float64,##a2#7479::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7487 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7171#7179#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7480::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7380::Float64
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      ##fy#7380 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7380::Float64)::Bool,(Base.ne_float)(##fy#7380::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7380::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7380::Float64
  ##xs#7381::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      ##fy#7380 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7380::Float64)::Bool,(Base.ne_float)(##fy#7380::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7380::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7417::Tuple{}
  ######x#7385#7387#7418::Int64
  ####_var0#7388#7419::Tuple{}
  ######types#7246#7389#7420::Tuple{Type{Int64}}
  ####fy#7390#7421::Float64
  _var0::Bool
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7113#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7427::Tuple{}
  ##########x#7105#7107#7111#7116#7428::Float64
  ########_var0#7108#7112#7117#7429::Tuple{}
  ##a#7430::Float64
  ####G#7401#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7402#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7403#7433::Tuple{}
  ##########x#7105#7107#7111#7404#7434::Float64
  ########_var0#7108#7112#7405#7435::Tuple{}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7173#7439::Float64
  ####bfactor#7174#7440::Float64
  ########a#7163#7167#7175#7441::Tuple{}
  ########b#7164#7168#7176#7442::Tuple{}
  ########afactor#7165#7169#7177#7443::Float64
  ########bfactor#7166#7170#7178#7444::Float64
  ######_var0#7171#7179#7445::Tuple{}
  ######types#7172#7180#7446::Tuple{Type{Float64}}
  ##a#7447::Float64
  ####G#7396#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7397#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7398#7450::Tuple{}
  ##########x#7105#7107#7111#7399#7451::Float64
  ########_var0#7108#7112#7400#7452::Tuple{}
  ######a#7158#7160#7453::Tuple{}
  ######b#7159#7161#7454::Tuple{}
  ####_var0#7162#7455::Tuple{}
  ######tup#7384#7386#7456::Tuple{}
  ######x#7385#7387#7457::Int64
  ####_var0#7388#7458::Tuple{}
  ######types#7246#7389#7459::Tuple{Type{Int64}}
  ##exp_a#7460::Float64
  ####G#7391#7461::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7392#7462::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7393#7463::Tuple{}
  ##########x#7105#7107#7111#7394#7464::Float64
  ########_var0#7108#7112#7395#7465::Tuple{}
  ##xs#7466::Tuple{}
  ##########tup#7104#7184#7188#7406#7467::Tuple{}
  ##########x#7105#7185#7189#7407#7468::Float64
  ########_var0#7186#7190#7408#7469::Tuple{}
  ##########types#7120#7187#7191#7409#7470::Tuple{Type{Float64}}
  ####a1#7410#7471::Float64
  ####a2#7411#7472::Float64
  ########a#7163#7196#7412#7473::Tuple{}
  ########b#7164#7197#7413#7474::Tuple{}
  ########afactor#7165#7198#7414#7475::Float64
  ########bfactor#7166#7199#7415#7476::Float64
  ######_var0#7200#7416#7477::Tuple{}
  ##a1#7478::Float64
  ##a2#7479::Float64
  ##div_a#7480::Float64
  ####afactor#7173#7481::Float64
  ####bfactor#7174#7482::Float64
  ########a#7163#7167#7175#7483::Tuple{}
  ########b#7164#7168#7176#7484::Tuple{}
  ########afactor#7165#7169#7177#7485::Float64
  ########bfactor#7166#7170#7178#7486::Float64
  ######_var0#7171#7179#7487::Tuple{}
  ######types#7172#7180#7488::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7419 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7421::Float64)::Bool,(Base.ne_float)(####fy#7390#7421::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7421::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7388#7458 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7388#7458 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7460 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7391#7461 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7395#7465 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7108#7112#7395#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7460::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7447 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      ####G#7396#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7400#7452 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7108#7112#7400#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7430 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      ####G#7401#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7405#7435 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7108#7112#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(3)
      ##a2#7437 = GenSym(4)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7173#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7174#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7445 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7171#7179#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7455 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7162#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7186#7190#7408#7469 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7186#7190#7408#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7410#7471 = GenSym(11)
      ####a2#7411#7472 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7200#7416#7477 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7200#7416#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7410#7471::Float64,####a2#7411#7472::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7422 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7429 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7108#7112#7117#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7478 = GenSym(15)
      ##a2#7479 = GenSym(16)
      ##div_a#7480 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7478::Float64,##a2#7479::Float64))
      ####afactor#7173#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7479::Float64))
      ####bfactor#7174#7482 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7478::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7479::Float64,##a2#7479::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7487 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7171#7179#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7480::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7417::Tuple{}
  ######x#7385#7387#7418::Int64
  ####_var0#7388#7419::Tuple{}
  ######types#7246#7389#7420::Tuple{Type{Int64}}
  ####fy#7390#7421::Float64
  _var0::Bool
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7113#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7427::Tuple{}
  ##########x#7105#7107#7111#7116#7428::Float64
  ########_var0#7108#7112#7117#7429::Tuple{}
  ##a#7430::Float64
  ####G#7401#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7402#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7403#7433::Tuple{}
  ##########x#7105#7107#7111#7404#7434::Float64
  ########_var0#7108#7112#7405#7435::Tuple{}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7173#7439::Float64
  ####bfactor#7174#7440::Float64
  ########a#7163#7167#7175#7441::Tuple{}
  ########b#7164#7168#7176#7442::Tuple{}
  ########afactor#7165#7169#7177#7443::Float64
  ########bfactor#7166#7170#7178#7444::Float64
  ######_var0#7171#7179#7445::Tuple{}
  ######types#7172#7180#7446::Tuple{Type{Float64}}
  ##a#7447::Float64
  ####G#7396#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7397#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7398#7450::Tuple{}
  ##########x#7105#7107#7111#7399#7451::Float64
  ########_var0#7108#7112#7400#7452::Tuple{}
  ######a#7158#7160#7453::Tuple{}
  ######b#7159#7161#7454::Tuple{}
  ####_var0#7162#7455::Tuple{}
  ######tup#7384#7386#7456::Tuple{}
  ######x#7385#7387#7457::Int64
  ####_var0#7388#7458::Tuple{}
  ######types#7246#7389#7459::Tuple{Type{Int64}}
  ##exp_a#7460::Float64
  ####G#7391#7461::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7392#7462::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7393#7463::Tuple{}
  ##########x#7105#7107#7111#7394#7464::Float64
  ########_var0#7108#7112#7395#7465::Tuple{}
  ##xs#7466::Tuple{}
  ##########tup#7104#7184#7188#7406#7467::Tuple{}
  ##########x#7105#7185#7189#7407#7468::Float64
  ########_var0#7186#7190#7408#7469::Tuple{}
  ##########types#7120#7187#7191#7409#7470::Tuple{Type{Float64}}
  ####a1#7410#7471::Float64
  ####a2#7411#7472::Float64
  ########a#7163#7196#7412#7473::Tuple{}
  ########b#7164#7197#7413#7474::Tuple{}
  ########afactor#7165#7198#7414#7475::Float64
  ########bfactor#7166#7199#7415#7476::Float64
  ######_var0#7200#7416#7477::Tuple{}
  ##a1#7478::Float64
  ##a2#7479::Float64
  ##div_a#7480::Float64
  ####afactor#7173#7481::Float64
  ####bfactor#7174#7482::Float64
  ########a#7163#7167#7175#7483::Tuple{}
  ########b#7164#7168#7176#7484::Tuple{}
  ########afactor#7165#7169#7177#7485::Float64
  ########bfactor#7166#7170#7178#7486::Float64
  ######_var0#7171#7179#7487::Tuple{}
  ######types#7172#7180#7488::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7419 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7421::Float64)::Bool,(Base.ne_float)(####fy#7390#7421::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7421::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7388#7458 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7388#7458 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7460 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7391#7461 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7395#7465 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7108#7112#7395#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7460::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7447 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      ####G#7396#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7400#7452 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7108#7112#7400#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7430 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      ####G#7401#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7405#7435 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7108#7112#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(3)
      ##a2#7437 = GenSym(4)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7173#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7174#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7445 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7171#7179#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7455 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7162#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7186#7190#7408#7469 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7186#7190#7408#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7410#7471 = GenSym(11)
      ####a2#7411#7472 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7200#7416#7477 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7200#7416#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7410#7471::Float64,####a2#7411#7472::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7422 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7429 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7108#7112#7117#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7478 = GenSym(15)
      ##a2#7479 = GenSym(16)
      ##div_a#7480 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7478::Float64,##a2#7479::Float64))
      ####afactor#7173#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7479::Float64))
      ####bfactor#7174#7482 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7478::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7479::Float64,##a2#7479::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7487 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7171#7179#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7480::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7417::Tuple{}
  ######x#7385#7387#7418::Int64
  ####_var0#7388#7419::Tuple{}
  ######types#7246#7389#7420::Tuple{Type{Int64}}
  ####fy#7390#7421::Float64
  _var0::Bool
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7113#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7427::Tuple{}
  ##########x#7105#7107#7111#7116#7428::Float64
  ########_var0#7108#7112#7117#7429::Tuple{}
  ##a#7430::Float64
  ####G#7401#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7402#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7403#7433::Tuple{}
  ##########x#7105#7107#7111#7404#7434::Float64
  ########_var0#7108#7112#7405#7435::Tuple{}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7173#7439::Float64
  ####bfactor#7174#7440::Float64
  ########a#7163#7167#7175#7441::Tuple{}
  ########b#7164#7168#7176#7442::Tuple{}
  ########afactor#7165#7169#7177#7443::Float64
  ########bfactor#7166#7170#7178#7444::Float64
  ######_var0#7171#7179#7445::Tuple{}
  ######types#7172#7180#7446::Tuple{Type{Float64}}
  ##a#7447::Float64
  ####G#7396#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7397#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7398#7450::Tuple{}
  ##########x#7105#7107#7111#7399#7451::Float64
  ########_var0#7108#7112#7400#7452::Tuple{}
  ######a#7158#7160#7453::Tuple{}
  ######b#7159#7161#7454::Tuple{}
  ####_var0#7162#7455::Tuple{}
  ######tup#7384#7386#7456::Tuple{}
  ######x#7385#7387#7457::Int64
  ####_var0#7388#7458::Tuple{}
  ######types#7246#7389#7459::Tuple{Type{Int64}}
  ##exp_a#7460::Float64
  ####G#7391#7461::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7392#7462::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7393#7463::Tuple{}
  ##########x#7105#7107#7111#7394#7464::Float64
  ########_var0#7108#7112#7395#7465::Tuple{}
  ##xs#7466::Tuple{}
  ##########tup#7104#7184#7188#7406#7467::Tuple{}
  ##########x#7105#7185#7189#7407#7468::Float64
  ########_var0#7186#7190#7408#7469::Tuple{}
  ##########types#7120#7187#7191#7409#7470::Tuple{Type{Float64}}
  ####a1#7410#7471::Float64
  ####a2#7411#7472::Float64
  ########a#7163#7196#7412#7473::Tuple{}
  ########b#7164#7197#7413#7474::Tuple{}
  ########afactor#7165#7198#7414#7475::Float64
  ########bfactor#7166#7199#7415#7476::Float64
  ######_var0#7200#7416#7477::Tuple{}
  ##a1#7478::Float64
  ##a2#7479::Float64
  ##div_a#7480::Float64
  ####afactor#7173#7481::Float64
  ####bfactor#7174#7482::Float64
  ########a#7163#7167#7175#7483::Tuple{}
  ########b#7164#7168#7176#7484::Tuple{}
  ########afactor#7165#7169#7177#7485::Float64
  ########bfactor#7166#7170#7178#7486::Float64
  ######_var0#7171#7179#7487::Tuple{}
  ######types#7172#7180#7488::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7419 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7421::Float64)::Bool,(Base.ne_float)(####fy#7390#7421::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7421::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7388#7458 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7388#7458 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7460 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7391#7461 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7395#7465 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7108#7112#7395#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7460::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7447 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      ####G#7396#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7400#7452 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7108#7112#7400#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7430 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      ####G#7401#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7405#7435 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7108#7112#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(3)
      ##a2#7437 = GenSym(4)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7173#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7174#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7445 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7171#7179#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7455 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7162#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7186#7190#7408#7469 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7186#7190#7408#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7410#7471 = GenSym(11)
      ####a2#7411#7472 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7200#7416#7477 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7200#7416#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7410#7471::Float64,####a2#7411#7472::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7422 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7429 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7108#7112#7117#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7478 = GenSym(15)
      ##a2#7479 = GenSym(16)
      ##div_a#7480 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7478::Float64,##a2#7479::Float64))
      ####afactor#7173#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7479::Float64))
      ####bfactor#7174#7482 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7478::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7479::Float64,##a2#7479::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7487 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7171#7179#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7480::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7417::Tuple{}
  ######x#7385#7387#7418::Int64
  ####_var0#7388#7419::Tuple{}
  ######types#7246#7389#7420::Tuple{Type{Int64}}
  ####fy#7390#7421::Float64
  _var0::Bool
  ##a#7422::Float64
  ##exp_a#7423::Float64
  ##deriv#7424::Float64
  ####G#7113#7425::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7426::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7427::Tuple{}
  ##########x#7105#7107#7111#7116#7428::Float64
  ########_var0#7108#7112#7117#7429::Tuple{}
  ##a#7430::Float64
  ####G#7401#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7402#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7403#7433::Tuple{}
  ##########x#7105#7107#7111#7404#7434::Float64
  ########_var0#7108#7112#7405#7435::Tuple{}
  ##a1#7436::Float64
  ##a2#7437::Float64
  ##div_a#7438::Float64
  ####afactor#7173#7439::Float64
  ####bfactor#7174#7440::Float64
  ########a#7163#7167#7175#7441::Tuple{}
  ########b#7164#7168#7176#7442::Tuple{}
  ########afactor#7165#7169#7177#7443::Float64
  ########bfactor#7166#7170#7178#7444::Float64
  ######_var0#7171#7179#7445::Tuple{}
  ######types#7172#7180#7446::Tuple{Type{Float64}}
  ##a#7447::Float64
  ####G#7396#7448::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7397#7449::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7398#7450::Tuple{}
  ##########x#7105#7107#7111#7399#7451::Float64
  ########_var0#7108#7112#7400#7452::Tuple{}
  ######a#7158#7160#7453::Tuple{}
  ######b#7159#7161#7454::Tuple{}
  ####_var0#7162#7455::Tuple{}
  ######tup#7384#7386#7456::Tuple{}
  ######x#7385#7387#7457::Int64
  ####_var0#7388#7458::Tuple{}
  ######types#7246#7389#7459::Tuple{Type{Int64}}
  ##exp_a#7460::Float64
  ####G#7391#7461::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7392#7462::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7393#7463::Tuple{}
  ##########x#7105#7107#7111#7394#7464::Float64
  ########_var0#7108#7112#7395#7465::Tuple{}
  ##xs#7466::Tuple{}
  ##########tup#7104#7184#7188#7406#7467::Tuple{}
  ##########x#7105#7185#7189#7407#7468::Float64
  ########_var0#7186#7190#7408#7469::Tuple{}
  ##########types#7120#7187#7191#7409#7470::Tuple{Type{Float64}}
  ####a1#7410#7471::Float64
  ####a2#7411#7472::Float64
  ########a#7163#7196#7412#7473::Tuple{}
  ########b#7164#7197#7413#7474::Tuple{}
  ########afactor#7165#7198#7414#7475::Float64
  ########bfactor#7166#7199#7415#7476::Float64
  ######_var0#7200#7416#7477::Tuple{}
  ##a1#7478::Float64
  ##a2#7479::Float64
  ##div_a#7480::Float64
  ####afactor#7173#7481::Float64
  ####bfactor#7174#7482::Float64
  ########a#7163#7167#7175#7483::Tuple{}
  ########b#7164#7168#7176#7484::Tuple{}
  ########afactor#7165#7169#7177#7485::Float64
  ########bfactor#7166#7170#7178#7486::Float64
  ######_var0#7171#7179#7487::Tuple{}
  ######types#7172#7180#7488::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 65:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7419 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7419 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 66:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7421 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7421::Float64)::Bool,(Base.ne_float)(####fy#7390#7421::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7421::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7388#7458 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7388#7458 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7460 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7391#7461 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7395#7465 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7108#7112#7395#7465 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7460::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7447 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7447::Float64,0)::Float64
      ####G#7396#7448 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7400#7452 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7108#7112#7400#7452 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7430 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7430::Float64,0)::Float64
      ####G#7401#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7405#7435 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7108#7112#7405#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7436 = GenSym(3)
      ##a2#7437 = GenSym(4)
      ##div_a#7438 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7436::Float64,##a2#7437::Float64))
      ####afactor#7173#7439 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7437::Float64))
      ####bfactor#7174#7440 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7436::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7437::Float64,##a2#7437::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7445 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7171#7179#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7438::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7455 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7162#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7186#7190#7408#7469 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7186#7190#7408#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7410#7471 = GenSym(11)
      ####a2#7411#7472 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7200#7416#7477 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7200#7416#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7410#7471::Float64,####a2#7411#7472::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7422 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7423 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7424 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7422::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7425 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7429 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7108#7112#7117#7429 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7423::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7478 = GenSym(15)
      ##a2#7479 = GenSym(16)
      ##div_a#7480 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7478::Float64,##a2#7479::Float64))
      ####afactor#7173#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7479::Float64))
      ####bfactor#7174#7482 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7478::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7479::Float64,##a2#7479::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7487 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7171#7179#7487 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7480::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7491::Float64
  ##xs#7492::Tuple{}
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      ##fy#7491 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7491::Float64)::Bool,(Base.ne_float)(##fy#7491::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7491::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7491::Float64
  ##xs#7492::Tuple{}
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      ##fy#7491 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7491::Float64)::Bool,(Base.ne_float)(##fy#7491::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7491::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7624::Tuple{}
  ######x#7385#7387#7625::Int64
  ####_var0#7388#7626::Tuple{}
  ######types#7246#7389#7627::Tuple{Type{Int64}}
  ####fy#7390#7628::Float64
  _var0::Bool
  ##a#7629::Float64
  ##exp_a#7630::Float64
  ##deriv#7631::Float64
  ####G#7113#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7634::Tuple{}
  ##########x#7105#7107#7111#7116#7635::Float64
  ########_var0#7108#7112#7117#7636::Tuple{}
  ##a#7637::Float64
  ####G#7537#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7538#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7539#7640::Tuple{}
  ##########x#7105#7107#7111#7540#7641::Float64
  ########_var0#7108#7112#7541#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##div_a#7645::Float64
  ####afactor#7173#7646::Float64
  ####bfactor#7174#7647::Float64
  ########a#7163#7167#7175#7648::Tuple{}
  ########b#7164#7168#7176#7649::Tuple{}
  ########afactor#7165#7169#7177#7650::Float64
  ########bfactor#7166#7170#7178#7651::Float64
  ######_var0#7171#7179#7652::Tuple{}
  ######types#7172#7180#7653::Tuple{Type{Float64}}
  ##a#7654::Float64
  ####G#7532#7655::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7533#7656::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7534#7657::Tuple{}
  ##########x#7105#7107#7111#7535#7658::Float64
  ########_var0#7108#7112#7536#7659::Tuple{}
  ######a#7158#7160#7660::Tuple{}
  ######b#7159#7161#7661::Tuple{}
  ####_var0#7162#7662::Tuple{}
  ##xs#7663::Tuple{}
  ##xs#7664::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7626 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7626 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7628 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7628::Float64)::Bool,(Base.ne_float)(####fy#7390#7628::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7628::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7654 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      ####G#7532#7655 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7536#7659 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7108#7112#7536#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7654::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      ####G#7537#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7541#7642 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7108#7112#7541#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7637::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(5)
      ##a2#7644 = GenSym(6)
      ##div_a#7645 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7643::Float64,##a2#7644::Float64))
      ####afactor#7173#7646 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7644::Float64))
      ####bfactor#7174#7647 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7643::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,##a2#7644::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7652 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7171#7179#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7662 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7162#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7629 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7630 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7636 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7108#7112#7117#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7630::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7491::Float64
  ##xs#7492::Tuple{}
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      ##fy#7491 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7491::Float64)::Bool,(Base.ne_float)(##fy#7491::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7491::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7491::Float64
  ##xs#7492::Tuple{}
  ##xs#7493::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      ##fy#7491 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7491::Float64)::Bool,(Base.ne_float)(##fy#7491::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7491::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7624::Tuple{}
  ######x#7385#7387#7625::Int64
  ####_var0#7388#7626::Tuple{}
  ######types#7246#7389#7627::Tuple{Type{Int64}}
  ####fy#7390#7628::Float64
  _var0::Bool
  ##a#7629::Float64
  ##exp_a#7630::Float64
  ##deriv#7631::Float64
  ####G#7113#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7634::Tuple{}
  ##########x#7105#7107#7111#7116#7635::Float64
  ########_var0#7108#7112#7117#7636::Tuple{}
  ##a#7637::Float64
  ####G#7537#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7538#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7539#7640::Tuple{}
  ##########x#7105#7107#7111#7540#7641::Float64
  ########_var0#7108#7112#7541#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##div_a#7645::Float64
  ####afactor#7173#7646::Float64
  ####bfactor#7174#7647::Float64
  ########a#7163#7167#7175#7648::Tuple{}
  ########b#7164#7168#7176#7649::Tuple{}
  ########afactor#7165#7169#7177#7650::Float64
  ########bfactor#7166#7170#7178#7651::Float64
  ######_var0#7171#7179#7652::Tuple{}
  ######types#7172#7180#7653::Tuple{Type{Float64}}
  ##a#7654::Float64
  ####G#7532#7655::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7533#7656::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7534#7657::Tuple{}
  ##########x#7105#7107#7111#7535#7658::Float64
  ########_var0#7108#7112#7536#7659::Tuple{}
  ######a#7158#7160#7660::Tuple{}
  ######b#7159#7161#7661::Tuple{}
  ####_var0#7162#7662::Tuple{}
  ##xs#7663::Tuple{}
  ##xs#7664::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7626 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7626 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7628 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7628::Float64)::Bool,(Base.ne_float)(####fy#7390#7628::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7628::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7654 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      ####G#7532#7655 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7536#7659 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7108#7112#7536#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7654::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      ####G#7537#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7541#7642 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7108#7112#7541#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7637::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(5)
      ##a2#7644 = GenSym(6)
      ##div_a#7645 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7643::Float64,##a2#7644::Float64))
      ####afactor#7173#7646 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7644::Float64))
      ####bfactor#7174#7647 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7643::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,##a2#7644::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7652 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7171#7179#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7662 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7162#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7629 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7630 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7636 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7108#7112#7117#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7630::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7624::Tuple{}
  ######x#7385#7387#7625::Int64
  ####_var0#7388#7626::Tuple{}
  ######types#7246#7389#7627::Tuple{Type{Int64}}
  ####fy#7390#7628::Float64
  _var0::Bool
  ##a#7629::Float64
  ##exp_a#7630::Float64
  ##deriv#7631::Float64
  ####G#7113#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7634::Tuple{}
  ##########x#7105#7107#7111#7116#7635::Float64
  ########_var0#7108#7112#7117#7636::Tuple{}
  ##a#7637::Float64
  ####G#7537#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7538#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7539#7640::Tuple{}
  ##########x#7105#7107#7111#7540#7641::Float64
  ########_var0#7108#7112#7541#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##div_a#7645::Float64
  ####afactor#7173#7646::Float64
  ####bfactor#7174#7647::Float64
  ########a#7163#7167#7175#7648::Tuple{}
  ########b#7164#7168#7176#7649::Tuple{}
  ########afactor#7165#7169#7177#7650::Float64
  ########bfactor#7166#7170#7178#7651::Float64
  ######_var0#7171#7179#7652::Tuple{}
  ######types#7172#7180#7653::Tuple{Type{Float64}}
  ##a#7654::Float64
  ####G#7532#7655::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7533#7656::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7534#7657::Tuple{}
  ##########x#7105#7107#7111#7535#7658::Float64
  ########_var0#7108#7112#7536#7659::Tuple{}
  ######a#7158#7160#7660::Tuple{}
  ######b#7159#7161#7661::Tuple{}
  ####_var0#7162#7662::Tuple{}
  ##xs#7663::Tuple{}
  ##xs#7664::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7626 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7626 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7628 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7628::Float64)::Bool,(Base.ne_float)(####fy#7390#7628::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7628::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7654 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      ####G#7532#7655 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7536#7659 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7108#7112#7536#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7654::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      ####G#7537#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7541#7642 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7108#7112#7541#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7637::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(5)
      ##a2#7644 = GenSym(6)
      ##div_a#7645 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7643::Float64,##a2#7644::Float64))
      ####afactor#7173#7646 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7644::Float64))
      ####bfactor#7174#7647 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7643::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,##a2#7644::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7652 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7171#7179#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7662 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7162#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7629 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7630 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7636 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7108#7112#7117#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7630::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7624::Tuple{}
  ######x#7385#7387#7625::Int64
  ####_var0#7388#7626::Tuple{}
  ######types#7246#7389#7627::Tuple{Type{Int64}}
  ####fy#7390#7628::Float64
  _var0::Bool
  ##a#7629::Float64
  ##exp_a#7630::Float64
  ##deriv#7631::Float64
  ####G#7113#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7634::Tuple{}
  ##########x#7105#7107#7111#7116#7635::Float64
  ########_var0#7108#7112#7117#7636::Tuple{}
  ##a#7637::Float64
  ####G#7537#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7538#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7539#7640::Tuple{}
  ##########x#7105#7107#7111#7540#7641::Float64
  ########_var0#7108#7112#7541#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##div_a#7645::Float64
  ####afactor#7173#7646::Float64
  ####bfactor#7174#7647::Float64
  ########a#7163#7167#7175#7648::Tuple{}
  ########b#7164#7168#7176#7649::Tuple{}
  ########afactor#7165#7169#7177#7650::Float64
  ########bfactor#7166#7170#7178#7651::Float64
  ######_var0#7171#7179#7652::Tuple{}
  ######types#7172#7180#7653::Tuple{Type{Float64}}
  ##a#7654::Float64
  ####G#7532#7655::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7533#7656::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7534#7657::Tuple{}
  ##########x#7105#7107#7111#7535#7658::Float64
  ########_var0#7108#7112#7536#7659::Tuple{}
  ######a#7158#7160#7660::Tuple{}
  ######b#7159#7161#7661::Tuple{}
  ####_var0#7162#7662::Tuple{}
  ##xs#7663::Tuple{}
  ##xs#7664::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7626 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7626 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7628 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7628::Float64)::Bool,(Base.ne_float)(####fy#7390#7628::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7628::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7654 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      ####G#7532#7655 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7536#7659 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7108#7112#7536#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7654::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      ####G#7537#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7541#7642 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7108#7112#7541#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7637::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(5)
      ##a2#7644 = GenSym(6)
      ##div_a#7645 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7643::Float64,##a2#7644::Float64))
      ####afactor#7173#7646 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7644::Float64))
      ####bfactor#7174#7647 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7643::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,##a2#7644::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7652 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7171#7179#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7662 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7162#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7629 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7630 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7636 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7108#7112#7117#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7630::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7384#7386#7624::Tuple{}
  ######x#7385#7387#7625::Int64
  ####_var0#7388#7626::Tuple{}
  ######types#7246#7389#7627::Tuple{Type{Int64}}
  ####fy#7390#7628::Float64
  _var0::Bool
  ##a#7629::Float64
  ##exp_a#7630::Float64
  ##deriv#7631::Float64
  ####G#7113#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7114#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7115#7634::Tuple{}
  ##########x#7105#7107#7111#7116#7635::Float64
  ########_var0#7108#7112#7117#7636::Tuple{}
  ##a#7637::Float64
  ####G#7537#7638::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7538#7639::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7539#7640::Tuple{}
  ##########x#7105#7107#7111#7540#7641::Float64
  ########_var0#7108#7112#7541#7642::Tuple{}
  ##a1#7643::Float64
  ##a2#7644::Float64
  ##div_a#7645::Float64
  ####afactor#7173#7646::Float64
  ####bfactor#7174#7647::Float64
  ########a#7163#7167#7175#7648::Tuple{}
  ########b#7164#7168#7176#7649::Tuple{}
  ########afactor#7165#7169#7177#7650::Float64
  ########bfactor#7166#7170#7178#7651::Float64
  ######_var0#7171#7179#7652::Tuple{}
  ######types#7172#7180#7653::Tuple{Type{Float64}}
  ##a#7654::Float64
  ####G#7532#7655::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7103#7109#7533#7656::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7104#7106#7110#7534#7657::Tuple{}
  ##########x#7105#7107#7111#7535#7658::Float64
  ########_var0#7108#7112#7536#7659::Tuple{}
  ######a#7158#7160#7660::Tuple{}
  ######b#7159#7161#7661::Tuple{}
  ####_var0#7162#7662::Tuple{}
  ##xs#7663::Tuple{}
  ##xs#7664::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 71:
      $(Expr(:boundscheck, false))
      ####_var0#7388#7626 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7388#7626 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 72:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7390#7628 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7390#7628::Float64)::Bool,(Base.ne_float)(####fy#7390#7628::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7390#7628::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7654 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7654::Float64,0)::Float64
      ####G#7532#7655 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7536#7659 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7108#7112#7536#7659 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7654::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7637 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7637::Float64,0)::Float64
      ####G#7537#7638 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7541#7642 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7108#7112#7541#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7637::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7643 = GenSym(5)
      ##a2#7644 = GenSym(6)
      ##div_a#7645 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7643::Float64,##a2#7644::Float64))
      ####afactor#7173#7646 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7644::Float64))
      ####bfactor#7174#7647 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7643::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7644::Float64,##a2#7644::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7171#7179#7652 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7171#7179#7652 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7645::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7662 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7162#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7629 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7630 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7629::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7113#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7108#7112#7117#7636 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7108#7112#7117#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7630::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




