____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 29:
      return (top(tuple))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 32:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7090::Float64
  ##exp_a#7091::Float64
  ##deriv#7092::Float64
  ####G#7078#7093::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7094::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7095::Tuple{}
  ##########x#7070#7072#7076#7081#7096::Float64
  ########_var0#7073#7077#7082#7097::Tuple{}
  ##div_a#7098::Float64
  ######tup#7083#7086#7099::Tuple{}
  ######x#7084#7087#7100::Int64
  ####_var0#7088#7101::Tuple{}
  ######types#7085#7089#7102::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      ##a#7090 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7091 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7092 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7093 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7097 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7091::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7098 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7101 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7101 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7098::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      return (Base.box)(Base.Float64,(Base.div_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7090::Float64
  ##exp_a#7091::Float64
  ##deriv#7092::Float64
  ####G#7078#7093::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7094::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7095::Tuple{}
  ##########x#7070#7072#7076#7081#7096::Float64
  ########_var0#7073#7077#7082#7097::Tuple{}
  ##div_a#7098::Float64
  ######tup#7083#7086#7099::Tuple{}
  ######x#7084#7087#7100::Int64
  ####_var0#7088#7101::Tuple{}
  ######types#7085#7089#7102::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      ##a#7090 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7091 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7092 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7093 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7097 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7091::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7098 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7101 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7101 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7098::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7090::Float64
  ##exp_a#7091::Float64
  ##deriv#7092::Float64
  ####G#7078#7093::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7094::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7095::Tuple{}
  ##########x#7070#7072#7076#7081#7096::Float64
  ########_var0#7073#7077#7082#7097::Tuple{}
  ##div_a#7098::Float64
  ######tup#7083#7086#7099::Tuple{}
  ######x#7084#7087#7100::Int64
  ####_var0#7088#7101::Tuple{}
  ######types#7085#7089#7102::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      ##a#7090 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7091 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7092 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7093 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7097 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7091::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7098 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7101 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7101 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7098::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7090::Float64
  ##exp_a#7091::Float64
  ##deriv#7092::Float64
  ####G#7078#7093::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7094::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7095::Tuple{}
  ##########x#7070#7072#7076#7081#7096::Float64
  ########_var0#7073#7077#7082#7097::Tuple{}
  ##div_a#7098::Float64
  ######tup#7083#7086#7099::Tuple{}
  ######x#7084#7087#7100::Int64
  ####_var0#7088#7101::Tuple{}
  ######types#7085#7089#7102::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      ##a#7090 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7091 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7092 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7093 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7097 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7091::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7098 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7101 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7101 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7098::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7090::Float64
  ##exp_a#7091::Float64
  ##deriv#7092::Float64
  ####G#7078#7093::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7094::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7095::Tuple{}
  ##########x#7070#7072#7076#7081#7096::Float64
  ########_var0#7073#7077#7082#7097::Tuple{}
  ##div_a#7098::Float64
  ######tup#7083#7086#7099::Tuple{}
  ######x#7084#7087#7100::Int64
  ####_var0#7088#7101::Tuple{}
  ######types#7085#7089#7102::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 36:
      ##a#7090 = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7091 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7092 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7090::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7093 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7097 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7073#7077#7082#7097 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7091::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##div_a#7098 = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(0),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,5))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7101 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7101 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7098::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 34:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 33:
      return (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 37:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.914285714285714,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.914285714285714,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7114#7118#7122::Tuple{}
  ########x#7070#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7085#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.914285714285714))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.914285714285714,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      return (Base.box)(Base.Float64,(Base.mul_float)(-2.914285714285714,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7114#7118#7122::Tuple{}
  ########x#7070#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7085#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.914285714285714))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7114#7118#7122::Tuple{}
  ########x#7070#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7085#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.914285714285714))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7114#7118#7122::Tuple{}
  ########x#7070#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7085#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.914285714285714))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########tup#7069#7114#7118#7122::Tuple{}
  ########x#7070#7115#7119#7123::Float64
  ######_var0#7116#7120#7124::Tuple{}
  ########types#7085#7117#7121#7125::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 38:
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7124 = (top(tuple))()::Tuple{}
      goto 2
      ######_var0#7116#7120#7124 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,-2.914285714285714))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7128#7133::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7134::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7133 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7133 = false
      2: 
      ####_var0#7128#7133::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7134 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7134::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7128#7133::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7134::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7133 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7133 = false
      2: 
      ####_var0#7128#7133::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7134 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7134::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7303::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7304::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7303 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7303 = false
      2: 
      ####_var0#7128#7303::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7304 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7304 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7304::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7128#7133::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7134::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7133 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7133 = false
      2: 
      ####_var0#7128#7133::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7134 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7134::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  ####_var0#7128#7133::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7134::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7133 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7133 = false
      2: 
      ####_var0#7128#7133::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7134 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7134::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{Float64},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,1.0e-12)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7303::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7304::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7303 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7303 = false
      2: 
      ####_var0#7128#7303::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7304 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7304 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7304::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7303::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7304::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7303 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7303 = false
      2: 
      ####_var0#7128#7303::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7304 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7304 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7304::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7303::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7304::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7303 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7303 = false
      2: 
      ####_var0#7128#7303::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7304 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7304 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7304::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ####_var0#7128#7303::UNION{BOOL,INT64}
  ########_var0#7126#7127#7129#7304::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 64:
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 1
      ####_var0#7128#7303 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 2
      1: 
      ####_var0#7128#7303 = false
      2: 
      ####_var0#7128#7303::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ########_var0#7126#7127#7129#7304 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 3
      ########_var0#7126#7127#7129#7304 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(2) = (Base.box)(Base.Float64,(Base.sub_float)(########_var0#7126#7127#7129#7304::Float64,1.0))
      return (Distributions.quantile_newton)(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},GenSym(2),(top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},1.0e-12)::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7305::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      ####fx#4193#7305 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7305::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7305::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7305::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      ####fx#4193#7305 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7305::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7305::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7161#7216#7306::Tuple{}
  ####_var0#7217#7307::Tuple{}
  ######types#7215#7218#7308::Tuple{Type{Int64}}
  ########tup#7161#7211#7213#7309::Tuple{}
  ######_var0#7212#7214#7310::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ##div_a#7313::Float64
  ####afactor#7150#7314::Float64
  ####bfactor#7151#7315::Float64
  ########a#7140#7144#7152#7316::Tuple{}
  ########b#7141#7145#7153#7317::Tuple{}
  ########afactor#7142#7146#7154#7318::Float64
  ########bfactor#7143#7147#7155#7319::Float64
  ######_var0#7148#7156#7320::Tuple{}
  ######types#7149#7157#7321::Tuple{Type{Float64}}
  ######fx#7159#7160#7322::Float64
  ##a#7323::Float64
  ##exp_a#7324::Float64
  ##deriv#7325::Float64
  ####G#7078#7326::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7327::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7328::Tuple{}
  ##########x#7070#7072#7076#7081#7329::Float64
  ########_var0#7073#7077#7082#7330::Tuple{}
  ######tup#7161#7216#7331::Tuple{}
  ####_var0#7217#7332::Tuple{}
  ######types#7215#7218#7333::Tuple{Type{Int64}}
  ########tup#7069#7114#7118#7334::Tuple{}
  ########x#7070#7115#7119#7335::Float64
  ######_var0#7116#7120#7336::Tuple{}
  ########types#7085#7117#7121#7337::Tuple{Type{Float64}}
  ##a1#7338::Float64
  ##a2#7339::Float64
  ##div_a#7340::Float64
  ####afactor#7150#7341::Float64
  ####bfactor#7151#7342::Float64
  ########a#7140#7144#7152#7343::Tuple{}
  ########b#7141#7145#7153#7344::Tuple{}
  ########afactor#7142#7146#7154#7345::Float64
  ########bfactor#7143#7147#7155#7346::Float64
  ######_var0#7148#7156#7347::Tuple{}
  ######types#7149#7157#7348::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      $(Expr(:boundscheck, false))
      ####_var0#7217#7307 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7217#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7212#7214#7310 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7212#7214#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(2)
      ##a2#7312 = GenSym(3)
      ##div_a#7313 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7311::Float64,##a2#7312::Float64))
      ####afactor#7150#7314 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7312::Float64))
      ####bfactor#7151#7315 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7311::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7312::Float64,##a2#7312::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7320 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7148#7156#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7159#7160#7322 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7159#7160#7322::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7323 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7324 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7325 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7326 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7330 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7082#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7324::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7332 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7217#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7336 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7116#7120#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7338 = GenSym(6)
      ##a2#7339 = GenSym(7)
      ##div_a#7340 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7338::Float64,##a2#7339::Float64))
      ####afactor#7150#7341 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7339::Float64))
      ####bfactor#7151#7342 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7338::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7339::Float64,##a2#7339::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7347 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7148#7156#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7340::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7305::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      ####fx#4193#7305 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7305::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7305::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  x::Int64
  u::Float64
  ####fx#4193#7305::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      u = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.abs_float)((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64)))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      ####fx#4193#7305 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(####fx#4193#7305::Float64,u::Float64)::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(####fx#4193#7305::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,####fx#4193#7305::Float64)))::Bool)))))) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,0))
      0: 
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)(0.75,(Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(Base.box)(Base.Float64,(Base.mul_float)(u::Float64,u::Float64)))))),(top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7161#7216#7306::Tuple{}
  ####_var0#7217#7307::Tuple{}
  ######types#7215#7218#7308::Tuple{Type{Int64}}
  ########tup#7161#7211#7213#7309::Tuple{}
  ######_var0#7212#7214#7310::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ##div_a#7313::Float64
  ####afactor#7150#7314::Float64
  ####bfactor#7151#7315::Float64
  ########a#7140#7144#7152#7316::Tuple{}
  ########b#7141#7145#7153#7317::Tuple{}
  ########afactor#7142#7146#7154#7318::Float64
  ########bfactor#7143#7147#7155#7319::Float64
  ######_var0#7148#7156#7320::Tuple{}
  ######types#7149#7157#7321::Tuple{Type{Float64}}
  ######fx#7159#7160#7322::Float64
  ##a#7323::Float64
  ##exp_a#7324::Float64
  ##deriv#7325::Float64
  ####G#7078#7326::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7327::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7328::Tuple{}
  ##########x#7070#7072#7076#7081#7329::Float64
  ########_var0#7073#7077#7082#7330::Tuple{}
  ######tup#7161#7216#7331::Tuple{}
  ####_var0#7217#7332::Tuple{}
  ######types#7215#7218#7333::Tuple{Type{Int64}}
  ########tup#7069#7114#7118#7334::Tuple{}
  ########x#7070#7115#7119#7335::Float64
  ######_var0#7116#7120#7336::Tuple{}
  ########types#7085#7117#7121#7337::Tuple{Type{Float64}}
  ##a1#7338::Float64
  ##a2#7339::Float64
  ##div_a#7340::Float64
  ####afactor#7150#7341::Float64
  ####bfactor#7151#7342::Float64
  ########a#7140#7144#7152#7343::Tuple{}
  ########b#7141#7145#7153#7344::Tuple{}
  ########afactor#7142#7146#7154#7345::Float64
  ########bfactor#7143#7147#7155#7346::Float64
  ######_var0#7148#7156#7347::Tuple{}
  ######types#7149#7157#7348::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      $(Expr(:boundscheck, false))
      ####_var0#7217#7307 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7217#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7212#7214#7310 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7212#7214#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(2)
      ##a2#7312 = GenSym(3)
      ##div_a#7313 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7311::Float64,##a2#7312::Float64))
      ####afactor#7150#7314 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7312::Float64))
      ####bfactor#7151#7315 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7311::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7312::Float64,##a2#7312::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7320 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7148#7156#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7159#7160#7322 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7159#7160#7322::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7323 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7324 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7325 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7326 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7330 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7082#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7324::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7332 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7217#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7336 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7116#7120#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7338 = GenSym(6)
      ##a2#7339 = GenSym(7)
      ##div_a#7340 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7338::Float64,##a2#7339::Float64))
      ####afactor#7150#7341 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7339::Float64))
      ####bfactor#7151#7342 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7338::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7339::Float64,##a2#7339::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7347 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7148#7156#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7340::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7161#7216#7306::Tuple{}
  ####_var0#7217#7307::Tuple{}
  ######types#7215#7218#7308::Tuple{Type{Int64}}
  ########tup#7161#7211#7213#7309::Tuple{}
  ######_var0#7212#7214#7310::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ##div_a#7313::Float64
  ####afactor#7150#7314::Float64
  ####bfactor#7151#7315::Float64
  ########a#7140#7144#7152#7316::Tuple{}
  ########b#7141#7145#7153#7317::Tuple{}
  ########afactor#7142#7146#7154#7318::Float64
  ########bfactor#7143#7147#7155#7319::Float64
  ######_var0#7148#7156#7320::Tuple{}
  ######types#7149#7157#7321::Tuple{Type{Float64}}
  ######fx#7159#7160#7322::Float64
  ##a#7323::Float64
  ##exp_a#7324::Float64
  ##deriv#7325::Float64
  ####G#7078#7326::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7327::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7328::Tuple{}
  ##########x#7070#7072#7076#7081#7329::Float64
  ########_var0#7073#7077#7082#7330::Tuple{}
  ######tup#7161#7216#7331::Tuple{}
  ####_var0#7217#7332::Tuple{}
  ######types#7215#7218#7333::Tuple{Type{Int64}}
  ########tup#7069#7114#7118#7334::Tuple{}
  ########x#7070#7115#7119#7335::Float64
  ######_var0#7116#7120#7336::Tuple{}
  ########types#7085#7117#7121#7337::Tuple{Type{Float64}}
  ##a1#7338::Float64
  ##a2#7339::Float64
  ##div_a#7340::Float64
  ####afactor#7150#7341::Float64
  ####bfactor#7151#7342::Float64
  ########a#7140#7144#7152#7343::Tuple{}
  ########b#7141#7145#7153#7344::Tuple{}
  ########afactor#7142#7146#7154#7345::Float64
  ########bfactor#7143#7147#7155#7346::Float64
  ######_var0#7148#7156#7347::Tuple{}
  ######types#7149#7157#7348::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      $(Expr(:boundscheck, false))
      ####_var0#7217#7307 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7217#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7212#7214#7310 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7212#7214#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(2)
      ##a2#7312 = GenSym(3)
      ##div_a#7313 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7311::Float64,##a2#7312::Float64))
      ####afactor#7150#7314 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7312::Float64))
      ####bfactor#7151#7315 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7311::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7312::Float64,##a2#7312::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7320 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7148#7156#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7159#7160#7322 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7159#7160#7322::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7323 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7324 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7325 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7326 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7330 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7082#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7324::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7332 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7217#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7336 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7116#7120#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7338 = GenSym(6)
      ##a2#7339 = GenSym(7)
      ##div_a#7340 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7338::Float64,##a2#7339::Float64))
      ####afactor#7150#7341 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7339::Float64))
      ####bfactor#7151#7342 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7338::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7339::Float64,##a2#7339::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7347 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7148#7156#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7340::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7161#7216#7306::Tuple{}
  ####_var0#7217#7307::Tuple{}
  ######types#7215#7218#7308::Tuple{Type{Int64}}
  ########tup#7161#7211#7213#7309::Tuple{}
  ######_var0#7212#7214#7310::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ##div_a#7313::Float64
  ####afactor#7150#7314::Float64
  ####bfactor#7151#7315::Float64
  ########a#7140#7144#7152#7316::Tuple{}
  ########b#7141#7145#7153#7317::Tuple{}
  ########afactor#7142#7146#7154#7318::Float64
  ########bfactor#7143#7147#7155#7319::Float64
  ######_var0#7148#7156#7320::Tuple{}
  ######types#7149#7157#7321::Tuple{Type{Float64}}
  ######fx#7159#7160#7322::Float64
  ##a#7323::Float64
  ##exp_a#7324::Float64
  ##deriv#7325::Float64
  ####G#7078#7326::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7327::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7328::Tuple{}
  ##########x#7070#7072#7076#7081#7329::Float64
  ########_var0#7073#7077#7082#7330::Tuple{}
  ######tup#7161#7216#7331::Tuple{}
  ####_var0#7217#7332::Tuple{}
  ######types#7215#7218#7333::Tuple{Type{Int64}}
  ########tup#7069#7114#7118#7334::Tuple{}
  ########x#7070#7115#7119#7335::Float64
  ######_var0#7116#7120#7336::Tuple{}
  ########types#7085#7117#7121#7337::Tuple{Type{Float64}}
  ##a1#7338::Float64
  ##a2#7339::Float64
  ##div_a#7340::Float64
  ####afactor#7150#7341::Float64
  ####bfactor#7151#7342::Float64
  ########a#7140#7144#7152#7343::Tuple{}
  ########b#7141#7145#7153#7344::Tuple{}
  ########afactor#7142#7146#7154#7345::Float64
  ########bfactor#7143#7147#7155#7346::Float64
  ######_var0#7148#7156#7347::Tuple{}
  ######types#7149#7157#7348::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      $(Expr(:boundscheck, false))
      ####_var0#7217#7307 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7217#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7212#7214#7310 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7212#7214#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(2)
      ##a2#7312 = GenSym(3)
      ##div_a#7313 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7311::Float64,##a2#7312::Float64))
      ####afactor#7150#7314 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7312::Float64))
      ####bfactor#7151#7315 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7311::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7312::Float64,##a2#7312::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7320 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7148#7156#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7159#7160#7322 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7159#7160#7322::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7323 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7324 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7325 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7326 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7330 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7082#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7324::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7332 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7217#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7336 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7116#7120#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7338 = GenSym(6)
      ##a2#7339 = GenSym(7)
      ##div_a#7340 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7338::Float64,##a2#7339::Float64))
      ####afactor#7150#7341 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7339::Float64))
      ####bfactor#7151#7342 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7338::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7339::Float64,##a2#7339::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7347 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7148#7156#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7340::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  u::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7161#7216#7306::Tuple{}
  ####_var0#7217#7307::Tuple{}
  ######types#7215#7218#7308::Tuple{Type{Int64}}
  ########tup#7161#7211#7213#7309::Tuple{}
  ######_var0#7212#7214#7310::Tuple{}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7311::Float64
  ##a2#7312::Float64
  ##div_a#7313::Float64
  ####afactor#7150#7314::Float64
  ####bfactor#7151#7315::Float64
  ########a#7140#7144#7152#7316::Tuple{}
  ########b#7141#7145#7153#7317::Tuple{}
  ########afactor#7142#7146#7154#7318::Float64
  ########bfactor#7143#7147#7155#7319::Float64
  ######_var0#7148#7156#7320::Tuple{}
  ######types#7149#7157#7321::Tuple{Type{Float64}}
  ######fx#7159#7160#7322::Float64
  ##a#7323::Float64
  ##exp_a#7324::Float64
  ##deriv#7325::Float64
  ####G#7078#7326::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7327::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7328::Tuple{}
  ##########x#7070#7072#7076#7081#7329::Float64
  ########_var0#7073#7077#7082#7330::Tuple{}
  ######tup#7161#7216#7331::Tuple{}
  ####_var0#7217#7332::Tuple{}
  ######types#7215#7218#7333::Tuple{Type{Int64}}
  ########tup#7069#7114#7118#7334::Tuple{}
  ########x#7070#7115#7119#7335::Float64
  ######_var0#7116#7120#7336::Tuple{}
  ########types#7085#7117#7121#7337::Tuple{Type{Float64}}
  ##a1#7338::Float64
  ##a2#7339::Float64
  ##div_a#7340::Float64
  ####afactor#7150#7341::Float64
  ####bfactor#7151#7342::Float64
  ########a#7140#7144#7152#7343::Tuple{}
  ########b#7141#7145#7153#7344::Tuple{}
  ########afactor#7142#7146#7154#7345::Float64
  ########bfactor#7143#7147#7155#7346::Float64
  ######_var0#7148#7156#7347::Tuple{}
  ######types#7149#7157#7348::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 42:
      $(Expr(:boundscheck, false))
      ####_var0#7217#7307 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7217#7307 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,x::Int64)),(top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      unless (Base.slt_int)((Base.box)(Int64,(top(getfield))(GenSym(0),:value)::Float64),0)::Bool goto 5
      $(Expr(:boundscheck, false))
      ######_var0#7212#7214#7310 = (top(tuple))()::Tuple{}
      goto 4
      ######_var0#7212#7214#7310 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.neg_float)((top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 6
      5: 
      _var0 = GenSym(0)
      6: 
      GenSym(1) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(2) = (top(getfield))(GenSym(1),:value)::Float64
      GenSym(3) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7311 = GenSym(2)
      ##a2#7312 = GenSym(3)
      ##div_a#7313 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7311::Float64,##a2#7312::Float64))
      ####afactor#7150#7314 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7312::Float64))
      ####bfactor#7151#7315 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7311::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7312::Float64,##a2#7312::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7320 = (top(tuple))()::Tuple{}
      goto 7
      ######_var0#7148#7156#7320 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      u = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7313::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 43:
      GenSym(4) = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ######fx#7159#7160#7322 = (Base.box)(Float64,(Base.sitofp)(Float64,1))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,GenSym(4))::Bool,(Base.box)(Base.Bool,(Base.or_int)((Base.eq_float)(######fx#7159#7160#7322::Float64,9.223372036854776e18)::Bool,(Base.sle_int)(1,(Base.box)(Int64,(Base.fptosi)(Int64,######fx#7159#7160#7322::Float64)))::Bool)))))) goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      ##a#7323 = (top(getfield))(u::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7324 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7325 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7323::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7326 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7330 = (top(tuple))()::Tuple{}
      goto 11
      ########_var0#7073#7077#7082#7330 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7324::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7217#7332 = (top(tuple))()::Tuple{}
      goto 13
      ####_var0#7217#7332 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      $(Expr(:boundscheck, false))
      ######_var0#7116#7120#7336 = (top(tuple))()::Tuple{}
      goto 15
      ######_var0#7116#7120#7336 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      GenSym(6) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(5),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0.75))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7338 = GenSym(6)
      ##a2#7339 = GenSym(7)
      ##div_a#7340 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7338::Float64,##a2#7339::Float64))
      ####afactor#7150#7341 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7339::Float64))
      ####bfactor#7151#7342 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7338::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7339::Float64,##a2#7339::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7347 = (top(tuple))()::Tuple{}
      goto 17
      ######_var0#7148#7156#7347 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7340::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7349::Float64
  ##xs#7350::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      ##fy#7349 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7349::Float64)::Bool,(Base.ne_float)(##fy#7349::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7349::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7349::Float64
  ##xs#7350::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      ##fy#7349 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7349::Float64)::Bool,(Base.ne_float)(##fy#7349::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7349::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7386::Tuple{}
  ######x#7354#7356#7387::Int64
  ####_var0#7357#7388::Tuple{}
  ######types#7215#7358#7389::Tuple{Type{Int64}}
  ####fy#7359#7390::Float64
  _var0::Bool
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7078#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7396::Tuple{}
  ##########x#7070#7072#7076#7081#7397::Float64
  ########_var0#7073#7077#7082#7398::Tuple{}
  ##a#7399::Float64
  ####G#7370#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7371#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7372#7402::Tuple{}
  ##########x#7070#7072#7076#7373#7403::Float64
  ########_var0#7073#7077#7374#7404::Tuple{}
  ##a1#7405::Float64
  ##a2#7406::Float64
  ##div_a#7407::Float64
  ####afactor#7150#7408::Float64
  ####bfactor#7151#7409::Float64
  ########a#7140#7144#7152#7410::Tuple{}
  ########b#7141#7145#7153#7411::Tuple{}
  ########afactor#7142#7146#7154#7412::Float64
  ########bfactor#7143#7147#7155#7413::Float64
  ######_var0#7148#7156#7414::Tuple{}
  ######types#7149#7157#7415::Tuple{Type{Float64}}
  ##a#7416::Float64
  ####G#7365#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7366#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7367#7419::Tuple{}
  ##########x#7070#7072#7076#7368#7420::Float64
  ########_var0#7073#7077#7369#7421::Tuple{}
  ######a#7135#7137#7422::Tuple{}
  ######b#7136#7138#7423::Tuple{}
  ####_var0#7139#7424::Tuple{}
  ######tup#7353#7355#7425::Tuple{}
  ######x#7354#7356#7426::Int64
  ####_var0#7357#7427::Tuple{}
  ######types#7215#7358#7428::Tuple{Type{Int64}}
  ##exp_a#7429::Float64
  ####G#7360#7430::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7361#7431::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7362#7432::Tuple{}
  ##########x#7070#7072#7076#7363#7433::Float64
  ########_var0#7073#7077#7364#7434::Tuple{}
  ##xs#7435::Tuple{}
  ##########tup#7069#7114#7118#7375#7436::Tuple{}
  ##########x#7070#7115#7119#7376#7437::Float64
  ########_var0#7116#7120#7377#7438::Tuple{}
  ##########types#7085#7117#7121#7378#7439::Tuple{Type{Float64}}
  ####a1#7379#7440::Float64
  ####a2#7380#7441::Float64
  ########a#7140#7165#7381#7442::Tuple{}
  ########b#7141#7166#7382#7443::Tuple{}
  ########afactor#7142#7167#7383#7444::Float64
  ########bfactor#7143#7168#7384#7445::Float64
  ######_var0#7169#7385#7446::Tuple{}
  ##a1#7447::Float64
  ##a2#7448::Float64
  ##div_a#7449::Float64
  ####afactor#7150#7450::Float64
  ####bfactor#7151#7451::Float64
  ########a#7140#7144#7152#7452::Tuple{}
  ########b#7141#7145#7153#7453::Tuple{}
  ########afactor#7142#7146#7154#7454::Float64
  ########bfactor#7143#7147#7155#7455::Float64
  ######_var0#7148#7156#7456::Tuple{}
  ######types#7149#7157#7457::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7388 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7388 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7390 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7390::Float64)::Bool,(Base.ne_float)(####fy#7359#7390::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7390::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7357#7427 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7357#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7429 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7360#7430 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7364#7434 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7364#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7416 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      ####G#7365#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7369#7421 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7369#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7399 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      ####G#7370#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7374#7404 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7374#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7405 = GenSym(3)
      ##a2#7406 = GenSym(4)
      ##div_a#7407 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7405::Float64,##a2#7406::Float64))
      ####afactor#7150#7408 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7406::Float64))
      ####bfactor#7151#7409 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7405::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7406::Float64,##a2#7406::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7414 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7148#7156#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7424 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7139#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7377#7438 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7116#7120#7377#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7379#7440 = GenSym(11)
      ####a2#7380#7441 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7169#7385#7446 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7169#7385#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7379#7440::Float64,####a2#7380#7441::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7391 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7398 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7082#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7447 = GenSym(15)
      ##a2#7448 = GenSym(16)
      ##div_a#7449 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7447::Float64,##a2#7448::Float64))
      ####afactor#7150#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7448::Float64))
      ####bfactor#7151#7451 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7447::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7448::Float64,##a2#7448::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7456 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7148#7156#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7349::Float64
  ##xs#7350::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      ##fy#7349 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7349::Float64)::Bool,(Base.ne_float)(##fy#7349::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7349::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7349::Float64
  ##xs#7350::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      ##fy#7349 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7349::Float64)::Bool,(Base.ne_float)(##fy#7349::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7349::Float64))::Bool)) goto 0
      return (Base.box)(Float64,(Base.sitofp)(Float64,1))
      0: 
      GenSym(5) = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))),0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,GenSym(5))),(Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Base.Float64,(Base.div_float)(GenSym(1),a::Float64)))))),(Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7386::Tuple{}
  ######x#7354#7356#7387::Int64
  ####_var0#7357#7388::Tuple{}
  ######types#7215#7358#7389::Tuple{Type{Int64}}
  ####fy#7359#7390::Float64
  _var0::Bool
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7078#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7396::Tuple{}
  ##########x#7070#7072#7076#7081#7397::Float64
  ########_var0#7073#7077#7082#7398::Tuple{}
  ##a#7399::Float64
  ####G#7370#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7371#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7372#7402::Tuple{}
  ##########x#7070#7072#7076#7373#7403::Float64
  ########_var0#7073#7077#7374#7404::Tuple{}
  ##a1#7405::Float64
  ##a2#7406::Float64
  ##div_a#7407::Float64
  ####afactor#7150#7408::Float64
  ####bfactor#7151#7409::Float64
  ########a#7140#7144#7152#7410::Tuple{}
  ########b#7141#7145#7153#7411::Tuple{}
  ########afactor#7142#7146#7154#7412::Float64
  ########bfactor#7143#7147#7155#7413::Float64
  ######_var0#7148#7156#7414::Tuple{}
  ######types#7149#7157#7415::Tuple{Type{Float64}}
  ##a#7416::Float64
  ####G#7365#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7366#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7367#7419::Tuple{}
  ##########x#7070#7072#7076#7368#7420::Float64
  ########_var0#7073#7077#7369#7421::Tuple{}
  ######a#7135#7137#7422::Tuple{}
  ######b#7136#7138#7423::Tuple{}
  ####_var0#7139#7424::Tuple{}
  ######tup#7353#7355#7425::Tuple{}
  ######x#7354#7356#7426::Int64
  ####_var0#7357#7427::Tuple{}
  ######types#7215#7358#7428::Tuple{Type{Int64}}
  ##exp_a#7429::Float64
  ####G#7360#7430::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7361#7431::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7362#7432::Tuple{}
  ##########x#7070#7072#7076#7363#7433::Float64
  ########_var0#7073#7077#7364#7434::Tuple{}
  ##xs#7435::Tuple{}
  ##########tup#7069#7114#7118#7375#7436::Tuple{}
  ##########x#7070#7115#7119#7376#7437::Float64
  ########_var0#7116#7120#7377#7438::Tuple{}
  ##########types#7085#7117#7121#7378#7439::Tuple{Type{Float64}}
  ####a1#7379#7440::Float64
  ####a2#7380#7441::Float64
  ########a#7140#7165#7381#7442::Tuple{}
  ########b#7141#7166#7382#7443::Tuple{}
  ########afactor#7142#7167#7383#7444::Float64
  ########bfactor#7143#7168#7384#7445::Float64
  ######_var0#7169#7385#7446::Tuple{}
  ##a1#7447::Float64
  ##a2#7448::Float64
  ##div_a#7449::Float64
  ####afactor#7150#7450::Float64
  ####bfactor#7151#7451::Float64
  ########a#7140#7144#7152#7452::Tuple{}
  ########b#7141#7145#7153#7453::Tuple{}
  ########afactor#7142#7146#7154#7454::Float64
  ########bfactor#7143#7147#7155#7455::Float64
  ######_var0#7148#7156#7456::Tuple{}
  ######types#7149#7157#7457::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7388 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7388 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7390 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7390::Float64)::Bool,(Base.ne_float)(####fy#7359#7390::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7390::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7357#7427 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7357#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7429 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7360#7430 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7364#7434 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7364#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7416 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      ####G#7365#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7369#7421 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7369#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7399 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      ####G#7370#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7374#7404 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7374#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7405 = GenSym(3)
      ##a2#7406 = GenSym(4)
      ##div_a#7407 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7405::Float64,##a2#7406::Float64))
      ####afactor#7150#7408 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7406::Float64))
      ####bfactor#7151#7409 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7405::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7406::Float64,##a2#7406::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7414 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7148#7156#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7424 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7139#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7377#7438 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7116#7120#7377#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7379#7440 = GenSym(11)
      ####a2#7380#7441 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7169#7385#7446 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7169#7385#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7379#7440::Float64,####a2#7380#7441::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7391 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7398 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7082#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7447 = GenSym(15)
      ##a2#7448 = GenSym(16)
      ##div_a#7449 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7447::Float64,##a2#7448::Float64))
      ####afactor#7150#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7448::Float64))
      ####bfactor#7151#7451 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7447::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7448::Float64,##a2#7448::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7456 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7148#7156#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7386::Tuple{}
  ######x#7354#7356#7387::Int64
  ####_var0#7357#7388::Tuple{}
  ######types#7215#7358#7389::Tuple{Type{Int64}}
  ####fy#7359#7390::Float64
  _var0::Bool
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7078#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7396::Tuple{}
  ##########x#7070#7072#7076#7081#7397::Float64
  ########_var0#7073#7077#7082#7398::Tuple{}
  ##a#7399::Float64
  ####G#7370#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7371#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7372#7402::Tuple{}
  ##########x#7070#7072#7076#7373#7403::Float64
  ########_var0#7073#7077#7374#7404::Tuple{}
  ##a1#7405::Float64
  ##a2#7406::Float64
  ##div_a#7407::Float64
  ####afactor#7150#7408::Float64
  ####bfactor#7151#7409::Float64
  ########a#7140#7144#7152#7410::Tuple{}
  ########b#7141#7145#7153#7411::Tuple{}
  ########afactor#7142#7146#7154#7412::Float64
  ########bfactor#7143#7147#7155#7413::Float64
  ######_var0#7148#7156#7414::Tuple{}
  ######types#7149#7157#7415::Tuple{Type{Float64}}
  ##a#7416::Float64
  ####G#7365#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7366#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7367#7419::Tuple{}
  ##########x#7070#7072#7076#7368#7420::Float64
  ########_var0#7073#7077#7369#7421::Tuple{}
  ######a#7135#7137#7422::Tuple{}
  ######b#7136#7138#7423::Tuple{}
  ####_var0#7139#7424::Tuple{}
  ######tup#7353#7355#7425::Tuple{}
  ######x#7354#7356#7426::Int64
  ####_var0#7357#7427::Tuple{}
  ######types#7215#7358#7428::Tuple{Type{Int64}}
  ##exp_a#7429::Float64
  ####G#7360#7430::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7361#7431::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7362#7432::Tuple{}
  ##########x#7070#7072#7076#7363#7433::Float64
  ########_var0#7073#7077#7364#7434::Tuple{}
  ##xs#7435::Tuple{}
  ##########tup#7069#7114#7118#7375#7436::Tuple{}
  ##########x#7070#7115#7119#7376#7437::Float64
  ########_var0#7116#7120#7377#7438::Tuple{}
  ##########types#7085#7117#7121#7378#7439::Tuple{Type{Float64}}
  ####a1#7379#7440::Float64
  ####a2#7380#7441::Float64
  ########a#7140#7165#7381#7442::Tuple{}
  ########b#7141#7166#7382#7443::Tuple{}
  ########afactor#7142#7167#7383#7444::Float64
  ########bfactor#7143#7168#7384#7445::Float64
  ######_var0#7169#7385#7446::Tuple{}
  ##a1#7447::Float64
  ##a2#7448::Float64
  ##div_a#7449::Float64
  ####afactor#7150#7450::Float64
  ####bfactor#7151#7451::Float64
  ########a#7140#7144#7152#7452::Tuple{}
  ########b#7141#7145#7153#7453::Tuple{}
  ########afactor#7142#7146#7154#7454::Float64
  ########bfactor#7143#7147#7155#7455::Float64
  ######_var0#7148#7156#7456::Tuple{}
  ######types#7149#7157#7457::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7388 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7388 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7390 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7390::Float64)::Bool,(Base.ne_float)(####fy#7359#7390::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7390::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7357#7427 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7357#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7429 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7360#7430 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7364#7434 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7364#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7416 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      ####G#7365#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7369#7421 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7369#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7399 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      ####G#7370#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7374#7404 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7374#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7405 = GenSym(3)
      ##a2#7406 = GenSym(4)
      ##div_a#7407 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7405::Float64,##a2#7406::Float64))
      ####afactor#7150#7408 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7406::Float64))
      ####bfactor#7151#7409 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7405::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7406::Float64,##a2#7406::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7414 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7148#7156#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7424 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7139#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7377#7438 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7116#7120#7377#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7379#7440 = GenSym(11)
      ####a2#7380#7441 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7169#7385#7446 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7169#7385#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7379#7440::Float64,####a2#7380#7441::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7391 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7398 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7082#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7447 = GenSym(15)
      ##a2#7448 = GenSym(16)
      ##div_a#7449 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7447::Float64,##a2#7448::Float64))
      ####afactor#7150#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7448::Float64))
      ####bfactor#7151#7451 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7447::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7448::Float64,##a2#7448::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7456 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7148#7156#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7386::Tuple{}
  ######x#7354#7356#7387::Int64
  ####_var0#7357#7388::Tuple{}
  ######types#7215#7358#7389::Tuple{Type{Int64}}
  ####fy#7359#7390::Float64
  _var0::Bool
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7078#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7396::Tuple{}
  ##########x#7070#7072#7076#7081#7397::Float64
  ########_var0#7073#7077#7082#7398::Tuple{}
  ##a#7399::Float64
  ####G#7370#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7371#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7372#7402::Tuple{}
  ##########x#7070#7072#7076#7373#7403::Float64
  ########_var0#7073#7077#7374#7404::Tuple{}
  ##a1#7405::Float64
  ##a2#7406::Float64
  ##div_a#7407::Float64
  ####afactor#7150#7408::Float64
  ####bfactor#7151#7409::Float64
  ########a#7140#7144#7152#7410::Tuple{}
  ########b#7141#7145#7153#7411::Tuple{}
  ########afactor#7142#7146#7154#7412::Float64
  ########bfactor#7143#7147#7155#7413::Float64
  ######_var0#7148#7156#7414::Tuple{}
  ######types#7149#7157#7415::Tuple{Type{Float64}}
  ##a#7416::Float64
  ####G#7365#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7366#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7367#7419::Tuple{}
  ##########x#7070#7072#7076#7368#7420::Float64
  ########_var0#7073#7077#7369#7421::Tuple{}
  ######a#7135#7137#7422::Tuple{}
  ######b#7136#7138#7423::Tuple{}
  ####_var0#7139#7424::Tuple{}
  ######tup#7353#7355#7425::Tuple{}
  ######x#7354#7356#7426::Int64
  ####_var0#7357#7427::Tuple{}
  ######types#7215#7358#7428::Tuple{Type{Int64}}
  ##exp_a#7429::Float64
  ####G#7360#7430::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7361#7431::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7362#7432::Tuple{}
  ##########x#7070#7072#7076#7363#7433::Float64
  ########_var0#7073#7077#7364#7434::Tuple{}
  ##xs#7435::Tuple{}
  ##########tup#7069#7114#7118#7375#7436::Tuple{}
  ##########x#7070#7115#7119#7376#7437::Float64
  ########_var0#7116#7120#7377#7438::Tuple{}
  ##########types#7085#7117#7121#7378#7439::Tuple{Type{Float64}}
  ####a1#7379#7440::Float64
  ####a2#7380#7441::Float64
  ########a#7140#7165#7381#7442::Tuple{}
  ########b#7141#7166#7382#7443::Tuple{}
  ########afactor#7142#7167#7383#7444::Float64
  ########bfactor#7143#7168#7384#7445::Float64
  ######_var0#7169#7385#7446::Tuple{}
  ##a1#7447::Float64
  ##a2#7448::Float64
  ##div_a#7449::Float64
  ####afactor#7150#7450::Float64
  ####bfactor#7151#7451::Float64
  ########a#7140#7144#7152#7452::Tuple{}
  ########b#7141#7145#7153#7453::Tuple{}
  ########afactor#7142#7146#7154#7454::Float64
  ########bfactor#7143#7147#7155#7455::Float64
  ######_var0#7148#7156#7456::Tuple{}
  ######types#7149#7157#7457::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7388 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7388 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7390 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7390::Float64)::Bool,(Base.ne_float)(####fy#7359#7390::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7390::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7357#7427 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7357#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7429 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7360#7430 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7364#7434 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7364#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7416 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      ####G#7365#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7369#7421 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7369#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7399 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      ####G#7370#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7374#7404 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7374#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7405 = GenSym(3)
      ##a2#7406 = GenSym(4)
      ##div_a#7407 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7405::Float64,##a2#7406::Float64))
      ####afactor#7150#7408 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7406::Float64))
      ####bfactor#7151#7409 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7405::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7406::Float64,##a2#7406::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7414 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7148#7156#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7424 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7139#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7377#7438 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7116#7120#7377#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7379#7440 = GenSym(11)
      ####a2#7380#7441 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7169#7385#7446 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7169#7385#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7379#7440::Float64,####a2#7380#7441::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7391 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7398 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7082#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7447 = GenSym(15)
      ##a2#7448 = GenSym(16)
      ##div_a#7449 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7447::Float64,##a2#7448::Float64))
      ####afactor#7150#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7448::Float64))
      ####bfactor#7151#7451 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7447::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7448::Float64,##a2#7448::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7456 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7148#7156#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7386::Tuple{}
  ######x#7354#7356#7387::Int64
  ####_var0#7357#7388::Tuple{}
  ######types#7215#7358#7389::Tuple{Type{Int64}}
  ####fy#7359#7390::Float64
  _var0::Bool
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7078#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7396::Tuple{}
  ##########x#7070#7072#7076#7081#7397::Float64
  ########_var0#7073#7077#7082#7398::Tuple{}
  ##a#7399::Float64
  ####G#7370#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7371#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7372#7402::Tuple{}
  ##########x#7070#7072#7076#7373#7403::Float64
  ########_var0#7073#7077#7374#7404::Tuple{}
  ##a1#7405::Float64
  ##a2#7406::Float64
  ##div_a#7407::Float64
  ####afactor#7150#7408::Float64
  ####bfactor#7151#7409::Float64
  ########a#7140#7144#7152#7410::Tuple{}
  ########b#7141#7145#7153#7411::Tuple{}
  ########afactor#7142#7146#7154#7412::Float64
  ########bfactor#7143#7147#7155#7413::Float64
  ######_var0#7148#7156#7414::Tuple{}
  ######types#7149#7157#7415::Tuple{Type{Float64}}
  ##a#7416::Float64
  ####G#7365#7417::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7366#7418::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7367#7419::Tuple{}
  ##########x#7070#7072#7076#7368#7420::Float64
  ########_var0#7073#7077#7369#7421::Tuple{}
  ######a#7135#7137#7422::Tuple{}
  ######b#7136#7138#7423::Tuple{}
  ####_var0#7139#7424::Tuple{}
  ######tup#7353#7355#7425::Tuple{}
  ######x#7354#7356#7426::Int64
  ####_var0#7357#7427::Tuple{}
  ######types#7215#7358#7428::Tuple{Type{Int64}}
  ##exp_a#7429::Float64
  ####G#7360#7430::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7361#7431::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7362#7432::Tuple{}
  ##########x#7070#7072#7076#7363#7433::Float64
  ########_var0#7073#7077#7364#7434::Tuple{}
  ##xs#7435::Tuple{}
  ##########tup#7069#7114#7118#7375#7436::Tuple{}
  ##########x#7070#7115#7119#7376#7437::Float64
  ########_var0#7116#7120#7377#7438::Tuple{}
  ##########types#7085#7117#7121#7378#7439::Tuple{Type{Float64}}
  ####a1#7379#7440::Float64
  ####a2#7380#7441::Float64
  ########a#7140#7165#7381#7442::Tuple{}
  ########b#7141#7166#7382#7443::Tuple{}
  ########afactor#7142#7167#7383#7444::Float64
  ########bfactor#7143#7168#7384#7445::Float64
  ######_var0#7169#7385#7446::Tuple{}
  ##a1#7447::Float64
  ##a2#7448::Float64
  ##div_a#7449::Float64
  ####afactor#7150#7450::Float64
  ####bfactor#7151#7451::Float64
  ########a#7140#7144#7152#7452::Tuple{}
  ########b#7141#7145#7153#7453::Tuple{}
  ########afactor#7142#7146#7154#7454::Float64
  ########bfactor#7143#7147#7155#7455::Float64
  ######_var0#7148#7156#7456::Tuple{}
  ######types#7149#7157#7457::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 63:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7388 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7388 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 64:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7390 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7390::Float64)::Bool,(Base.ne_float)(####fy#7359#7390::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7390::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      $(Expr(:boundscheck, false))
      ####_var0#7357#7427 = (top(tuple))()::Tuple{}
      goto 17
      ####_var0#7357#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      17: 
      ##exp_a#7429 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,0)::Float64
      ####G#7360#7430 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7364#7434 = (top(tuple))()::Tuple{}
      goto 19
      ########_var0#7073#7077#7364#7434 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      19: 
      GenSym(10) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7416 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(7) = (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7416::Float64,0)::Float64
      ####G#7365#7417 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7369#7421 = (top(tuple))()::Tuple{}
      goto 13
      ########_var0#7073#7077#7369#7421 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      13: 
      ##a#7399 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(2) = (top(ccall))((top(tuple))("sinh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      (top(ccall))((top(tuple))("cosh",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7399::Float64,0)::Float64
      ####G#7370#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7374#7404 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7073#7077#7374#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(3) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(2), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7405 = GenSym(3)
      ##a2#7406 = GenSym(4)
      ##div_a#7407 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7405::Float64,##a2#7406::Float64))
      ####afactor#7150#7408 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7406::Float64))
      ####bfactor#7151#7409 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7405::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7406::Float64,##a2#7406::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7414 = (top(tuple))()::Tuple{}
      goto 11
      ######_var0#7148#7156#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      GenSym(8) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7407::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7424 = (top(tuple))()::Tuple{}
      goto 15
      ####_var0#7139#7424 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      15: 
      $(Expr(:boundscheck, false))
      ########_var0#7116#7120#7377#7438 = (top(tuple))()::Tuple{}
      goto 21
      ########_var0#7116#7120#7377#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      21: 
      GenSym(11) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(10),:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(12) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, GenSym(7), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))(GenSym(8),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ####a1#7379#7440 = GenSym(11)
      ####a2#7380#7441 = GenSym(12)
      $(Expr(:boundscheck, false))
      ######_var0#7169#7385#7446 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7169#7385#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7379#7440::Float64,####a2#7380#7441::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7391 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7398 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7073#7077#7082#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(14) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(15) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(16) = (top(getfield))(GenSym(14),:value)::Float64
      ##a1#7447 = GenSym(15)
      ##a2#7448 = GenSym(16)
      ##div_a#7449 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7447::Float64,##a2#7448::Float64))
      ####afactor#7150#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7448::Float64))
      ####bfactor#7151#7451 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7447::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7448::Float64,##a2#7448::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7456 = (top(tuple))()::Tuple{}
      goto 24
      ######_var0#7148#7156#7456 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7449::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
cf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7460::Float64
  ##xs#7461::Tuple{}
  ##xs#7462::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      ##fy#7460 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7460::Float64)::Bool,(Base.ne_float)(##fy#7460::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7460::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- integer, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7460::Float64
  ##xs#7461::Tuple{}
  ##xs#7462::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      ##fy#7460 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7460::Float64)::Bool,(Base.ne_float)(##fy#7460::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7460::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- integer, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7593::Tuple{}
  ######x#7354#7356#7594::Int64
  ####_var0#7357#7595::Tuple{}
  ######types#7215#7358#7596::Tuple{Type{Int64}}
  ####fy#7359#7597::Float64
  _var0::Bool
  ##a#7598::Float64
  ##exp_a#7599::Float64
  ##deriv#7600::Float64
  ####G#7078#7601::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7602::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7603::Tuple{}
  ##########x#7070#7072#7076#7081#7604::Float64
  ########_var0#7073#7077#7082#7605::Tuple{}
  ##a#7606::Float64
  ####G#7506#7607::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7507#7608::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7508#7609::Tuple{}
  ##########x#7070#7072#7076#7509#7610::Float64
  ########_var0#7073#7077#7510#7611::Tuple{}
  ##a1#7612::Float64
  ##a2#7613::Float64
  ##div_a#7614::Float64
  ####afactor#7150#7615::Float64
  ####bfactor#7151#7616::Float64
  ########a#7140#7144#7152#7617::Tuple{}
  ########b#7141#7145#7153#7618::Tuple{}
  ########afactor#7142#7146#7154#7619::Float64
  ########bfactor#7143#7147#7155#7620::Float64
  ######_var0#7148#7156#7621::Tuple{}
  ######types#7149#7157#7622::Tuple{Type{Float64}}
  ##a#7623::Float64
  ####G#7501#7624::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7502#7625::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7503#7626::Tuple{}
  ##########x#7070#7072#7076#7504#7627::Float64
  ########_var0#7073#7077#7505#7628::Tuple{}
  ######a#7135#7137#7629::Tuple{}
  ######b#7136#7138#7630::Tuple{}
  ####_var0#7139#7631::Tuple{}
  ##xs#7632::Tuple{}
  ##xs#7633::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7595 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7595 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7597 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7597::Float64)::Bool,(Base.ne_float)(####fy#7359#7597::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7597::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      ####G#7501#7624 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7505#7628 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7505#7628 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7623::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7606 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      ####G#7506#7607 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7510#7611 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7073#7077#7510#7611 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7606::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7612 = GenSym(5)
      ##a2#7613 = GenSym(6)
      ##div_a#7614 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7612::Float64,##a2#7613::Float64))
      ####afactor#7150#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7613::Float64))
      ####bfactor#7151#7616 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7612::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7613::Float64,##a2#7613::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7621 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7148#7156#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7614::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7631 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7139#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7598 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7599 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7600 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7601 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7605 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7605 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7599::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7460::Float64
  ##xs#7461::Tuple{}
  ##xs#7462::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      ##fy#7460 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7460::Float64)::Bool,(Base.ne_float)(##fy#7460::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7460::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- float, float ----

Variables:
  d::Distributions.Epanechnikov{Float64}
  t::Int64
  a::Float64
  ##fy#7460::Float64
  ##xs#7461::Tuple{}
  ##xs#7462::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      a = (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Epanechnikov{Float64},:σ)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      ##fy#7460 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      unless (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(a::Float64,##fy#7460::Float64)::Bool,(Base.ne_float)(##fy#7460::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,##fy#7460::Float64))::Bool)) goto 0
      GenSym(0) = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      GenSym(1) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(0),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(0)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),(top(getfield))(GenSym(1),:re)::Float64))), :((top(getfield))(GenSym(1),:im)::Float64)))
      0: 
      GenSym(6) = (top(getfield))(d::Distributions.Epanechnikov{Float64},:μ)::Float64
      GenSym(7) = $(Expr(:new, Complex{Float64}, :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:re)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64), :(((top(getfield))(Base.Intrinsics,:select_value)::I)((top(getfield))(Distributions.im,:im)::Bool,GenSym(6),((top(getfield))(Base.Intrinsics,:select_value)::I)((Base.slt_int)((Base.box)(Int64,GenSym(6)),0)::Bool,(Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Float64,(Base.sitofp)(Float64,0)))),(Base.box)(Float64,(Base.sitofp)(Float64,0)))::Float64)::Float64)))
      GenSym(8) = (Distributions.exp)($(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,t::Int64)),(top(getfield))(GenSym(7),:im)::Float64))))))::Complex{Float64}
      GenSym(5) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,a::Float64,0)::Float64
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),a::Float64)::Float64,(Base.box)(Base.Float64,(Base.div_float)((Base.Math.nan_dom_err)(GenSym(3),a::Float64)::Float64,a::Float64))))
      GenSym(10) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(-3.0,(top(getfield))(GenSym(8),:im)::Float64)))))
      GenSym(12) = $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:re)::Float64))), :((Base.box)(Base.Float64,(Base.mul_float)(GenSym(9),(top(getfield))(GenSym(10),:im)::Float64)))))
      GenSym(11) = (Base.box)(Base.Float64,(Base.mul_float)(a::Float64,a::Float64))
      return $(Expr(:new, Complex{Float64}, :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:re)::Float64,GenSym(11)))), :((Base.box)(Base.Float64,(Base.div_float)((top(getfield))(GenSym(12),:im)::Float64,GenSym(11))))))
  end::Complex{Float64}

---- float, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7593::Tuple{}
  ######x#7354#7356#7594::Int64
  ####_var0#7357#7595::Tuple{}
  ######types#7215#7358#7596::Tuple{Type{Int64}}
  ####fy#7359#7597::Float64
  _var0::Bool
  ##a#7598::Float64
  ##exp_a#7599::Float64
  ##deriv#7600::Float64
  ####G#7078#7601::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7602::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7603::Tuple{}
  ##########x#7070#7072#7076#7081#7604::Float64
  ########_var0#7073#7077#7082#7605::Tuple{}
  ##a#7606::Float64
  ####G#7506#7607::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7507#7608::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7508#7609::Tuple{}
  ##########x#7070#7072#7076#7509#7610::Float64
  ########_var0#7073#7077#7510#7611::Tuple{}
  ##a1#7612::Float64
  ##a2#7613::Float64
  ##div_a#7614::Float64
  ####afactor#7150#7615::Float64
  ####bfactor#7151#7616::Float64
  ########a#7140#7144#7152#7617::Tuple{}
  ########b#7141#7145#7153#7618::Tuple{}
  ########afactor#7142#7146#7154#7619::Float64
  ########bfactor#7143#7147#7155#7620::Float64
  ######_var0#7148#7156#7621::Tuple{}
  ######types#7149#7157#7622::Tuple{Type{Float64}}
  ##a#7623::Float64
  ####G#7501#7624::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7502#7625::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7503#7626::Tuple{}
  ##########x#7070#7072#7076#7504#7627::Float64
  ########_var0#7073#7077#7505#7628::Tuple{}
  ######a#7135#7137#7629::Tuple{}
  ######b#7136#7138#7630::Tuple{}
  ####_var0#7139#7631::Tuple{}
  ##xs#7632::Tuple{}
  ##xs#7633::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7595 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7595 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7597 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7597::Float64)::Bool,(Base.ne_float)(####fy#7359#7597::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7597::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      ####G#7501#7624 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7505#7628 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7505#7628 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7623::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7606 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      ####G#7506#7607 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7510#7611 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7073#7077#7510#7611 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7606::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7612 = GenSym(5)
      ##a2#7613 = GenSym(6)
      ##div_a#7614 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7612::Float64,##a2#7613::Float64))
      ####afactor#7150#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7613::Float64))
      ####bfactor#7151#7616 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7612::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7613::Float64,##a2#7613::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7621 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7148#7156#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7614::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7631 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7139#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7598 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7599 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7600 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7601 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7605 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7605 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7599::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7593::Tuple{}
  ######x#7354#7356#7594::Int64
  ####_var0#7357#7595::Tuple{}
  ######types#7215#7358#7596::Tuple{Type{Int64}}
  ####fy#7359#7597::Float64
  _var0::Bool
  ##a#7598::Float64
  ##exp_a#7599::Float64
  ##deriv#7600::Float64
  ####G#7078#7601::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7602::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7603::Tuple{}
  ##########x#7070#7072#7076#7081#7604::Float64
  ########_var0#7073#7077#7082#7605::Tuple{}
  ##a#7606::Float64
  ####G#7506#7607::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7507#7608::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7508#7609::Tuple{}
  ##########x#7070#7072#7076#7509#7610::Float64
  ########_var0#7073#7077#7510#7611::Tuple{}
  ##a1#7612::Float64
  ##a2#7613::Float64
  ##div_a#7614::Float64
  ####afactor#7150#7615::Float64
  ####bfactor#7151#7616::Float64
  ########a#7140#7144#7152#7617::Tuple{}
  ########b#7141#7145#7153#7618::Tuple{}
  ########afactor#7142#7146#7154#7619::Float64
  ########bfactor#7143#7147#7155#7620::Float64
  ######_var0#7148#7156#7621::Tuple{}
  ######types#7149#7157#7622::Tuple{Type{Float64}}
  ##a#7623::Float64
  ####G#7501#7624::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7502#7625::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7503#7626::Tuple{}
  ##########x#7070#7072#7076#7504#7627::Float64
  ########_var0#7073#7077#7505#7628::Tuple{}
  ######a#7135#7137#7629::Tuple{}
  ######b#7136#7138#7630::Tuple{}
  ####_var0#7139#7631::Tuple{}
  ##xs#7632::Tuple{}
  ##xs#7633::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7595 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7595 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7597 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7597::Float64)::Bool,(Base.ne_float)(####fy#7359#7597::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7597::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      ####G#7501#7624 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7505#7628 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7505#7628 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7623::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7606 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      ####G#7506#7607 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7510#7611 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7073#7077#7510#7611 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7606::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7612 = GenSym(5)
      ##a2#7613 = GenSym(6)
      ##div_a#7614 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7612::Float64,##a2#7613::Float64))
      ####afactor#7150#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7613::Float64))
      ####bfactor#7151#7616 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7612::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7613::Float64,##a2#7613::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7621 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7148#7156#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7614::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7631 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7139#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7598 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7599 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7600 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7601 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7605 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7605 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7599::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7593::Tuple{}
  ######x#7354#7356#7594::Int64
  ####_var0#7357#7595::Tuple{}
  ######types#7215#7358#7596::Tuple{Type{Int64}}
  ####fy#7359#7597::Float64
  _var0::Bool
  ##a#7598::Float64
  ##exp_a#7599::Float64
  ##deriv#7600::Float64
  ####G#7078#7601::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7602::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7603::Tuple{}
  ##########x#7070#7072#7076#7081#7604::Float64
  ########_var0#7073#7077#7082#7605::Tuple{}
  ##a#7606::Float64
  ####G#7506#7607::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7507#7608::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7508#7609::Tuple{}
  ##########x#7070#7072#7076#7509#7610::Float64
  ########_var0#7073#7077#7510#7611::Tuple{}
  ##a1#7612::Float64
  ##a2#7613::Float64
  ##div_a#7614::Float64
  ####afactor#7150#7615::Float64
  ####bfactor#7151#7616::Float64
  ########a#7140#7144#7152#7617::Tuple{}
  ########b#7141#7145#7153#7618::Tuple{}
  ########afactor#7142#7146#7154#7619::Float64
  ########bfactor#7143#7147#7155#7620::Float64
  ######_var0#7148#7156#7621::Tuple{}
  ######types#7149#7157#7622::Tuple{Type{Float64}}
  ##a#7623::Float64
  ####G#7501#7624::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7502#7625::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7503#7626::Tuple{}
  ##########x#7070#7072#7076#7504#7627::Float64
  ########_var0#7073#7077#7505#7628::Tuple{}
  ######a#7135#7137#7629::Tuple{}
  ######b#7136#7138#7630::Tuple{}
  ####_var0#7139#7631::Tuple{}
  ##xs#7632::Tuple{}
  ##xs#7633::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7595 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7595 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7597 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7597::Float64)::Bool,(Base.ne_float)(####fy#7359#7597::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7597::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      ####G#7501#7624 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7505#7628 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7505#7628 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7623::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7606 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      ####G#7506#7607 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7510#7611 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7073#7077#7510#7611 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7606::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7612 = GenSym(5)
      ##a2#7613 = GenSym(6)
      ##div_a#7614 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7612::Float64,##a2#7613::Float64))
      ####afactor#7150#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7613::Float64))
      ####bfactor#7151#7616 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7612::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7613::Float64,##a2#7613::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7621 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7148#7156#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7614::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7631 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7139#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7598 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7599 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7600 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7601 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7605 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7605 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7599::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  t::Int64
  a::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ######tup#7353#7355#7593::Tuple{}
  ######x#7354#7356#7594::Int64
  ####_var0#7357#7595::Tuple{}
  ######types#7215#7358#7596::Tuple{Type{Int64}}
  ####fy#7359#7597::Float64
  _var0::Bool
  ##a#7598::Float64
  ##exp_a#7599::Float64
  ##deriv#7600::Float64
  ####G#7078#7601::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7079#7602::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7080#7603::Tuple{}
  ##########x#7070#7072#7076#7081#7604::Float64
  ########_var0#7073#7077#7082#7605::Tuple{}
  ##a#7606::Float64
  ####G#7506#7607::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7507#7608::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7508#7609::Tuple{}
  ##########x#7070#7072#7076#7509#7610::Float64
  ########_var0#7073#7077#7510#7611::Tuple{}
  ##a1#7612::Float64
  ##a2#7613::Float64
  ##div_a#7614::Float64
  ####afactor#7150#7615::Float64
  ####bfactor#7151#7616::Float64
  ########a#7140#7144#7152#7617::Tuple{}
  ########b#7141#7145#7153#7618::Tuple{}
  ########afactor#7142#7146#7154#7619::Float64
  ########bfactor#7143#7147#7155#7620::Float64
  ######_var0#7148#7156#7621::Tuple{}
  ######types#7149#7157#7622::Tuple{Type{Float64}}
  ##a#7623::Float64
  ####G#7501#7624::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7068#7074#7502#7625::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7069#7071#7075#7503#7626::Tuple{}
  ##########x#7070#7072#7076#7504#7627::Float64
  ########_var0#7073#7077#7505#7628::Tuple{}
  ######a#7135#7137#7629::Tuple{}
  ######b#7136#7138#7630::Tuple{}
  ####_var0#7139#7631::Tuple{}
  ##xs#7632::Tuple{}
  ##xs#7633::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 69:
      $(Expr(:boundscheck, false))
      ####_var0#7357#7595 = (top(tuple))()::Tuple{}
      goto 2
      ####_var0#7357#7595 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      2: 
      a = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))((top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:σ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,t::Int64))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/epanechnikov.jl, line 70:
      unless (ForwardDiff.iszero)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}})::Bool goto 4
      ####fy#7359#7597 = (Base.box)(Float64,(Base.sitofp)(Float64,0))
      _var0 = (Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)((top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,####fy#7359#7597::Float64)::Bool,(Base.ne_float)(####fy#7359#7597::Float64,9.223372036854776e18)::Bool)),0 === (Base.box)(Int64,(Base.fptosi)(Int64,####fy#7359#7597::Float64))::Bool))
      goto 5
      4: 
      _var0 = false
      5: 
      unless _var0::Bool goto 0
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,1))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) + $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Float64,(Base.sitofp)(Float64,0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) * Distributions.im::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      0: 
      GenSym(13) = (Distributions.im * (top(getfield))(d::Distributions.Epanechnikov{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:μ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * t::Int64::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      GenSym(14) = (Distributions.exp)(GenSym(13))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7623 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      GenSym(8) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7623::Float64,0)::Float64
      ####G#7501#7624 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7505#7628 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7073#7077#7505#7628 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7623::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7606 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))("sin",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      GenSym(1) = (top(ccall))((top(tuple))("cos",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7606::Float64,0)::Float64
      ####G#7506#7607 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7510#7611 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7073#7077#7510#7611 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(4) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(3),##a#7606::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(5) = (top(getfield))(GenSym(4),:value)::Float64
      GenSym(6) = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7612 = GenSym(5)
      ##a2#7613 = GenSym(6)
      ##div_a#7614 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7612::Float64,##a2#7613::Float64))
      ####afactor#7150#7615 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7613::Float64))
      ####bfactor#7151#7616 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7612::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7613::Float64,##a2#7613::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7148#7156#7621 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7148#7156#7621 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7614::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7139#7631 = (top(tuple))()::Tuple{}
      goto 16
      ####_var0#7139#7631 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(15) = (-3.0 * GenSym(14))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}} * $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
      ##a#7598 = (top(getfield))(a::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7599 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7600 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7598::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7078#7601 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7073#7077#7082#7605 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7073#7077#7082#7605 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      return GenSym(15) / $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7599::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Complex{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




