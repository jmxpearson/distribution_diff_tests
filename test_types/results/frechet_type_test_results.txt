____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7143::Float64
  ##div_a#7144::Float64
  ##deriv#7145::Float64
  ####G#7117#7146::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7147::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7148::Tuple{}
  ##########x#7109#7111#7115#7120#7149::Float64
  ########_var0#7112#7116#7121#7150::Tuple{}
  ######tup#7122#7124#7151::Tuple{}
  ####_var0#7125#7152::Tuple{}
  ######types#7123#7126#7153::Tuple{Type{Float64}}
  ##a#7154::Float64
  ####G#7129#7155::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7156::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7157::Tuple{}
  ##########x#7109#7111#7115#7132#7158::Float64
  ########_var0#7112#7116#7133#7159::Tuple{}
  ##a1#7160::Float64
  ##a2#7161::Float64
  ######a#7134#7138#7162::Tuple{}
  ######b#7135#7139#7163::Tuple{}
  ######afactor#7136#7140#7164::Float64
  ######bfactor#7137#7141#7165::Float64
  ####_var0#7142#7166::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7143 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7144 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7143::Float64))
      ##deriv#7145 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7144::Float64,##a#7143::Float64))))
      ####G#7117#7146 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7150 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7121#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7144::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7152 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7125#7152 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7154 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7154::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      ####G#7129#7155 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7159 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7133#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7154::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7160 = GenSym(7)
      ##a2#7161 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7166 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7160::Float64,##a2#7161::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7143::Float64
  ##div_a#7144::Float64
  ##deriv#7145::Float64
  ####G#7117#7146::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7147::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7148::Tuple{}
  ##########x#7109#7111#7115#7120#7149::Float64
  ########_var0#7112#7116#7121#7150::Tuple{}
  ######tup#7122#7124#7151::Tuple{}
  ####_var0#7125#7152::Tuple{}
  ######types#7123#7126#7153::Tuple{Type{Float64}}
  ##a#7154::Float64
  ####G#7129#7155::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7156::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7157::Tuple{}
  ##########x#7109#7111#7115#7132#7158::Float64
  ########_var0#7112#7116#7133#7159::Tuple{}
  ##a1#7160::Float64
  ##a2#7161::Float64
  ######a#7134#7138#7162::Tuple{}
  ######b#7135#7139#7163::Tuple{}
  ######afactor#7136#7140#7164::Float64
  ######bfactor#7137#7141#7165::Float64
  ####_var0#7142#7166::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7143 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7144 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7143::Float64))
      ##deriv#7145 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7144::Float64,##a#7143::Float64))))
      ####G#7117#7146 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7150 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7121#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7144::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7152 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7125#7152 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7154 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7154::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      ####G#7129#7155 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7159 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7133#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7154::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7160 = GenSym(7)
      ##a2#7161 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7166 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7160::Float64,##a2#7161::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7143::Float64
  ##div_a#7144::Float64
  ##deriv#7145::Float64
  ####G#7117#7146::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7147::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7148::Tuple{}
  ##########x#7109#7111#7115#7120#7149::Float64
  ########_var0#7112#7116#7121#7150::Tuple{}
  ######tup#7122#7124#7151::Tuple{}
  ####_var0#7125#7152::Tuple{}
  ######types#7123#7126#7153::Tuple{Type{Float64}}
  ##a#7154::Float64
  ####G#7129#7155::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7156::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7157::Tuple{}
  ##########x#7109#7111#7115#7132#7158::Float64
  ########_var0#7112#7116#7133#7159::Tuple{}
  ##a1#7160::Float64
  ##a2#7161::Float64
  ######a#7134#7138#7162::Tuple{}
  ######b#7135#7139#7163::Tuple{}
  ######afactor#7136#7140#7164::Float64
  ######bfactor#7137#7141#7165::Float64
  ####_var0#7142#7166::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7143 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7144 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7143::Float64))
      ##deriv#7145 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7144::Float64,##a#7143::Float64))))
      ####G#7117#7146 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7150 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7121#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7144::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7152 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7125#7152 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7154 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7154::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      ####G#7129#7155 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7159 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7133#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7154::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7160 = GenSym(7)
      ##a2#7161 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7166 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7160::Float64,##a2#7161::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7143::Float64
  ##div_a#7144::Float64
  ##deriv#7145::Float64
  ####G#7117#7146::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7147::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7148::Tuple{}
  ##########x#7109#7111#7115#7120#7149::Float64
  ########_var0#7112#7116#7121#7150::Tuple{}
  ######tup#7122#7124#7151::Tuple{}
  ####_var0#7125#7152::Tuple{}
  ######types#7123#7126#7153::Tuple{Type{Float64}}
  ##a#7154::Float64
  ####G#7129#7155::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7156::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7157::Tuple{}
  ##########x#7109#7111#7115#7132#7158::Float64
  ########_var0#7112#7116#7133#7159::Tuple{}
  ##a1#7160::Float64
  ##a2#7161::Float64
  ######a#7134#7138#7162::Tuple{}
  ######b#7135#7139#7163::Tuple{}
  ######afactor#7136#7140#7164::Float64
  ######bfactor#7137#7141#7165::Float64
  ####_var0#7142#7166::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7143 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7144 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7143::Float64))
      ##deriv#7145 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7144::Float64,##a#7143::Float64))))
      ####G#7117#7146 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7150 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7121#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7144::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7152 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7125#7152 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7154 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7154::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      ####G#7129#7155 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7159 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7133#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7154::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7160 = GenSym(7)
      ##a2#7161 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7166 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7160::Float64,##a2#7161::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7143::Float64
  ##div_a#7144::Float64
  ##deriv#7145::Float64
  ####G#7117#7146::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7147::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7148::Tuple{}
  ##########x#7109#7111#7115#7120#7149::Float64
  ########_var0#7112#7116#7121#7150::Tuple{}
  ######tup#7122#7124#7151::Tuple{}
  ####_var0#7125#7152::Tuple{}
  ######types#7123#7126#7153::Tuple{Type{Float64}}
  ##a#7154::Float64
  ####G#7129#7155::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7156::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7157::Tuple{}
  ##########x#7109#7111#7115#7132#7158::Float64
  ########_var0#7112#7116#7133#7159::Tuple{}
  ##a1#7160::Float64
  ##a2#7161::Float64
  ######a#7134#7138#7162::Tuple{}
  ######b#7135#7139#7163::Tuple{}
  ######afactor#7136#7140#7164::Float64
  ######bfactor#7137#7141#7165::Float64
  ####_var0#7142#7166::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7143 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7144 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7143::Float64))
      ##deriv#7145 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7144::Float64,##a#7143::Float64))))
      ####G#7117#7146 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7150 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7121#7150 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7144::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7152 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7125#7152 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7154 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7154::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7154::Float64,0)::Float64
      ####G#7129#7155 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7159 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7112#7116#7133#7159 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7154::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7160 = GenSym(7)
      ##a2#7161 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7166 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7166 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7160::Float64,##a2#7161::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7195::Float64
  ##div_a#7196::Float64
  ##deriv#7197::Float64
  ####G#7117#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7200::Tuple{}
  ##########x#7109#7111#7115#7120#7201::Float64
  ########_var0#7112#7116#7121#7202::Tuple{}
  ######tup#7122#7124#7203::Tuple{}
  ####_var0#7125#7204::Tuple{}
  ######types#7123#7126#7205::Tuple{Type{Float64}}
  ##a#7206::Float64
  ####G#7129#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7209::Tuple{}
  ##########x#7109#7111#7115#7132#7210::Float64
  ########_var0#7112#7116#7133#7211::Tuple{}
  ##a#7212::Float64
  ##exp_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7177#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7217::Tuple{}
  ##########x#7109#7111#7115#7180#7218::Float64
  ########_var0#7112#7116#7181#7219::Tuple{}
  ########tup#7108#7182#7186#7220::Tuple{}
  ########x#7109#7183#7187#7221::Float64
  ######_var0#7184#7188#7222::Tuple{}
  ########types#7123#7185#7189#7223::Tuple{Type{Float64}}
  ######tup#7122#7124#7224::Tuple{}
  ####_var0#7125#7225::Tuple{}
  ######types#7123#7126#7226::Tuple{Type{Float64}}
  ##a#7227::Float64
  ####G#7129#7228::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7229::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7230::Tuple{}
  ##########x#7109#7111#7115#7132#7231::Float64
  ########_var0#7112#7116#7133#7232::Tuple{}
  ######a#7190#7192#7233::Tuple{}
  ######b#7191#7193#7234::Tuple{}
  ####_var0#7194#7235::Tuple{}
  ##a#7236::Float64
  ##exp_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7177#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7241::Tuple{}
  ##########x#7109#7111#7115#7180#7242::Float64
  ########_var0#7112#7116#7181#7243::Tuple{}
  ##a1#7244::Float64
  ##a2#7245::Float64
  ######a#7134#7138#7246::Tuple{}
  ######b#7135#7139#7247::Tuple{}
  ######afactor#7136#7140#7248::Float64
  ######bfactor#7137#7141#7249::Float64
  ####_var0#7142#7250::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7195 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7195::Float64))
      ##deriv#7197 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7196::Float64,##a#7195::Float64))))
      ####G#7117#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7202 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7236 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7243 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7181#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7222 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7184#7188#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7225 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7125#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7227 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7227::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      ####G#7129#7228 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7232 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7112#7116#7133#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7227::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7204 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7206 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7206::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      ####G#7129#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7211 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7206::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7212 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7219 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7112#7116#7181#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7235 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7194#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7244 = GenSym(14)
      ##a2#7245 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7250 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7142#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7244::Float64,##a2#7245::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7195::Float64
  ##div_a#7196::Float64
  ##deriv#7197::Float64
  ####G#7117#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7200::Tuple{}
  ##########x#7109#7111#7115#7120#7201::Float64
  ########_var0#7112#7116#7121#7202::Tuple{}
  ######tup#7122#7124#7203::Tuple{}
  ####_var0#7125#7204::Tuple{}
  ######types#7123#7126#7205::Tuple{Type{Float64}}
  ##a#7206::Float64
  ####G#7129#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7209::Tuple{}
  ##########x#7109#7111#7115#7132#7210::Float64
  ########_var0#7112#7116#7133#7211::Tuple{}
  ##a#7212::Float64
  ##exp_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7177#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7217::Tuple{}
  ##########x#7109#7111#7115#7180#7218::Float64
  ########_var0#7112#7116#7181#7219::Tuple{}
  ########tup#7108#7182#7186#7220::Tuple{}
  ########x#7109#7183#7187#7221::Float64
  ######_var0#7184#7188#7222::Tuple{}
  ########types#7123#7185#7189#7223::Tuple{Type{Float64}}
  ######tup#7122#7124#7224::Tuple{}
  ####_var0#7125#7225::Tuple{}
  ######types#7123#7126#7226::Tuple{Type{Float64}}
  ##a#7227::Float64
  ####G#7129#7228::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7229::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7230::Tuple{}
  ##########x#7109#7111#7115#7132#7231::Float64
  ########_var0#7112#7116#7133#7232::Tuple{}
  ######a#7190#7192#7233::Tuple{}
  ######b#7191#7193#7234::Tuple{}
  ####_var0#7194#7235::Tuple{}
  ##a#7236::Float64
  ##exp_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7177#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7241::Tuple{}
  ##########x#7109#7111#7115#7180#7242::Float64
  ########_var0#7112#7116#7181#7243::Tuple{}
  ##a1#7244::Float64
  ##a2#7245::Float64
  ######a#7134#7138#7246::Tuple{}
  ######b#7135#7139#7247::Tuple{}
  ######afactor#7136#7140#7248::Float64
  ######bfactor#7137#7141#7249::Float64
  ####_var0#7142#7250::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7195 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7195::Float64))
      ##deriv#7197 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7196::Float64,##a#7195::Float64))))
      ####G#7117#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7202 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7236 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7243 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7181#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7222 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7184#7188#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7225 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7125#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7227 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7227::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      ####G#7129#7228 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7232 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7112#7116#7133#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7227::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7204 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7206 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7206::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      ####G#7129#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7211 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7206::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7212 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7219 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7112#7116#7181#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7235 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7194#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7244 = GenSym(14)
      ##a2#7245 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7250 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7142#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7244::Float64,##a2#7245::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7195::Float64
  ##div_a#7196::Float64
  ##deriv#7197::Float64
  ####G#7117#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7200::Tuple{}
  ##########x#7109#7111#7115#7120#7201::Float64
  ########_var0#7112#7116#7121#7202::Tuple{}
  ######tup#7122#7124#7203::Tuple{}
  ####_var0#7125#7204::Tuple{}
  ######types#7123#7126#7205::Tuple{Type{Float64}}
  ##a#7206::Float64
  ####G#7129#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7209::Tuple{}
  ##########x#7109#7111#7115#7132#7210::Float64
  ########_var0#7112#7116#7133#7211::Tuple{}
  ##a#7212::Float64
  ##exp_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7177#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7217::Tuple{}
  ##########x#7109#7111#7115#7180#7218::Float64
  ########_var0#7112#7116#7181#7219::Tuple{}
  ########tup#7108#7182#7186#7220::Tuple{}
  ########x#7109#7183#7187#7221::Float64
  ######_var0#7184#7188#7222::Tuple{}
  ########types#7123#7185#7189#7223::Tuple{Type{Float64}}
  ######tup#7122#7124#7224::Tuple{}
  ####_var0#7125#7225::Tuple{}
  ######types#7123#7126#7226::Tuple{Type{Float64}}
  ##a#7227::Float64
  ####G#7129#7228::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7229::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7230::Tuple{}
  ##########x#7109#7111#7115#7132#7231::Float64
  ########_var0#7112#7116#7133#7232::Tuple{}
  ######a#7190#7192#7233::Tuple{}
  ######b#7191#7193#7234::Tuple{}
  ####_var0#7194#7235::Tuple{}
  ##a#7236::Float64
  ##exp_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7177#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7241::Tuple{}
  ##########x#7109#7111#7115#7180#7242::Float64
  ########_var0#7112#7116#7181#7243::Tuple{}
  ##a1#7244::Float64
  ##a2#7245::Float64
  ######a#7134#7138#7246::Tuple{}
  ######b#7135#7139#7247::Tuple{}
  ######afactor#7136#7140#7248::Float64
  ######bfactor#7137#7141#7249::Float64
  ####_var0#7142#7250::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7195 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7195::Float64))
      ##deriv#7197 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7196::Float64,##a#7195::Float64))))
      ####G#7117#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7202 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7236 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7243 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7181#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7222 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7184#7188#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7225 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7125#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7227 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7227::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      ####G#7129#7228 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7232 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7112#7116#7133#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7227::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7204 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7206 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7206::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      ####G#7129#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7211 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7206::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7212 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7219 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7112#7116#7181#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7235 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7194#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7244 = GenSym(14)
      ##a2#7245 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7250 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7142#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7244::Float64,##a2#7245::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7195::Float64
  ##div_a#7196::Float64
  ##deriv#7197::Float64
  ####G#7117#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7200::Tuple{}
  ##########x#7109#7111#7115#7120#7201::Float64
  ########_var0#7112#7116#7121#7202::Tuple{}
  ######tup#7122#7124#7203::Tuple{}
  ####_var0#7125#7204::Tuple{}
  ######types#7123#7126#7205::Tuple{Type{Float64}}
  ##a#7206::Float64
  ####G#7129#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7209::Tuple{}
  ##########x#7109#7111#7115#7132#7210::Float64
  ########_var0#7112#7116#7133#7211::Tuple{}
  ##a#7212::Float64
  ##exp_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7177#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7217::Tuple{}
  ##########x#7109#7111#7115#7180#7218::Float64
  ########_var0#7112#7116#7181#7219::Tuple{}
  ########tup#7108#7182#7186#7220::Tuple{}
  ########x#7109#7183#7187#7221::Float64
  ######_var0#7184#7188#7222::Tuple{}
  ########types#7123#7185#7189#7223::Tuple{Type{Float64}}
  ######tup#7122#7124#7224::Tuple{}
  ####_var0#7125#7225::Tuple{}
  ######types#7123#7126#7226::Tuple{Type{Float64}}
  ##a#7227::Float64
  ####G#7129#7228::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7229::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7230::Tuple{}
  ##########x#7109#7111#7115#7132#7231::Float64
  ########_var0#7112#7116#7133#7232::Tuple{}
  ######a#7190#7192#7233::Tuple{}
  ######b#7191#7193#7234::Tuple{}
  ####_var0#7194#7235::Tuple{}
  ##a#7236::Float64
  ##exp_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7177#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7241::Tuple{}
  ##########x#7109#7111#7115#7180#7242::Float64
  ########_var0#7112#7116#7181#7243::Tuple{}
  ##a1#7244::Float64
  ##a2#7245::Float64
  ######a#7134#7138#7246::Tuple{}
  ######b#7135#7139#7247::Tuple{}
  ######afactor#7136#7140#7248::Float64
  ######bfactor#7137#7141#7249::Float64
  ####_var0#7142#7250::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7195 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7195::Float64))
      ##deriv#7197 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7196::Float64,##a#7195::Float64))))
      ####G#7117#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7202 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7236 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7243 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7181#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7222 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7184#7188#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7225 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7125#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7227 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7227::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      ####G#7129#7228 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7232 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7112#7116#7133#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7227::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7204 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7206 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7206::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      ####G#7129#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7211 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7206::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7212 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7219 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7112#7116#7181#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7235 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7194#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7244 = GenSym(14)
      ##a2#7245 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7250 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7142#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7244::Float64,##a2#7245::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7195::Float64
  ##div_a#7196::Float64
  ##deriv#7197::Float64
  ####G#7117#7198::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7199::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7200::Tuple{}
  ##########x#7109#7111#7115#7120#7201::Float64
  ########_var0#7112#7116#7121#7202::Tuple{}
  ######tup#7122#7124#7203::Tuple{}
  ####_var0#7125#7204::Tuple{}
  ######types#7123#7126#7205::Tuple{Type{Float64}}
  ##a#7206::Float64
  ####G#7129#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7209::Tuple{}
  ##########x#7109#7111#7115#7132#7210::Float64
  ########_var0#7112#7116#7133#7211::Tuple{}
  ##a#7212::Float64
  ##exp_a#7213::Float64
  ##deriv#7214::Float64
  ####G#7177#7215::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7216::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7217::Tuple{}
  ##########x#7109#7111#7115#7180#7218::Float64
  ########_var0#7112#7116#7181#7219::Tuple{}
  ########tup#7108#7182#7186#7220::Tuple{}
  ########x#7109#7183#7187#7221::Float64
  ######_var0#7184#7188#7222::Tuple{}
  ########types#7123#7185#7189#7223::Tuple{Type{Float64}}
  ######tup#7122#7124#7224::Tuple{}
  ####_var0#7125#7225::Tuple{}
  ######types#7123#7126#7226::Tuple{Type{Float64}}
  ##a#7227::Float64
  ####G#7129#7228::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7229::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7230::Tuple{}
  ##########x#7109#7111#7115#7132#7231::Float64
  ########_var0#7112#7116#7133#7232::Tuple{}
  ######a#7190#7192#7233::Tuple{}
  ######b#7191#7193#7234::Tuple{}
  ####_var0#7194#7235::Tuple{}
  ##a#7236::Float64
  ##exp_a#7237::Float64
  ##deriv#7238::Float64
  ####G#7177#7239::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7240::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7241::Tuple{}
  ##########x#7109#7111#7115#7180#7242::Float64
  ########_var0#7112#7116#7181#7243::Tuple{}
  ##a1#7244::Float64
  ##a2#7245::Float64
  ######a#7134#7138#7246::Tuple{}
  ######b#7135#7139#7247::Tuple{}
  ######afactor#7136#7140#7248::Float64
  ######bfactor#7137#7141#7249::Float64
  ####_var0#7142#7250::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7195 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7196 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7195::Float64))
      ##deriv#7197 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7196::Float64,##a#7195::Float64))))
      ####G#7117#7198 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7202 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7202 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7196::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7236 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7237 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7238 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7236::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7239 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7243 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7181#7243 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7237::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7222 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7184#7188#7222 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7225 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7125#7225 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7227 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7227::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7227::Float64,0)::Float64
      ####G#7129#7228 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7232 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7112#7116#7133#7232 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7227::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7204 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7204 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7206 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7206::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7206::Float64,0)::Float64
      ####G#7129#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7211 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7206::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7212 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7213 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7214 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7212::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7215 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7219 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7112#7116#7181#7219 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7213::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7235 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7194#7235 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7244 = GenSym(14)
      ##a2#7245 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7250 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7142#7250 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7244::Float64,##a2#7245::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7274::Float64
  ##div_a#7275::Float64
  ##deriv#7276::Float64
  ####G#7117#7277::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7278::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7279::Tuple{}
  ##########x#7109#7111#7115#7120#7280::Float64
  ########_var0#7112#7116#7121#7281::Tuple{}
  ######tup#7122#7124#7282::Tuple{}
  ####_var0#7125#7283::Tuple{}
  ######types#7123#7126#7284::Tuple{Type{Float64}}
  ##a1#7285::Float64
  ##a2#7286::Float64
  ##exp_a#7287::Float64
  ##powval#7288::Float64
  ##logval#7289::Float64
  ##new_bs#7290::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7260#7291::Float64
  ####exp_a#7261#7292::Float64
  ####deriv#7262#7293::Float64
  ######G#7254#7263#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7107#7113#7255#7264#7295::Tuple{Type{Float64},Type{Float64}}
  ############tup#7108#7110#7114#7256#7265#7296::Tuple{}
  ############x#7109#7111#7115#7257#7266#7297::Float64
  ##########_var0#7112#7116#7258#7267#7298::Tuple{}
  ######a#7134#7268#7299::Tuple{}
  ######b#7135#7269#7300::Tuple{}
  ######afactor#7136#7270#7301::Float64
  ######bfactor#7137#7271#7302::Float64
  ####_var0#7272#7303::Tuple{}
  ######types#7259#7273#7304::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7134#7138#7307::Tuple{}
  ######b#7135#7139#7308::Tuple{}
  ######afactor#7136#7140#7309::Float64
  ######bfactor#7137#7141#7310::Float64
  ####_var0#7142#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7274 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7275 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7274::Float64))
      ##deriv#7276 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7275::Float64,##a#7274::Float64))))
      ####G#7117#7277 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7281 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7275::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7283 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7125#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7285"))
      NewvarNode(symbol("##a2#7286"))
      NewvarNode(symbol("##exp_a#7287"))
      NewvarNode(symbol("##powval#7288"))
      NewvarNode(symbol("##logval#7289"))
      NewvarNode(symbol("##new_bs#7290"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7260#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7261#7292 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(7),0)::Float64
      ####deriv#7262#7293 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(7))))::Float64))
      ######G#7254#7263#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7112#7116#7258#7267#7298 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7112#7116#7258#7267#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7261#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7285 = GenSym(1)
      ##a2#7286 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,##a2#7286::Float64,0)::Float64
      ##exp_a#7287 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,##a2#7286::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7286::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,GenSym(14),0)::Float64
      ##powval#7288 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7286::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0)::Float64
      ##logval#7289 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7287::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7285::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7272#7303 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7272#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7290 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7305 = GenSym(21)
      ##a2#7306 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7311 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7274::Float64
  ##div_a#7275::Float64
  ##deriv#7276::Float64
  ####G#7117#7277::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7278::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7279::Tuple{}
  ##########x#7109#7111#7115#7120#7280::Float64
  ########_var0#7112#7116#7121#7281::Tuple{}
  ######tup#7122#7124#7282::Tuple{}
  ####_var0#7125#7283::Tuple{}
  ######types#7123#7126#7284::Tuple{Type{Float64}}
  ##a1#7285::Float64
  ##a2#7286::Float64
  ##exp_a#7287::Float64
  ##powval#7288::Float64
  ##logval#7289::Float64
  ##new_bs#7290::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7260#7291::Float64
  ####exp_a#7261#7292::Float64
  ####deriv#7262#7293::Float64
  ######G#7254#7263#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7107#7113#7255#7264#7295::Tuple{Type{Float64},Type{Float64}}
  ############tup#7108#7110#7114#7256#7265#7296::Tuple{}
  ############x#7109#7111#7115#7257#7266#7297::Float64
  ##########_var0#7112#7116#7258#7267#7298::Tuple{}
  ######a#7134#7268#7299::Tuple{}
  ######b#7135#7269#7300::Tuple{}
  ######afactor#7136#7270#7301::Float64
  ######bfactor#7137#7271#7302::Float64
  ####_var0#7272#7303::Tuple{}
  ######types#7259#7273#7304::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7134#7138#7307::Tuple{}
  ######b#7135#7139#7308::Tuple{}
  ######afactor#7136#7140#7309::Float64
  ######bfactor#7137#7141#7310::Float64
  ####_var0#7142#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7274 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7275 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7274::Float64))
      ##deriv#7276 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7275::Float64,##a#7274::Float64))))
      ####G#7117#7277 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7281 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7275::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7283 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7125#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7285"))
      NewvarNode(symbol("##a2#7286"))
      NewvarNode(symbol("##exp_a#7287"))
      NewvarNode(symbol("##powval#7288"))
      NewvarNode(symbol("##logval#7289"))
      NewvarNode(symbol("##new_bs#7290"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7260#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7261#7292 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(7),0)::Float64
      ####deriv#7262#7293 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(7))))::Float64))
      ######G#7254#7263#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7112#7116#7258#7267#7298 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7112#7116#7258#7267#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7261#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7285 = GenSym(1)
      ##a2#7286 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,##a2#7286::Float64,0)::Float64
      ##exp_a#7287 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,##a2#7286::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7286::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,GenSym(14),0)::Float64
      ##powval#7288 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7286::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0)::Float64
      ##logval#7289 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7287::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7285::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7272#7303 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7272#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7290 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7305 = GenSym(21)
      ##a2#7306 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7311 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7274::Float64
  ##div_a#7275::Float64
  ##deriv#7276::Float64
  ####G#7117#7277::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7278::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7279::Tuple{}
  ##########x#7109#7111#7115#7120#7280::Float64
  ########_var0#7112#7116#7121#7281::Tuple{}
  ######tup#7122#7124#7282::Tuple{}
  ####_var0#7125#7283::Tuple{}
  ######types#7123#7126#7284::Tuple{Type{Float64}}
  ##a1#7285::Float64
  ##a2#7286::Float64
  ##exp_a#7287::Float64
  ##powval#7288::Float64
  ##logval#7289::Float64
  ##new_bs#7290::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7260#7291::Float64
  ####exp_a#7261#7292::Float64
  ####deriv#7262#7293::Float64
  ######G#7254#7263#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7107#7113#7255#7264#7295::Tuple{Type{Float64},Type{Float64}}
  ############tup#7108#7110#7114#7256#7265#7296::Tuple{}
  ############x#7109#7111#7115#7257#7266#7297::Float64
  ##########_var0#7112#7116#7258#7267#7298::Tuple{}
  ######a#7134#7268#7299::Tuple{}
  ######b#7135#7269#7300::Tuple{}
  ######afactor#7136#7270#7301::Float64
  ######bfactor#7137#7271#7302::Float64
  ####_var0#7272#7303::Tuple{}
  ######types#7259#7273#7304::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7134#7138#7307::Tuple{}
  ######b#7135#7139#7308::Tuple{}
  ######afactor#7136#7140#7309::Float64
  ######bfactor#7137#7141#7310::Float64
  ####_var0#7142#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7274 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7275 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7274::Float64))
      ##deriv#7276 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7275::Float64,##a#7274::Float64))))
      ####G#7117#7277 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7281 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7275::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7283 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7125#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7285"))
      NewvarNode(symbol("##a2#7286"))
      NewvarNode(symbol("##exp_a#7287"))
      NewvarNode(symbol("##powval#7288"))
      NewvarNode(symbol("##logval#7289"))
      NewvarNode(symbol("##new_bs#7290"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7260#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7261#7292 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(7),0)::Float64
      ####deriv#7262#7293 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(7))))::Float64))
      ######G#7254#7263#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7112#7116#7258#7267#7298 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7112#7116#7258#7267#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7261#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7285 = GenSym(1)
      ##a2#7286 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,##a2#7286::Float64,0)::Float64
      ##exp_a#7287 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,##a2#7286::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7286::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,GenSym(14),0)::Float64
      ##powval#7288 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7286::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0)::Float64
      ##logval#7289 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7287::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7285::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7272#7303 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7272#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7290 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7305 = GenSym(21)
      ##a2#7306 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7311 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7274::Float64
  ##div_a#7275::Float64
  ##deriv#7276::Float64
  ####G#7117#7277::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7278::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7279::Tuple{}
  ##########x#7109#7111#7115#7120#7280::Float64
  ########_var0#7112#7116#7121#7281::Tuple{}
  ######tup#7122#7124#7282::Tuple{}
  ####_var0#7125#7283::Tuple{}
  ######types#7123#7126#7284::Tuple{Type{Float64}}
  ##a1#7285::Float64
  ##a2#7286::Float64
  ##exp_a#7287::Float64
  ##powval#7288::Float64
  ##logval#7289::Float64
  ##new_bs#7290::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7260#7291::Float64
  ####exp_a#7261#7292::Float64
  ####deriv#7262#7293::Float64
  ######G#7254#7263#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7107#7113#7255#7264#7295::Tuple{Type{Float64},Type{Float64}}
  ############tup#7108#7110#7114#7256#7265#7296::Tuple{}
  ############x#7109#7111#7115#7257#7266#7297::Float64
  ##########_var0#7112#7116#7258#7267#7298::Tuple{}
  ######a#7134#7268#7299::Tuple{}
  ######b#7135#7269#7300::Tuple{}
  ######afactor#7136#7270#7301::Float64
  ######bfactor#7137#7271#7302::Float64
  ####_var0#7272#7303::Tuple{}
  ######types#7259#7273#7304::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7134#7138#7307::Tuple{}
  ######b#7135#7139#7308::Tuple{}
  ######afactor#7136#7140#7309::Float64
  ######bfactor#7137#7141#7310::Float64
  ####_var0#7142#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7274 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7275 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7274::Float64))
      ##deriv#7276 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7275::Float64,##a#7274::Float64))))
      ####G#7117#7277 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7281 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7275::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7283 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7125#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7285"))
      NewvarNode(symbol("##a2#7286"))
      NewvarNode(symbol("##exp_a#7287"))
      NewvarNode(symbol("##powval#7288"))
      NewvarNode(symbol("##logval#7289"))
      NewvarNode(symbol("##new_bs#7290"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7260#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7261#7292 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(7),0)::Float64
      ####deriv#7262#7293 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(7))))::Float64))
      ######G#7254#7263#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7112#7116#7258#7267#7298 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7112#7116#7258#7267#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7261#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7285 = GenSym(1)
      ##a2#7286 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,##a2#7286::Float64,0)::Float64
      ##exp_a#7287 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,##a2#7286::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7286::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,GenSym(14),0)::Float64
      ##powval#7288 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7286::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0)::Float64
      ##logval#7289 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7287::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7285::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7272#7303 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7272#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7290 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7305 = GenSym(21)
      ##a2#7306 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7311 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7274::Float64
  ##div_a#7275::Float64
  ##deriv#7276::Float64
  ####G#7117#7277::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7278::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7279::Tuple{}
  ##########x#7109#7111#7115#7120#7280::Float64
  ########_var0#7112#7116#7121#7281::Tuple{}
  ######tup#7122#7124#7282::Tuple{}
  ####_var0#7125#7283::Tuple{}
  ######types#7123#7126#7284::Tuple{Type{Float64}}
  ##a1#7285::Float64
  ##a2#7286::Float64
  ##exp_a#7287::Float64
  ##powval#7288::Float64
  ##logval#7289::Float64
  ##new_bs#7290::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7260#7291::Float64
  ####exp_a#7261#7292::Float64
  ####deriv#7262#7293::Float64
  ######G#7254#7263#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7107#7113#7255#7264#7295::Tuple{Type{Float64},Type{Float64}}
  ############tup#7108#7110#7114#7256#7265#7296::Tuple{}
  ############x#7109#7111#7115#7257#7266#7297::Float64
  ##########_var0#7112#7116#7258#7267#7298::Tuple{}
  ######a#7134#7268#7299::Tuple{}
  ######b#7135#7269#7300::Tuple{}
  ######afactor#7136#7270#7301::Float64
  ######bfactor#7137#7271#7302::Float64
  ####_var0#7272#7303::Tuple{}
  ######types#7259#7273#7304::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7305::Float64
  ##a2#7306::Float64
  ######a#7134#7138#7307::Tuple{}
  ######b#7135#7139#7308::Tuple{}
  ######afactor#7136#7140#7309::Float64
  ######bfactor#7137#7141#7310::Float64
  ####_var0#7142#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7274 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7275 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7274::Float64))
      ##deriv#7276 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7275::Float64,##a#7274::Float64))))
      ####G#7117#7277 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7281 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7281 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7275::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7125#7283 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7125#7283 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7285"))
      NewvarNode(symbol("##a2#7286"))
      NewvarNode(symbol("##exp_a#7287"))
      NewvarNode(symbol("##powval#7288"))
      NewvarNode(symbol("##logval#7289"))
      NewvarNode(symbol("##new_bs#7290"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7260#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7261#7292 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7260#7291::Float64,0,GenSym(7),0)::Float64
      ####deriv#7262#7293 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7260#7291::Float64,GenSym(7))))::Float64))
      ######G#7254#7263#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7112#7116#7258#7267#7298 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7112#7116#7258#7267#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7261#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7285 = GenSym(1)
      ##a2#7286 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,##a2#7286::Float64,0)::Float64
      ##exp_a#7287 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,##a2#7286::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7286::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0,GenSym(14),0)::Float64
      ##powval#7288 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7286::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7285::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7285::Float64,0)::Float64
      ##logval#7289 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7287::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7285::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7272#7303 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7272#7303 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7290 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7305 = GenSym(21)
      ##a2#7306 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7311 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7142#7311 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7305::Float64,##a2#7306::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7314::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7314 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7314::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7314::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7314::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7314::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7314 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7314::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7314::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7314::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7314::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7314 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7314::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7314::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7314::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7314::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7314 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7314::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7314::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7314::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7320::Float64
  ##div_a#7321::Float64
  ##deriv#7322::Float64
  ####G#7117#7323::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7324::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7325::Tuple{}
  ##########x#7109#7111#7115#7120#7326::Float64
  ########_var0#7112#7116#7121#7327::Tuple{}
  ##a#7328::Float64
  ##exp_a#7329::Float64
  ##deriv#7330::Float64
  ####G#7315#7331::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7316#7332::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7317#7333::Tuple{}
  ##########x#7109#7111#7115#7318#7334::Float64
  ########_var0#7112#7116#7319#7335::Tuple{}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7134#7138#7338::Tuple{}
  ######b#7135#7139#7339::Tuple{}
  ######afactor#7136#7140#7340::Float64
  ######bfactor#7137#7141#7341::Float64
  ####_var0#7142#7342::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7320 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7321 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7320::Float64))
      ##deriv#7322 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7321::Float64,##a#7320::Float64))))
      ####G#7117#7323 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7327 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7321::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7328 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7328::Float64,0)::Float64
      ##exp_a#7329 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7328::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7330 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7329::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7315#7331 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7319#7335 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7319#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7329::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7336 = GenSym(7)
      ##a2#7337 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7342 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7142#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7320::Float64
  ##div_a#7321::Float64
  ##deriv#7322::Float64
  ####G#7117#7323::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7324::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7325::Tuple{}
  ##########x#7109#7111#7115#7120#7326::Float64
  ########_var0#7112#7116#7121#7327::Tuple{}
  ##a#7328::Float64
  ##exp_a#7329::Float64
  ##deriv#7330::Float64
  ####G#7315#7331::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7316#7332::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7317#7333::Tuple{}
  ##########x#7109#7111#7115#7318#7334::Float64
  ########_var0#7112#7116#7319#7335::Tuple{}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7134#7138#7338::Tuple{}
  ######b#7135#7139#7339::Tuple{}
  ######afactor#7136#7140#7340::Float64
  ######bfactor#7137#7141#7341::Float64
  ####_var0#7142#7342::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7320 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7321 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7320::Float64))
      ##deriv#7322 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7321::Float64,##a#7320::Float64))))
      ####G#7117#7323 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7327 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7321::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7328 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7328::Float64,0)::Float64
      ##exp_a#7329 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7328::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7330 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7329::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7315#7331 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7319#7335 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7319#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7329::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7336 = GenSym(7)
      ##a2#7337 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7342 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7142#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7320::Float64
  ##div_a#7321::Float64
  ##deriv#7322::Float64
  ####G#7117#7323::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7324::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7325::Tuple{}
  ##########x#7109#7111#7115#7120#7326::Float64
  ########_var0#7112#7116#7121#7327::Tuple{}
  ##a#7328::Float64
  ##exp_a#7329::Float64
  ##deriv#7330::Float64
  ####G#7315#7331::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7316#7332::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7317#7333::Tuple{}
  ##########x#7109#7111#7115#7318#7334::Float64
  ########_var0#7112#7116#7319#7335::Tuple{}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7134#7138#7338::Tuple{}
  ######b#7135#7139#7339::Tuple{}
  ######afactor#7136#7140#7340::Float64
  ######bfactor#7137#7141#7341::Float64
  ####_var0#7142#7342::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7320 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7321 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7320::Float64))
      ##deriv#7322 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7321::Float64,##a#7320::Float64))))
      ####G#7117#7323 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7327 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7321::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7328 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7328::Float64,0)::Float64
      ##exp_a#7329 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7328::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7330 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7329::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7315#7331 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7319#7335 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7319#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7329::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7336 = GenSym(7)
      ##a2#7337 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7342 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7142#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7320::Float64
  ##div_a#7321::Float64
  ##deriv#7322::Float64
  ####G#7117#7323::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7324::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7325::Tuple{}
  ##########x#7109#7111#7115#7120#7326::Float64
  ########_var0#7112#7116#7121#7327::Tuple{}
  ##a#7328::Float64
  ##exp_a#7329::Float64
  ##deriv#7330::Float64
  ####G#7315#7331::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7316#7332::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7317#7333::Tuple{}
  ##########x#7109#7111#7115#7318#7334::Float64
  ########_var0#7112#7116#7319#7335::Tuple{}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7134#7138#7338::Tuple{}
  ######b#7135#7139#7339::Tuple{}
  ######afactor#7136#7140#7340::Float64
  ######bfactor#7137#7141#7341::Float64
  ####_var0#7142#7342::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7320 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7321 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7320::Float64))
      ##deriv#7322 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7321::Float64,##a#7320::Float64))))
      ####G#7117#7323 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7327 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7321::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7328 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7328::Float64,0)::Float64
      ##exp_a#7329 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7328::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7330 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7329::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7315#7331 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7319#7335 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7319#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7329::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7336 = GenSym(7)
      ##a2#7337 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7342 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7142#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7320::Float64
  ##div_a#7321::Float64
  ##deriv#7322::Float64
  ####G#7117#7323::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7324::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7325::Tuple{}
  ##########x#7109#7111#7115#7120#7326::Float64
  ########_var0#7112#7116#7121#7327::Tuple{}
  ##a#7328::Float64
  ##exp_a#7329::Float64
  ##deriv#7330::Float64
  ####G#7315#7331::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7316#7332::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7317#7333::Tuple{}
  ##########x#7109#7111#7115#7318#7334::Float64
  ########_var0#7112#7116#7319#7335::Tuple{}
  ##a1#7336::Float64
  ##a2#7337::Float64
  ######a#7134#7138#7338::Tuple{}
  ######b#7135#7139#7339::Tuple{}
  ######afactor#7136#7140#7340::Float64
  ######bfactor#7137#7141#7341::Float64
  ####_var0#7142#7342::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7320 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7321 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7320::Float64))
      ##deriv#7322 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7321::Float64,##a#7320::Float64))))
      ####G#7117#7323 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7327 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7327 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7321::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7328 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7328::Float64,0)::Float64
      ##exp_a#7329 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7328::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7330 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7329::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7315#7331 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7319#7335 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7319#7335 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7329::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7336 = GenSym(7)
      ##a2#7337 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7342 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7142#7342 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7336::Float64,##a2#7337::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7343::Tuple{}
  ##xs#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7343::Tuple{}
  ##xs#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7385::Float64
  ##div_a#7386::Float64
  ##deriv#7387::Float64
  ####G#7117#7388::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7389::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7390::Tuple{}
  ##########x#7109#7111#7115#7120#7391::Float64
  ########_var0#7112#7116#7121#7392::Tuple{}
  ######tup#7122#7124#7393::Tuple{}
  ####_var0#7125#7394::Tuple{}
  ######types#7123#7126#7395::Tuple{Type{Float64}}
  ##a#7396::Float64
  ####G#7129#7397::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7398::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7399::Tuple{}
  ##########x#7109#7111#7115#7132#7400::Float64
  ########_var0#7112#7116#7133#7401::Tuple{}
  ########tup#7108#7182#7186#7402::Tuple{}
  ########x#7109#7183#7187#7403::Float64
  ######_var0#7184#7188#7404::Tuple{}
  ########types#7123#7185#7189#7405::Tuple{Type{Float64}}
  ######tup#7122#7124#7406::Tuple{}
  ####_var0#7125#7407::Tuple{}
  ######types#7123#7126#7408::Tuple{Type{Float64}}
  ##a#7409::Float64
  ####G#7129#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7412::Tuple{}
  ##########x#7109#7111#7115#7132#7413::Float64
  ########_var0#7112#7116#7133#7414::Tuple{}
  ########tup#7108#7182#7186#7415::Tuple{}
  ########x#7109#7183#7187#7416::Float64
  ######_var0#7184#7188#7417::Tuple{}
  ########types#7123#7185#7189#7418::Tuple{Type{Float64}}
  ######tup#7122#7124#7419::Tuple{}
  ####_var0#7125#7420::Tuple{}
  ######types#7123#7126#7421::Tuple{Type{Float64}}
  ##a#7422::Float64
  ####G#7129#7423::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7424::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7425::Tuple{}
  ##########x#7109#7111#7115#7132#7426::Float64
  ########_var0#7112#7116#7133#7427::Tuple{}
  ##a#7428::Float64
  ##exp_a#7429::Float64
  ##deriv#7430::Float64
  ####G#7177#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7433::Tuple{}
  ##########x#7109#7111#7115#7180#7434::Float64
  ########_var0#7112#7116#7181#7435::Tuple{}
  ######a#7190#7192#7436::Tuple{}
  ######b#7191#7193#7437::Tuple{}
  ####_var0#7194#7438::Tuple{}
  ##a#7439::Float64
  ##exp_a#7440::Float64
  ##deriv#7441::Float64
  ####G#7254#7442::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7255#7443::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7256#7444::Tuple{}
  ##########x#7109#7111#7115#7257#7445::Float64
  ########_var0#7112#7116#7258#7446::Tuple{}
  ##a#7447::Float64
  ##exp_a#7448::Float64
  ##deriv#7449::Float64
  ####G#7177#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7452::Tuple{}
  ##########x#7109#7111#7115#7180#7453::Float64
  ########_var0#7112#7116#7181#7454::Tuple{}
  ########tup#7356#7359#7363#7455::Tuple{}
  ########x#7357#7360#7364#7456::Int64
  ######_var0#7361#7365#7457::Tuple{}
  ########types#7358#7362#7366#7458::Tuple{Type{Int64}}
  ##xs#7459::Tuple{}
  ##########tup#7108#7182#7186#7345#7460::Tuple{}
  ##########x#7109#7183#7187#7346#7461::Float64
  ########_var0#7184#7188#7347#7462::Tuple{}
  ##########types#7123#7185#7189#7348#7463::Tuple{Type{Float64}}
  ####a1#7349#7464::Float64
  ####a2#7350#7465::Float64
  ########a#7134#7138#7351#7466::Tuple{}
  ########b#7135#7139#7352#7467::Tuple{}
  ########afactor#7136#7140#7353#7468::Float64
  ########bfactor#7137#7141#7354#7469::Float64
  ######_var0#7142#7355#7470::Tuple{}
  ######a#7190#7192#7471::Tuple{}
  ######b#7191#7193#7472::Tuple{}
  ####_var0#7194#7473::Tuple{}
  ######a#7367#7369#7474::Tuple{}
  ######b#7368#7370#7475::Tuple{}
  ####_var0#7371#7476::Tuple{}
  ##a1#7477::Float64
  ##a2#7478::Float64
  ##div_a#7479::Float64
  ####afactor#7377#7480::Float64
  ####bfactor#7378#7481::Float64
  ########a#7134#7372#7379#7482::Tuple{}
  ########b#7135#7373#7380#7483::Tuple{}
  ########afactor#7136#7374#7381#7484::Float64
  ########bfactor#7137#7375#7382#7485::Float64
  ######_var0#7376#7383#7486::Tuple{}
  ######types#7259#7384#7487::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7385 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7386 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7385::Float64))
      ##deriv#7387 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7386::Float64,##a#7385::Float64))))
      ####G#7117#7388 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7392 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7392 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7386::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7394 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7396 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7396::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      ####G#7129#7397 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7401 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7396::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7404 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7407 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7409 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7409::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      ####G#7129#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7414 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7409::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7417 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7420 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7422 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7422::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      ####G#7129#7423 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7427 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7422::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7462 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7184#7188#7347#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7464 = GenSym(24)
      ####a2#7350#7465 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7470 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7142#7355#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7464::Float64,####a2#7350#7465::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7473 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7194#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7447 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7448 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7449 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7177#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7454 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7457 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7361#7365#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7476 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7371#7476 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7428 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7429 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7430 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7435 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7112#7116#7181#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7438 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7194#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7439 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,1.5,0)::Float64
      ##exp_a#7440 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,GenSym(19),0)::Float64
      ##deriv#7441 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,GenSym(19))))::Float64))
      ####G#7254#7442 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7258#7446 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7258#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7477 = GenSym(28)
      ##a2#7478 = GenSym(29)
      ##div_a#7479 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7477::Float64,##a2#7478::Float64))
      ####afactor#7377#7480 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7478::Float64))
      ####bfactor#7378#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7477::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7478::Float64,##a2#7478::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7486 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7376#7383#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7343::Tuple{}
  ##xs#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7343::Tuple{}
  ##xs#7344::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7385::Float64
  ##div_a#7386::Float64
  ##deriv#7387::Float64
  ####G#7117#7388::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7389::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7390::Tuple{}
  ##########x#7109#7111#7115#7120#7391::Float64
  ########_var0#7112#7116#7121#7392::Tuple{}
  ######tup#7122#7124#7393::Tuple{}
  ####_var0#7125#7394::Tuple{}
  ######types#7123#7126#7395::Tuple{Type{Float64}}
  ##a#7396::Float64
  ####G#7129#7397::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7398::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7399::Tuple{}
  ##########x#7109#7111#7115#7132#7400::Float64
  ########_var0#7112#7116#7133#7401::Tuple{}
  ########tup#7108#7182#7186#7402::Tuple{}
  ########x#7109#7183#7187#7403::Float64
  ######_var0#7184#7188#7404::Tuple{}
  ########types#7123#7185#7189#7405::Tuple{Type{Float64}}
  ######tup#7122#7124#7406::Tuple{}
  ####_var0#7125#7407::Tuple{}
  ######types#7123#7126#7408::Tuple{Type{Float64}}
  ##a#7409::Float64
  ####G#7129#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7412::Tuple{}
  ##########x#7109#7111#7115#7132#7413::Float64
  ########_var0#7112#7116#7133#7414::Tuple{}
  ########tup#7108#7182#7186#7415::Tuple{}
  ########x#7109#7183#7187#7416::Float64
  ######_var0#7184#7188#7417::Tuple{}
  ########types#7123#7185#7189#7418::Tuple{Type{Float64}}
  ######tup#7122#7124#7419::Tuple{}
  ####_var0#7125#7420::Tuple{}
  ######types#7123#7126#7421::Tuple{Type{Float64}}
  ##a#7422::Float64
  ####G#7129#7423::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7424::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7425::Tuple{}
  ##########x#7109#7111#7115#7132#7426::Float64
  ########_var0#7112#7116#7133#7427::Tuple{}
  ##a#7428::Float64
  ##exp_a#7429::Float64
  ##deriv#7430::Float64
  ####G#7177#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7433::Tuple{}
  ##########x#7109#7111#7115#7180#7434::Float64
  ########_var0#7112#7116#7181#7435::Tuple{}
  ######a#7190#7192#7436::Tuple{}
  ######b#7191#7193#7437::Tuple{}
  ####_var0#7194#7438::Tuple{}
  ##a#7439::Float64
  ##exp_a#7440::Float64
  ##deriv#7441::Float64
  ####G#7254#7442::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7255#7443::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7256#7444::Tuple{}
  ##########x#7109#7111#7115#7257#7445::Float64
  ########_var0#7112#7116#7258#7446::Tuple{}
  ##a#7447::Float64
  ##exp_a#7448::Float64
  ##deriv#7449::Float64
  ####G#7177#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7452::Tuple{}
  ##########x#7109#7111#7115#7180#7453::Float64
  ########_var0#7112#7116#7181#7454::Tuple{}
  ########tup#7356#7359#7363#7455::Tuple{}
  ########x#7357#7360#7364#7456::Int64
  ######_var0#7361#7365#7457::Tuple{}
  ########types#7358#7362#7366#7458::Tuple{Type{Int64}}
  ##xs#7459::Tuple{}
  ##########tup#7108#7182#7186#7345#7460::Tuple{}
  ##########x#7109#7183#7187#7346#7461::Float64
  ########_var0#7184#7188#7347#7462::Tuple{}
  ##########types#7123#7185#7189#7348#7463::Tuple{Type{Float64}}
  ####a1#7349#7464::Float64
  ####a2#7350#7465::Float64
  ########a#7134#7138#7351#7466::Tuple{}
  ########b#7135#7139#7352#7467::Tuple{}
  ########afactor#7136#7140#7353#7468::Float64
  ########bfactor#7137#7141#7354#7469::Float64
  ######_var0#7142#7355#7470::Tuple{}
  ######a#7190#7192#7471::Tuple{}
  ######b#7191#7193#7472::Tuple{}
  ####_var0#7194#7473::Tuple{}
  ######a#7367#7369#7474::Tuple{}
  ######b#7368#7370#7475::Tuple{}
  ####_var0#7371#7476::Tuple{}
  ##a1#7477::Float64
  ##a2#7478::Float64
  ##div_a#7479::Float64
  ####afactor#7377#7480::Float64
  ####bfactor#7378#7481::Float64
  ########a#7134#7372#7379#7482::Tuple{}
  ########b#7135#7373#7380#7483::Tuple{}
  ########afactor#7136#7374#7381#7484::Float64
  ########bfactor#7137#7375#7382#7485::Float64
  ######_var0#7376#7383#7486::Tuple{}
  ######types#7259#7384#7487::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7385 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7386 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7385::Float64))
      ##deriv#7387 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7386::Float64,##a#7385::Float64))))
      ####G#7117#7388 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7392 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7392 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7386::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7394 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7396 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7396::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      ####G#7129#7397 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7401 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7396::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7404 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7407 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7409 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7409::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      ####G#7129#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7414 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7409::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7417 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7420 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7422 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7422::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      ####G#7129#7423 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7427 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7422::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7462 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7184#7188#7347#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7464 = GenSym(24)
      ####a2#7350#7465 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7470 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7142#7355#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7464::Float64,####a2#7350#7465::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7473 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7194#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7447 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7448 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7449 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7177#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7454 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7457 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7361#7365#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7476 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7371#7476 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7428 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7429 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7430 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7435 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7112#7116#7181#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7438 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7194#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7439 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,1.5,0)::Float64
      ##exp_a#7440 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,GenSym(19),0)::Float64
      ##deriv#7441 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,GenSym(19))))::Float64))
      ####G#7254#7442 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7258#7446 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7258#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7477 = GenSym(28)
      ##a2#7478 = GenSym(29)
      ##div_a#7479 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7477::Float64,##a2#7478::Float64))
      ####afactor#7377#7480 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7478::Float64))
      ####bfactor#7378#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7477::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7478::Float64,##a2#7478::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7486 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7376#7383#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7385::Float64
  ##div_a#7386::Float64
  ##deriv#7387::Float64
  ####G#7117#7388::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7389::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7390::Tuple{}
  ##########x#7109#7111#7115#7120#7391::Float64
  ########_var0#7112#7116#7121#7392::Tuple{}
  ######tup#7122#7124#7393::Tuple{}
  ####_var0#7125#7394::Tuple{}
  ######types#7123#7126#7395::Tuple{Type{Float64}}
  ##a#7396::Float64
  ####G#7129#7397::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7398::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7399::Tuple{}
  ##########x#7109#7111#7115#7132#7400::Float64
  ########_var0#7112#7116#7133#7401::Tuple{}
  ########tup#7108#7182#7186#7402::Tuple{}
  ########x#7109#7183#7187#7403::Float64
  ######_var0#7184#7188#7404::Tuple{}
  ########types#7123#7185#7189#7405::Tuple{Type{Float64}}
  ######tup#7122#7124#7406::Tuple{}
  ####_var0#7125#7407::Tuple{}
  ######types#7123#7126#7408::Tuple{Type{Float64}}
  ##a#7409::Float64
  ####G#7129#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7412::Tuple{}
  ##########x#7109#7111#7115#7132#7413::Float64
  ########_var0#7112#7116#7133#7414::Tuple{}
  ########tup#7108#7182#7186#7415::Tuple{}
  ########x#7109#7183#7187#7416::Float64
  ######_var0#7184#7188#7417::Tuple{}
  ########types#7123#7185#7189#7418::Tuple{Type{Float64}}
  ######tup#7122#7124#7419::Tuple{}
  ####_var0#7125#7420::Tuple{}
  ######types#7123#7126#7421::Tuple{Type{Float64}}
  ##a#7422::Float64
  ####G#7129#7423::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7424::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7425::Tuple{}
  ##########x#7109#7111#7115#7132#7426::Float64
  ########_var0#7112#7116#7133#7427::Tuple{}
  ##a#7428::Float64
  ##exp_a#7429::Float64
  ##deriv#7430::Float64
  ####G#7177#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7433::Tuple{}
  ##########x#7109#7111#7115#7180#7434::Float64
  ########_var0#7112#7116#7181#7435::Tuple{}
  ######a#7190#7192#7436::Tuple{}
  ######b#7191#7193#7437::Tuple{}
  ####_var0#7194#7438::Tuple{}
  ##a#7439::Float64
  ##exp_a#7440::Float64
  ##deriv#7441::Float64
  ####G#7254#7442::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7255#7443::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7256#7444::Tuple{}
  ##########x#7109#7111#7115#7257#7445::Float64
  ########_var0#7112#7116#7258#7446::Tuple{}
  ##a#7447::Float64
  ##exp_a#7448::Float64
  ##deriv#7449::Float64
  ####G#7177#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7452::Tuple{}
  ##########x#7109#7111#7115#7180#7453::Float64
  ########_var0#7112#7116#7181#7454::Tuple{}
  ########tup#7356#7359#7363#7455::Tuple{}
  ########x#7357#7360#7364#7456::Int64
  ######_var0#7361#7365#7457::Tuple{}
  ########types#7358#7362#7366#7458::Tuple{Type{Int64}}
  ##xs#7459::Tuple{}
  ##########tup#7108#7182#7186#7345#7460::Tuple{}
  ##########x#7109#7183#7187#7346#7461::Float64
  ########_var0#7184#7188#7347#7462::Tuple{}
  ##########types#7123#7185#7189#7348#7463::Tuple{Type{Float64}}
  ####a1#7349#7464::Float64
  ####a2#7350#7465::Float64
  ########a#7134#7138#7351#7466::Tuple{}
  ########b#7135#7139#7352#7467::Tuple{}
  ########afactor#7136#7140#7353#7468::Float64
  ########bfactor#7137#7141#7354#7469::Float64
  ######_var0#7142#7355#7470::Tuple{}
  ######a#7190#7192#7471::Tuple{}
  ######b#7191#7193#7472::Tuple{}
  ####_var0#7194#7473::Tuple{}
  ######a#7367#7369#7474::Tuple{}
  ######b#7368#7370#7475::Tuple{}
  ####_var0#7371#7476::Tuple{}
  ##a1#7477::Float64
  ##a2#7478::Float64
  ##div_a#7479::Float64
  ####afactor#7377#7480::Float64
  ####bfactor#7378#7481::Float64
  ########a#7134#7372#7379#7482::Tuple{}
  ########b#7135#7373#7380#7483::Tuple{}
  ########afactor#7136#7374#7381#7484::Float64
  ########bfactor#7137#7375#7382#7485::Float64
  ######_var0#7376#7383#7486::Tuple{}
  ######types#7259#7384#7487::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7385 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7386 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7385::Float64))
      ##deriv#7387 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7386::Float64,##a#7385::Float64))))
      ####G#7117#7388 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7392 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7392 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7386::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7394 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7396 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7396::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      ####G#7129#7397 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7401 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7396::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7404 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7407 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7409 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7409::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      ####G#7129#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7414 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7409::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7417 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7420 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7422 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7422::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      ####G#7129#7423 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7427 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7422::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7462 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7184#7188#7347#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7464 = GenSym(24)
      ####a2#7350#7465 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7470 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7142#7355#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7464::Float64,####a2#7350#7465::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7473 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7194#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7447 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7448 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7449 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7177#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7454 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7457 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7361#7365#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7476 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7371#7476 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7428 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7429 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7430 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7435 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7112#7116#7181#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7438 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7194#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7439 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,1.5,0)::Float64
      ##exp_a#7440 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,GenSym(19),0)::Float64
      ##deriv#7441 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,GenSym(19))))::Float64))
      ####G#7254#7442 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7258#7446 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7258#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7477 = GenSym(28)
      ##a2#7478 = GenSym(29)
      ##div_a#7479 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7477::Float64,##a2#7478::Float64))
      ####afactor#7377#7480 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7478::Float64))
      ####bfactor#7378#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7477::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7478::Float64,##a2#7478::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7486 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7376#7383#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7385::Float64
  ##div_a#7386::Float64
  ##deriv#7387::Float64
  ####G#7117#7388::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7389::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7390::Tuple{}
  ##########x#7109#7111#7115#7120#7391::Float64
  ########_var0#7112#7116#7121#7392::Tuple{}
  ######tup#7122#7124#7393::Tuple{}
  ####_var0#7125#7394::Tuple{}
  ######types#7123#7126#7395::Tuple{Type{Float64}}
  ##a#7396::Float64
  ####G#7129#7397::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7398::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7399::Tuple{}
  ##########x#7109#7111#7115#7132#7400::Float64
  ########_var0#7112#7116#7133#7401::Tuple{}
  ########tup#7108#7182#7186#7402::Tuple{}
  ########x#7109#7183#7187#7403::Float64
  ######_var0#7184#7188#7404::Tuple{}
  ########types#7123#7185#7189#7405::Tuple{Type{Float64}}
  ######tup#7122#7124#7406::Tuple{}
  ####_var0#7125#7407::Tuple{}
  ######types#7123#7126#7408::Tuple{Type{Float64}}
  ##a#7409::Float64
  ####G#7129#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7412::Tuple{}
  ##########x#7109#7111#7115#7132#7413::Float64
  ########_var0#7112#7116#7133#7414::Tuple{}
  ########tup#7108#7182#7186#7415::Tuple{}
  ########x#7109#7183#7187#7416::Float64
  ######_var0#7184#7188#7417::Tuple{}
  ########types#7123#7185#7189#7418::Tuple{Type{Float64}}
  ######tup#7122#7124#7419::Tuple{}
  ####_var0#7125#7420::Tuple{}
  ######types#7123#7126#7421::Tuple{Type{Float64}}
  ##a#7422::Float64
  ####G#7129#7423::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7424::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7425::Tuple{}
  ##########x#7109#7111#7115#7132#7426::Float64
  ########_var0#7112#7116#7133#7427::Tuple{}
  ##a#7428::Float64
  ##exp_a#7429::Float64
  ##deriv#7430::Float64
  ####G#7177#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7433::Tuple{}
  ##########x#7109#7111#7115#7180#7434::Float64
  ########_var0#7112#7116#7181#7435::Tuple{}
  ######a#7190#7192#7436::Tuple{}
  ######b#7191#7193#7437::Tuple{}
  ####_var0#7194#7438::Tuple{}
  ##a#7439::Float64
  ##exp_a#7440::Float64
  ##deriv#7441::Float64
  ####G#7254#7442::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7255#7443::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7256#7444::Tuple{}
  ##########x#7109#7111#7115#7257#7445::Float64
  ########_var0#7112#7116#7258#7446::Tuple{}
  ##a#7447::Float64
  ##exp_a#7448::Float64
  ##deriv#7449::Float64
  ####G#7177#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7452::Tuple{}
  ##########x#7109#7111#7115#7180#7453::Float64
  ########_var0#7112#7116#7181#7454::Tuple{}
  ########tup#7356#7359#7363#7455::Tuple{}
  ########x#7357#7360#7364#7456::Int64
  ######_var0#7361#7365#7457::Tuple{}
  ########types#7358#7362#7366#7458::Tuple{Type{Int64}}
  ##xs#7459::Tuple{}
  ##########tup#7108#7182#7186#7345#7460::Tuple{}
  ##########x#7109#7183#7187#7346#7461::Float64
  ########_var0#7184#7188#7347#7462::Tuple{}
  ##########types#7123#7185#7189#7348#7463::Tuple{Type{Float64}}
  ####a1#7349#7464::Float64
  ####a2#7350#7465::Float64
  ########a#7134#7138#7351#7466::Tuple{}
  ########b#7135#7139#7352#7467::Tuple{}
  ########afactor#7136#7140#7353#7468::Float64
  ########bfactor#7137#7141#7354#7469::Float64
  ######_var0#7142#7355#7470::Tuple{}
  ######a#7190#7192#7471::Tuple{}
  ######b#7191#7193#7472::Tuple{}
  ####_var0#7194#7473::Tuple{}
  ######a#7367#7369#7474::Tuple{}
  ######b#7368#7370#7475::Tuple{}
  ####_var0#7371#7476::Tuple{}
  ##a1#7477::Float64
  ##a2#7478::Float64
  ##div_a#7479::Float64
  ####afactor#7377#7480::Float64
  ####bfactor#7378#7481::Float64
  ########a#7134#7372#7379#7482::Tuple{}
  ########b#7135#7373#7380#7483::Tuple{}
  ########afactor#7136#7374#7381#7484::Float64
  ########bfactor#7137#7375#7382#7485::Float64
  ######_var0#7376#7383#7486::Tuple{}
  ######types#7259#7384#7487::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7385 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7386 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7385::Float64))
      ##deriv#7387 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7386::Float64,##a#7385::Float64))))
      ####G#7117#7388 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7392 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7392 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7386::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7394 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7396 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7396::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      ####G#7129#7397 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7401 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7396::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7404 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7407 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7409 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7409::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      ####G#7129#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7414 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7409::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7417 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7420 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7422 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7422::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      ####G#7129#7423 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7427 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7422::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7462 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7184#7188#7347#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7464 = GenSym(24)
      ####a2#7350#7465 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7470 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7142#7355#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7464::Float64,####a2#7350#7465::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7473 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7194#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7447 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7448 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7449 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7177#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7454 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7457 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7361#7365#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7476 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7371#7476 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7428 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7429 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7430 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7435 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7112#7116#7181#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7438 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7194#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7439 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,1.5,0)::Float64
      ##exp_a#7440 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,GenSym(19),0)::Float64
      ##deriv#7441 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,GenSym(19))))::Float64))
      ####G#7254#7442 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7258#7446 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7258#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7477 = GenSym(28)
      ##a2#7478 = GenSym(29)
      ##div_a#7479 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7477::Float64,##a2#7478::Float64))
      ####afactor#7377#7480 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7478::Float64))
      ####bfactor#7378#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7477::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7478::Float64,##a2#7478::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7486 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7376#7383#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7385::Float64
  ##div_a#7386::Float64
  ##deriv#7387::Float64
  ####G#7117#7388::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7389::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7390::Tuple{}
  ##########x#7109#7111#7115#7120#7391::Float64
  ########_var0#7112#7116#7121#7392::Tuple{}
  ######tup#7122#7124#7393::Tuple{}
  ####_var0#7125#7394::Tuple{}
  ######types#7123#7126#7395::Tuple{Type{Float64}}
  ##a#7396::Float64
  ####G#7129#7397::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7398::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7399::Tuple{}
  ##########x#7109#7111#7115#7132#7400::Float64
  ########_var0#7112#7116#7133#7401::Tuple{}
  ########tup#7108#7182#7186#7402::Tuple{}
  ########x#7109#7183#7187#7403::Float64
  ######_var0#7184#7188#7404::Tuple{}
  ########types#7123#7185#7189#7405::Tuple{Type{Float64}}
  ######tup#7122#7124#7406::Tuple{}
  ####_var0#7125#7407::Tuple{}
  ######types#7123#7126#7408::Tuple{Type{Float64}}
  ##a#7409::Float64
  ####G#7129#7410::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7411::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7412::Tuple{}
  ##########x#7109#7111#7115#7132#7413::Float64
  ########_var0#7112#7116#7133#7414::Tuple{}
  ########tup#7108#7182#7186#7415::Tuple{}
  ########x#7109#7183#7187#7416::Float64
  ######_var0#7184#7188#7417::Tuple{}
  ########types#7123#7185#7189#7418::Tuple{Type{Float64}}
  ######tup#7122#7124#7419::Tuple{}
  ####_var0#7125#7420::Tuple{}
  ######types#7123#7126#7421::Tuple{Type{Float64}}
  ##a#7422::Float64
  ####G#7129#7423::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7424::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7425::Tuple{}
  ##########x#7109#7111#7115#7132#7426::Float64
  ########_var0#7112#7116#7133#7427::Tuple{}
  ##a#7428::Float64
  ##exp_a#7429::Float64
  ##deriv#7430::Float64
  ####G#7177#7431::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7432::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7433::Tuple{}
  ##########x#7109#7111#7115#7180#7434::Float64
  ########_var0#7112#7116#7181#7435::Tuple{}
  ######a#7190#7192#7436::Tuple{}
  ######b#7191#7193#7437::Tuple{}
  ####_var0#7194#7438::Tuple{}
  ##a#7439::Float64
  ##exp_a#7440::Float64
  ##deriv#7441::Float64
  ####G#7254#7442::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7255#7443::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7256#7444::Tuple{}
  ##########x#7109#7111#7115#7257#7445::Float64
  ########_var0#7112#7116#7258#7446::Tuple{}
  ##a#7447::Float64
  ##exp_a#7448::Float64
  ##deriv#7449::Float64
  ####G#7177#7450::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7451::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7452::Tuple{}
  ##########x#7109#7111#7115#7180#7453::Float64
  ########_var0#7112#7116#7181#7454::Tuple{}
  ########tup#7356#7359#7363#7455::Tuple{}
  ########x#7357#7360#7364#7456::Int64
  ######_var0#7361#7365#7457::Tuple{}
  ########types#7358#7362#7366#7458::Tuple{Type{Int64}}
  ##xs#7459::Tuple{}
  ##########tup#7108#7182#7186#7345#7460::Tuple{}
  ##########x#7109#7183#7187#7346#7461::Float64
  ########_var0#7184#7188#7347#7462::Tuple{}
  ##########types#7123#7185#7189#7348#7463::Tuple{Type{Float64}}
  ####a1#7349#7464::Float64
  ####a2#7350#7465::Float64
  ########a#7134#7138#7351#7466::Tuple{}
  ########b#7135#7139#7352#7467::Tuple{}
  ########afactor#7136#7140#7353#7468::Float64
  ########bfactor#7137#7141#7354#7469::Float64
  ######_var0#7142#7355#7470::Tuple{}
  ######a#7190#7192#7471::Tuple{}
  ######b#7191#7193#7472::Tuple{}
  ####_var0#7194#7473::Tuple{}
  ######a#7367#7369#7474::Tuple{}
  ######b#7368#7370#7475::Tuple{}
  ####_var0#7371#7476::Tuple{}
  ##a1#7477::Float64
  ##a2#7478::Float64
  ##div_a#7479::Float64
  ####afactor#7377#7480::Float64
  ####bfactor#7378#7481::Float64
  ########a#7134#7372#7379#7482::Tuple{}
  ########b#7135#7373#7380#7483::Tuple{}
  ########afactor#7136#7374#7381#7484::Float64
  ########bfactor#7137#7375#7382#7485::Float64
  ######_var0#7376#7383#7486::Tuple{}
  ######types#7259#7384#7487::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7385 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7386 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7385::Float64))
      ##deriv#7387 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7386::Float64,##a#7385::Float64))))
      ####G#7117#7388 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7392 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7392 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7386::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7394 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7394 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7396 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7396::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7396::Float64,0)::Float64
      ####G#7129#7397 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7401 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7396::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7404 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7407 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7409 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7409::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7409::Float64,0)::Float64
      ####G#7129#7410 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7414 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7414 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7409::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7417 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7420 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7422 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7422::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7422::Float64,0)::Float64
      ####G#7129#7423 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7427 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7427 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7422::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7462 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7184#7188#7347#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7464 = GenSym(24)
      ####a2#7350#7465 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7470 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7142#7355#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7464::Float64,####a2#7350#7465::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7473 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7194#7473 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7447 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7448 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7449 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7447::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7177#7450 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7454 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7454 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7457 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7361#7365#7457 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7476 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7371#7476 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7428 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7429 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7430 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7428::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7431 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7435 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7112#7116#7181#7435 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7429::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7438 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7194#7438 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7439 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,1.5,0)::Float64
      ##exp_a#7440 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7439::Float64,0,GenSym(19),0)::Float64
      ##deriv#7441 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7439::Float64,GenSym(19))))::Float64))
      ####G#7254#7442 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7258#7446 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7258#7446 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7440::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7477 = GenSym(28)
      ##a2#7478 = GenSym(29)
      ##div_a#7479 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7477::Float64,##a2#7478::Float64))
      ####afactor#7377#7480 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7478::Float64))
      ####bfactor#7378#7481 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7477::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7478::Float64,##a2#7478::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7486 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7376#7383#7486 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7479::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7488::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7488::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7490::Float64
  ##div_a#7491::Float64
  ##deriv#7492::Float64
  ####G#7117#7493::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7494::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7495::Tuple{}
  ##########x#7109#7111#7115#7120#7496::Float64
  ########_var0#7112#7116#7121#7497::Tuple{}
  ######tup#7122#7124#7498::Tuple{}
  ####_var0#7125#7499::Tuple{}
  ######types#7123#7126#7500::Tuple{Type{Float64}}
  ##a#7501::Float64
  ####G#7129#7502::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7503::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7504::Tuple{}
  ##########x#7109#7111#7115#7132#7505::Float64
  ########_var0#7112#7116#7133#7506::Tuple{}
  ########tup#7108#7182#7186#7507::Tuple{}
  ########x#7109#7183#7187#7508::Float64
  ######_var0#7184#7188#7509::Tuple{}
  ########types#7123#7185#7189#7510::Tuple{Type{Float64}}
  ######tup#7122#7124#7511::Tuple{}
  ####_var0#7125#7512::Tuple{}
  ######types#7123#7126#7513::Tuple{Type{Float64}}
  ##a#7514::Float64
  ####G#7129#7515::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7516::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7517::Tuple{}
  ##########x#7109#7111#7115#7132#7518::Float64
  ########_var0#7112#7116#7133#7519::Tuple{}
  ########tup#7108#7182#7186#7520::Tuple{}
  ########x#7109#7183#7187#7521::Float64
  ######_var0#7184#7188#7522::Tuple{}
  ########types#7123#7185#7189#7523::Tuple{Type{Float64}}
  ######tup#7122#7124#7524::Tuple{}
  ####_var0#7125#7525::Tuple{}
  ######types#7123#7126#7526::Tuple{Type{Float64}}
  ##a#7527::Float64
  ####G#7129#7528::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7529::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7530::Tuple{}
  ##########x#7109#7111#7115#7132#7531::Float64
  ########_var0#7112#7116#7133#7532::Tuple{}
  ########tup#7108#7182#7186#7533::Tuple{}
  ########x#7109#7183#7187#7534::Float64
  ######_var0#7184#7188#7535::Tuple{}
  ########types#7123#7185#7189#7536::Tuple{Type{Float64}}
  ######tup#7122#7124#7537::Tuple{}
  ####_var0#7125#7538::Tuple{}
  ######types#7123#7126#7539::Tuple{Type{Float64}}
  ##a#7540::Float64
  ####G#7129#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7543::Tuple{}
  ##########x#7109#7111#7115#7132#7544::Float64
  ########_var0#7112#7116#7133#7545::Tuple{}
  ##a#7546::Float64
  ##exp_a#7547::Float64
  ##deriv#7548::Float64
  ####G#7177#7549::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7550::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7551::Tuple{}
  ##########x#7109#7111#7115#7180#7552::Float64
  ########_var0#7112#7116#7181#7553::Tuple{}
  ######a#7190#7192#7554::Tuple{}
  ######b#7191#7193#7555::Tuple{}
  ####_var0#7194#7556::Tuple{}
  ##a#7557::Float64
  ##exp_a#7558::Float64
  ##deriv#7559::Float64
  ####G#7177#7560::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7561::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7562::Tuple{}
  ##########x#7109#7111#7115#7180#7563::Float64
  ########_var0#7112#7116#7181#7564::Tuple{}
  ##a#7565::Float64
  ##exp_a#7566::Float64
  ##deriv#7567::Float64
  ####G#7177#7568::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7569::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7570::Tuple{}
  ##########x#7109#7111#7115#7180#7571::Float64
  ########_var0#7112#7116#7181#7572::Tuple{}
  ########tup#7356#7359#7363#7573::Tuple{}
  ########x#7357#7360#7364#7574::Int64
  ######_var0#7361#7365#7575::Tuple{}
  ########types#7358#7362#7366#7576::Tuple{Type{Int64}}
  ##xs#7577::Tuple{}
  ##########tup#7108#7182#7186#7345#7578::Tuple{}
  ##########x#7109#7183#7187#7346#7579::Float64
  ########_var0#7184#7188#7347#7580::Tuple{}
  ##########types#7123#7185#7189#7348#7581::Tuple{Type{Float64}}
  ####a1#7349#7582::Float64
  ####a2#7350#7583::Float64
  ########a#7134#7138#7351#7584::Tuple{}
  ########b#7135#7139#7352#7585::Tuple{}
  ########afactor#7136#7140#7353#7586::Float64
  ########bfactor#7137#7141#7354#7587::Float64
  ######_var0#7142#7355#7588::Tuple{}
  ######a#7190#7192#7589::Tuple{}
  ######b#7191#7193#7590::Tuple{}
  ####_var0#7194#7591::Tuple{}
  ######a#7367#7369#7592::Tuple{}
  ######b#7368#7370#7593::Tuple{}
  ####_var0#7371#7594::Tuple{}
  ##a1#7595::Float64
  ##a2#7596::Float64
  ##div_a#7597::Float64
  ####afactor#7377#7598::Float64
  ####bfactor#7378#7599::Float64
  ########a#7134#7372#7379#7600::Tuple{}
  ########b#7135#7373#7380#7601::Tuple{}
  ########afactor#7136#7374#7381#7602::Float64
  ########bfactor#7137#7375#7382#7603::Float64
  ######_var0#7376#7383#7604::Tuple{}
  ######types#7259#7384#7605::Tuple{Type{Float64}}
  ######types#7123#7489#7606::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7490 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7490::Float64))
      ##deriv#7492 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7491::Float64,##a#7490::Float64))))
      ####G#7117#7493 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7497 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7499 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7501 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7501::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      ####G#7129#7502 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7506 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7501::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7509 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7512 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7514 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7514::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      ####G#7129#7515 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7519 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7514::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7522 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7525 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7527 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7527::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      ####G#7129#7528 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7532 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7527::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7535 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7184#7188#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7538 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7125#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7540 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7540::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      ####G#7129#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7545 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7133#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7540::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7580 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7184#7188#7347#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7582 = GenSym(22)
      ####a2#7350#7583 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7588 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7142#7355#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7582::Float64,####a2#7350#7583::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7591 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7194#7591 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7565 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7566 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7567 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7568 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7572 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7181#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7566::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7575 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7361#7365#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7594 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7371#7594 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7546 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7547 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7548 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7549 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7553 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7547::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7556 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7194#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7557 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7558 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7559 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7560 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7564 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7112#7116#7181#7564 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7558::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7595 = GenSym(26)
      ##a2#7596 = GenSym(27)
      ##div_a#7597 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7595::Float64,##a2#7596::Float64))
      ####afactor#7377#7598 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7596::Float64))
      ####bfactor#7378#7599 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7595::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7596::Float64,##a2#7596::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7604 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7376#7383#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7597::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7488::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7488::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7490::Float64
  ##div_a#7491::Float64
  ##deriv#7492::Float64
  ####G#7117#7493::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7494::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7495::Tuple{}
  ##########x#7109#7111#7115#7120#7496::Float64
  ########_var0#7112#7116#7121#7497::Tuple{}
  ######tup#7122#7124#7498::Tuple{}
  ####_var0#7125#7499::Tuple{}
  ######types#7123#7126#7500::Tuple{Type{Float64}}
  ##a#7501::Float64
  ####G#7129#7502::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7503::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7504::Tuple{}
  ##########x#7109#7111#7115#7132#7505::Float64
  ########_var0#7112#7116#7133#7506::Tuple{}
  ########tup#7108#7182#7186#7507::Tuple{}
  ########x#7109#7183#7187#7508::Float64
  ######_var0#7184#7188#7509::Tuple{}
  ########types#7123#7185#7189#7510::Tuple{Type{Float64}}
  ######tup#7122#7124#7511::Tuple{}
  ####_var0#7125#7512::Tuple{}
  ######types#7123#7126#7513::Tuple{Type{Float64}}
  ##a#7514::Float64
  ####G#7129#7515::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7516::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7517::Tuple{}
  ##########x#7109#7111#7115#7132#7518::Float64
  ########_var0#7112#7116#7133#7519::Tuple{}
  ########tup#7108#7182#7186#7520::Tuple{}
  ########x#7109#7183#7187#7521::Float64
  ######_var0#7184#7188#7522::Tuple{}
  ########types#7123#7185#7189#7523::Tuple{Type{Float64}}
  ######tup#7122#7124#7524::Tuple{}
  ####_var0#7125#7525::Tuple{}
  ######types#7123#7126#7526::Tuple{Type{Float64}}
  ##a#7527::Float64
  ####G#7129#7528::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7529::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7530::Tuple{}
  ##########x#7109#7111#7115#7132#7531::Float64
  ########_var0#7112#7116#7133#7532::Tuple{}
  ########tup#7108#7182#7186#7533::Tuple{}
  ########x#7109#7183#7187#7534::Float64
  ######_var0#7184#7188#7535::Tuple{}
  ########types#7123#7185#7189#7536::Tuple{Type{Float64}}
  ######tup#7122#7124#7537::Tuple{}
  ####_var0#7125#7538::Tuple{}
  ######types#7123#7126#7539::Tuple{Type{Float64}}
  ##a#7540::Float64
  ####G#7129#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7543::Tuple{}
  ##########x#7109#7111#7115#7132#7544::Float64
  ########_var0#7112#7116#7133#7545::Tuple{}
  ##a#7546::Float64
  ##exp_a#7547::Float64
  ##deriv#7548::Float64
  ####G#7177#7549::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7550::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7551::Tuple{}
  ##########x#7109#7111#7115#7180#7552::Float64
  ########_var0#7112#7116#7181#7553::Tuple{}
  ######a#7190#7192#7554::Tuple{}
  ######b#7191#7193#7555::Tuple{}
  ####_var0#7194#7556::Tuple{}
  ##a#7557::Float64
  ##exp_a#7558::Float64
  ##deriv#7559::Float64
  ####G#7177#7560::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7561::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7562::Tuple{}
  ##########x#7109#7111#7115#7180#7563::Float64
  ########_var0#7112#7116#7181#7564::Tuple{}
  ##a#7565::Float64
  ##exp_a#7566::Float64
  ##deriv#7567::Float64
  ####G#7177#7568::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7569::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7570::Tuple{}
  ##########x#7109#7111#7115#7180#7571::Float64
  ########_var0#7112#7116#7181#7572::Tuple{}
  ########tup#7356#7359#7363#7573::Tuple{}
  ########x#7357#7360#7364#7574::Int64
  ######_var0#7361#7365#7575::Tuple{}
  ########types#7358#7362#7366#7576::Tuple{Type{Int64}}
  ##xs#7577::Tuple{}
  ##########tup#7108#7182#7186#7345#7578::Tuple{}
  ##########x#7109#7183#7187#7346#7579::Float64
  ########_var0#7184#7188#7347#7580::Tuple{}
  ##########types#7123#7185#7189#7348#7581::Tuple{Type{Float64}}
  ####a1#7349#7582::Float64
  ####a2#7350#7583::Float64
  ########a#7134#7138#7351#7584::Tuple{}
  ########b#7135#7139#7352#7585::Tuple{}
  ########afactor#7136#7140#7353#7586::Float64
  ########bfactor#7137#7141#7354#7587::Float64
  ######_var0#7142#7355#7588::Tuple{}
  ######a#7190#7192#7589::Tuple{}
  ######b#7191#7193#7590::Tuple{}
  ####_var0#7194#7591::Tuple{}
  ######a#7367#7369#7592::Tuple{}
  ######b#7368#7370#7593::Tuple{}
  ####_var0#7371#7594::Tuple{}
  ##a1#7595::Float64
  ##a2#7596::Float64
  ##div_a#7597::Float64
  ####afactor#7377#7598::Float64
  ####bfactor#7378#7599::Float64
  ########a#7134#7372#7379#7600::Tuple{}
  ########b#7135#7373#7380#7601::Tuple{}
  ########afactor#7136#7374#7381#7602::Float64
  ########bfactor#7137#7375#7382#7603::Float64
  ######_var0#7376#7383#7604::Tuple{}
  ######types#7259#7384#7605::Tuple{Type{Float64}}
  ######types#7123#7489#7606::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7490 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7490::Float64))
      ##deriv#7492 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7491::Float64,##a#7490::Float64))))
      ####G#7117#7493 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7497 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7499 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7501 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7501::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      ####G#7129#7502 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7506 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7501::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7509 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7512 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7514 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7514::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      ####G#7129#7515 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7519 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7514::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7522 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7525 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7527 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7527::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      ####G#7129#7528 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7532 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7527::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7535 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7184#7188#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7538 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7125#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7540 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7540::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      ####G#7129#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7545 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7133#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7540::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7580 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7184#7188#7347#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7582 = GenSym(22)
      ####a2#7350#7583 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7588 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7142#7355#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7582::Float64,####a2#7350#7583::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7591 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7194#7591 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7565 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7566 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7567 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7568 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7572 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7181#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7566::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7575 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7361#7365#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7594 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7371#7594 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7546 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7547 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7548 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7549 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7553 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7547::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7556 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7194#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7557 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7558 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7559 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7560 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7564 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7112#7116#7181#7564 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7558::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7595 = GenSym(26)
      ##a2#7596 = GenSym(27)
      ##div_a#7597 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7595::Float64,##a2#7596::Float64))
      ####afactor#7377#7598 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7596::Float64))
      ####bfactor#7378#7599 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7595::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7596::Float64,##a2#7596::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7604 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7376#7383#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7597::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7490::Float64
  ##div_a#7491::Float64
  ##deriv#7492::Float64
  ####G#7117#7493::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7494::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7495::Tuple{}
  ##########x#7109#7111#7115#7120#7496::Float64
  ########_var0#7112#7116#7121#7497::Tuple{}
  ######tup#7122#7124#7498::Tuple{}
  ####_var0#7125#7499::Tuple{}
  ######types#7123#7126#7500::Tuple{Type{Float64}}
  ##a#7501::Float64
  ####G#7129#7502::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7503::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7504::Tuple{}
  ##########x#7109#7111#7115#7132#7505::Float64
  ########_var0#7112#7116#7133#7506::Tuple{}
  ########tup#7108#7182#7186#7507::Tuple{}
  ########x#7109#7183#7187#7508::Float64
  ######_var0#7184#7188#7509::Tuple{}
  ########types#7123#7185#7189#7510::Tuple{Type{Float64}}
  ######tup#7122#7124#7511::Tuple{}
  ####_var0#7125#7512::Tuple{}
  ######types#7123#7126#7513::Tuple{Type{Float64}}
  ##a#7514::Float64
  ####G#7129#7515::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7516::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7517::Tuple{}
  ##########x#7109#7111#7115#7132#7518::Float64
  ########_var0#7112#7116#7133#7519::Tuple{}
  ########tup#7108#7182#7186#7520::Tuple{}
  ########x#7109#7183#7187#7521::Float64
  ######_var0#7184#7188#7522::Tuple{}
  ########types#7123#7185#7189#7523::Tuple{Type{Float64}}
  ######tup#7122#7124#7524::Tuple{}
  ####_var0#7125#7525::Tuple{}
  ######types#7123#7126#7526::Tuple{Type{Float64}}
  ##a#7527::Float64
  ####G#7129#7528::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7529::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7530::Tuple{}
  ##########x#7109#7111#7115#7132#7531::Float64
  ########_var0#7112#7116#7133#7532::Tuple{}
  ########tup#7108#7182#7186#7533::Tuple{}
  ########x#7109#7183#7187#7534::Float64
  ######_var0#7184#7188#7535::Tuple{}
  ########types#7123#7185#7189#7536::Tuple{Type{Float64}}
  ######tup#7122#7124#7537::Tuple{}
  ####_var0#7125#7538::Tuple{}
  ######types#7123#7126#7539::Tuple{Type{Float64}}
  ##a#7540::Float64
  ####G#7129#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7543::Tuple{}
  ##########x#7109#7111#7115#7132#7544::Float64
  ########_var0#7112#7116#7133#7545::Tuple{}
  ##a#7546::Float64
  ##exp_a#7547::Float64
  ##deriv#7548::Float64
  ####G#7177#7549::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7550::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7551::Tuple{}
  ##########x#7109#7111#7115#7180#7552::Float64
  ########_var0#7112#7116#7181#7553::Tuple{}
  ######a#7190#7192#7554::Tuple{}
  ######b#7191#7193#7555::Tuple{}
  ####_var0#7194#7556::Tuple{}
  ##a#7557::Float64
  ##exp_a#7558::Float64
  ##deriv#7559::Float64
  ####G#7177#7560::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7561::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7562::Tuple{}
  ##########x#7109#7111#7115#7180#7563::Float64
  ########_var0#7112#7116#7181#7564::Tuple{}
  ##a#7565::Float64
  ##exp_a#7566::Float64
  ##deriv#7567::Float64
  ####G#7177#7568::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7569::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7570::Tuple{}
  ##########x#7109#7111#7115#7180#7571::Float64
  ########_var0#7112#7116#7181#7572::Tuple{}
  ########tup#7356#7359#7363#7573::Tuple{}
  ########x#7357#7360#7364#7574::Int64
  ######_var0#7361#7365#7575::Tuple{}
  ########types#7358#7362#7366#7576::Tuple{Type{Int64}}
  ##xs#7577::Tuple{}
  ##########tup#7108#7182#7186#7345#7578::Tuple{}
  ##########x#7109#7183#7187#7346#7579::Float64
  ########_var0#7184#7188#7347#7580::Tuple{}
  ##########types#7123#7185#7189#7348#7581::Tuple{Type{Float64}}
  ####a1#7349#7582::Float64
  ####a2#7350#7583::Float64
  ########a#7134#7138#7351#7584::Tuple{}
  ########b#7135#7139#7352#7585::Tuple{}
  ########afactor#7136#7140#7353#7586::Float64
  ########bfactor#7137#7141#7354#7587::Float64
  ######_var0#7142#7355#7588::Tuple{}
  ######a#7190#7192#7589::Tuple{}
  ######b#7191#7193#7590::Tuple{}
  ####_var0#7194#7591::Tuple{}
  ######a#7367#7369#7592::Tuple{}
  ######b#7368#7370#7593::Tuple{}
  ####_var0#7371#7594::Tuple{}
  ##a1#7595::Float64
  ##a2#7596::Float64
  ##div_a#7597::Float64
  ####afactor#7377#7598::Float64
  ####bfactor#7378#7599::Float64
  ########a#7134#7372#7379#7600::Tuple{}
  ########b#7135#7373#7380#7601::Tuple{}
  ########afactor#7136#7374#7381#7602::Float64
  ########bfactor#7137#7375#7382#7603::Float64
  ######_var0#7376#7383#7604::Tuple{}
  ######types#7259#7384#7605::Tuple{Type{Float64}}
  ######types#7123#7489#7606::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7490 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7490::Float64))
      ##deriv#7492 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7491::Float64,##a#7490::Float64))))
      ####G#7117#7493 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7497 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7499 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7501 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7501::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      ####G#7129#7502 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7506 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7501::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7509 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7512 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7514 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7514::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      ####G#7129#7515 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7519 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7514::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7522 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7525 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7527 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7527::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      ####G#7129#7528 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7532 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7527::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7535 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7184#7188#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7538 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7125#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7540 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7540::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      ####G#7129#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7545 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7133#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7540::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7580 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7184#7188#7347#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7582 = GenSym(22)
      ####a2#7350#7583 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7588 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7142#7355#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7582::Float64,####a2#7350#7583::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7591 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7194#7591 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7565 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7566 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7567 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7568 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7572 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7181#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7566::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7575 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7361#7365#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7594 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7371#7594 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7546 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7547 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7548 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7549 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7553 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7547::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7556 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7194#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7557 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7558 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7559 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7560 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7564 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7112#7116#7181#7564 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7558::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7595 = GenSym(26)
      ##a2#7596 = GenSym(27)
      ##div_a#7597 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7595::Float64,##a2#7596::Float64))
      ####afactor#7377#7598 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7596::Float64))
      ####bfactor#7378#7599 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7595::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7596::Float64,##a2#7596::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7604 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7376#7383#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7597::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7490::Float64
  ##div_a#7491::Float64
  ##deriv#7492::Float64
  ####G#7117#7493::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7494::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7495::Tuple{}
  ##########x#7109#7111#7115#7120#7496::Float64
  ########_var0#7112#7116#7121#7497::Tuple{}
  ######tup#7122#7124#7498::Tuple{}
  ####_var0#7125#7499::Tuple{}
  ######types#7123#7126#7500::Tuple{Type{Float64}}
  ##a#7501::Float64
  ####G#7129#7502::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7503::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7504::Tuple{}
  ##########x#7109#7111#7115#7132#7505::Float64
  ########_var0#7112#7116#7133#7506::Tuple{}
  ########tup#7108#7182#7186#7507::Tuple{}
  ########x#7109#7183#7187#7508::Float64
  ######_var0#7184#7188#7509::Tuple{}
  ########types#7123#7185#7189#7510::Tuple{Type{Float64}}
  ######tup#7122#7124#7511::Tuple{}
  ####_var0#7125#7512::Tuple{}
  ######types#7123#7126#7513::Tuple{Type{Float64}}
  ##a#7514::Float64
  ####G#7129#7515::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7516::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7517::Tuple{}
  ##########x#7109#7111#7115#7132#7518::Float64
  ########_var0#7112#7116#7133#7519::Tuple{}
  ########tup#7108#7182#7186#7520::Tuple{}
  ########x#7109#7183#7187#7521::Float64
  ######_var0#7184#7188#7522::Tuple{}
  ########types#7123#7185#7189#7523::Tuple{Type{Float64}}
  ######tup#7122#7124#7524::Tuple{}
  ####_var0#7125#7525::Tuple{}
  ######types#7123#7126#7526::Tuple{Type{Float64}}
  ##a#7527::Float64
  ####G#7129#7528::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7529::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7530::Tuple{}
  ##########x#7109#7111#7115#7132#7531::Float64
  ########_var0#7112#7116#7133#7532::Tuple{}
  ########tup#7108#7182#7186#7533::Tuple{}
  ########x#7109#7183#7187#7534::Float64
  ######_var0#7184#7188#7535::Tuple{}
  ########types#7123#7185#7189#7536::Tuple{Type{Float64}}
  ######tup#7122#7124#7537::Tuple{}
  ####_var0#7125#7538::Tuple{}
  ######types#7123#7126#7539::Tuple{Type{Float64}}
  ##a#7540::Float64
  ####G#7129#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7543::Tuple{}
  ##########x#7109#7111#7115#7132#7544::Float64
  ########_var0#7112#7116#7133#7545::Tuple{}
  ##a#7546::Float64
  ##exp_a#7547::Float64
  ##deriv#7548::Float64
  ####G#7177#7549::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7550::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7551::Tuple{}
  ##########x#7109#7111#7115#7180#7552::Float64
  ########_var0#7112#7116#7181#7553::Tuple{}
  ######a#7190#7192#7554::Tuple{}
  ######b#7191#7193#7555::Tuple{}
  ####_var0#7194#7556::Tuple{}
  ##a#7557::Float64
  ##exp_a#7558::Float64
  ##deriv#7559::Float64
  ####G#7177#7560::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7561::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7562::Tuple{}
  ##########x#7109#7111#7115#7180#7563::Float64
  ########_var0#7112#7116#7181#7564::Tuple{}
  ##a#7565::Float64
  ##exp_a#7566::Float64
  ##deriv#7567::Float64
  ####G#7177#7568::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7569::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7570::Tuple{}
  ##########x#7109#7111#7115#7180#7571::Float64
  ########_var0#7112#7116#7181#7572::Tuple{}
  ########tup#7356#7359#7363#7573::Tuple{}
  ########x#7357#7360#7364#7574::Int64
  ######_var0#7361#7365#7575::Tuple{}
  ########types#7358#7362#7366#7576::Tuple{Type{Int64}}
  ##xs#7577::Tuple{}
  ##########tup#7108#7182#7186#7345#7578::Tuple{}
  ##########x#7109#7183#7187#7346#7579::Float64
  ########_var0#7184#7188#7347#7580::Tuple{}
  ##########types#7123#7185#7189#7348#7581::Tuple{Type{Float64}}
  ####a1#7349#7582::Float64
  ####a2#7350#7583::Float64
  ########a#7134#7138#7351#7584::Tuple{}
  ########b#7135#7139#7352#7585::Tuple{}
  ########afactor#7136#7140#7353#7586::Float64
  ########bfactor#7137#7141#7354#7587::Float64
  ######_var0#7142#7355#7588::Tuple{}
  ######a#7190#7192#7589::Tuple{}
  ######b#7191#7193#7590::Tuple{}
  ####_var0#7194#7591::Tuple{}
  ######a#7367#7369#7592::Tuple{}
  ######b#7368#7370#7593::Tuple{}
  ####_var0#7371#7594::Tuple{}
  ##a1#7595::Float64
  ##a2#7596::Float64
  ##div_a#7597::Float64
  ####afactor#7377#7598::Float64
  ####bfactor#7378#7599::Float64
  ########a#7134#7372#7379#7600::Tuple{}
  ########b#7135#7373#7380#7601::Tuple{}
  ########afactor#7136#7374#7381#7602::Float64
  ########bfactor#7137#7375#7382#7603::Float64
  ######_var0#7376#7383#7604::Tuple{}
  ######types#7259#7384#7605::Tuple{Type{Float64}}
  ######types#7123#7489#7606::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7490 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7490::Float64))
      ##deriv#7492 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7491::Float64,##a#7490::Float64))))
      ####G#7117#7493 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7497 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7499 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7501 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7501::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      ####G#7129#7502 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7506 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7501::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7509 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7512 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7514 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7514::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      ####G#7129#7515 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7519 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7514::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7522 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7525 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7527 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7527::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      ####G#7129#7528 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7532 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7527::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7535 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7184#7188#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7538 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7125#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7540 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7540::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      ####G#7129#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7545 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7133#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7540::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7580 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7184#7188#7347#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7582 = GenSym(22)
      ####a2#7350#7583 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7588 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7142#7355#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7582::Float64,####a2#7350#7583::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7591 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7194#7591 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7565 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7566 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7567 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7568 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7572 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7181#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7566::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7575 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7361#7365#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7594 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7371#7594 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7546 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7547 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7548 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7549 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7553 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7547::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7556 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7194#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7557 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7558 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7559 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7560 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7564 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7112#7116#7181#7564 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7558::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7595 = GenSym(26)
      ##a2#7596 = GenSym(27)
      ##div_a#7597 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7595::Float64,##a2#7596::Float64))
      ####afactor#7377#7598 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7596::Float64))
      ####bfactor#7378#7599 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7595::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7596::Float64,##a2#7596::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7604 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7376#7383#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7597::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7490::Float64
  ##div_a#7491::Float64
  ##deriv#7492::Float64
  ####G#7117#7493::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7494::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7495::Tuple{}
  ##########x#7109#7111#7115#7120#7496::Float64
  ########_var0#7112#7116#7121#7497::Tuple{}
  ######tup#7122#7124#7498::Tuple{}
  ####_var0#7125#7499::Tuple{}
  ######types#7123#7126#7500::Tuple{Type{Float64}}
  ##a#7501::Float64
  ####G#7129#7502::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7503::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7504::Tuple{}
  ##########x#7109#7111#7115#7132#7505::Float64
  ########_var0#7112#7116#7133#7506::Tuple{}
  ########tup#7108#7182#7186#7507::Tuple{}
  ########x#7109#7183#7187#7508::Float64
  ######_var0#7184#7188#7509::Tuple{}
  ########types#7123#7185#7189#7510::Tuple{Type{Float64}}
  ######tup#7122#7124#7511::Tuple{}
  ####_var0#7125#7512::Tuple{}
  ######types#7123#7126#7513::Tuple{Type{Float64}}
  ##a#7514::Float64
  ####G#7129#7515::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7516::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7517::Tuple{}
  ##########x#7109#7111#7115#7132#7518::Float64
  ########_var0#7112#7116#7133#7519::Tuple{}
  ########tup#7108#7182#7186#7520::Tuple{}
  ########x#7109#7183#7187#7521::Float64
  ######_var0#7184#7188#7522::Tuple{}
  ########types#7123#7185#7189#7523::Tuple{Type{Float64}}
  ######tup#7122#7124#7524::Tuple{}
  ####_var0#7125#7525::Tuple{}
  ######types#7123#7126#7526::Tuple{Type{Float64}}
  ##a#7527::Float64
  ####G#7129#7528::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7529::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7530::Tuple{}
  ##########x#7109#7111#7115#7132#7531::Float64
  ########_var0#7112#7116#7133#7532::Tuple{}
  ########tup#7108#7182#7186#7533::Tuple{}
  ########x#7109#7183#7187#7534::Float64
  ######_var0#7184#7188#7535::Tuple{}
  ########types#7123#7185#7189#7536::Tuple{Type{Float64}}
  ######tup#7122#7124#7537::Tuple{}
  ####_var0#7125#7538::Tuple{}
  ######types#7123#7126#7539::Tuple{Type{Float64}}
  ##a#7540::Float64
  ####G#7129#7541::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7130#7542::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7131#7543::Tuple{}
  ##########x#7109#7111#7115#7132#7544::Float64
  ########_var0#7112#7116#7133#7545::Tuple{}
  ##a#7546::Float64
  ##exp_a#7547::Float64
  ##deriv#7548::Float64
  ####G#7177#7549::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7550::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7551::Tuple{}
  ##########x#7109#7111#7115#7180#7552::Float64
  ########_var0#7112#7116#7181#7553::Tuple{}
  ######a#7190#7192#7554::Tuple{}
  ######b#7191#7193#7555::Tuple{}
  ####_var0#7194#7556::Tuple{}
  ##a#7557::Float64
  ##exp_a#7558::Float64
  ##deriv#7559::Float64
  ####G#7177#7560::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7561::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7562::Tuple{}
  ##########x#7109#7111#7115#7180#7563::Float64
  ########_var0#7112#7116#7181#7564::Tuple{}
  ##a#7565::Float64
  ##exp_a#7566::Float64
  ##deriv#7567::Float64
  ####G#7177#7568::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7178#7569::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7179#7570::Tuple{}
  ##########x#7109#7111#7115#7180#7571::Float64
  ########_var0#7112#7116#7181#7572::Tuple{}
  ########tup#7356#7359#7363#7573::Tuple{}
  ########x#7357#7360#7364#7574::Int64
  ######_var0#7361#7365#7575::Tuple{}
  ########types#7358#7362#7366#7576::Tuple{Type{Int64}}
  ##xs#7577::Tuple{}
  ##########tup#7108#7182#7186#7345#7578::Tuple{}
  ##########x#7109#7183#7187#7346#7579::Float64
  ########_var0#7184#7188#7347#7580::Tuple{}
  ##########types#7123#7185#7189#7348#7581::Tuple{Type{Float64}}
  ####a1#7349#7582::Float64
  ####a2#7350#7583::Float64
  ########a#7134#7138#7351#7584::Tuple{}
  ########b#7135#7139#7352#7585::Tuple{}
  ########afactor#7136#7140#7353#7586::Float64
  ########bfactor#7137#7141#7354#7587::Float64
  ######_var0#7142#7355#7588::Tuple{}
  ######a#7190#7192#7589::Tuple{}
  ######b#7191#7193#7590::Tuple{}
  ####_var0#7194#7591::Tuple{}
  ######a#7367#7369#7592::Tuple{}
  ######b#7368#7370#7593::Tuple{}
  ####_var0#7371#7594::Tuple{}
  ##a1#7595::Float64
  ##a2#7596::Float64
  ##div_a#7597::Float64
  ####afactor#7377#7598::Float64
  ####bfactor#7378#7599::Float64
  ########a#7134#7372#7379#7600::Tuple{}
  ########b#7135#7373#7380#7601::Tuple{}
  ########afactor#7136#7374#7381#7602::Float64
  ########bfactor#7137#7375#7382#7603::Float64
  ######_var0#7376#7383#7604::Tuple{}
  ######types#7259#7384#7605::Tuple{Type{Float64}}
  ######types#7123#7489#7606::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7490 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7491 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7490::Float64))
      ##deriv#7492 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7491::Float64,##a#7490::Float64))))
      ####G#7117#7493 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7497 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7112#7116#7121#7497 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7491::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7125#7499 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7125#7499 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7501 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7501::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7501::Float64,0)::Float64
      ####G#7129#7502 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7506 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7112#7116#7133#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7501::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7509 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7184#7188#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7512 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7125#7512 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7514 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7514::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7514::Float64,0)::Float64
      ####G#7129#7515 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7519 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7112#7116#7133#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7514::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7522 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7184#7188#7522 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7525 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7125#7525 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7527 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7527::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7527::Float64,0)::Float64
      ####G#7129#7528 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7532 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7112#7116#7133#7532 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7527::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7184#7188#7535 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7184#7188#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7125#7538 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7125#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7540 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7540::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7540::Float64,0)::Float64
      ####G#7129#7541 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7133#7545 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7112#7116#7133#7545 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7540::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7184#7188#7347#7580 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7184#7188#7347#7580 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7349#7582 = GenSym(22)
      ####a2#7350#7583 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7142#7355#7588 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7142#7355#7588 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7349#7582::Float64,####a2#7350#7583::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7591 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7194#7591 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7565 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7566 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7567 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7565::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7568 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7572 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7112#7116#7181#7572 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7566::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7361#7365#7575 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7361#7365#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7371#7594 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7371#7594 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7546 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7547 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7548 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7546::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7549 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7553 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7112#7116#7181#7553 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7547::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7194#7556 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7194#7556 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7557 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7558 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7559 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7557::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7177#7560 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7181#7564 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7112#7116#7181#7564 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7558::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7595 = GenSym(26)
      ##a2#7596 = GenSym(27)
      ##div_a#7597 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7595::Float64,##a2#7596::Float64))
      ####afactor#7377#7598 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7596::Float64))
      ####bfactor#7378#7599 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7595::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7596::Float64,##a2#7596::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7604 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7376#7383#7604 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7597::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7607::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7607::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7620::Float64
  ##a2#7621::Float64
  ##div_a#7622::Float64
  ####afactor#7377#7623::Float64
  ####bfactor#7378#7624::Float64
  ########a#7134#7372#7379#7625::Tuple{}
  ########b#7135#7373#7380#7626::Tuple{}
  ########afactor#7136#7374#7381#7627::Float64
  ########bfactor#7137#7375#7382#7628::Float64
  ######_var0#7376#7383#7629::Tuple{}
  ######types#7259#7384#7630::Tuple{Type{Float64}}
  ##a#7631::Float64
  ####G#7608#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7609#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7610#7634::Tuple{}
  ##########x#7109#7111#7115#7611#7635::Float64
  ########_var0#7112#7116#7612#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7117#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7642::Tuple{}
  ##########x#7109#7111#7115#7120#7643::Float64
  ########_var0#7112#7116#7121#7644::Tuple{}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7613#7614#7618#7646::Tuple{Type{Float64}}
  ########types#7123#7613#7619#7647::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7637 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7117#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7644 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7112#7116#7121#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7620 = GenSym(0)
      ##a2#7621 = GenSym(1)
      ##div_a#7622 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7620::Float64,##a2#7621::Float64))
      ####afactor#7377#7623 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7621::Float64))
      ####bfactor#7378#7624 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7620::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7621::Float64,##a2#7621::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7629 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7376#7383#7629 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7622::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7631 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7608#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7612#7636 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7612#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7607::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7607::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7620::Float64
  ##a2#7621::Float64
  ##div_a#7622::Float64
  ####afactor#7377#7623::Float64
  ####bfactor#7378#7624::Float64
  ########a#7134#7372#7379#7625::Tuple{}
  ########b#7135#7373#7380#7626::Tuple{}
  ########afactor#7136#7374#7381#7627::Float64
  ########bfactor#7137#7375#7382#7628::Float64
  ######_var0#7376#7383#7629::Tuple{}
  ######types#7259#7384#7630::Tuple{Type{Float64}}
  ##a#7631::Float64
  ####G#7608#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7609#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7610#7634::Tuple{}
  ##########x#7109#7111#7115#7611#7635::Float64
  ########_var0#7112#7116#7612#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7117#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7642::Tuple{}
  ##########x#7109#7111#7115#7120#7643::Float64
  ########_var0#7112#7116#7121#7644::Tuple{}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7613#7614#7618#7646::Tuple{Type{Float64}}
  ########types#7123#7613#7619#7647::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7637 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7117#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7644 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7112#7116#7121#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7620 = GenSym(0)
      ##a2#7621 = GenSym(1)
      ##div_a#7622 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7620::Float64,##a2#7621::Float64))
      ####afactor#7377#7623 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7621::Float64))
      ####bfactor#7378#7624 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7620::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7621::Float64,##a2#7621::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7629 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7376#7383#7629 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7622::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7631 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7608#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7612#7636 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7612#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7620::Float64
  ##a2#7621::Float64
  ##div_a#7622::Float64
  ####afactor#7377#7623::Float64
  ####bfactor#7378#7624::Float64
  ########a#7134#7372#7379#7625::Tuple{}
  ########b#7135#7373#7380#7626::Tuple{}
  ########afactor#7136#7374#7381#7627::Float64
  ########bfactor#7137#7375#7382#7628::Float64
  ######_var0#7376#7383#7629::Tuple{}
  ######types#7259#7384#7630::Tuple{Type{Float64}}
  ##a#7631::Float64
  ####G#7608#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7609#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7610#7634::Tuple{}
  ##########x#7109#7111#7115#7611#7635::Float64
  ########_var0#7112#7116#7612#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7117#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7642::Tuple{}
  ##########x#7109#7111#7115#7120#7643::Float64
  ########_var0#7112#7116#7121#7644::Tuple{}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7613#7614#7618#7646::Tuple{Type{Float64}}
  ########types#7123#7613#7619#7647::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7637 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7117#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7644 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7112#7116#7121#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7620 = GenSym(0)
      ##a2#7621 = GenSym(1)
      ##div_a#7622 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7620::Float64,##a2#7621::Float64))
      ####afactor#7377#7623 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7621::Float64))
      ####bfactor#7378#7624 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7620::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7621::Float64,##a2#7621::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7629 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7376#7383#7629 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7622::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7631 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7608#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7612#7636 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7612#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7620::Float64
  ##a2#7621::Float64
  ##div_a#7622::Float64
  ####afactor#7377#7623::Float64
  ####bfactor#7378#7624::Float64
  ########a#7134#7372#7379#7625::Tuple{}
  ########b#7135#7373#7380#7626::Tuple{}
  ########afactor#7136#7374#7381#7627::Float64
  ########bfactor#7137#7375#7382#7628::Float64
  ######_var0#7376#7383#7629::Tuple{}
  ######types#7259#7384#7630::Tuple{Type{Float64}}
  ##a#7631::Float64
  ####G#7608#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7609#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7610#7634::Tuple{}
  ##########x#7109#7111#7115#7611#7635::Float64
  ########_var0#7112#7116#7612#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7117#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7642::Tuple{}
  ##########x#7109#7111#7115#7120#7643::Float64
  ########_var0#7112#7116#7121#7644::Tuple{}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7613#7614#7618#7646::Tuple{Type{Float64}}
  ########types#7123#7613#7619#7647::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7637 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7117#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7644 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7112#7116#7121#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7620 = GenSym(0)
      ##a2#7621 = GenSym(1)
      ##div_a#7622 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7620::Float64,##a2#7621::Float64))
      ####afactor#7377#7623 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7621::Float64))
      ####bfactor#7378#7624 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7620::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7621::Float64,##a2#7621::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7629 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7376#7383#7629 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7622::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7631 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7608#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7612#7636 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7612#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7620::Float64
  ##a2#7621::Float64
  ##div_a#7622::Float64
  ####afactor#7377#7623::Float64
  ####bfactor#7378#7624::Float64
  ########a#7134#7372#7379#7625::Tuple{}
  ########b#7135#7373#7380#7626::Tuple{}
  ########afactor#7136#7374#7381#7627::Float64
  ########bfactor#7137#7375#7382#7628::Float64
  ######_var0#7376#7383#7629::Tuple{}
  ######types#7259#7384#7630::Tuple{Type{Float64}}
  ##a#7631::Float64
  ####G#7608#7632::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7609#7633::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7610#7634::Tuple{}
  ##########x#7109#7111#7115#7611#7635::Float64
  ########_var0#7112#7116#7612#7636::Tuple{}
  ##a#7637::Float64
  ##div_a#7638::Float64
  ##deriv#7639::Float64
  ####G#7117#7640::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7641::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7642::Tuple{}
  ##########x#7109#7111#7115#7120#7643::Float64
  ########_var0#7112#7116#7121#7644::Tuple{}
  ##xs#7645::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7123#7613#7614#7618#7646::Tuple{Type{Float64}}
  ########types#7123#7613#7619#7647::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7637 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7638 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7637::Float64))
      ##deriv#7639 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7638::Float64,##a#7637::Float64))))
      ####G#7117#7640 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7644 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7112#7116#7121#7644 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7638::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7620 = GenSym(0)
      ##a2#7621 = GenSym(1)
      ##div_a#7622 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7620::Float64,##a2#7621::Float64))
      ####afactor#7377#7623 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7621::Float64))
      ####bfactor#7378#7624 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7620::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7621::Float64,##a2#7621::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7376#7383#7629 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7376#7383#7629 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7622::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7631 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7631::Float64,0)::Float64
      ####G#7608#7632 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7612#7636 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7112#7116#7612#7636 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7631::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7661#7666::UInt64
  ####idx#7662#7667::UInt64
  ####x#7663#7668::Float64
  ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7670::Float64
  ##_var0#7671::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7653#7659#7664#7669 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7653#7659#7664#7669 = false
      3: 
      ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7670 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7651#7652#7654#7660#7665#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7661#7666 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7670::Float64),0x000fffffffffffff))
      ####idx#7662#7667 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7666::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7668 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7666::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7666::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7671 = ####x#7663#7668::Float64
      goto 6
      5: 
      ##_var0#7671 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7667::UInt64,####x#7663#7668::Float64)::Float64
      goto 6
      ##_var0#7671 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7671::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7661#7666::UInt64
  ####idx#7662#7667::UInt64
  ####x#7663#7668::Float64
  ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7670::Float64
  ##_var0#7671::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7653#7659#7664#7669 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7653#7659#7664#7669 = false
      3: 
      ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7670 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7651#7652#7654#7660#7665#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7661#7666 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7670::Float64),0x000fffffffffffff))
      ####idx#7662#7667 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7666::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7668 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7666::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7666::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7671 = ####x#7663#7668::Float64
      goto 6
      5: 
      ##_var0#7671 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7667::UInt64,####x#7663#7668::Float64)::Float64
      goto 6
      ##_var0#7671 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7671::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7678::Float64
  ##div_a#7679::Float64
  ##deriv#7680::Float64
  ####G#7117#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7682::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7683::Tuple{}
  ##########x#7109#7111#7115#7120#7684::Float64
  ########_var0#7112#7116#7121#7685::Tuple{}
  ####ri#7661#7686::UInt64
  ####idx#7662#7687::UInt64
  ####x#7663#7688::Float64
  ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7690::Float64
  ##_var0#7691::Float64
  ##a#7692::Float64
  ##exp_a#7693::Float64
  ##deriv#7694::Float64
  ####G#7673#7695::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7674#7696::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7675#7697::Tuple{}
  ##########x#7109#7111#7115#7676#7698::Float64
  ########_var0#7112#7116#7677#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ######a#7134#7138#7702::Tuple{}
  ######b#7135#7139#7703::Tuple{}
  ######afactor#7136#7140#7704::Float64
  ######bfactor#7137#7141#7705::Float64
  ####_var0#7142#7706::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7653#7659#7664#7689 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7653#7659#7664#7689 = false
      4: 
      ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7690 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7651#7652#7654#7660#7665#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7661#7686 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7690::Float64),0x000fffffffffffff))
      ####idx#7662#7687 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7686::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7688 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7686::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7686::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7691 = ####x#7663#7688::Float64
      goto 7
      6: 
      ##_var0#7691 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7687::UInt64,####x#7663#7688::Float64)::Float64
      goto 7
      ##_var0#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7691::Float64
      ##a#7678 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7679 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7678::Float64))
      ##deriv#7680 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7679::Float64,##a#7678::Float64))))
      ####G#7117#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7685 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7692 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7692::Float64,0)::Float64
      ##exp_a#7693 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7692::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7694 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7693::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7673#7695 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7677#7699 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7112#7116#7677#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7693::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7700 = GenSym(10)
      ##a2#7701 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7706 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7142#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7700::Float64,##a2#7701::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7661#7666::UInt64
  ####idx#7662#7667::UInt64
  ####x#7663#7668::Float64
  ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7670::Float64
  ##_var0#7671::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7653#7659#7664#7669 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7653#7659#7664#7669 = false
      3: 
      ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7670 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7651#7652#7654#7660#7665#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7661#7666 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7670::Float64),0x000fffffffffffff))
      ####idx#7662#7667 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7666::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7668 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7666::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7666::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7671 = ####x#7663#7668::Float64
      goto 6
      5: 
      ##_var0#7671 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7667::UInt64,####x#7663#7668::Float64)::Float64
      goto 6
      ##_var0#7671 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7671::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7661#7666::UInt64
  ####idx#7662#7667::UInt64
  ####x#7663#7668::Float64
  ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7670::Float64
  ##_var0#7671::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7653#7659#7664#7669 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7653#7659#7664#7669 = false
      3: 
      ########_var0#7653#7659#7664#7669::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7670 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7651#7652#7654#7660#7665#7670 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7661#7666 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7670::Float64),0x000fffffffffffff))
      ####idx#7662#7667 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7666::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7668 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7666::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7666::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7667::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7671 = ####x#7663#7668::Float64
      goto 6
      5: 
      ##_var0#7671 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7667::UInt64,####x#7663#7668::Float64)::Float64
      goto 6
      ##_var0#7671 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7671::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7678::Float64
  ##div_a#7679::Float64
  ##deriv#7680::Float64
  ####G#7117#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7682::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7683::Tuple{}
  ##########x#7109#7111#7115#7120#7684::Float64
  ########_var0#7112#7116#7121#7685::Tuple{}
  ####ri#7661#7686::UInt64
  ####idx#7662#7687::UInt64
  ####x#7663#7688::Float64
  ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7690::Float64
  ##_var0#7691::Float64
  ##a#7692::Float64
  ##exp_a#7693::Float64
  ##deriv#7694::Float64
  ####G#7673#7695::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7674#7696::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7675#7697::Tuple{}
  ##########x#7109#7111#7115#7676#7698::Float64
  ########_var0#7112#7116#7677#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ######a#7134#7138#7702::Tuple{}
  ######b#7135#7139#7703::Tuple{}
  ######afactor#7136#7140#7704::Float64
  ######bfactor#7137#7141#7705::Float64
  ####_var0#7142#7706::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7653#7659#7664#7689 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7653#7659#7664#7689 = false
      4: 
      ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7690 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7651#7652#7654#7660#7665#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7661#7686 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7690::Float64),0x000fffffffffffff))
      ####idx#7662#7687 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7686::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7688 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7686::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7686::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7691 = ####x#7663#7688::Float64
      goto 7
      6: 
      ##_var0#7691 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7687::UInt64,####x#7663#7688::Float64)::Float64
      goto 7
      ##_var0#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7691::Float64
      ##a#7678 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7679 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7678::Float64))
      ##deriv#7680 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7679::Float64,##a#7678::Float64))))
      ####G#7117#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7685 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7692 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7692::Float64,0)::Float64
      ##exp_a#7693 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7692::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7694 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7693::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7673#7695 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7677#7699 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7112#7116#7677#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7693::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7700 = GenSym(10)
      ##a2#7701 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7706 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7142#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7700::Float64,##a2#7701::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7678::Float64
  ##div_a#7679::Float64
  ##deriv#7680::Float64
  ####G#7117#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7682::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7683::Tuple{}
  ##########x#7109#7111#7115#7120#7684::Float64
  ########_var0#7112#7116#7121#7685::Tuple{}
  ####ri#7661#7686::UInt64
  ####idx#7662#7687::UInt64
  ####x#7663#7688::Float64
  ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7690::Float64
  ##_var0#7691::Float64
  ##a#7692::Float64
  ##exp_a#7693::Float64
  ##deriv#7694::Float64
  ####G#7673#7695::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7674#7696::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7675#7697::Tuple{}
  ##########x#7109#7111#7115#7676#7698::Float64
  ########_var0#7112#7116#7677#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ######a#7134#7138#7702::Tuple{}
  ######b#7135#7139#7703::Tuple{}
  ######afactor#7136#7140#7704::Float64
  ######bfactor#7137#7141#7705::Float64
  ####_var0#7142#7706::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7653#7659#7664#7689 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7653#7659#7664#7689 = false
      4: 
      ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7690 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7651#7652#7654#7660#7665#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7661#7686 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7690::Float64),0x000fffffffffffff))
      ####idx#7662#7687 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7686::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7688 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7686::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7686::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7691 = ####x#7663#7688::Float64
      goto 7
      6: 
      ##_var0#7691 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7687::UInt64,####x#7663#7688::Float64)::Float64
      goto 7
      ##_var0#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7691::Float64
      ##a#7678 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7679 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7678::Float64))
      ##deriv#7680 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7679::Float64,##a#7678::Float64))))
      ####G#7117#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7685 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7692 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7692::Float64,0)::Float64
      ##exp_a#7693 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7692::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7694 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7693::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7673#7695 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7677#7699 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7112#7116#7677#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7693::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7700 = GenSym(10)
      ##a2#7701 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7706 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7142#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7700::Float64,##a2#7701::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7678::Float64
  ##div_a#7679::Float64
  ##deriv#7680::Float64
  ####G#7117#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7682::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7683::Tuple{}
  ##########x#7109#7111#7115#7120#7684::Float64
  ########_var0#7112#7116#7121#7685::Tuple{}
  ####ri#7661#7686::UInt64
  ####idx#7662#7687::UInt64
  ####x#7663#7688::Float64
  ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7690::Float64
  ##_var0#7691::Float64
  ##a#7692::Float64
  ##exp_a#7693::Float64
  ##deriv#7694::Float64
  ####G#7673#7695::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7674#7696::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7675#7697::Tuple{}
  ##########x#7109#7111#7115#7676#7698::Float64
  ########_var0#7112#7116#7677#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ######a#7134#7138#7702::Tuple{}
  ######b#7135#7139#7703::Tuple{}
  ######afactor#7136#7140#7704::Float64
  ######bfactor#7137#7141#7705::Float64
  ####_var0#7142#7706::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7653#7659#7664#7689 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7653#7659#7664#7689 = false
      4: 
      ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7690 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7651#7652#7654#7660#7665#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7661#7686 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7690::Float64),0x000fffffffffffff))
      ####idx#7662#7687 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7686::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7688 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7686::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7686::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7691 = ####x#7663#7688::Float64
      goto 7
      6: 
      ##_var0#7691 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7687::UInt64,####x#7663#7688::Float64)::Float64
      goto 7
      ##_var0#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7691::Float64
      ##a#7678 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7679 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7678::Float64))
      ##deriv#7680 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7679::Float64,##a#7678::Float64))))
      ####G#7117#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7685 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7692 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7692::Float64,0)::Float64
      ##exp_a#7693 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7692::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7694 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7693::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7673#7695 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7677#7699 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7112#7116#7677#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7693::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7700 = GenSym(10)
      ##a2#7701 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7706 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7142#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7700::Float64,##a2#7701::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7678::Float64
  ##div_a#7679::Float64
  ##deriv#7680::Float64
  ####G#7117#7681::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7118#7682::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7119#7683::Tuple{}
  ##########x#7109#7111#7115#7120#7684::Float64
  ########_var0#7112#7116#7121#7685::Tuple{}
  ####ri#7661#7686::UInt64
  ####idx#7662#7687::UInt64
  ####x#7663#7688::Float64
  ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
  ############_var0#7651#7652#7654#7660#7665#7690::Float64
  ##_var0#7691::Float64
  ##a#7692::Float64
  ##exp_a#7693::Float64
  ##deriv#7694::Float64
  ####G#7673#7695::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7674#7696::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7675#7697::Tuple{}
  ##########x#7109#7111#7115#7676#7698::Float64
  ########_var0#7112#7116#7677#7699::Tuple{}
  ##a1#7700::Float64
  ##a2#7701::Float64
  ######a#7134#7138#7702::Tuple{}
  ######b#7135#7139#7703::Tuple{}
  ######afactor#7136#7140#7704::Float64
  ######bfactor#7137#7141#7705::Float64
  ####_var0#7142#7706::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7653#7659#7664#7689 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7653#7659#7664#7689 = false
      4: 
      ########_var0#7653#7659#7664#7689::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7651#7652#7654#7660#7665#7690 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7651#7652#7654#7660#7665#7690 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7661#7686 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7651#7652#7654#7660#7665#7690::Float64),0x000fffffffffffff))
      ####idx#7662#7687 = (Base.box)(UInt64,(Base.and_int)(####ri#7661#7686::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7663#7688 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7661#7686::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7661#7686::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7662#7687::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7691 = ####x#7663#7688::Float64
      goto 7
      6: 
      ##_var0#7691 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7662#7687::UInt64,####x#7663#7688::Float64)::Float64
      goto 7
      ##_var0#7691 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7691::Float64
      ##a#7678 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7679 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7678::Float64))
      ##deriv#7680 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7679::Float64,##a#7678::Float64))))
      ####G#7117#7681 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7121#7685 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7121#7685 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7679::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7692 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7692::Float64,0)::Float64
      ##exp_a#7693 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7692::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7694 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7693::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7673#7695 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7677#7699 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7112#7116#7677#7699 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7693::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7700 = GenSym(10)
      ##a2#7701 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7142#7706 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7142#7706 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7700::Float64,##a2#7701::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7787::Float64
  ####G#7782#7788::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7783#7789::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7784#7790::Tuple{}
  ##########x#7109#7111#7115#7785#7791::Float64
  ########_var0#7112#7116#7786#7792::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7787 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7782#7788 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7786#7792 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7786#7792 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7787::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7787::Float64
  ####G#7782#7788::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7783#7789::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7784#7790::Tuple{}
  ##########x#7109#7111#7115#7785#7791::Float64
  ########_var0#7112#7116#7786#7792::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7787 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7782#7788 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7786#7792 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7786#7792 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7787::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7787::Float64
  ####G#7782#7788::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7783#7789::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7784#7790::Tuple{}
  ##########x#7109#7111#7115#7785#7791::Float64
  ########_var0#7112#7116#7786#7792::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7787 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7782#7788 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7786#7792 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7786#7792 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7787::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7787::Float64
  ####G#7782#7788::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7783#7789::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7784#7790::Tuple{}
  ##########x#7109#7111#7115#7785#7791::Float64
  ########_var0#7112#7116#7786#7792::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7787 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7782#7788 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7786#7792 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7786#7792 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7787::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7787::Float64
  ####G#7782#7788::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7107#7113#7783#7789::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7108#7110#7114#7784#7790::Tuple{}
  ##########x#7109#7111#7115#7785#7791::Float64
  ########_var0#7112#7116#7786#7792::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7787 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7782#7788 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7112#7116#7786#7792 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7112#7116#7786#7792 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7787::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





