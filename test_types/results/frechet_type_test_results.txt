____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 55:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7106::Float64
  ##div_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7080#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7111::Tuple{}
  ##########x#7072#7074#7078#7083#7112::Float64
  ########_var0#7075#7079#7084#7113::Tuple{}
  ######tup#7085#7087#7114::Tuple{}
  ####_var0#7088#7115::Tuple{}
  ######types#7086#7089#7116::Tuple{Type{Float64}}
  ##a#7117::Float64
  ####G#7092#7118::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7119::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7120::Tuple{}
  ##########x#7072#7074#7078#7095#7121::Float64
  ########_var0#7075#7079#7096#7122::Tuple{}
  ##a1#7123::Float64
  ##a2#7124::Float64
  ######a#7097#7101#7125::Tuple{}
  ######b#7098#7102#7126::Tuple{}
  ######afactor#7099#7103#7127::Float64
  ######bfactor#7100#7104#7128::Float64
  ####_var0#7105#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7106 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7107 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7106::Float64))
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7107::Float64,##a#7106::Float64))))
      ####G#7080#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7113 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7084#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7115 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7088#7115 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7117 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7117::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      ####G#7092#7118 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7122 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7075#7079#7096#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7117::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7123 = GenSym(7)
      ##a2#7124 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7129 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7123::Float64,##a2#7124::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7106::Float64
  ##div_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7080#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7111::Tuple{}
  ##########x#7072#7074#7078#7083#7112::Float64
  ########_var0#7075#7079#7084#7113::Tuple{}
  ######tup#7085#7087#7114::Tuple{}
  ####_var0#7088#7115::Tuple{}
  ######types#7086#7089#7116::Tuple{Type{Float64}}
  ##a#7117::Float64
  ####G#7092#7118::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7119::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7120::Tuple{}
  ##########x#7072#7074#7078#7095#7121::Float64
  ########_var0#7075#7079#7096#7122::Tuple{}
  ##a1#7123::Float64
  ##a2#7124::Float64
  ######a#7097#7101#7125::Tuple{}
  ######b#7098#7102#7126::Tuple{}
  ######afactor#7099#7103#7127::Float64
  ######bfactor#7100#7104#7128::Float64
  ####_var0#7105#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7106 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7107 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7106::Float64))
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7107::Float64,##a#7106::Float64))))
      ####G#7080#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7113 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7084#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7115 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7088#7115 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7117 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7117::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      ####G#7092#7118 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7122 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7075#7079#7096#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7117::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7123 = GenSym(7)
      ##a2#7124 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7129 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7123::Float64,##a2#7124::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7106::Float64
  ##div_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7080#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7111::Tuple{}
  ##########x#7072#7074#7078#7083#7112::Float64
  ########_var0#7075#7079#7084#7113::Tuple{}
  ######tup#7085#7087#7114::Tuple{}
  ####_var0#7088#7115::Tuple{}
  ######types#7086#7089#7116::Tuple{Type{Float64}}
  ##a#7117::Float64
  ####G#7092#7118::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7119::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7120::Tuple{}
  ##########x#7072#7074#7078#7095#7121::Float64
  ########_var0#7075#7079#7096#7122::Tuple{}
  ##a1#7123::Float64
  ##a2#7124::Float64
  ######a#7097#7101#7125::Tuple{}
  ######b#7098#7102#7126::Tuple{}
  ######afactor#7099#7103#7127::Float64
  ######bfactor#7100#7104#7128::Float64
  ####_var0#7105#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7106 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7107 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7106::Float64))
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7107::Float64,##a#7106::Float64))))
      ####G#7080#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7113 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7084#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7115 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7088#7115 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7117 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7117::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      ####G#7092#7118 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7122 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7075#7079#7096#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7117::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7123 = GenSym(7)
      ##a2#7124 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7129 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7123::Float64,##a2#7124::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7106::Float64
  ##div_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7080#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7111::Tuple{}
  ##########x#7072#7074#7078#7083#7112::Float64
  ########_var0#7075#7079#7084#7113::Tuple{}
  ######tup#7085#7087#7114::Tuple{}
  ####_var0#7088#7115::Tuple{}
  ######types#7086#7089#7116::Tuple{Type{Float64}}
  ##a#7117::Float64
  ####G#7092#7118::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7119::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7120::Tuple{}
  ##########x#7072#7074#7078#7095#7121::Float64
  ########_var0#7075#7079#7096#7122::Tuple{}
  ##a1#7123::Float64
  ##a2#7124::Float64
  ######a#7097#7101#7125::Tuple{}
  ######b#7098#7102#7126::Tuple{}
  ######afactor#7099#7103#7127::Float64
  ######bfactor#7100#7104#7128::Float64
  ####_var0#7105#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7106 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7107 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7106::Float64))
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7107::Float64,##a#7106::Float64))))
      ####G#7080#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7113 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7084#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7115 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7088#7115 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7117 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7117::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      ####G#7092#7118 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7122 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7075#7079#7096#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7117::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7123 = GenSym(7)
      ##a2#7124 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7129 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7123::Float64,##a2#7124::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7106::Float64
  ##div_a#7107::Float64
  ##deriv#7108::Float64
  ####G#7080#7109::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7110::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7111::Tuple{}
  ##########x#7072#7074#7078#7083#7112::Float64
  ########_var0#7075#7079#7084#7113::Tuple{}
  ######tup#7085#7087#7114::Tuple{}
  ####_var0#7088#7115::Tuple{}
  ######types#7086#7089#7116::Tuple{Type{Float64}}
  ##a#7117::Float64
  ####G#7092#7118::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7119::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7120::Tuple{}
  ##########x#7072#7074#7078#7095#7121::Float64
  ########_var0#7075#7079#7096#7122::Tuple{}
  ##a1#7123::Float64
  ##a2#7124::Float64
  ######a#7097#7101#7125::Tuple{}
  ######b#7098#7102#7126::Tuple{}
  ######afactor#7099#7103#7127::Float64
  ######bfactor#7100#7104#7128::Float64
  ####_var0#7105#7129::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7106 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7107 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7106::Float64))
      ##deriv#7108 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7107::Float64,##a#7106::Float64))))
      ####G#7080#7109 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7113 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7084#7113 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7107::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7115 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7088#7115 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7117 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7117::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7117::Float64,0)::Float64
      ####G#7092#7118 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7122 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7075#7079#7096#7122 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7117::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7123 = GenSym(7)
      ##a2#7124 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7129 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7129 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7123::Float64,##a2#7124::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7158::Float64
  ##div_a#7159::Float64
  ##deriv#7160::Float64
  ####G#7080#7161::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7162::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7163::Tuple{}
  ##########x#7072#7074#7078#7083#7164::Float64
  ########_var0#7075#7079#7084#7165::Tuple{}
  ######tup#7085#7087#7166::Tuple{}
  ####_var0#7088#7167::Tuple{}
  ######types#7086#7089#7168::Tuple{Type{Float64}}
  ##a#7169::Float64
  ####G#7092#7170::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7171::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7172::Tuple{}
  ##########x#7072#7074#7078#7095#7173::Float64
  ########_var0#7075#7079#7096#7174::Tuple{}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7140#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7180::Tuple{}
  ##########x#7072#7074#7078#7143#7181::Float64
  ########_var0#7075#7079#7144#7182::Tuple{}
  ########tup#7071#7145#7149#7183::Tuple{}
  ########x#7072#7146#7150#7184::Float64
  ######_var0#7147#7151#7185::Tuple{}
  ########types#7086#7148#7152#7186::Tuple{Type{Float64}}
  ######tup#7085#7087#7187::Tuple{}
  ####_var0#7088#7188::Tuple{}
  ######types#7086#7089#7189::Tuple{Type{Float64}}
  ##a#7190::Float64
  ####G#7092#7191::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7192::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7193::Tuple{}
  ##########x#7072#7074#7078#7095#7194::Float64
  ########_var0#7075#7079#7096#7195::Tuple{}
  ######a#7153#7155#7196::Tuple{}
  ######b#7154#7156#7197::Tuple{}
  ####_var0#7157#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7140#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7204::Tuple{}
  ##########x#7072#7074#7078#7143#7205::Float64
  ########_var0#7075#7079#7144#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7097#7101#7209::Tuple{}
  ######b#7098#7102#7210::Tuple{}
  ######afactor#7099#7103#7211::Float64
  ######bfactor#7100#7104#7212::Float64
  ####_var0#7105#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7158 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7158::Float64))
      ##deriv#7160 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7159::Float64,##a#7158::Float64))))
      ####G#7080#7161 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7165 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7199 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7200 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7206 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7144#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7185 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7147#7151#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7188 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7088#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7190 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7190::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      ####G#7092#7191 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7195 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7075#7079#7096#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7190::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7167 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7169 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7169::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      ####G#7092#7170 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7174 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7174 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7169::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7182 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7075#7079#7144#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7198 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7157#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7207 = GenSym(14)
      ##a2#7208 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7213 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7105#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7158::Float64
  ##div_a#7159::Float64
  ##deriv#7160::Float64
  ####G#7080#7161::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7162::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7163::Tuple{}
  ##########x#7072#7074#7078#7083#7164::Float64
  ########_var0#7075#7079#7084#7165::Tuple{}
  ######tup#7085#7087#7166::Tuple{}
  ####_var0#7088#7167::Tuple{}
  ######types#7086#7089#7168::Tuple{Type{Float64}}
  ##a#7169::Float64
  ####G#7092#7170::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7171::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7172::Tuple{}
  ##########x#7072#7074#7078#7095#7173::Float64
  ########_var0#7075#7079#7096#7174::Tuple{}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7140#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7180::Tuple{}
  ##########x#7072#7074#7078#7143#7181::Float64
  ########_var0#7075#7079#7144#7182::Tuple{}
  ########tup#7071#7145#7149#7183::Tuple{}
  ########x#7072#7146#7150#7184::Float64
  ######_var0#7147#7151#7185::Tuple{}
  ########types#7086#7148#7152#7186::Tuple{Type{Float64}}
  ######tup#7085#7087#7187::Tuple{}
  ####_var0#7088#7188::Tuple{}
  ######types#7086#7089#7189::Tuple{Type{Float64}}
  ##a#7190::Float64
  ####G#7092#7191::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7192::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7193::Tuple{}
  ##########x#7072#7074#7078#7095#7194::Float64
  ########_var0#7075#7079#7096#7195::Tuple{}
  ######a#7153#7155#7196::Tuple{}
  ######b#7154#7156#7197::Tuple{}
  ####_var0#7157#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7140#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7204::Tuple{}
  ##########x#7072#7074#7078#7143#7205::Float64
  ########_var0#7075#7079#7144#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7097#7101#7209::Tuple{}
  ######b#7098#7102#7210::Tuple{}
  ######afactor#7099#7103#7211::Float64
  ######bfactor#7100#7104#7212::Float64
  ####_var0#7105#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7158 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7158::Float64))
      ##deriv#7160 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7159::Float64,##a#7158::Float64))))
      ####G#7080#7161 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7165 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7199 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7200 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7206 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7144#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7185 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7147#7151#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7188 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7088#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7190 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7190::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      ####G#7092#7191 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7195 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7075#7079#7096#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7190::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7167 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7169 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7169::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      ####G#7092#7170 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7174 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7174 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7169::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7182 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7075#7079#7144#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7198 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7157#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7207 = GenSym(14)
      ##a2#7208 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7213 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7105#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7158::Float64
  ##div_a#7159::Float64
  ##deriv#7160::Float64
  ####G#7080#7161::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7162::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7163::Tuple{}
  ##########x#7072#7074#7078#7083#7164::Float64
  ########_var0#7075#7079#7084#7165::Tuple{}
  ######tup#7085#7087#7166::Tuple{}
  ####_var0#7088#7167::Tuple{}
  ######types#7086#7089#7168::Tuple{Type{Float64}}
  ##a#7169::Float64
  ####G#7092#7170::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7171::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7172::Tuple{}
  ##########x#7072#7074#7078#7095#7173::Float64
  ########_var0#7075#7079#7096#7174::Tuple{}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7140#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7180::Tuple{}
  ##########x#7072#7074#7078#7143#7181::Float64
  ########_var0#7075#7079#7144#7182::Tuple{}
  ########tup#7071#7145#7149#7183::Tuple{}
  ########x#7072#7146#7150#7184::Float64
  ######_var0#7147#7151#7185::Tuple{}
  ########types#7086#7148#7152#7186::Tuple{Type{Float64}}
  ######tup#7085#7087#7187::Tuple{}
  ####_var0#7088#7188::Tuple{}
  ######types#7086#7089#7189::Tuple{Type{Float64}}
  ##a#7190::Float64
  ####G#7092#7191::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7192::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7193::Tuple{}
  ##########x#7072#7074#7078#7095#7194::Float64
  ########_var0#7075#7079#7096#7195::Tuple{}
  ######a#7153#7155#7196::Tuple{}
  ######b#7154#7156#7197::Tuple{}
  ####_var0#7157#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7140#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7204::Tuple{}
  ##########x#7072#7074#7078#7143#7205::Float64
  ########_var0#7075#7079#7144#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7097#7101#7209::Tuple{}
  ######b#7098#7102#7210::Tuple{}
  ######afactor#7099#7103#7211::Float64
  ######bfactor#7100#7104#7212::Float64
  ####_var0#7105#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7158 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7158::Float64))
      ##deriv#7160 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7159::Float64,##a#7158::Float64))))
      ####G#7080#7161 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7165 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7199 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7200 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7206 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7144#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7185 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7147#7151#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7188 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7088#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7190 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7190::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      ####G#7092#7191 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7195 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7075#7079#7096#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7190::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7167 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7169 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7169::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      ####G#7092#7170 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7174 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7174 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7169::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7182 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7075#7079#7144#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7198 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7157#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7207 = GenSym(14)
      ##a2#7208 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7213 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7105#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7158::Float64
  ##div_a#7159::Float64
  ##deriv#7160::Float64
  ####G#7080#7161::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7162::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7163::Tuple{}
  ##########x#7072#7074#7078#7083#7164::Float64
  ########_var0#7075#7079#7084#7165::Tuple{}
  ######tup#7085#7087#7166::Tuple{}
  ####_var0#7088#7167::Tuple{}
  ######types#7086#7089#7168::Tuple{Type{Float64}}
  ##a#7169::Float64
  ####G#7092#7170::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7171::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7172::Tuple{}
  ##########x#7072#7074#7078#7095#7173::Float64
  ########_var0#7075#7079#7096#7174::Tuple{}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7140#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7180::Tuple{}
  ##########x#7072#7074#7078#7143#7181::Float64
  ########_var0#7075#7079#7144#7182::Tuple{}
  ########tup#7071#7145#7149#7183::Tuple{}
  ########x#7072#7146#7150#7184::Float64
  ######_var0#7147#7151#7185::Tuple{}
  ########types#7086#7148#7152#7186::Tuple{Type{Float64}}
  ######tup#7085#7087#7187::Tuple{}
  ####_var0#7088#7188::Tuple{}
  ######types#7086#7089#7189::Tuple{Type{Float64}}
  ##a#7190::Float64
  ####G#7092#7191::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7192::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7193::Tuple{}
  ##########x#7072#7074#7078#7095#7194::Float64
  ########_var0#7075#7079#7096#7195::Tuple{}
  ######a#7153#7155#7196::Tuple{}
  ######b#7154#7156#7197::Tuple{}
  ####_var0#7157#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7140#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7204::Tuple{}
  ##########x#7072#7074#7078#7143#7205::Float64
  ########_var0#7075#7079#7144#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7097#7101#7209::Tuple{}
  ######b#7098#7102#7210::Tuple{}
  ######afactor#7099#7103#7211::Float64
  ######bfactor#7100#7104#7212::Float64
  ####_var0#7105#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7158 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7158::Float64))
      ##deriv#7160 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7159::Float64,##a#7158::Float64))))
      ####G#7080#7161 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7165 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7199 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7200 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7206 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7144#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7185 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7147#7151#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7188 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7088#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7190 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7190::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      ####G#7092#7191 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7195 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7075#7079#7096#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7190::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7167 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7169 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7169::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      ####G#7092#7170 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7174 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7174 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7169::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7182 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7075#7079#7144#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7198 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7157#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7207 = GenSym(14)
      ##a2#7208 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7213 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7105#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7158::Float64
  ##div_a#7159::Float64
  ##deriv#7160::Float64
  ####G#7080#7161::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7162::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7163::Tuple{}
  ##########x#7072#7074#7078#7083#7164::Float64
  ########_var0#7075#7079#7084#7165::Tuple{}
  ######tup#7085#7087#7166::Tuple{}
  ####_var0#7088#7167::Tuple{}
  ######types#7086#7089#7168::Tuple{Type{Float64}}
  ##a#7169::Float64
  ####G#7092#7170::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7171::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7172::Tuple{}
  ##########x#7072#7074#7078#7095#7173::Float64
  ########_var0#7075#7079#7096#7174::Tuple{}
  ##a#7175::Float64
  ##exp_a#7176::Float64
  ##deriv#7177::Float64
  ####G#7140#7178::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7179::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7180::Tuple{}
  ##########x#7072#7074#7078#7143#7181::Float64
  ########_var0#7075#7079#7144#7182::Tuple{}
  ########tup#7071#7145#7149#7183::Tuple{}
  ########x#7072#7146#7150#7184::Float64
  ######_var0#7147#7151#7185::Tuple{}
  ########types#7086#7148#7152#7186::Tuple{Type{Float64}}
  ######tup#7085#7087#7187::Tuple{}
  ####_var0#7088#7188::Tuple{}
  ######types#7086#7089#7189::Tuple{Type{Float64}}
  ##a#7190::Float64
  ####G#7092#7191::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7192::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7193::Tuple{}
  ##########x#7072#7074#7078#7095#7194::Float64
  ########_var0#7075#7079#7096#7195::Tuple{}
  ######a#7153#7155#7196::Tuple{}
  ######b#7154#7156#7197::Tuple{}
  ####_var0#7157#7198::Tuple{}
  ##a#7199::Float64
  ##exp_a#7200::Float64
  ##deriv#7201::Float64
  ####G#7140#7202::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7203::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7204::Tuple{}
  ##########x#7072#7074#7078#7143#7205::Float64
  ########_var0#7075#7079#7144#7206::Tuple{}
  ##a1#7207::Float64
  ##a2#7208::Float64
  ######a#7097#7101#7209::Tuple{}
  ######b#7098#7102#7210::Tuple{}
  ######afactor#7099#7103#7211::Float64
  ######bfactor#7100#7104#7212::Float64
  ####_var0#7105#7213::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 69:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      ##a#7158 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7159 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7158::Float64))
      ##deriv#7160 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7159::Float64,##a#7158::Float64))))
      ####G#7080#7161 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7165 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7165 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7159::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 71:
      ##a#7199 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7200 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7201 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7199::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7202 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7206 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7144#7206 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7200::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7185 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7147#7151#7185 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7188 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7088#7188 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7190 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7190::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7190::Float64,0)::Float64
      ####G#7092#7191 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7195 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7075#7079#7096#7195 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7190::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7167 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7167 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7169 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7169::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7169::Float64,0)::Float64
      ####G#7092#7170 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7174 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7174 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7169::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7175 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7176 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7177 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7175::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7178 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7182 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7075#7079#7144#7182 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7176::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7198 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7157#7198 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7207 = GenSym(14)
      ##a2#7208 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7213 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7105#7213 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7207::Float64,##a2#7208::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 73:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7237::Float64
  ##div_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7080#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7242::Tuple{}
  ##########x#7072#7074#7078#7083#7243::Float64
  ########_var0#7075#7079#7084#7244::Tuple{}
  ######tup#7085#7087#7245::Tuple{}
  ####_var0#7088#7246::Tuple{}
  ######types#7086#7089#7247::Tuple{Type{Float64}}
  ##a1#7248::Float64
  ##a2#7249::Float64
  ##exp_a#7250::Float64
  ##powval#7251::Float64
  ##logval#7252::Float64
  ##new_bs#7253::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7223#7254::Float64
  ####exp_a#7224#7255::Float64
  ####deriv#7225#7256::Float64
  ######G#7217#7226#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7070#7076#7218#7227#7258::Tuple{Type{Float64},Type{Float64}}
  ############tup#7071#7073#7077#7219#7228#7259::Tuple{}
  ############x#7072#7074#7078#7220#7229#7260::Float64
  ##########_var0#7075#7079#7221#7230#7261::Tuple{}
  ######a#7097#7231#7262::Tuple{}
  ######b#7098#7232#7263::Tuple{}
  ######afactor#7099#7233#7264::Float64
  ######bfactor#7100#7234#7265::Float64
  ####_var0#7235#7266::Tuple{}
  ######types#7222#7236#7267::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7097#7101#7270::Tuple{}
  ######b#7098#7102#7271::Tuple{}
  ######afactor#7099#7103#7272::Float64
  ######bfactor#7100#7104#7273::Float64
  ####_var0#7105#7274::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7237 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7237::Float64))
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7238::Float64,##a#7237::Float64))))
      ####G#7080#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7244 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7246 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7248"))
      NewvarNode(symbol("##a2#7249"))
      NewvarNode(symbol("##exp_a#7250"))
      NewvarNode(symbol("##powval#7251"))
      NewvarNode(symbol("##logval#7252"))
      NewvarNode(symbol("##new_bs#7253"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7223#7254 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7224#7255 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(7),0)::Float64
      ####deriv#7225#7256 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(7))))::Float64))
      ######G#7217#7226#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7075#7079#7221#7230#7261 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7075#7079#7221#7230#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7224#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7248 = GenSym(1)
      ##a2#7249 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,##a2#7249::Float64,0)::Float64
      ##exp_a#7250 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,##a2#7249::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7249::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,GenSym(14),0)::Float64
      ##powval#7251 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7249::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0)::Float64
      ##logval#7252 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7250::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7248::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7235#7266 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7235#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7253 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7250::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7268 = GenSym(21)
      ##a2#7269 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7274 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7237::Float64
  ##div_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7080#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7242::Tuple{}
  ##########x#7072#7074#7078#7083#7243::Float64
  ########_var0#7075#7079#7084#7244::Tuple{}
  ######tup#7085#7087#7245::Tuple{}
  ####_var0#7088#7246::Tuple{}
  ######types#7086#7089#7247::Tuple{Type{Float64}}
  ##a1#7248::Float64
  ##a2#7249::Float64
  ##exp_a#7250::Float64
  ##powval#7251::Float64
  ##logval#7252::Float64
  ##new_bs#7253::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7223#7254::Float64
  ####exp_a#7224#7255::Float64
  ####deriv#7225#7256::Float64
  ######G#7217#7226#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7070#7076#7218#7227#7258::Tuple{Type{Float64},Type{Float64}}
  ############tup#7071#7073#7077#7219#7228#7259::Tuple{}
  ############x#7072#7074#7078#7220#7229#7260::Float64
  ##########_var0#7075#7079#7221#7230#7261::Tuple{}
  ######a#7097#7231#7262::Tuple{}
  ######b#7098#7232#7263::Tuple{}
  ######afactor#7099#7233#7264::Float64
  ######bfactor#7100#7234#7265::Float64
  ####_var0#7235#7266::Tuple{}
  ######types#7222#7236#7267::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7097#7101#7270::Tuple{}
  ######b#7098#7102#7271::Tuple{}
  ######afactor#7099#7103#7272::Float64
  ######bfactor#7100#7104#7273::Float64
  ####_var0#7105#7274::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7237 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7237::Float64))
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7238::Float64,##a#7237::Float64))))
      ####G#7080#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7244 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7246 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7248"))
      NewvarNode(symbol("##a2#7249"))
      NewvarNode(symbol("##exp_a#7250"))
      NewvarNode(symbol("##powval#7251"))
      NewvarNode(symbol("##logval#7252"))
      NewvarNode(symbol("##new_bs#7253"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7223#7254 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7224#7255 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(7),0)::Float64
      ####deriv#7225#7256 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(7))))::Float64))
      ######G#7217#7226#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7075#7079#7221#7230#7261 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7075#7079#7221#7230#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7224#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7248 = GenSym(1)
      ##a2#7249 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,##a2#7249::Float64,0)::Float64
      ##exp_a#7250 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,##a2#7249::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7249::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,GenSym(14),0)::Float64
      ##powval#7251 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7249::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0)::Float64
      ##logval#7252 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7250::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7248::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7235#7266 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7235#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7253 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7250::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7268 = GenSym(21)
      ##a2#7269 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7274 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7237::Float64
  ##div_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7080#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7242::Tuple{}
  ##########x#7072#7074#7078#7083#7243::Float64
  ########_var0#7075#7079#7084#7244::Tuple{}
  ######tup#7085#7087#7245::Tuple{}
  ####_var0#7088#7246::Tuple{}
  ######types#7086#7089#7247::Tuple{Type{Float64}}
  ##a1#7248::Float64
  ##a2#7249::Float64
  ##exp_a#7250::Float64
  ##powval#7251::Float64
  ##logval#7252::Float64
  ##new_bs#7253::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7223#7254::Float64
  ####exp_a#7224#7255::Float64
  ####deriv#7225#7256::Float64
  ######G#7217#7226#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7070#7076#7218#7227#7258::Tuple{Type{Float64},Type{Float64}}
  ############tup#7071#7073#7077#7219#7228#7259::Tuple{}
  ############x#7072#7074#7078#7220#7229#7260::Float64
  ##########_var0#7075#7079#7221#7230#7261::Tuple{}
  ######a#7097#7231#7262::Tuple{}
  ######b#7098#7232#7263::Tuple{}
  ######afactor#7099#7233#7264::Float64
  ######bfactor#7100#7234#7265::Float64
  ####_var0#7235#7266::Tuple{}
  ######types#7222#7236#7267::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7097#7101#7270::Tuple{}
  ######b#7098#7102#7271::Tuple{}
  ######afactor#7099#7103#7272::Float64
  ######bfactor#7100#7104#7273::Float64
  ####_var0#7105#7274::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7237 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7237::Float64))
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7238::Float64,##a#7237::Float64))))
      ####G#7080#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7244 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7246 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7248"))
      NewvarNode(symbol("##a2#7249"))
      NewvarNode(symbol("##exp_a#7250"))
      NewvarNode(symbol("##powval#7251"))
      NewvarNode(symbol("##logval#7252"))
      NewvarNode(symbol("##new_bs#7253"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7223#7254 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7224#7255 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(7),0)::Float64
      ####deriv#7225#7256 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(7))))::Float64))
      ######G#7217#7226#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7075#7079#7221#7230#7261 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7075#7079#7221#7230#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7224#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7248 = GenSym(1)
      ##a2#7249 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,##a2#7249::Float64,0)::Float64
      ##exp_a#7250 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,##a2#7249::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7249::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,GenSym(14),0)::Float64
      ##powval#7251 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7249::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0)::Float64
      ##logval#7252 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7250::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7248::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7235#7266 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7235#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7253 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7250::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7268 = GenSym(21)
      ##a2#7269 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7274 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7237::Float64
  ##div_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7080#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7242::Tuple{}
  ##########x#7072#7074#7078#7083#7243::Float64
  ########_var0#7075#7079#7084#7244::Tuple{}
  ######tup#7085#7087#7245::Tuple{}
  ####_var0#7088#7246::Tuple{}
  ######types#7086#7089#7247::Tuple{Type{Float64}}
  ##a1#7248::Float64
  ##a2#7249::Float64
  ##exp_a#7250::Float64
  ##powval#7251::Float64
  ##logval#7252::Float64
  ##new_bs#7253::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7223#7254::Float64
  ####exp_a#7224#7255::Float64
  ####deriv#7225#7256::Float64
  ######G#7217#7226#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7070#7076#7218#7227#7258::Tuple{Type{Float64},Type{Float64}}
  ############tup#7071#7073#7077#7219#7228#7259::Tuple{}
  ############x#7072#7074#7078#7220#7229#7260::Float64
  ##########_var0#7075#7079#7221#7230#7261::Tuple{}
  ######a#7097#7231#7262::Tuple{}
  ######b#7098#7232#7263::Tuple{}
  ######afactor#7099#7233#7264::Float64
  ######bfactor#7100#7234#7265::Float64
  ####_var0#7235#7266::Tuple{}
  ######types#7222#7236#7267::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7097#7101#7270::Tuple{}
  ######b#7098#7102#7271::Tuple{}
  ######afactor#7099#7103#7272::Float64
  ######bfactor#7100#7104#7273::Float64
  ####_var0#7105#7274::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7237 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7237::Float64))
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7238::Float64,##a#7237::Float64))))
      ####G#7080#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7244 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7246 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7248"))
      NewvarNode(symbol("##a2#7249"))
      NewvarNode(symbol("##exp_a#7250"))
      NewvarNode(symbol("##powval#7251"))
      NewvarNode(symbol("##logval#7252"))
      NewvarNode(symbol("##new_bs#7253"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7223#7254 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7224#7255 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(7),0)::Float64
      ####deriv#7225#7256 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(7))))::Float64))
      ######G#7217#7226#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7075#7079#7221#7230#7261 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7075#7079#7221#7230#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7224#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7248 = GenSym(1)
      ##a2#7249 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,##a2#7249::Float64,0)::Float64
      ##exp_a#7250 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,##a2#7249::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7249::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,GenSym(14),0)::Float64
      ##powval#7251 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7249::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0)::Float64
      ##logval#7252 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7250::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7248::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7235#7266 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7235#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7253 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7250::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7268 = GenSym(21)
      ##a2#7269 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7274 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7237::Float64
  ##div_a#7238::Float64
  ##deriv#7239::Float64
  ####G#7080#7240::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7241::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7242::Tuple{}
  ##########x#7072#7074#7078#7083#7243::Float64
  ########_var0#7075#7079#7084#7244::Tuple{}
  ######tup#7085#7087#7245::Tuple{}
  ####_var0#7088#7246::Tuple{}
  ######types#7086#7089#7247::Tuple{Type{Float64}}
  ##a1#7248::Float64
  ##a2#7249::Float64
  ##exp_a#7250::Float64
  ##powval#7251::Float64
  ##logval#7252::Float64
  ##new_bs#7253::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7223#7254::Float64
  ####exp_a#7224#7255::Float64
  ####deriv#7225#7256::Float64
  ######G#7217#7226#7257::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7070#7076#7218#7227#7258::Tuple{Type{Float64},Type{Float64}}
  ############tup#7071#7073#7077#7219#7228#7259::Tuple{}
  ############x#7072#7074#7078#7220#7229#7260::Float64
  ##########_var0#7075#7079#7221#7230#7261::Tuple{}
  ######a#7097#7231#7262::Tuple{}
  ######b#7098#7232#7263::Tuple{}
  ######afactor#7099#7233#7264::Float64
  ######bfactor#7100#7234#7265::Float64
  ####_var0#7235#7266::Tuple{}
  ######types#7222#7236#7267::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7268::Float64
  ##a2#7269::Float64
  ######a#7097#7101#7270::Tuple{}
  ######b#7098#7102#7271::Tuple{}
  ######afactor#7099#7103#7272::Float64
  ######bfactor#7100#7104#7273::Float64
  ####_var0#7105#7274::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      ##a#7237 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7238 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7237::Float64))
      ##deriv#7239 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7238::Float64,##a#7237::Float64))))
      ####G#7080#7240 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7244 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7244 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7238::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7088#7246 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7088#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7248"))
      NewvarNode(symbol("##a2#7249"))
      NewvarNode(symbol("##exp_a#7250"))
      NewvarNode(symbol("##powval#7251"))
      NewvarNode(symbol("##logval#7252"))
      NewvarNode(symbol("##new_bs#7253"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7223#7254 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7224#7255 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7223#7254::Float64,0,GenSym(7),0)::Float64
      ####deriv#7225#7256 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7223#7254::Float64,GenSym(7))))::Float64))
      ######G#7217#7226#7257 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7075#7079#7221#7230#7261 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7075#7079#7221#7230#7261 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7224#7255::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7248 = GenSym(1)
      ##a2#7249 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,##a2#7249::Float64,0)::Float64
      ##exp_a#7250 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,##a2#7249::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7249::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0,GenSym(14),0)::Float64
      ##powval#7251 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7249::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7248::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7248::Float64,0)::Float64
      ##logval#7252 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7250::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7248::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7235#7266 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7235#7266 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7253 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7250::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7268 = GenSym(21)
      ##a2#7269 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7274 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7105#7274 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7268::Float64,##a2#7269::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7277::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7277 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7277::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7277::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7277::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7277::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7277 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7277::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7277::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7277::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7277::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7277 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7277::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7277::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7277::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7277::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7277 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7277::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7277::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7277::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7283::Float64
  ##div_a#7284::Float64
  ##deriv#7285::Float64
  ####G#7080#7286::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7287::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7288::Tuple{}
  ##########x#7072#7074#7078#7083#7289::Float64
  ########_var0#7075#7079#7084#7290::Tuple{}
  ##a#7291::Float64
  ##exp_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7278#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7279#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7280#7296::Tuple{}
  ##########x#7072#7074#7078#7281#7297::Float64
  ########_var0#7075#7079#7282#7298::Tuple{}
  ##a1#7299::Float64
  ##a2#7300::Float64
  ######a#7097#7101#7301::Tuple{}
  ######b#7098#7102#7302::Tuple{}
  ######afactor#7099#7103#7303::Float64
  ######bfactor#7100#7104#7304::Float64
  ####_var0#7105#7305::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7283 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7284 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7283::Float64))
      ##deriv#7285 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7284::Float64,##a#7283::Float64))))
      ####G#7080#7286 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7290 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7284::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7291::Float64,0)::Float64
      ##exp_a#7292 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7291::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7292::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7278#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7282#7298 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7282#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7299 = GenSym(7)
      ##a2#7300 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7105#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7299::Float64,##a2#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7283::Float64
  ##div_a#7284::Float64
  ##deriv#7285::Float64
  ####G#7080#7286::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7287::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7288::Tuple{}
  ##########x#7072#7074#7078#7083#7289::Float64
  ########_var0#7075#7079#7084#7290::Tuple{}
  ##a#7291::Float64
  ##exp_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7278#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7279#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7280#7296::Tuple{}
  ##########x#7072#7074#7078#7281#7297::Float64
  ########_var0#7075#7079#7282#7298::Tuple{}
  ##a1#7299::Float64
  ##a2#7300::Float64
  ######a#7097#7101#7301::Tuple{}
  ######b#7098#7102#7302::Tuple{}
  ######afactor#7099#7103#7303::Float64
  ######bfactor#7100#7104#7304::Float64
  ####_var0#7105#7305::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7283 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7284 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7283::Float64))
      ##deriv#7285 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7284::Float64,##a#7283::Float64))))
      ####G#7080#7286 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7290 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7284::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7291::Float64,0)::Float64
      ##exp_a#7292 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7291::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7292::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7278#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7282#7298 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7282#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7299 = GenSym(7)
      ##a2#7300 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7105#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7299::Float64,##a2#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7283::Float64
  ##div_a#7284::Float64
  ##deriv#7285::Float64
  ####G#7080#7286::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7287::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7288::Tuple{}
  ##########x#7072#7074#7078#7083#7289::Float64
  ########_var0#7075#7079#7084#7290::Tuple{}
  ##a#7291::Float64
  ##exp_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7278#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7279#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7280#7296::Tuple{}
  ##########x#7072#7074#7078#7281#7297::Float64
  ########_var0#7075#7079#7282#7298::Tuple{}
  ##a1#7299::Float64
  ##a2#7300::Float64
  ######a#7097#7101#7301::Tuple{}
  ######b#7098#7102#7302::Tuple{}
  ######afactor#7099#7103#7303::Float64
  ######bfactor#7100#7104#7304::Float64
  ####_var0#7105#7305::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7283 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7284 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7283::Float64))
      ##deriv#7285 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7284::Float64,##a#7283::Float64))))
      ####G#7080#7286 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7290 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7284::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7291::Float64,0)::Float64
      ##exp_a#7292 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7291::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7292::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7278#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7282#7298 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7282#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7299 = GenSym(7)
      ##a2#7300 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7105#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7299::Float64,##a2#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7283::Float64
  ##div_a#7284::Float64
  ##deriv#7285::Float64
  ####G#7080#7286::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7287::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7288::Tuple{}
  ##########x#7072#7074#7078#7083#7289::Float64
  ########_var0#7075#7079#7084#7290::Tuple{}
  ##a#7291::Float64
  ##exp_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7278#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7279#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7280#7296::Tuple{}
  ##########x#7072#7074#7078#7281#7297::Float64
  ########_var0#7075#7079#7282#7298::Tuple{}
  ##a1#7299::Float64
  ##a2#7300::Float64
  ######a#7097#7101#7301::Tuple{}
  ######b#7098#7102#7302::Tuple{}
  ######afactor#7099#7103#7303::Float64
  ######bfactor#7100#7104#7304::Float64
  ####_var0#7105#7305::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7283 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7284 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7283::Float64))
      ##deriv#7285 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7284::Float64,##a#7283::Float64))))
      ####G#7080#7286 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7290 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7284::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7291::Float64,0)::Float64
      ##exp_a#7292 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7291::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7292::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7278#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7282#7298 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7282#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7299 = GenSym(7)
      ##a2#7300 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7105#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7299::Float64,##a2#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7283::Float64
  ##div_a#7284::Float64
  ##deriv#7285::Float64
  ####G#7080#7286::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7287::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7288::Tuple{}
  ##########x#7072#7074#7078#7083#7289::Float64
  ########_var0#7075#7079#7084#7290::Tuple{}
  ##a#7291::Float64
  ##exp_a#7292::Float64
  ##deriv#7293::Float64
  ####G#7278#7294::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7279#7295::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7280#7296::Tuple{}
  ##########x#7072#7074#7078#7281#7297::Float64
  ########_var0#7075#7079#7282#7298::Tuple{}
  ##a1#7299::Float64
  ##a2#7300::Float64
  ######a#7097#7101#7301::Tuple{}
  ######b#7098#7102#7302::Tuple{}
  ######afactor#7099#7103#7303::Float64
  ######bfactor#7100#7104#7304::Float64
  ####_var0#7105#7305::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 64:
      ##a#7283 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7284 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7283::Float64))
      ##deriv#7285 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7284::Float64,##a#7283::Float64))))
      ####G#7080#7286 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7290 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7290 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7284::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7291 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7291::Float64,0)::Float64
      ##exp_a#7292 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7291::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7293 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7292::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7278#7294 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7282#7298 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7282#7298 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7292::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7299 = GenSym(7)
      ##a2#7300 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7305 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7105#7305 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7299::Float64,##a2#7300::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7306::Tuple{}
  ##xs#7307::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7306::Tuple{}
  ##xs#7307::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7348::Float64
  ##div_a#7349::Float64
  ##deriv#7350::Float64
  ####G#7080#7351::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7352::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7353::Tuple{}
  ##########x#7072#7074#7078#7083#7354::Float64
  ########_var0#7075#7079#7084#7355::Tuple{}
  ######tup#7085#7087#7356::Tuple{}
  ####_var0#7088#7357::Tuple{}
  ######types#7086#7089#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ####G#7092#7360::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7361::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7362::Tuple{}
  ##########x#7072#7074#7078#7095#7363::Float64
  ########_var0#7075#7079#7096#7364::Tuple{}
  ########tup#7071#7145#7149#7365::Tuple{}
  ########x#7072#7146#7150#7366::Float64
  ######_var0#7147#7151#7367::Tuple{}
  ########types#7086#7148#7152#7368::Tuple{Type{Float64}}
  ######tup#7085#7087#7369::Tuple{}
  ####_var0#7088#7370::Tuple{}
  ######types#7086#7089#7371::Tuple{Type{Float64}}
  ##a#7372::Float64
  ####G#7092#7373::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7374::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7375::Tuple{}
  ##########x#7072#7074#7078#7095#7376::Float64
  ########_var0#7075#7079#7096#7377::Tuple{}
  ########tup#7071#7145#7149#7378::Tuple{}
  ########x#7072#7146#7150#7379::Float64
  ######_var0#7147#7151#7380::Tuple{}
  ########types#7086#7148#7152#7381::Tuple{Type{Float64}}
  ######tup#7085#7087#7382::Tuple{}
  ####_var0#7088#7383::Tuple{}
  ######types#7086#7089#7384::Tuple{Type{Float64}}
  ##a#7385::Float64
  ####G#7092#7386::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7387::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7388::Tuple{}
  ##########x#7072#7074#7078#7095#7389::Float64
  ########_var0#7075#7079#7096#7390::Tuple{}
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7140#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7396::Tuple{}
  ##########x#7072#7074#7078#7143#7397::Float64
  ########_var0#7075#7079#7144#7398::Tuple{}
  ######a#7153#7155#7399::Tuple{}
  ######b#7154#7156#7400::Tuple{}
  ####_var0#7157#7401::Tuple{}
  ##a#7402::Float64
  ##exp_a#7403::Float64
  ##deriv#7404::Float64
  ####G#7217#7405::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7218#7406::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7219#7407::Tuple{}
  ##########x#7072#7074#7078#7220#7408::Float64
  ########_var0#7075#7079#7221#7409::Tuple{}
  ##a#7410::Float64
  ##exp_a#7411::Float64
  ##deriv#7412::Float64
  ####G#7140#7413::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7414::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7415::Tuple{}
  ##########x#7072#7074#7078#7143#7416::Float64
  ########_var0#7075#7079#7144#7417::Tuple{}
  ########tup#7319#7322#7326#7418::Tuple{}
  ########x#7320#7323#7327#7419::Int64
  ######_var0#7324#7328#7420::Tuple{}
  ########types#7321#7325#7329#7421::Tuple{Type{Int64}}
  ##xs#7422::Tuple{}
  ##########tup#7071#7145#7149#7308#7423::Tuple{}
  ##########x#7072#7146#7150#7309#7424::Float64
  ########_var0#7147#7151#7310#7425::Tuple{}
  ##########types#7086#7148#7152#7311#7426::Tuple{Type{Float64}}
  ####a1#7312#7427::Float64
  ####a2#7313#7428::Float64
  ########a#7097#7101#7314#7429::Tuple{}
  ########b#7098#7102#7315#7430::Tuple{}
  ########afactor#7099#7103#7316#7431::Float64
  ########bfactor#7100#7104#7317#7432::Float64
  ######_var0#7105#7318#7433::Tuple{}
  ######a#7153#7155#7434::Tuple{}
  ######b#7154#7156#7435::Tuple{}
  ####_var0#7157#7436::Tuple{}
  ######a#7330#7332#7437::Tuple{}
  ######b#7331#7333#7438::Tuple{}
  ####_var0#7334#7439::Tuple{}
  ##a1#7440::Float64
  ##a2#7441::Float64
  ##div_a#7442::Float64
  ####afactor#7340#7443::Float64
  ####bfactor#7341#7444::Float64
  ########a#7097#7335#7342#7445::Tuple{}
  ########b#7098#7336#7343#7446::Tuple{}
  ########afactor#7099#7337#7344#7447::Float64
  ########bfactor#7100#7338#7345#7448::Float64
  ######_var0#7339#7346#7449::Tuple{}
  ######types#7222#7347#7450::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7348 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7349 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7348::Float64))
      ##deriv#7350 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7349::Float64,##a#7348::Float64))))
      ####G#7080#7351 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7355 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7349::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7357 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7359 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7359::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      ####G#7092#7360 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7359::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7367 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7370 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7372 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7372::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      ####G#7092#7373 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7377 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7372::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7380 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7383 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7385 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7385::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      ####G#7092#7386 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7390 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7390 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7385::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7425 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7147#7151#7310#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7427 = GenSym(24)
      ####a2#7313#7428 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7433 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7105#7318#7433 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7427::Float64,####a2#7313#7428::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7436 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7157#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7410 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7411 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7412 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7140#7413 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7417 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7411::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7420 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7324#7328#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7439 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7334#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7391 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7398 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7075#7079#7144#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7401 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7157#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7402 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,1.5,0)::Float64
      ##exp_a#7403 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,GenSym(19),0)::Float64
      ##deriv#7404 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,GenSym(19))))::Float64))
      ####G#7217#7405 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7221#7409 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7221#7409 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7403::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7440 = GenSym(28)
      ##a2#7441 = GenSym(29)
      ##div_a#7442 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7440::Float64,##a2#7441::Float64))
      ####afactor#7340#7443 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7441::Float64))
      ####bfactor#7341#7444 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7440::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7441::Float64,##a2#7441::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7449 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7339#7346#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7306::Tuple{}
  ##xs#7307::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7306::Tuple{}
  ##xs#7307::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7348::Float64
  ##div_a#7349::Float64
  ##deriv#7350::Float64
  ####G#7080#7351::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7352::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7353::Tuple{}
  ##########x#7072#7074#7078#7083#7354::Float64
  ########_var0#7075#7079#7084#7355::Tuple{}
  ######tup#7085#7087#7356::Tuple{}
  ####_var0#7088#7357::Tuple{}
  ######types#7086#7089#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ####G#7092#7360::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7361::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7362::Tuple{}
  ##########x#7072#7074#7078#7095#7363::Float64
  ########_var0#7075#7079#7096#7364::Tuple{}
  ########tup#7071#7145#7149#7365::Tuple{}
  ########x#7072#7146#7150#7366::Float64
  ######_var0#7147#7151#7367::Tuple{}
  ########types#7086#7148#7152#7368::Tuple{Type{Float64}}
  ######tup#7085#7087#7369::Tuple{}
  ####_var0#7088#7370::Tuple{}
  ######types#7086#7089#7371::Tuple{Type{Float64}}
  ##a#7372::Float64
  ####G#7092#7373::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7374::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7375::Tuple{}
  ##########x#7072#7074#7078#7095#7376::Float64
  ########_var0#7075#7079#7096#7377::Tuple{}
  ########tup#7071#7145#7149#7378::Tuple{}
  ########x#7072#7146#7150#7379::Float64
  ######_var0#7147#7151#7380::Tuple{}
  ########types#7086#7148#7152#7381::Tuple{Type{Float64}}
  ######tup#7085#7087#7382::Tuple{}
  ####_var0#7088#7383::Tuple{}
  ######types#7086#7089#7384::Tuple{Type{Float64}}
  ##a#7385::Float64
  ####G#7092#7386::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7387::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7388::Tuple{}
  ##########x#7072#7074#7078#7095#7389::Float64
  ########_var0#7075#7079#7096#7390::Tuple{}
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7140#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7396::Tuple{}
  ##########x#7072#7074#7078#7143#7397::Float64
  ########_var0#7075#7079#7144#7398::Tuple{}
  ######a#7153#7155#7399::Tuple{}
  ######b#7154#7156#7400::Tuple{}
  ####_var0#7157#7401::Tuple{}
  ##a#7402::Float64
  ##exp_a#7403::Float64
  ##deriv#7404::Float64
  ####G#7217#7405::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7218#7406::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7219#7407::Tuple{}
  ##########x#7072#7074#7078#7220#7408::Float64
  ########_var0#7075#7079#7221#7409::Tuple{}
  ##a#7410::Float64
  ##exp_a#7411::Float64
  ##deriv#7412::Float64
  ####G#7140#7413::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7414::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7415::Tuple{}
  ##########x#7072#7074#7078#7143#7416::Float64
  ########_var0#7075#7079#7144#7417::Tuple{}
  ########tup#7319#7322#7326#7418::Tuple{}
  ########x#7320#7323#7327#7419::Int64
  ######_var0#7324#7328#7420::Tuple{}
  ########types#7321#7325#7329#7421::Tuple{Type{Int64}}
  ##xs#7422::Tuple{}
  ##########tup#7071#7145#7149#7308#7423::Tuple{}
  ##########x#7072#7146#7150#7309#7424::Float64
  ########_var0#7147#7151#7310#7425::Tuple{}
  ##########types#7086#7148#7152#7311#7426::Tuple{Type{Float64}}
  ####a1#7312#7427::Float64
  ####a2#7313#7428::Float64
  ########a#7097#7101#7314#7429::Tuple{}
  ########b#7098#7102#7315#7430::Tuple{}
  ########afactor#7099#7103#7316#7431::Float64
  ########bfactor#7100#7104#7317#7432::Float64
  ######_var0#7105#7318#7433::Tuple{}
  ######a#7153#7155#7434::Tuple{}
  ######b#7154#7156#7435::Tuple{}
  ####_var0#7157#7436::Tuple{}
  ######a#7330#7332#7437::Tuple{}
  ######b#7331#7333#7438::Tuple{}
  ####_var0#7334#7439::Tuple{}
  ##a1#7440::Float64
  ##a2#7441::Float64
  ##div_a#7442::Float64
  ####afactor#7340#7443::Float64
  ####bfactor#7341#7444::Float64
  ########a#7097#7335#7342#7445::Tuple{}
  ########b#7098#7336#7343#7446::Tuple{}
  ########afactor#7099#7337#7344#7447::Float64
  ########bfactor#7100#7338#7345#7448::Float64
  ######_var0#7339#7346#7449::Tuple{}
  ######types#7222#7347#7450::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7348 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7349 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7348::Float64))
      ##deriv#7350 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7349::Float64,##a#7348::Float64))))
      ####G#7080#7351 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7355 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7349::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7357 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7359 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7359::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      ####G#7092#7360 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7359::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7367 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7370 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7372 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7372::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      ####G#7092#7373 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7377 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7372::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7380 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7383 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7385 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7385::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      ####G#7092#7386 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7390 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7390 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7385::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7425 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7147#7151#7310#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7427 = GenSym(24)
      ####a2#7313#7428 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7433 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7105#7318#7433 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7427::Float64,####a2#7313#7428::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7436 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7157#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7410 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7411 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7412 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7140#7413 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7417 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7411::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7420 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7324#7328#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7439 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7334#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7391 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7398 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7075#7079#7144#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7401 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7157#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7402 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,1.5,0)::Float64
      ##exp_a#7403 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,GenSym(19),0)::Float64
      ##deriv#7404 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,GenSym(19))))::Float64))
      ####G#7217#7405 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7221#7409 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7221#7409 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7403::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7440 = GenSym(28)
      ##a2#7441 = GenSym(29)
      ##div_a#7442 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7440::Float64,##a2#7441::Float64))
      ####afactor#7340#7443 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7441::Float64))
      ####bfactor#7341#7444 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7440::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7441::Float64,##a2#7441::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7449 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7339#7346#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7348::Float64
  ##div_a#7349::Float64
  ##deriv#7350::Float64
  ####G#7080#7351::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7352::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7353::Tuple{}
  ##########x#7072#7074#7078#7083#7354::Float64
  ########_var0#7075#7079#7084#7355::Tuple{}
  ######tup#7085#7087#7356::Tuple{}
  ####_var0#7088#7357::Tuple{}
  ######types#7086#7089#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ####G#7092#7360::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7361::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7362::Tuple{}
  ##########x#7072#7074#7078#7095#7363::Float64
  ########_var0#7075#7079#7096#7364::Tuple{}
  ########tup#7071#7145#7149#7365::Tuple{}
  ########x#7072#7146#7150#7366::Float64
  ######_var0#7147#7151#7367::Tuple{}
  ########types#7086#7148#7152#7368::Tuple{Type{Float64}}
  ######tup#7085#7087#7369::Tuple{}
  ####_var0#7088#7370::Tuple{}
  ######types#7086#7089#7371::Tuple{Type{Float64}}
  ##a#7372::Float64
  ####G#7092#7373::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7374::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7375::Tuple{}
  ##########x#7072#7074#7078#7095#7376::Float64
  ########_var0#7075#7079#7096#7377::Tuple{}
  ########tup#7071#7145#7149#7378::Tuple{}
  ########x#7072#7146#7150#7379::Float64
  ######_var0#7147#7151#7380::Tuple{}
  ########types#7086#7148#7152#7381::Tuple{Type{Float64}}
  ######tup#7085#7087#7382::Tuple{}
  ####_var0#7088#7383::Tuple{}
  ######types#7086#7089#7384::Tuple{Type{Float64}}
  ##a#7385::Float64
  ####G#7092#7386::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7387::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7388::Tuple{}
  ##########x#7072#7074#7078#7095#7389::Float64
  ########_var0#7075#7079#7096#7390::Tuple{}
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7140#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7396::Tuple{}
  ##########x#7072#7074#7078#7143#7397::Float64
  ########_var0#7075#7079#7144#7398::Tuple{}
  ######a#7153#7155#7399::Tuple{}
  ######b#7154#7156#7400::Tuple{}
  ####_var0#7157#7401::Tuple{}
  ##a#7402::Float64
  ##exp_a#7403::Float64
  ##deriv#7404::Float64
  ####G#7217#7405::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7218#7406::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7219#7407::Tuple{}
  ##########x#7072#7074#7078#7220#7408::Float64
  ########_var0#7075#7079#7221#7409::Tuple{}
  ##a#7410::Float64
  ##exp_a#7411::Float64
  ##deriv#7412::Float64
  ####G#7140#7413::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7414::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7415::Tuple{}
  ##########x#7072#7074#7078#7143#7416::Float64
  ########_var0#7075#7079#7144#7417::Tuple{}
  ########tup#7319#7322#7326#7418::Tuple{}
  ########x#7320#7323#7327#7419::Int64
  ######_var0#7324#7328#7420::Tuple{}
  ########types#7321#7325#7329#7421::Tuple{Type{Int64}}
  ##xs#7422::Tuple{}
  ##########tup#7071#7145#7149#7308#7423::Tuple{}
  ##########x#7072#7146#7150#7309#7424::Float64
  ########_var0#7147#7151#7310#7425::Tuple{}
  ##########types#7086#7148#7152#7311#7426::Tuple{Type{Float64}}
  ####a1#7312#7427::Float64
  ####a2#7313#7428::Float64
  ########a#7097#7101#7314#7429::Tuple{}
  ########b#7098#7102#7315#7430::Tuple{}
  ########afactor#7099#7103#7316#7431::Float64
  ########bfactor#7100#7104#7317#7432::Float64
  ######_var0#7105#7318#7433::Tuple{}
  ######a#7153#7155#7434::Tuple{}
  ######b#7154#7156#7435::Tuple{}
  ####_var0#7157#7436::Tuple{}
  ######a#7330#7332#7437::Tuple{}
  ######b#7331#7333#7438::Tuple{}
  ####_var0#7334#7439::Tuple{}
  ##a1#7440::Float64
  ##a2#7441::Float64
  ##div_a#7442::Float64
  ####afactor#7340#7443::Float64
  ####bfactor#7341#7444::Float64
  ########a#7097#7335#7342#7445::Tuple{}
  ########b#7098#7336#7343#7446::Tuple{}
  ########afactor#7099#7337#7344#7447::Float64
  ########bfactor#7100#7338#7345#7448::Float64
  ######_var0#7339#7346#7449::Tuple{}
  ######types#7222#7347#7450::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7348 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7349 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7348::Float64))
      ##deriv#7350 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7349::Float64,##a#7348::Float64))))
      ####G#7080#7351 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7355 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7349::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7357 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7359 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7359::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      ####G#7092#7360 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7359::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7367 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7370 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7372 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7372::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      ####G#7092#7373 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7377 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7372::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7380 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7383 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7385 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7385::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      ####G#7092#7386 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7390 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7390 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7385::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7425 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7147#7151#7310#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7427 = GenSym(24)
      ####a2#7313#7428 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7433 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7105#7318#7433 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7427::Float64,####a2#7313#7428::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7436 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7157#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7410 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7411 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7412 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7140#7413 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7417 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7411::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7420 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7324#7328#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7439 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7334#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7391 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7398 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7075#7079#7144#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7401 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7157#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7402 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,1.5,0)::Float64
      ##exp_a#7403 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,GenSym(19),0)::Float64
      ##deriv#7404 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,GenSym(19))))::Float64))
      ####G#7217#7405 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7221#7409 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7221#7409 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7403::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7440 = GenSym(28)
      ##a2#7441 = GenSym(29)
      ##div_a#7442 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7440::Float64,##a2#7441::Float64))
      ####afactor#7340#7443 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7441::Float64))
      ####bfactor#7341#7444 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7440::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7441::Float64,##a2#7441::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7449 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7339#7346#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7348::Float64
  ##div_a#7349::Float64
  ##deriv#7350::Float64
  ####G#7080#7351::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7352::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7353::Tuple{}
  ##########x#7072#7074#7078#7083#7354::Float64
  ########_var0#7075#7079#7084#7355::Tuple{}
  ######tup#7085#7087#7356::Tuple{}
  ####_var0#7088#7357::Tuple{}
  ######types#7086#7089#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ####G#7092#7360::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7361::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7362::Tuple{}
  ##########x#7072#7074#7078#7095#7363::Float64
  ########_var0#7075#7079#7096#7364::Tuple{}
  ########tup#7071#7145#7149#7365::Tuple{}
  ########x#7072#7146#7150#7366::Float64
  ######_var0#7147#7151#7367::Tuple{}
  ########types#7086#7148#7152#7368::Tuple{Type{Float64}}
  ######tup#7085#7087#7369::Tuple{}
  ####_var0#7088#7370::Tuple{}
  ######types#7086#7089#7371::Tuple{Type{Float64}}
  ##a#7372::Float64
  ####G#7092#7373::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7374::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7375::Tuple{}
  ##########x#7072#7074#7078#7095#7376::Float64
  ########_var0#7075#7079#7096#7377::Tuple{}
  ########tup#7071#7145#7149#7378::Tuple{}
  ########x#7072#7146#7150#7379::Float64
  ######_var0#7147#7151#7380::Tuple{}
  ########types#7086#7148#7152#7381::Tuple{Type{Float64}}
  ######tup#7085#7087#7382::Tuple{}
  ####_var0#7088#7383::Tuple{}
  ######types#7086#7089#7384::Tuple{Type{Float64}}
  ##a#7385::Float64
  ####G#7092#7386::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7387::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7388::Tuple{}
  ##########x#7072#7074#7078#7095#7389::Float64
  ########_var0#7075#7079#7096#7390::Tuple{}
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7140#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7396::Tuple{}
  ##########x#7072#7074#7078#7143#7397::Float64
  ########_var0#7075#7079#7144#7398::Tuple{}
  ######a#7153#7155#7399::Tuple{}
  ######b#7154#7156#7400::Tuple{}
  ####_var0#7157#7401::Tuple{}
  ##a#7402::Float64
  ##exp_a#7403::Float64
  ##deriv#7404::Float64
  ####G#7217#7405::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7218#7406::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7219#7407::Tuple{}
  ##########x#7072#7074#7078#7220#7408::Float64
  ########_var0#7075#7079#7221#7409::Tuple{}
  ##a#7410::Float64
  ##exp_a#7411::Float64
  ##deriv#7412::Float64
  ####G#7140#7413::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7414::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7415::Tuple{}
  ##########x#7072#7074#7078#7143#7416::Float64
  ########_var0#7075#7079#7144#7417::Tuple{}
  ########tup#7319#7322#7326#7418::Tuple{}
  ########x#7320#7323#7327#7419::Int64
  ######_var0#7324#7328#7420::Tuple{}
  ########types#7321#7325#7329#7421::Tuple{Type{Int64}}
  ##xs#7422::Tuple{}
  ##########tup#7071#7145#7149#7308#7423::Tuple{}
  ##########x#7072#7146#7150#7309#7424::Float64
  ########_var0#7147#7151#7310#7425::Tuple{}
  ##########types#7086#7148#7152#7311#7426::Tuple{Type{Float64}}
  ####a1#7312#7427::Float64
  ####a2#7313#7428::Float64
  ########a#7097#7101#7314#7429::Tuple{}
  ########b#7098#7102#7315#7430::Tuple{}
  ########afactor#7099#7103#7316#7431::Float64
  ########bfactor#7100#7104#7317#7432::Float64
  ######_var0#7105#7318#7433::Tuple{}
  ######a#7153#7155#7434::Tuple{}
  ######b#7154#7156#7435::Tuple{}
  ####_var0#7157#7436::Tuple{}
  ######a#7330#7332#7437::Tuple{}
  ######b#7331#7333#7438::Tuple{}
  ####_var0#7334#7439::Tuple{}
  ##a1#7440::Float64
  ##a2#7441::Float64
  ##div_a#7442::Float64
  ####afactor#7340#7443::Float64
  ####bfactor#7341#7444::Float64
  ########a#7097#7335#7342#7445::Tuple{}
  ########b#7098#7336#7343#7446::Tuple{}
  ########afactor#7099#7337#7344#7447::Float64
  ########bfactor#7100#7338#7345#7448::Float64
  ######_var0#7339#7346#7449::Tuple{}
  ######types#7222#7347#7450::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7348 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7349 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7348::Float64))
      ##deriv#7350 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7349::Float64,##a#7348::Float64))))
      ####G#7080#7351 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7355 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7349::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7357 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7359 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7359::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      ####G#7092#7360 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7359::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7367 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7370 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7372 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7372::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      ####G#7092#7373 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7377 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7372::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7380 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7383 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7385 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7385::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      ####G#7092#7386 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7390 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7390 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7385::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7425 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7147#7151#7310#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7427 = GenSym(24)
      ####a2#7313#7428 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7433 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7105#7318#7433 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7427::Float64,####a2#7313#7428::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7436 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7157#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7410 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7411 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7412 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7140#7413 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7417 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7411::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7420 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7324#7328#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7439 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7334#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7391 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7398 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7075#7079#7144#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7401 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7157#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7402 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,1.5,0)::Float64
      ##exp_a#7403 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,GenSym(19),0)::Float64
      ##deriv#7404 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,GenSym(19))))::Float64))
      ####G#7217#7405 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7221#7409 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7221#7409 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7403::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7440 = GenSym(28)
      ##a2#7441 = GenSym(29)
      ##div_a#7442 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7440::Float64,##a2#7441::Float64))
      ####afactor#7340#7443 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7441::Float64))
      ####bfactor#7341#7444 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7440::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7441::Float64,##a2#7441::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7449 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7339#7346#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7348::Float64
  ##div_a#7349::Float64
  ##deriv#7350::Float64
  ####G#7080#7351::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7352::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7353::Tuple{}
  ##########x#7072#7074#7078#7083#7354::Float64
  ########_var0#7075#7079#7084#7355::Tuple{}
  ######tup#7085#7087#7356::Tuple{}
  ####_var0#7088#7357::Tuple{}
  ######types#7086#7089#7358::Tuple{Type{Float64}}
  ##a#7359::Float64
  ####G#7092#7360::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7361::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7362::Tuple{}
  ##########x#7072#7074#7078#7095#7363::Float64
  ########_var0#7075#7079#7096#7364::Tuple{}
  ########tup#7071#7145#7149#7365::Tuple{}
  ########x#7072#7146#7150#7366::Float64
  ######_var0#7147#7151#7367::Tuple{}
  ########types#7086#7148#7152#7368::Tuple{Type{Float64}}
  ######tup#7085#7087#7369::Tuple{}
  ####_var0#7088#7370::Tuple{}
  ######types#7086#7089#7371::Tuple{Type{Float64}}
  ##a#7372::Float64
  ####G#7092#7373::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7374::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7375::Tuple{}
  ##########x#7072#7074#7078#7095#7376::Float64
  ########_var0#7075#7079#7096#7377::Tuple{}
  ########tup#7071#7145#7149#7378::Tuple{}
  ########x#7072#7146#7150#7379::Float64
  ######_var0#7147#7151#7380::Tuple{}
  ########types#7086#7148#7152#7381::Tuple{Type{Float64}}
  ######tup#7085#7087#7382::Tuple{}
  ####_var0#7088#7383::Tuple{}
  ######types#7086#7089#7384::Tuple{Type{Float64}}
  ##a#7385::Float64
  ####G#7092#7386::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7387::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7388::Tuple{}
  ##########x#7072#7074#7078#7095#7389::Float64
  ########_var0#7075#7079#7096#7390::Tuple{}
  ##a#7391::Float64
  ##exp_a#7392::Float64
  ##deriv#7393::Float64
  ####G#7140#7394::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7395::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7396::Tuple{}
  ##########x#7072#7074#7078#7143#7397::Float64
  ########_var0#7075#7079#7144#7398::Tuple{}
  ######a#7153#7155#7399::Tuple{}
  ######b#7154#7156#7400::Tuple{}
  ####_var0#7157#7401::Tuple{}
  ##a#7402::Float64
  ##exp_a#7403::Float64
  ##deriv#7404::Float64
  ####G#7217#7405::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7218#7406::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7219#7407::Tuple{}
  ##########x#7072#7074#7078#7220#7408::Float64
  ########_var0#7075#7079#7221#7409::Tuple{}
  ##a#7410::Float64
  ##exp_a#7411::Float64
  ##deriv#7412::Float64
  ####G#7140#7413::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7414::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7415::Tuple{}
  ##########x#7072#7074#7078#7143#7416::Float64
  ########_var0#7075#7079#7144#7417::Tuple{}
  ########tup#7319#7322#7326#7418::Tuple{}
  ########x#7320#7323#7327#7419::Int64
  ######_var0#7324#7328#7420::Tuple{}
  ########types#7321#7325#7329#7421::Tuple{Type{Int64}}
  ##xs#7422::Tuple{}
  ##########tup#7071#7145#7149#7308#7423::Tuple{}
  ##########x#7072#7146#7150#7309#7424::Float64
  ########_var0#7147#7151#7310#7425::Tuple{}
  ##########types#7086#7148#7152#7311#7426::Tuple{Type{Float64}}
  ####a1#7312#7427::Float64
  ####a2#7313#7428::Float64
  ########a#7097#7101#7314#7429::Tuple{}
  ########b#7098#7102#7315#7430::Tuple{}
  ########afactor#7099#7103#7316#7431::Float64
  ########bfactor#7100#7104#7317#7432::Float64
  ######_var0#7105#7318#7433::Tuple{}
  ######a#7153#7155#7434::Tuple{}
  ######b#7154#7156#7435::Tuple{}
  ####_var0#7157#7436::Tuple{}
  ######a#7330#7332#7437::Tuple{}
  ######b#7331#7333#7438::Tuple{}
  ####_var0#7334#7439::Tuple{}
  ##a1#7440::Float64
  ##a2#7441::Float64
  ##div_a#7442::Float64
  ####afactor#7340#7443::Float64
  ####bfactor#7341#7444::Float64
  ########a#7097#7335#7342#7445::Tuple{}
  ########b#7098#7336#7343#7446::Tuple{}
  ########afactor#7099#7337#7344#7447::Float64
  ########bfactor#7100#7338#7345#7448::Float64
  ######_var0#7339#7346#7449::Tuple{}
  ######types#7222#7347#7450::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      ##a#7348 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7349 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7348::Float64))
      ##deriv#7350 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7349::Float64,##a#7348::Float64))))
      ####G#7080#7351 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7355 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7355 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7349::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7357 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7357 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7359 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7359::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7359::Float64,0)::Float64
      ####G#7092#7360 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7364 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7364 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7359::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 81:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7367 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7367 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7370 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7372 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7372::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7372::Float64,0)::Float64
      ####G#7092#7373 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7377 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7377 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7372::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7380 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7380 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7383 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7385 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7385::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7385::Float64,0)::Float64
      ####G#7092#7386 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7390 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7390 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7385::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 83:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7425 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7147#7151#7310#7425 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7427 = GenSym(24)
      ####a2#7313#7428 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7433 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7105#7318#7433 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7427::Float64,####a2#7313#7428::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7436 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7157#7436 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7410 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7411 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7412 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7410::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7140#7413 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7417 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7417 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7411::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7420 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7324#7328#7420 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7439 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7334#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7391 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7392 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7393 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7391::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7394 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7398 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7075#7079#7144#7398 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7392::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7401 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7157#7401 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7402 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,1.5,0)::Float64
      ##exp_a#7403 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7402::Float64,0,GenSym(19),0)::Float64
      ##deriv#7404 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7402::Float64,GenSym(19))))::Float64))
      ####G#7217#7405 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7221#7409 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7221#7409 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7403::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7440 = GenSym(28)
      ##a2#7441 = GenSym(29)
      ##div_a#7442 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7440::Float64,##a2#7441::Float64))
      ####afactor#7340#7443 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7441::Float64))
      ####bfactor#7341#7444 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7440::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7441::Float64,##a2#7441::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7449 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7339#7346#7449 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7442::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 85:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7451::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7451::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7453::Float64
  ##div_a#7454::Float64
  ##deriv#7455::Float64
  ####G#7080#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7458::Tuple{}
  ##########x#7072#7074#7078#7083#7459::Float64
  ########_var0#7075#7079#7084#7460::Tuple{}
  ######tup#7085#7087#7461::Tuple{}
  ####_var0#7088#7462::Tuple{}
  ######types#7086#7089#7463::Tuple{Type{Float64}}
  ##a#7464::Float64
  ####G#7092#7465::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7466::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7467::Tuple{}
  ##########x#7072#7074#7078#7095#7468::Float64
  ########_var0#7075#7079#7096#7469::Tuple{}
  ########tup#7071#7145#7149#7470::Tuple{}
  ########x#7072#7146#7150#7471::Float64
  ######_var0#7147#7151#7472::Tuple{}
  ########types#7086#7148#7152#7473::Tuple{Type{Float64}}
  ######tup#7085#7087#7474::Tuple{}
  ####_var0#7088#7475::Tuple{}
  ######types#7086#7089#7476::Tuple{Type{Float64}}
  ##a#7477::Float64
  ####G#7092#7478::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7479::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7480::Tuple{}
  ##########x#7072#7074#7078#7095#7481::Float64
  ########_var0#7075#7079#7096#7482::Tuple{}
  ########tup#7071#7145#7149#7483::Tuple{}
  ########x#7072#7146#7150#7484::Float64
  ######_var0#7147#7151#7485::Tuple{}
  ########types#7086#7148#7152#7486::Tuple{Type{Float64}}
  ######tup#7085#7087#7487::Tuple{}
  ####_var0#7088#7488::Tuple{}
  ######types#7086#7089#7489::Tuple{Type{Float64}}
  ##a#7490::Float64
  ####G#7092#7491::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7492::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7493::Tuple{}
  ##########x#7072#7074#7078#7095#7494::Float64
  ########_var0#7075#7079#7096#7495::Tuple{}
  ########tup#7071#7145#7149#7496::Tuple{}
  ########x#7072#7146#7150#7497::Float64
  ######_var0#7147#7151#7498::Tuple{}
  ########types#7086#7148#7152#7499::Tuple{Type{Float64}}
  ######tup#7085#7087#7500::Tuple{}
  ####_var0#7088#7501::Tuple{}
  ######types#7086#7089#7502::Tuple{Type{Float64}}
  ##a#7503::Float64
  ####G#7092#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7506::Tuple{}
  ##########x#7072#7074#7078#7095#7507::Float64
  ########_var0#7075#7079#7096#7508::Tuple{}
  ##a#7509::Float64
  ##exp_a#7510::Float64
  ##deriv#7511::Float64
  ####G#7140#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7514::Tuple{}
  ##########x#7072#7074#7078#7143#7515::Float64
  ########_var0#7075#7079#7144#7516::Tuple{}
  ######a#7153#7155#7517::Tuple{}
  ######b#7154#7156#7518::Tuple{}
  ####_var0#7157#7519::Tuple{}
  ##a#7520::Float64
  ##exp_a#7521::Float64
  ##deriv#7522::Float64
  ####G#7140#7523::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7524::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7525::Tuple{}
  ##########x#7072#7074#7078#7143#7526::Float64
  ########_var0#7075#7079#7144#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7140#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7533::Tuple{}
  ##########x#7072#7074#7078#7143#7534::Float64
  ########_var0#7075#7079#7144#7535::Tuple{}
  ########tup#7319#7322#7326#7536::Tuple{}
  ########x#7320#7323#7327#7537::Int64
  ######_var0#7324#7328#7538::Tuple{}
  ########types#7321#7325#7329#7539::Tuple{Type{Int64}}
  ##xs#7540::Tuple{}
  ##########tup#7071#7145#7149#7308#7541::Tuple{}
  ##########x#7072#7146#7150#7309#7542::Float64
  ########_var0#7147#7151#7310#7543::Tuple{}
  ##########types#7086#7148#7152#7311#7544::Tuple{Type{Float64}}
  ####a1#7312#7545::Float64
  ####a2#7313#7546::Float64
  ########a#7097#7101#7314#7547::Tuple{}
  ########b#7098#7102#7315#7548::Tuple{}
  ########afactor#7099#7103#7316#7549::Float64
  ########bfactor#7100#7104#7317#7550::Float64
  ######_var0#7105#7318#7551::Tuple{}
  ######a#7153#7155#7552::Tuple{}
  ######b#7154#7156#7553::Tuple{}
  ####_var0#7157#7554::Tuple{}
  ######a#7330#7332#7555::Tuple{}
  ######b#7331#7333#7556::Tuple{}
  ####_var0#7334#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7340#7561::Float64
  ####bfactor#7341#7562::Float64
  ########a#7097#7335#7342#7563::Tuple{}
  ########b#7098#7336#7343#7564::Tuple{}
  ########afactor#7099#7337#7344#7565::Float64
  ########bfactor#7100#7338#7345#7566::Float64
  ######_var0#7339#7346#7567::Tuple{}
  ######types#7222#7347#7568::Tuple{Type{Float64}}
  ######types#7086#7452#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7453 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7454 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7453::Float64))
      ##deriv#7455 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7454::Float64,##a#7453::Float64))))
      ####G#7080#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7460 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7454::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7462 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7464 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7464::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      ####G#7092#7465 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7469 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7464::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7472 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7475 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7477 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7477::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      ####G#7092#7478 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7482 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7482 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7477::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7485 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7488 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7488 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7490 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7490::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      ####G#7092#7491 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7495 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7490::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7498 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7147#7151#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7501 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7088#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7503 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7503::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      ####G#7092#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7508 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7096#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7503::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7543 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7147#7151#7310#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7545 = GenSym(22)
      ####a2#7313#7546 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7551 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7105#7318#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7545::Float64,####a2#7313#7546::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7554 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7157#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7528 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7535 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7075#7079#7144#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7538 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7324#7328#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7557 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7334#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7509 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7510 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7511 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7516 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7519 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7157#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7520 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7521 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7522 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7523 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7527 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7075#7079#7144#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7521::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7558 = GenSym(26)
      ##a2#7559 = GenSym(27)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7340#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7341#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7567 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7339#7346#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7451::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7451::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7453::Float64
  ##div_a#7454::Float64
  ##deriv#7455::Float64
  ####G#7080#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7458::Tuple{}
  ##########x#7072#7074#7078#7083#7459::Float64
  ########_var0#7075#7079#7084#7460::Tuple{}
  ######tup#7085#7087#7461::Tuple{}
  ####_var0#7088#7462::Tuple{}
  ######types#7086#7089#7463::Tuple{Type{Float64}}
  ##a#7464::Float64
  ####G#7092#7465::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7466::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7467::Tuple{}
  ##########x#7072#7074#7078#7095#7468::Float64
  ########_var0#7075#7079#7096#7469::Tuple{}
  ########tup#7071#7145#7149#7470::Tuple{}
  ########x#7072#7146#7150#7471::Float64
  ######_var0#7147#7151#7472::Tuple{}
  ########types#7086#7148#7152#7473::Tuple{Type{Float64}}
  ######tup#7085#7087#7474::Tuple{}
  ####_var0#7088#7475::Tuple{}
  ######types#7086#7089#7476::Tuple{Type{Float64}}
  ##a#7477::Float64
  ####G#7092#7478::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7479::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7480::Tuple{}
  ##########x#7072#7074#7078#7095#7481::Float64
  ########_var0#7075#7079#7096#7482::Tuple{}
  ########tup#7071#7145#7149#7483::Tuple{}
  ########x#7072#7146#7150#7484::Float64
  ######_var0#7147#7151#7485::Tuple{}
  ########types#7086#7148#7152#7486::Tuple{Type{Float64}}
  ######tup#7085#7087#7487::Tuple{}
  ####_var0#7088#7488::Tuple{}
  ######types#7086#7089#7489::Tuple{Type{Float64}}
  ##a#7490::Float64
  ####G#7092#7491::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7492::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7493::Tuple{}
  ##########x#7072#7074#7078#7095#7494::Float64
  ########_var0#7075#7079#7096#7495::Tuple{}
  ########tup#7071#7145#7149#7496::Tuple{}
  ########x#7072#7146#7150#7497::Float64
  ######_var0#7147#7151#7498::Tuple{}
  ########types#7086#7148#7152#7499::Tuple{Type{Float64}}
  ######tup#7085#7087#7500::Tuple{}
  ####_var0#7088#7501::Tuple{}
  ######types#7086#7089#7502::Tuple{Type{Float64}}
  ##a#7503::Float64
  ####G#7092#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7506::Tuple{}
  ##########x#7072#7074#7078#7095#7507::Float64
  ########_var0#7075#7079#7096#7508::Tuple{}
  ##a#7509::Float64
  ##exp_a#7510::Float64
  ##deriv#7511::Float64
  ####G#7140#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7514::Tuple{}
  ##########x#7072#7074#7078#7143#7515::Float64
  ########_var0#7075#7079#7144#7516::Tuple{}
  ######a#7153#7155#7517::Tuple{}
  ######b#7154#7156#7518::Tuple{}
  ####_var0#7157#7519::Tuple{}
  ##a#7520::Float64
  ##exp_a#7521::Float64
  ##deriv#7522::Float64
  ####G#7140#7523::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7524::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7525::Tuple{}
  ##########x#7072#7074#7078#7143#7526::Float64
  ########_var0#7075#7079#7144#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7140#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7533::Tuple{}
  ##########x#7072#7074#7078#7143#7534::Float64
  ########_var0#7075#7079#7144#7535::Tuple{}
  ########tup#7319#7322#7326#7536::Tuple{}
  ########x#7320#7323#7327#7537::Int64
  ######_var0#7324#7328#7538::Tuple{}
  ########types#7321#7325#7329#7539::Tuple{Type{Int64}}
  ##xs#7540::Tuple{}
  ##########tup#7071#7145#7149#7308#7541::Tuple{}
  ##########x#7072#7146#7150#7309#7542::Float64
  ########_var0#7147#7151#7310#7543::Tuple{}
  ##########types#7086#7148#7152#7311#7544::Tuple{Type{Float64}}
  ####a1#7312#7545::Float64
  ####a2#7313#7546::Float64
  ########a#7097#7101#7314#7547::Tuple{}
  ########b#7098#7102#7315#7548::Tuple{}
  ########afactor#7099#7103#7316#7549::Float64
  ########bfactor#7100#7104#7317#7550::Float64
  ######_var0#7105#7318#7551::Tuple{}
  ######a#7153#7155#7552::Tuple{}
  ######b#7154#7156#7553::Tuple{}
  ####_var0#7157#7554::Tuple{}
  ######a#7330#7332#7555::Tuple{}
  ######b#7331#7333#7556::Tuple{}
  ####_var0#7334#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7340#7561::Float64
  ####bfactor#7341#7562::Float64
  ########a#7097#7335#7342#7563::Tuple{}
  ########b#7098#7336#7343#7564::Tuple{}
  ########afactor#7099#7337#7344#7565::Float64
  ########bfactor#7100#7338#7345#7566::Float64
  ######_var0#7339#7346#7567::Tuple{}
  ######types#7222#7347#7568::Tuple{Type{Float64}}
  ######types#7086#7452#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7453 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7454 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7453::Float64))
      ##deriv#7455 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7454::Float64,##a#7453::Float64))))
      ####G#7080#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7460 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7454::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7462 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7464 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7464::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      ####G#7092#7465 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7469 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7464::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7472 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7475 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7477 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7477::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      ####G#7092#7478 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7482 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7482 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7477::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7485 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7488 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7488 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7490 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7490::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      ####G#7092#7491 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7495 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7490::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7498 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7147#7151#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7501 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7088#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7503 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7503::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      ####G#7092#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7508 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7096#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7503::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7543 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7147#7151#7310#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7545 = GenSym(22)
      ####a2#7313#7546 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7551 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7105#7318#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7545::Float64,####a2#7313#7546::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7554 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7157#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7528 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7535 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7075#7079#7144#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7538 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7324#7328#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7557 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7334#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7509 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7510 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7511 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7516 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7519 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7157#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7520 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7521 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7522 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7523 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7527 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7075#7079#7144#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7521::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7558 = GenSym(26)
      ##a2#7559 = GenSym(27)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7340#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7341#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7567 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7339#7346#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7453::Float64
  ##div_a#7454::Float64
  ##deriv#7455::Float64
  ####G#7080#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7458::Tuple{}
  ##########x#7072#7074#7078#7083#7459::Float64
  ########_var0#7075#7079#7084#7460::Tuple{}
  ######tup#7085#7087#7461::Tuple{}
  ####_var0#7088#7462::Tuple{}
  ######types#7086#7089#7463::Tuple{Type{Float64}}
  ##a#7464::Float64
  ####G#7092#7465::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7466::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7467::Tuple{}
  ##########x#7072#7074#7078#7095#7468::Float64
  ########_var0#7075#7079#7096#7469::Tuple{}
  ########tup#7071#7145#7149#7470::Tuple{}
  ########x#7072#7146#7150#7471::Float64
  ######_var0#7147#7151#7472::Tuple{}
  ########types#7086#7148#7152#7473::Tuple{Type{Float64}}
  ######tup#7085#7087#7474::Tuple{}
  ####_var0#7088#7475::Tuple{}
  ######types#7086#7089#7476::Tuple{Type{Float64}}
  ##a#7477::Float64
  ####G#7092#7478::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7479::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7480::Tuple{}
  ##########x#7072#7074#7078#7095#7481::Float64
  ########_var0#7075#7079#7096#7482::Tuple{}
  ########tup#7071#7145#7149#7483::Tuple{}
  ########x#7072#7146#7150#7484::Float64
  ######_var0#7147#7151#7485::Tuple{}
  ########types#7086#7148#7152#7486::Tuple{Type{Float64}}
  ######tup#7085#7087#7487::Tuple{}
  ####_var0#7088#7488::Tuple{}
  ######types#7086#7089#7489::Tuple{Type{Float64}}
  ##a#7490::Float64
  ####G#7092#7491::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7492::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7493::Tuple{}
  ##########x#7072#7074#7078#7095#7494::Float64
  ########_var0#7075#7079#7096#7495::Tuple{}
  ########tup#7071#7145#7149#7496::Tuple{}
  ########x#7072#7146#7150#7497::Float64
  ######_var0#7147#7151#7498::Tuple{}
  ########types#7086#7148#7152#7499::Tuple{Type{Float64}}
  ######tup#7085#7087#7500::Tuple{}
  ####_var0#7088#7501::Tuple{}
  ######types#7086#7089#7502::Tuple{Type{Float64}}
  ##a#7503::Float64
  ####G#7092#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7506::Tuple{}
  ##########x#7072#7074#7078#7095#7507::Float64
  ########_var0#7075#7079#7096#7508::Tuple{}
  ##a#7509::Float64
  ##exp_a#7510::Float64
  ##deriv#7511::Float64
  ####G#7140#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7514::Tuple{}
  ##########x#7072#7074#7078#7143#7515::Float64
  ########_var0#7075#7079#7144#7516::Tuple{}
  ######a#7153#7155#7517::Tuple{}
  ######b#7154#7156#7518::Tuple{}
  ####_var0#7157#7519::Tuple{}
  ##a#7520::Float64
  ##exp_a#7521::Float64
  ##deriv#7522::Float64
  ####G#7140#7523::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7524::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7525::Tuple{}
  ##########x#7072#7074#7078#7143#7526::Float64
  ########_var0#7075#7079#7144#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7140#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7533::Tuple{}
  ##########x#7072#7074#7078#7143#7534::Float64
  ########_var0#7075#7079#7144#7535::Tuple{}
  ########tup#7319#7322#7326#7536::Tuple{}
  ########x#7320#7323#7327#7537::Int64
  ######_var0#7324#7328#7538::Tuple{}
  ########types#7321#7325#7329#7539::Tuple{Type{Int64}}
  ##xs#7540::Tuple{}
  ##########tup#7071#7145#7149#7308#7541::Tuple{}
  ##########x#7072#7146#7150#7309#7542::Float64
  ########_var0#7147#7151#7310#7543::Tuple{}
  ##########types#7086#7148#7152#7311#7544::Tuple{Type{Float64}}
  ####a1#7312#7545::Float64
  ####a2#7313#7546::Float64
  ########a#7097#7101#7314#7547::Tuple{}
  ########b#7098#7102#7315#7548::Tuple{}
  ########afactor#7099#7103#7316#7549::Float64
  ########bfactor#7100#7104#7317#7550::Float64
  ######_var0#7105#7318#7551::Tuple{}
  ######a#7153#7155#7552::Tuple{}
  ######b#7154#7156#7553::Tuple{}
  ####_var0#7157#7554::Tuple{}
  ######a#7330#7332#7555::Tuple{}
  ######b#7331#7333#7556::Tuple{}
  ####_var0#7334#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7340#7561::Float64
  ####bfactor#7341#7562::Float64
  ########a#7097#7335#7342#7563::Tuple{}
  ########b#7098#7336#7343#7564::Tuple{}
  ########afactor#7099#7337#7344#7565::Float64
  ########bfactor#7100#7338#7345#7566::Float64
  ######_var0#7339#7346#7567::Tuple{}
  ######types#7222#7347#7568::Tuple{Type{Float64}}
  ######types#7086#7452#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7453 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7454 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7453::Float64))
      ##deriv#7455 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7454::Float64,##a#7453::Float64))))
      ####G#7080#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7460 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7454::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7462 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7464 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7464::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      ####G#7092#7465 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7469 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7464::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7472 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7475 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7477 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7477::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      ####G#7092#7478 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7482 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7482 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7477::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7485 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7488 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7488 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7490 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7490::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      ####G#7092#7491 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7495 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7490::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7498 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7147#7151#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7501 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7088#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7503 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7503::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      ####G#7092#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7508 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7096#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7503::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7543 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7147#7151#7310#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7545 = GenSym(22)
      ####a2#7313#7546 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7551 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7105#7318#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7545::Float64,####a2#7313#7546::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7554 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7157#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7528 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7535 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7075#7079#7144#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7538 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7324#7328#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7557 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7334#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7509 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7510 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7511 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7516 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7519 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7157#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7520 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7521 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7522 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7523 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7527 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7075#7079#7144#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7521::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7558 = GenSym(26)
      ##a2#7559 = GenSym(27)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7340#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7341#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7567 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7339#7346#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7453::Float64
  ##div_a#7454::Float64
  ##deriv#7455::Float64
  ####G#7080#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7458::Tuple{}
  ##########x#7072#7074#7078#7083#7459::Float64
  ########_var0#7075#7079#7084#7460::Tuple{}
  ######tup#7085#7087#7461::Tuple{}
  ####_var0#7088#7462::Tuple{}
  ######types#7086#7089#7463::Tuple{Type{Float64}}
  ##a#7464::Float64
  ####G#7092#7465::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7466::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7467::Tuple{}
  ##########x#7072#7074#7078#7095#7468::Float64
  ########_var0#7075#7079#7096#7469::Tuple{}
  ########tup#7071#7145#7149#7470::Tuple{}
  ########x#7072#7146#7150#7471::Float64
  ######_var0#7147#7151#7472::Tuple{}
  ########types#7086#7148#7152#7473::Tuple{Type{Float64}}
  ######tup#7085#7087#7474::Tuple{}
  ####_var0#7088#7475::Tuple{}
  ######types#7086#7089#7476::Tuple{Type{Float64}}
  ##a#7477::Float64
  ####G#7092#7478::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7479::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7480::Tuple{}
  ##########x#7072#7074#7078#7095#7481::Float64
  ########_var0#7075#7079#7096#7482::Tuple{}
  ########tup#7071#7145#7149#7483::Tuple{}
  ########x#7072#7146#7150#7484::Float64
  ######_var0#7147#7151#7485::Tuple{}
  ########types#7086#7148#7152#7486::Tuple{Type{Float64}}
  ######tup#7085#7087#7487::Tuple{}
  ####_var0#7088#7488::Tuple{}
  ######types#7086#7089#7489::Tuple{Type{Float64}}
  ##a#7490::Float64
  ####G#7092#7491::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7492::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7493::Tuple{}
  ##########x#7072#7074#7078#7095#7494::Float64
  ########_var0#7075#7079#7096#7495::Tuple{}
  ########tup#7071#7145#7149#7496::Tuple{}
  ########x#7072#7146#7150#7497::Float64
  ######_var0#7147#7151#7498::Tuple{}
  ########types#7086#7148#7152#7499::Tuple{Type{Float64}}
  ######tup#7085#7087#7500::Tuple{}
  ####_var0#7088#7501::Tuple{}
  ######types#7086#7089#7502::Tuple{Type{Float64}}
  ##a#7503::Float64
  ####G#7092#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7506::Tuple{}
  ##########x#7072#7074#7078#7095#7507::Float64
  ########_var0#7075#7079#7096#7508::Tuple{}
  ##a#7509::Float64
  ##exp_a#7510::Float64
  ##deriv#7511::Float64
  ####G#7140#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7514::Tuple{}
  ##########x#7072#7074#7078#7143#7515::Float64
  ########_var0#7075#7079#7144#7516::Tuple{}
  ######a#7153#7155#7517::Tuple{}
  ######b#7154#7156#7518::Tuple{}
  ####_var0#7157#7519::Tuple{}
  ##a#7520::Float64
  ##exp_a#7521::Float64
  ##deriv#7522::Float64
  ####G#7140#7523::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7524::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7525::Tuple{}
  ##########x#7072#7074#7078#7143#7526::Float64
  ########_var0#7075#7079#7144#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7140#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7533::Tuple{}
  ##########x#7072#7074#7078#7143#7534::Float64
  ########_var0#7075#7079#7144#7535::Tuple{}
  ########tup#7319#7322#7326#7536::Tuple{}
  ########x#7320#7323#7327#7537::Int64
  ######_var0#7324#7328#7538::Tuple{}
  ########types#7321#7325#7329#7539::Tuple{Type{Int64}}
  ##xs#7540::Tuple{}
  ##########tup#7071#7145#7149#7308#7541::Tuple{}
  ##########x#7072#7146#7150#7309#7542::Float64
  ########_var0#7147#7151#7310#7543::Tuple{}
  ##########types#7086#7148#7152#7311#7544::Tuple{Type{Float64}}
  ####a1#7312#7545::Float64
  ####a2#7313#7546::Float64
  ########a#7097#7101#7314#7547::Tuple{}
  ########b#7098#7102#7315#7548::Tuple{}
  ########afactor#7099#7103#7316#7549::Float64
  ########bfactor#7100#7104#7317#7550::Float64
  ######_var0#7105#7318#7551::Tuple{}
  ######a#7153#7155#7552::Tuple{}
  ######b#7154#7156#7553::Tuple{}
  ####_var0#7157#7554::Tuple{}
  ######a#7330#7332#7555::Tuple{}
  ######b#7331#7333#7556::Tuple{}
  ####_var0#7334#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7340#7561::Float64
  ####bfactor#7341#7562::Float64
  ########a#7097#7335#7342#7563::Tuple{}
  ########b#7098#7336#7343#7564::Tuple{}
  ########afactor#7099#7337#7344#7565::Float64
  ########bfactor#7100#7338#7345#7566::Float64
  ######_var0#7339#7346#7567::Tuple{}
  ######types#7222#7347#7568::Tuple{Type{Float64}}
  ######types#7086#7452#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7453 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7454 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7453::Float64))
      ##deriv#7455 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7454::Float64,##a#7453::Float64))))
      ####G#7080#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7460 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7454::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7462 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7464 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7464::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      ####G#7092#7465 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7469 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7464::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7472 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7475 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7477 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7477::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      ####G#7092#7478 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7482 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7482 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7477::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7485 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7488 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7488 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7490 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7490::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      ####G#7092#7491 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7495 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7490::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7498 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7147#7151#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7501 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7088#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7503 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7503::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      ####G#7092#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7508 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7096#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7503::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7543 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7147#7151#7310#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7545 = GenSym(22)
      ####a2#7313#7546 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7551 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7105#7318#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7545::Float64,####a2#7313#7546::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7554 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7157#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7528 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7535 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7075#7079#7144#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7538 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7324#7328#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7557 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7334#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7509 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7510 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7511 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7516 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7519 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7157#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7520 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7521 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7522 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7523 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7527 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7075#7079#7144#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7521::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7558 = GenSym(26)
      ##a2#7559 = GenSym(27)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7340#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7341#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7567 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7339#7346#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7453::Float64
  ##div_a#7454::Float64
  ##deriv#7455::Float64
  ####G#7080#7456::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7457::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7458::Tuple{}
  ##########x#7072#7074#7078#7083#7459::Float64
  ########_var0#7075#7079#7084#7460::Tuple{}
  ######tup#7085#7087#7461::Tuple{}
  ####_var0#7088#7462::Tuple{}
  ######types#7086#7089#7463::Tuple{Type{Float64}}
  ##a#7464::Float64
  ####G#7092#7465::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7466::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7467::Tuple{}
  ##########x#7072#7074#7078#7095#7468::Float64
  ########_var0#7075#7079#7096#7469::Tuple{}
  ########tup#7071#7145#7149#7470::Tuple{}
  ########x#7072#7146#7150#7471::Float64
  ######_var0#7147#7151#7472::Tuple{}
  ########types#7086#7148#7152#7473::Tuple{Type{Float64}}
  ######tup#7085#7087#7474::Tuple{}
  ####_var0#7088#7475::Tuple{}
  ######types#7086#7089#7476::Tuple{Type{Float64}}
  ##a#7477::Float64
  ####G#7092#7478::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7479::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7480::Tuple{}
  ##########x#7072#7074#7078#7095#7481::Float64
  ########_var0#7075#7079#7096#7482::Tuple{}
  ########tup#7071#7145#7149#7483::Tuple{}
  ########x#7072#7146#7150#7484::Float64
  ######_var0#7147#7151#7485::Tuple{}
  ########types#7086#7148#7152#7486::Tuple{Type{Float64}}
  ######tup#7085#7087#7487::Tuple{}
  ####_var0#7088#7488::Tuple{}
  ######types#7086#7089#7489::Tuple{Type{Float64}}
  ##a#7490::Float64
  ####G#7092#7491::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7492::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7493::Tuple{}
  ##########x#7072#7074#7078#7095#7494::Float64
  ########_var0#7075#7079#7096#7495::Tuple{}
  ########tup#7071#7145#7149#7496::Tuple{}
  ########x#7072#7146#7150#7497::Float64
  ######_var0#7147#7151#7498::Tuple{}
  ########types#7086#7148#7152#7499::Tuple{Type{Float64}}
  ######tup#7085#7087#7500::Tuple{}
  ####_var0#7088#7501::Tuple{}
  ######types#7086#7089#7502::Tuple{Type{Float64}}
  ##a#7503::Float64
  ####G#7092#7504::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7093#7505::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7094#7506::Tuple{}
  ##########x#7072#7074#7078#7095#7507::Float64
  ########_var0#7075#7079#7096#7508::Tuple{}
  ##a#7509::Float64
  ##exp_a#7510::Float64
  ##deriv#7511::Float64
  ####G#7140#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7514::Tuple{}
  ##########x#7072#7074#7078#7143#7515::Float64
  ########_var0#7075#7079#7144#7516::Tuple{}
  ######a#7153#7155#7517::Tuple{}
  ######b#7154#7156#7518::Tuple{}
  ####_var0#7157#7519::Tuple{}
  ##a#7520::Float64
  ##exp_a#7521::Float64
  ##deriv#7522::Float64
  ####G#7140#7523::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7524::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7525::Tuple{}
  ##########x#7072#7074#7078#7143#7526::Float64
  ########_var0#7075#7079#7144#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7140#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7141#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7142#7533::Tuple{}
  ##########x#7072#7074#7078#7143#7534::Float64
  ########_var0#7075#7079#7144#7535::Tuple{}
  ########tup#7319#7322#7326#7536::Tuple{}
  ########x#7320#7323#7327#7537::Int64
  ######_var0#7324#7328#7538::Tuple{}
  ########types#7321#7325#7329#7539::Tuple{Type{Int64}}
  ##xs#7540::Tuple{}
  ##########tup#7071#7145#7149#7308#7541::Tuple{}
  ##########x#7072#7146#7150#7309#7542::Float64
  ########_var0#7147#7151#7310#7543::Tuple{}
  ##########types#7086#7148#7152#7311#7544::Tuple{Type{Float64}}
  ####a1#7312#7545::Float64
  ####a2#7313#7546::Float64
  ########a#7097#7101#7314#7547::Tuple{}
  ########b#7098#7102#7315#7548::Tuple{}
  ########afactor#7099#7103#7316#7549::Float64
  ########bfactor#7100#7104#7317#7550::Float64
  ######_var0#7105#7318#7551::Tuple{}
  ######a#7153#7155#7552::Tuple{}
  ######b#7154#7156#7553::Tuple{}
  ####_var0#7157#7554::Tuple{}
  ######a#7330#7332#7555::Tuple{}
  ######b#7331#7333#7556::Tuple{}
  ####_var0#7334#7557::Tuple{}
  ##a1#7558::Float64
  ##a2#7559::Float64
  ##div_a#7560::Float64
  ####afactor#7340#7561::Float64
  ####bfactor#7341#7562::Float64
  ########a#7097#7335#7342#7563::Tuple{}
  ########b#7098#7336#7343#7564::Tuple{}
  ########afactor#7099#7337#7344#7565::Float64
  ########bfactor#7100#7338#7345#7566::Float64
  ######_var0#7339#7346#7567::Tuple{}
  ######types#7222#7347#7568::Tuple{Type{Float64}}
  ######types#7086#7452#7569::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      ##a#7453 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7454 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7453::Float64))
      ##deriv#7455 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7454::Float64,##a#7453::Float64))))
      ####G#7080#7456 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7460 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7075#7079#7084#7460 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7454::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ####_var0#7088#7462 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7088#7462 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7464 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7464::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7464::Float64,0)::Float64
      ####G#7092#7465 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7469 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7075#7079#7096#7469 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7464::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7472 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7147#7151#7472 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7475 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7088#7475 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7477 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7477::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7477::Float64,0)::Float64
      ####G#7092#7478 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7482 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7075#7079#7096#7482 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7477::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 94:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7485 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7147#7151#7485 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7488 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7088#7488 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7490 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7490::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7490::Float64,0)::Float64
      ####G#7092#7491 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7495 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7075#7079#7096#7495 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7490::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      $(Expr(:boundscheck, false))
      ######_var0#7147#7151#7498 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7147#7151#7498 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7088#7501 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7088#7501 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7503 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7503::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7503::Float64,0)::Float64
      ####G#7092#7504 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7096#7508 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7075#7079#7096#7508 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7503::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 96:
      $(Expr(:boundscheck, false))
      ########_var0#7147#7151#7310#7543 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7147#7151#7310#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7312#7545 = GenSym(22)
      ####a2#7313#7546 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7105#7318#7551 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7105#7318#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7312#7545::Float64,####a2#7313#7546::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7554 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7157#7554 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7528 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7535 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7075#7079#7144#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7324#7328#7538 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7324#7328#7538 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7334#7557 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7334#7557 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7509 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7510 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7511 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7509::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7516 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7075#7079#7144#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7510::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7157#7519 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7157#7519 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7520 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7521 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7522 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7520::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7140#7523 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7144#7527 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7075#7079#7144#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7521::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7558 = GenSym(26)
      ##a2#7559 = GenSym(27)
      ##div_a#7560 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7558::Float64,##a2#7559::Float64))
      ####afactor#7340#7561 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7559::Float64))
      ####bfactor#7341#7562 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7558::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7559::Float64,##a2#7559::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7567 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7339#7346#7567 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7560::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 98:
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(Distributions.Inf), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      1: 
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7570::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7570::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7340#7586::Float64
  ####bfactor#7341#7587::Float64
  ########a#7097#7335#7342#7588::Tuple{}
  ########b#7098#7336#7343#7589::Tuple{}
  ########afactor#7099#7337#7344#7590::Float64
  ########bfactor#7100#7338#7345#7591::Float64
  ######_var0#7339#7346#7592::Tuple{}
  ######types#7222#7347#7593::Tuple{Type{Float64}}
  ##a#7594::Float64
  ####G#7571#7595::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7572#7596::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7573#7597::Tuple{}
  ##########x#7072#7074#7078#7574#7598::Float64
  ########_var0#7075#7079#7575#7599::Tuple{}
  ##a#7600::Float64
  ##div_a#7601::Float64
  ##deriv#7602::Float64
  ####G#7080#7603::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7604::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7605::Tuple{}
  ##########x#7072#7074#7078#7083#7606::Float64
  ########_var0#7075#7079#7084#7607::Tuple{}
  ##xs#7608::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7086#7576#7577#7581#7609::Tuple{Type{Float64}}
  ########types#7086#7576#7582#7610::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7600 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7601 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7600::Float64))
      ##deriv#7602 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7601::Float64,##a#7600::Float64))))
      ####G#7080#7603 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7607 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7075#7079#7084#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7601::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7583 = GenSym(0)
      ##a2#7584 = GenSym(1)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7340#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7341#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7592 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7339#7346#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7594 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7594::Float64,0)::Float64
      ####G#7571#7595 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7575#7599 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7575#7599 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7594::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7570::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7570::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7340#7586::Float64
  ####bfactor#7341#7587::Float64
  ########a#7097#7335#7342#7588::Tuple{}
  ########b#7098#7336#7343#7589::Tuple{}
  ########afactor#7099#7337#7344#7590::Float64
  ########bfactor#7100#7338#7345#7591::Float64
  ######_var0#7339#7346#7592::Tuple{}
  ######types#7222#7347#7593::Tuple{Type{Float64}}
  ##a#7594::Float64
  ####G#7571#7595::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7572#7596::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7573#7597::Tuple{}
  ##########x#7072#7074#7078#7574#7598::Float64
  ########_var0#7075#7079#7575#7599::Tuple{}
  ##a#7600::Float64
  ##div_a#7601::Float64
  ##deriv#7602::Float64
  ####G#7080#7603::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7604::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7605::Tuple{}
  ##########x#7072#7074#7078#7083#7606::Float64
  ########_var0#7075#7079#7084#7607::Tuple{}
  ##xs#7608::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7086#7576#7577#7581#7609::Tuple{Type{Float64}}
  ########types#7086#7576#7582#7610::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7600 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7601 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7600::Float64))
      ##deriv#7602 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7601::Float64,##a#7600::Float64))))
      ####G#7080#7603 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7607 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7075#7079#7084#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7601::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7583 = GenSym(0)
      ##a2#7584 = GenSym(1)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7340#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7341#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7592 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7339#7346#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7594 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7594::Float64,0)::Float64
      ####G#7571#7595 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7575#7599 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7575#7599 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7594::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7340#7586::Float64
  ####bfactor#7341#7587::Float64
  ########a#7097#7335#7342#7588::Tuple{}
  ########b#7098#7336#7343#7589::Tuple{}
  ########afactor#7099#7337#7344#7590::Float64
  ########bfactor#7100#7338#7345#7591::Float64
  ######_var0#7339#7346#7592::Tuple{}
  ######types#7222#7347#7593::Tuple{Type{Float64}}
  ##a#7594::Float64
  ####G#7571#7595::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7572#7596::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7573#7597::Tuple{}
  ##########x#7072#7074#7078#7574#7598::Float64
  ########_var0#7075#7079#7575#7599::Tuple{}
  ##a#7600::Float64
  ##div_a#7601::Float64
  ##deriv#7602::Float64
  ####G#7080#7603::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7604::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7605::Tuple{}
  ##########x#7072#7074#7078#7083#7606::Float64
  ########_var0#7075#7079#7084#7607::Tuple{}
  ##xs#7608::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7086#7576#7577#7581#7609::Tuple{Type{Float64}}
  ########types#7086#7576#7582#7610::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7600 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7601 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7600::Float64))
      ##deriv#7602 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7601::Float64,##a#7600::Float64))))
      ####G#7080#7603 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7607 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7075#7079#7084#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7601::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7583 = GenSym(0)
      ##a2#7584 = GenSym(1)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7340#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7341#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7592 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7339#7346#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7594 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7594::Float64,0)::Float64
      ####G#7571#7595 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7575#7599 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7575#7599 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7594::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7340#7586::Float64
  ####bfactor#7341#7587::Float64
  ########a#7097#7335#7342#7588::Tuple{}
  ########b#7098#7336#7343#7589::Tuple{}
  ########afactor#7099#7337#7344#7590::Float64
  ########bfactor#7100#7338#7345#7591::Float64
  ######_var0#7339#7346#7592::Tuple{}
  ######types#7222#7347#7593::Tuple{Type{Float64}}
  ##a#7594::Float64
  ####G#7571#7595::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7572#7596::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7573#7597::Tuple{}
  ##########x#7072#7074#7078#7574#7598::Float64
  ########_var0#7075#7079#7575#7599::Tuple{}
  ##a#7600::Float64
  ##div_a#7601::Float64
  ##deriv#7602::Float64
  ####G#7080#7603::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7604::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7605::Tuple{}
  ##########x#7072#7074#7078#7083#7606::Float64
  ########_var0#7075#7079#7084#7607::Tuple{}
  ##xs#7608::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7086#7576#7577#7581#7609::Tuple{Type{Float64}}
  ########types#7086#7576#7582#7610::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7600 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7601 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7600::Float64))
      ##deriv#7602 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7601::Float64,##a#7600::Float64))))
      ####G#7080#7603 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7607 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7075#7079#7084#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7601::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7583 = GenSym(0)
      ##a2#7584 = GenSym(1)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7340#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7341#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7592 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7339#7346#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7594 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7594::Float64,0)::Float64
      ####G#7571#7595 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7575#7599 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7575#7599 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7594::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7583::Float64
  ##a2#7584::Float64
  ##div_a#7585::Float64
  ####afactor#7340#7586::Float64
  ####bfactor#7341#7587::Float64
  ########a#7097#7335#7342#7588::Tuple{}
  ########b#7098#7336#7343#7589::Tuple{}
  ########afactor#7099#7337#7344#7590::Float64
  ########bfactor#7100#7338#7345#7591::Float64
  ######_var0#7339#7346#7592::Tuple{}
  ######types#7222#7347#7593::Tuple{Type{Float64}}
  ##a#7594::Float64
  ####G#7571#7595::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7572#7596::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7573#7597::Tuple{}
  ##########x#7072#7074#7078#7574#7598::Float64
  ########_var0#7075#7079#7575#7599::Tuple{}
  ##a#7600::Float64
  ##div_a#7601::Float64
  ##deriv#7602::Float64
  ####G#7080#7603::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7604::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7605::Tuple{}
  ##########x#7072#7074#7078#7083#7606::Float64
  ########_var0#7075#7079#7084#7607::Tuple{}
  ##xs#7608::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7086#7576#7577#7581#7609::Tuple{Type{Float64}}
  ########types#7086#7576#7582#7610::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 103:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 104:
      ##a#7600 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7601 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7600::Float64))
      ##deriv#7602 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7601::Float64,##a#7600::Float64))))
      ####G#7080#7603 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7607 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7075#7079#7084#7607 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7601::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7583 = GenSym(0)
      ##a2#7584 = GenSym(1)
      ##div_a#7585 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7583::Float64,##a2#7584::Float64))
      ####afactor#7340#7586 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7584::Float64))
      ####bfactor#7341#7587 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7583::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7584::Float64,##a2#7584::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7339#7346#7592 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7339#7346#7592 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7585::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7594 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7594::Float64,0)::Float64
      ####G#7571#7595 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7575#7599 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7075#7079#7575#7599 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7594::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7624#7629::UInt64
  ####idx#7625#7630::UInt64
  ####x#7626#7631::Float64
  ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7633::Float64
  ##_var0#7634::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7616#7622#7627#7632 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7616#7622#7627#7632 = false
      3: 
      ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7633 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7614#7615#7617#7623#7628#7633 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7624#7629 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7633::Float64),0x000fffffffffffff))
      ####idx#7625#7630 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7629::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7629::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7629::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7634 = ####x#7626#7631::Float64
      goto 6
      5: 
      ##_var0#7634 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7630::UInt64,####x#7626#7631::Float64)::Float64
      goto 6
      ##_var0#7634 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7634::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7624#7629::UInt64
  ####idx#7625#7630::UInt64
  ####x#7626#7631::Float64
  ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7633::Float64
  ##_var0#7634::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7616#7622#7627#7632 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7616#7622#7627#7632 = false
      3: 
      ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7633 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7614#7615#7617#7623#7628#7633 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7624#7629 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7633::Float64),0x000fffffffffffff))
      ####idx#7625#7630 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7629::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7629::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7629::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7634 = ####x#7626#7631::Float64
      goto 6
      5: 
      ##_var0#7634 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7630::UInt64,####x#7626#7631::Float64)::Float64
      goto 6
      ##_var0#7634 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7634::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7641::Float64
  ##div_a#7642::Float64
  ##deriv#7643::Float64
  ####G#7080#7644::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7645::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7646::Tuple{}
  ##########x#7072#7074#7078#7083#7647::Float64
  ########_var0#7075#7079#7084#7648::Tuple{}
  ####ri#7624#7649::UInt64
  ####idx#7625#7650::UInt64
  ####x#7626#7651::Float64
  ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7653::Float64
  ##_var0#7654::Float64
  ##a#7655::Float64
  ##exp_a#7656::Float64
  ##deriv#7657::Float64
  ####G#7636#7658::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7637#7659::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7638#7660::Tuple{}
  ##########x#7072#7074#7078#7639#7661::Float64
  ########_var0#7075#7079#7640#7662::Tuple{}
  ##a1#7663::Float64
  ##a2#7664::Float64
  ######a#7097#7101#7665::Tuple{}
  ######b#7098#7102#7666::Tuple{}
  ######afactor#7099#7103#7667::Float64
  ######bfactor#7100#7104#7668::Float64
  ####_var0#7105#7669::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7616#7622#7627#7652 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7616#7622#7627#7652 = false
      4: 
      ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7653 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7614#7615#7617#7623#7628#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7624#7649 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7653::Float64),0x000fffffffffffff))
      ####idx#7625#7650 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7649::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7651 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7649::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7649::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7654 = ####x#7626#7651::Float64
      goto 7
      6: 
      ##_var0#7654 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7650::UInt64,####x#7626#7651::Float64)::Float64
      goto 7
      ##_var0#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7654::Float64
      ##a#7641 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7642 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7641::Float64))
      ##deriv#7643 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7642::Float64,##a#7641::Float64))))
      ####G#7080#7644 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7648 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7648 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7642::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7655 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7655::Float64,0)::Float64
      ##exp_a#7656 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7655::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7657 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7656::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7636#7658 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7640#7662 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7075#7079#7640#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7656::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7663 = GenSym(10)
      ##a2#7664 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7669 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7105#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7663::Float64,##a2#7664::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7624#7629::UInt64
  ####idx#7625#7630::UInt64
  ####x#7626#7631::Float64
  ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7633::Float64
  ##_var0#7634::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7616#7622#7627#7632 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7616#7622#7627#7632 = false
      3: 
      ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7633 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7614#7615#7617#7623#7628#7633 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7624#7629 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7633::Float64),0x000fffffffffffff))
      ####idx#7625#7630 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7629::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7629::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7629::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7634 = ####x#7626#7631::Float64
      goto 6
      5: 
      ##_var0#7634 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7630::UInt64,####x#7626#7631::Float64)::Float64
      goto 6
      ##_var0#7634 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7634::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7624#7629::UInt64
  ####idx#7625#7630::UInt64
  ####x#7626#7631::Float64
  ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7633::Float64
  ##_var0#7634::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7616#7622#7627#7632 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7616#7622#7627#7632 = false
      3: 
      ########_var0#7616#7622#7627#7632::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7633 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7614#7615#7617#7623#7628#7633 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7624#7629 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7633::Float64),0x000fffffffffffff))
      ####idx#7625#7630 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7629::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7631 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7629::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7629::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7630::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7634 = ####x#7626#7631::Float64
      goto 6
      5: 
      ##_var0#7634 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7630::UInt64,####x#7626#7631::Float64)::Float64
      goto 6
      ##_var0#7634 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7634::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7641::Float64
  ##div_a#7642::Float64
  ##deriv#7643::Float64
  ####G#7080#7644::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7645::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7646::Tuple{}
  ##########x#7072#7074#7078#7083#7647::Float64
  ########_var0#7075#7079#7084#7648::Tuple{}
  ####ri#7624#7649::UInt64
  ####idx#7625#7650::UInt64
  ####x#7626#7651::Float64
  ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7653::Float64
  ##_var0#7654::Float64
  ##a#7655::Float64
  ##exp_a#7656::Float64
  ##deriv#7657::Float64
  ####G#7636#7658::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7637#7659::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7638#7660::Tuple{}
  ##########x#7072#7074#7078#7639#7661::Float64
  ########_var0#7075#7079#7640#7662::Tuple{}
  ##a1#7663::Float64
  ##a2#7664::Float64
  ######a#7097#7101#7665::Tuple{}
  ######b#7098#7102#7666::Tuple{}
  ######afactor#7099#7103#7667::Float64
  ######bfactor#7100#7104#7668::Float64
  ####_var0#7105#7669::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7616#7622#7627#7652 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7616#7622#7627#7652 = false
      4: 
      ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7653 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7614#7615#7617#7623#7628#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7624#7649 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7653::Float64),0x000fffffffffffff))
      ####idx#7625#7650 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7649::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7651 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7649::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7649::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7654 = ####x#7626#7651::Float64
      goto 7
      6: 
      ##_var0#7654 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7650::UInt64,####x#7626#7651::Float64)::Float64
      goto 7
      ##_var0#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7654::Float64
      ##a#7641 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7642 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7641::Float64))
      ##deriv#7643 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7642::Float64,##a#7641::Float64))))
      ####G#7080#7644 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7648 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7648 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7642::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7655 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7655::Float64,0)::Float64
      ##exp_a#7656 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7655::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7657 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7656::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7636#7658 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7640#7662 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7075#7079#7640#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7656::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7663 = GenSym(10)
      ##a2#7664 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7669 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7105#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7663::Float64,##a2#7664::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7641::Float64
  ##div_a#7642::Float64
  ##deriv#7643::Float64
  ####G#7080#7644::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7645::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7646::Tuple{}
  ##########x#7072#7074#7078#7083#7647::Float64
  ########_var0#7075#7079#7084#7648::Tuple{}
  ####ri#7624#7649::UInt64
  ####idx#7625#7650::UInt64
  ####x#7626#7651::Float64
  ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7653::Float64
  ##_var0#7654::Float64
  ##a#7655::Float64
  ##exp_a#7656::Float64
  ##deriv#7657::Float64
  ####G#7636#7658::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7637#7659::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7638#7660::Tuple{}
  ##########x#7072#7074#7078#7639#7661::Float64
  ########_var0#7075#7079#7640#7662::Tuple{}
  ##a1#7663::Float64
  ##a2#7664::Float64
  ######a#7097#7101#7665::Tuple{}
  ######b#7098#7102#7666::Tuple{}
  ######afactor#7099#7103#7667::Float64
  ######bfactor#7100#7104#7668::Float64
  ####_var0#7105#7669::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7616#7622#7627#7652 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7616#7622#7627#7652 = false
      4: 
      ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7653 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7614#7615#7617#7623#7628#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7624#7649 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7653::Float64),0x000fffffffffffff))
      ####idx#7625#7650 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7649::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7651 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7649::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7649::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7654 = ####x#7626#7651::Float64
      goto 7
      6: 
      ##_var0#7654 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7650::UInt64,####x#7626#7651::Float64)::Float64
      goto 7
      ##_var0#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7654::Float64
      ##a#7641 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7642 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7641::Float64))
      ##deriv#7643 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7642::Float64,##a#7641::Float64))))
      ####G#7080#7644 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7648 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7648 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7642::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7655 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7655::Float64,0)::Float64
      ##exp_a#7656 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7655::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7657 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7656::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7636#7658 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7640#7662 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7075#7079#7640#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7656::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7663 = GenSym(10)
      ##a2#7664 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7669 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7105#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7663::Float64,##a2#7664::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7641::Float64
  ##div_a#7642::Float64
  ##deriv#7643::Float64
  ####G#7080#7644::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7645::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7646::Tuple{}
  ##########x#7072#7074#7078#7083#7647::Float64
  ########_var0#7075#7079#7084#7648::Tuple{}
  ####ri#7624#7649::UInt64
  ####idx#7625#7650::UInt64
  ####x#7626#7651::Float64
  ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7653::Float64
  ##_var0#7654::Float64
  ##a#7655::Float64
  ##exp_a#7656::Float64
  ##deriv#7657::Float64
  ####G#7636#7658::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7637#7659::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7638#7660::Tuple{}
  ##########x#7072#7074#7078#7639#7661::Float64
  ########_var0#7075#7079#7640#7662::Tuple{}
  ##a1#7663::Float64
  ##a2#7664::Float64
  ######a#7097#7101#7665::Tuple{}
  ######b#7098#7102#7666::Tuple{}
  ######afactor#7099#7103#7667::Float64
  ######bfactor#7100#7104#7668::Float64
  ####_var0#7105#7669::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7616#7622#7627#7652 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7616#7622#7627#7652 = false
      4: 
      ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7653 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7614#7615#7617#7623#7628#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7624#7649 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7653::Float64),0x000fffffffffffff))
      ####idx#7625#7650 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7649::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7651 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7649::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7649::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7654 = ####x#7626#7651::Float64
      goto 7
      6: 
      ##_var0#7654 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7650::UInt64,####x#7626#7651::Float64)::Float64
      goto 7
      ##_var0#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7654::Float64
      ##a#7641 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7642 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7641::Float64))
      ##deriv#7643 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7642::Float64,##a#7641::Float64))))
      ####G#7080#7644 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7648 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7648 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7642::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7655 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7655::Float64,0)::Float64
      ##exp_a#7656 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7655::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7657 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7656::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7636#7658 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7640#7662 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7075#7079#7640#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7656::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7663 = GenSym(10)
      ##a2#7664 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7669 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7105#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7663::Float64,##a2#7664::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7641::Float64
  ##div_a#7642::Float64
  ##deriv#7643::Float64
  ####G#7080#7644::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7081#7645::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7082#7646::Tuple{}
  ##########x#7072#7074#7078#7083#7647::Float64
  ########_var0#7075#7079#7084#7648::Tuple{}
  ####ri#7624#7649::UInt64
  ####idx#7625#7650::UInt64
  ####x#7626#7651::Float64
  ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
  ############_var0#7614#7615#7617#7623#7628#7653::Float64
  ##_var0#7654::Float64
  ##a#7655::Float64
  ##exp_a#7656::Float64
  ##deriv#7657::Float64
  ####G#7636#7658::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7637#7659::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7638#7660::Tuple{}
  ##########x#7072#7074#7078#7639#7661::Float64
  ########_var0#7075#7079#7640#7662::Tuple{}
  ##a1#7663::Float64
  ##a2#7664::Float64
  ######a#7097#7101#7665::Tuple{}
  ######b#7098#7102#7666::Tuple{}
  ######afactor#7099#7103#7667::Float64
  ######bfactor#7100#7104#7668::Float64
  ####_var0#7105#7669::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 139:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7616#7622#7627#7652 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7616#7622#7627#7652 = false
      4: 
      ########_var0#7616#7622#7627#7652::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7614#7615#7617#7623#7628#7653 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7614#7615#7617#7623#7628#7653 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7624#7649 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7614#7615#7617#7623#7628#7653::Float64),0x000fffffffffffff))
      ####idx#7625#7650 = (Base.box)(UInt64,(Base.and_int)(####ri#7624#7649::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7626#7651 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7624#7649::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7624#7649::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7625#7650::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7654 = ####x#7626#7651::Float64
      goto 7
      6: 
      ##_var0#7654 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7625#7650::UInt64,####x#7626#7651::Float64)::Float64
      goto 7
      ##_var0#7654 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7654::Float64
      ##a#7641 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7642 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7641::Float64))
      ##deriv#7643 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7642::Float64,##a#7641::Float64))))
      ####G#7080#7644 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7084#7648 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7084#7648 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7642::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7655 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7655::Float64,0)::Float64
      ##exp_a#7656 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7655::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7657 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7656::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7636#7658 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7640#7662 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7075#7079#7640#7662 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7656::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7663 = GenSym(10)
      ##a2#7664 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7105#7669 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7105#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7663::Float64,##a2#7664::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7750::Float64
  ####G#7745#7751::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7746#7752::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7747#7753::Tuple{}
  ##########x#7072#7074#7078#7748#7754::Float64
  ########_var0#7075#7079#7749#7755::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7750 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7745#7751 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7749#7755 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7749#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7750::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{Float64},x::Int64)::Float64
      return (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7750::Float64
  ####G#7745#7751::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7746#7752::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7747#7753::Tuple{}
  ##########x#7072#7074#7078#7748#7754::Float64
  ########_var0#7075#7079#7749#7755::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7750 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7745#7751 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7749#7755 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7749#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7750::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7750::Float64
  ####G#7745#7751::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7746#7752::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7747#7753::Tuple{}
  ##########x#7072#7074#7078#7748#7754::Float64
  ########_var0#7075#7079#7749#7755::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7750 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7745#7751 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7749#7755 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7749#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7750::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7750::Float64
  ####G#7745#7751::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7746#7752::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7747#7753::Tuple{}
  ##########x#7072#7074#7078#7748#7754::Float64
  ########_var0#7075#7079#7749#7755::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7750 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7745#7751 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7749#7755 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7749#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7750::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64
  ##exp_a#7750::Float64
  ####G#7745#7751::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7070#7076#7746#7752::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7071#7073#7077#7747#7753::Tuple{}
  ##########x#7072#7074#7078#7748#7754::Float64
  ########_var0#7075#7079#7749#7755::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 120:
      GenSym(0) = (Distributions.logpdf)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      ##exp_a#7750 = (top(ccall))((top(tuple))("exp",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,(top(getfield))(GenSym(0),:value)::Float64,0)::Float64
      ####G#7745#7751 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7075#7079#7749#7755 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7075#7079#7749#7755 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7750::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





