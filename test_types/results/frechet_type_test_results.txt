____________________________
ntrials
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
succprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
failprob
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
params
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)::Tuple{Int64,Int64}
  end::Tuple{Int64,Int64}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64)::Tuple{Float64,Float64}
  end::Tuple{Float64,Float64}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 54:
      return (top(tuple))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},(top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  end::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}},ForwardDiff.GradientNumber{0,Float64,Tuple{}}}




____________________________
mean
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  α::Int64
  ####fy#7061#7062::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64
      ####fy#7061#7062 = (Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(1.0,####fy#7061#7062::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(1.0,####fy#7061#7062::Float64)::Bool,(Base.lt_float)(####fy#7061#7062::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7061#7062::Float64)),α::Int64)::Bool)))) goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,α::Int64))))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7111::Float64
  ##div_a#7112::Float64
  ##deriv#7113::Float64
  ####G#7085#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7116::Tuple{}
  ##########x#7077#7079#7083#7088#7117::Float64
  ########_var0#7080#7084#7089#7118::Tuple{}
  ######tup#7090#7092#7119::Tuple{}
  ####_var0#7093#7120::Tuple{}
  ######types#7091#7094#7121::Tuple{Type{Float64}}
  ##a#7122::Float64
  ####G#7097#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7125::Tuple{}
  ##########x#7077#7079#7083#7100#7126::Float64
  ########_var0#7080#7084#7101#7127::Tuple{}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7102#7106#7130::Tuple{}
  ######b#7103#7107#7131::Tuple{}
  ######afactor#7104#7108#7132::Float64
  ######bfactor#7105#7109#7133::Float64
  ####_var0#7110#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7111 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7112 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7111::Float64))
      ##deriv#7113 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7112::Float64,##a#7111::Float64))))
      ####G#7085#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7089#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7112::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7120 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7093#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7122 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7122::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      ####G#7097#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7127 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7080#7084#7101#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7122::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7128 = GenSym(7)
      ##a2#7129 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7134 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  α::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64
      unless (Base.lt_float)(1.0,α::Float64)::Bool goto 0
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(1.0,α::Float64))))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
      0: 
      return Distributions.Inf
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7111::Float64
  ##div_a#7112::Float64
  ##deriv#7113::Float64
  ####G#7085#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7116::Tuple{}
  ##########x#7077#7079#7083#7088#7117::Float64
  ########_var0#7080#7084#7089#7118::Tuple{}
  ######tup#7090#7092#7119::Tuple{}
  ####_var0#7093#7120::Tuple{}
  ######types#7091#7094#7121::Tuple{Type{Float64}}
  ##a#7122::Float64
  ####G#7097#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7125::Tuple{}
  ##########x#7077#7079#7083#7100#7126::Float64
  ########_var0#7080#7084#7101#7127::Tuple{}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7102#7106#7130::Tuple{}
  ######b#7103#7107#7131::Tuple{}
  ######afactor#7104#7108#7132::Float64
  ######bfactor#7105#7109#7133::Float64
  ####_var0#7110#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7111 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7112 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7111::Float64))
      ##deriv#7113 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7112::Float64,##a#7111::Float64))))
      ####G#7085#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7089#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7112::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7120 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7093#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7122 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7122::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      ####G#7097#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7127 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7080#7084#7101#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7122::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7128 = GenSym(7)
      ##a2#7129 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7134 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7111::Float64
  ##div_a#7112::Float64
  ##deriv#7113::Float64
  ####G#7085#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7116::Tuple{}
  ##########x#7077#7079#7083#7088#7117::Float64
  ########_var0#7080#7084#7089#7118::Tuple{}
  ######tup#7090#7092#7119::Tuple{}
  ####_var0#7093#7120::Tuple{}
  ######types#7091#7094#7121::Tuple{Type{Float64}}
  ##a#7122::Float64
  ####G#7097#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7125::Tuple{}
  ##########x#7077#7079#7083#7100#7126::Float64
  ########_var0#7080#7084#7101#7127::Tuple{}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7102#7106#7130::Tuple{}
  ######b#7103#7107#7131::Tuple{}
  ######afactor#7104#7108#7132::Float64
  ######bfactor#7105#7109#7133::Float64
  ####_var0#7110#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7111 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7112 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7111::Float64))
      ##deriv#7113 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7112::Float64,##a#7111::Float64))))
      ####G#7085#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7089#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7112::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7120 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7093#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7122 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7122::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      ####G#7097#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7127 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7080#7084#7101#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7122::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7128 = GenSym(7)
      ##a2#7129 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7134 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7111::Float64
  ##div_a#7112::Float64
  ##deriv#7113::Float64
  ####G#7085#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7116::Tuple{}
  ##########x#7077#7079#7083#7088#7117::Float64
  ########_var0#7080#7084#7089#7118::Tuple{}
  ######tup#7090#7092#7119::Tuple{}
  ####_var0#7093#7120::Tuple{}
  ######types#7091#7094#7121::Tuple{Type{Float64}}
  ##a#7122::Float64
  ####G#7097#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7125::Tuple{}
  ##########x#7077#7079#7083#7100#7126::Float64
  ########_var0#7080#7084#7101#7127::Tuple{}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7102#7106#7130::Tuple{}
  ######b#7103#7107#7131::Tuple{}
  ######afactor#7104#7108#7132::Float64
  ######bfactor#7105#7109#7133::Float64
  ####_var0#7110#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7111 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7112 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7111::Float64))
      ##deriv#7113 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7112::Float64,##a#7111::Float64))))
      ####G#7085#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7089#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7112::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7120 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7093#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7122 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7122::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      ####G#7097#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7127 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7080#7084#7101#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7122::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7128 = GenSym(7)
      ##a2#7129 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7134 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  α::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7111::Float64
  ##div_a#7112::Float64
  ##deriv#7113::Float64
  ####G#7085#7114::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7115::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7116::Tuple{}
  ##########x#7077#7079#7083#7088#7117::Float64
  ########_var0#7080#7084#7089#7118::Tuple{}
  ######tup#7090#7092#7119::Tuple{}
  ####_var0#7093#7120::Tuple{}
  ######types#7091#7094#7121::Tuple{Type{Float64}}
  ##a#7122::Float64
  ####G#7097#7123::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7124::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7125::Tuple{}
  ##########x#7077#7079#7083#7100#7126::Float64
  ########_var0#7080#7084#7101#7127::Tuple{}
  ##a1#7128::Float64
  ##a2#7129::Float64
  ######a#7102#7106#7130::Tuple{}
  ######b#7103#7107#7131::Tuple{}
  ######afactor#7104#7108#7132::Float64
  ######bfactor#7105#7109#7133::Float64
  ####_var0#7110#7134::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 59:
      α = (top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      unless (Base.lt_float)(1.0,(top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0
      ##a#7111 = (top(getfield))(α::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7112 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7111::Float64))
      ##deriv#7113 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7112::Float64,##a#7111::Float64))))
      ####G#7085#7114 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7118 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7089#7118 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7112::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7120 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7093#7120 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ##a#7122 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(GenSym(0),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      GenSym(3) = (ForwardDiff.digamma)(##a#7122::Float64)::Float64
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7122::Float64,0)::Float64
      ####G#7097#7123 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7127 = (top(tuple))()::Tuple{}
      goto 7
      ########_var0#7080#7084#7101#7127 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(5),##a#7122::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7128 = GenSym(7)
      ##a2#7129 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7134 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7134 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7128::Float64,##a2#7129::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      0: 
      return Distributions.Inf
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
var
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  iα::Float64
  ####fy#7061#7141::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      GenSym(0) = (top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64
      ####fy#7061#7141 = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0)))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(2.0,####fy#7061#7141::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(2.0,####fy#7061#7141::Float64)::Bool,(Base.lt_float)(####fy#7061#7141::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7061#7141::Float64)),GenSym(0))::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      GenSym(7) = (Base.power_by_squaring)((top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64,2)::Int64
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      GenSym(1) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(1),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,GenSym(7))),(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(3),GenSym(1))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7163::Float64
  ##div_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7085#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7168::Tuple{}
  ##########x#7077#7079#7083#7088#7169::Float64
  ########_var0#7080#7084#7089#7170::Tuple{}
  ######tup#7090#7092#7171::Tuple{}
  ####_var0#7093#7172::Tuple{}
  ######types#7091#7094#7173::Tuple{Type{Float64}}
  ##a#7174::Float64
  ####G#7097#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7177::Tuple{}
  ##########x#7077#7079#7083#7100#7178::Float64
  ########_var0#7080#7084#7101#7179::Tuple{}
  ##a#7180::Float64
  ##exp_a#7181::Float64
  ##deriv#7182::Float64
  ####G#7145#7183::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7184::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7185::Tuple{}
  ##########x#7077#7079#7083#7148#7186::Float64
  ########_var0#7080#7084#7149#7187::Tuple{}
  ########tup#7076#7150#7154#7188::Tuple{}
  ########x#7077#7151#7155#7189::Float64
  ######_var0#7152#7156#7190::Tuple{}
  ########types#7091#7153#7157#7191::Tuple{Type{Float64}}
  ######tup#7090#7092#7192::Tuple{}
  ####_var0#7093#7193::Tuple{}
  ######types#7091#7094#7194::Tuple{Type{Float64}}
  ##a#7195::Float64
  ####G#7097#7196::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7197::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7198::Tuple{}
  ##########x#7077#7079#7083#7100#7199::Float64
  ########_var0#7080#7084#7101#7200::Tuple{}
  ######a#7158#7160#7201::Tuple{}
  ######b#7159#7161#7202::Tuple{}
  ####_var0#7162#7203::Tuple{}
  ##a#7204::Float64
  ##exp_a#7205::Float64
  ##deriv#7206::Float64
  ####G#7145#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7209::Tuple{}
  ##########x#7077#7079#7083#7148#7210::Float64
  ########_var0#7080#7084#7149#7211::Tuple{}
  ##a1#7212::Float64
  ##a2#7213::Float64
  ######a#7102#7106#7214::Tuple{}
  ######b#7103#7107#7215::Tuple{}
  ######afactor#7104#7108#7216::Float64
  ######bfactor#7105#7109#7217::Float64
  ####_var0#7110#7218::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7164 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7163::Float64))
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7164::Float64,##a#7163::Float64))))
      ####G#7085#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7170 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      ##a#7204 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7205 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7206 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7211 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7149#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7205::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7190 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7152#7156#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7193 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7093#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7195 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7195::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      ####G#7097#7196 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7200 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7080#7084#7101#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7195::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7172 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7174 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7174::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      ####G#7097#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7179 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7174::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7180 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7181 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7182 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7183 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7187 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7080#7084#7149#7187 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7181::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7203 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7162#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7212 = GenSym(14)
      ##a2#7213 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7218 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7110#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7212::Float64,##a2#7213::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64,(Base.box)(Base.Float64,(Base.sub_float)((Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64,(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7163::Float64
  ##div_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7085#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7168::Tuple{}
  ##########x#7077#7079#7083#7088#7169::Float64
  ########_var0#7080#7084#7089#7170::Tuple{}
  ######tup#7090#7092#7171::Tuple{}
  ####_var0#7093#7172::Tuple{}
  ######types#7091#7094#7173::Tuple{Type{Float64}}
  ##a#7174::Float64
  ####G#7097#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7177::Tuple{}
  ##########x#7077#7079#7083#7100#7178::Float64
  ########_var0#7080#7084#7101#7179::Tuple{}
  ##a#7180::Float64
  ##exp_a#7181::Float64
  ##deriv#7182::Float64
  ####G#7145#7183::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7184::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7185::Tuple{}
  ##########x#7077#7079#7083#7148#7186::Float64
  ########_var0#7080#7084#7149#7187::Tuple{}
  ########tup#7076#7150#7154#7188::Tuple{}
  ########x#7077#7151#7155#7189::Float64
  ######_var0#7152#7156#7190::Tuple{}
  ########types#7091#7153#7157#7191::Tuple{Type{Float64}}
  ######tup#7090#7092#7192::Tuple{}
  ####_var0#7093#7193::Tuple{}
  ######types#7091#7094#7194::Tuple{Type{Float64}}
  ##a#7195::Float64
  ####G#7097#7196::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7197::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7198::Tuple{}
  ##########x#7077#7079#7083#7100#7199::Float64
  ########_var0#7080#7084#7101#7200::Tuple{}
  ######a#7158#7160#7201::Tuple{}
  ######b#7159#7161#7202::Tuple{}
  ####_var0#7162#7203::Tuple{}
  ##a#7204::Float64
  ##exp_a#7205::Float64
  ##deriv#7206::Float64
  ####G#7145#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7209::Tuple{}
  ##########x#7077#7079#7083#7148#7210::Float64
  ########_var0#7080#7084#7149#7211::Tuple{}
  ##a1#7212::Float64
  ##a2#7213::Float64
  ######a#7102#7106#7214::Tuple{}
  ######b#7103#7107#7215::Tuple{}
  ######afactor#7104#7108#7216::Float64
  ######bfactor#7105#7109#7217::Float64
  ####_var0#7110#7218::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7164 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7163::Float64))
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7164::Float64,##a#7163::Float64))))
      ####G#7085#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7170 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      ##a#7204 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7205 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7206 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7211 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7149#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7205::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7190 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7152#7156#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7193 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7093#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7195 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7195::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      ####G#7097#7196 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7200 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7080#7084#7101#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7195::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7172 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7174 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7174::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      ####G#7097#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7179 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7174::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7180 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7181 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7182 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7183 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7187 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7080#7084#7149#7187 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7181::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7203 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7162#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7212 = GenSym(14)
      ##a2#7213 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7218 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7110#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7212::Float64,##a2#7213::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7163::Float64
  ##div_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7085#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7168::Tuple{}
  ##########x#7077#7079#7083#7088#7169::Float64
  ########_var0#7080#7084#7089#7170::Tuple{}
  ######tup#7090#7092#7171::Tuple{}
  ####_var0#7093#7172::Tuple{}
  ######types#7091#7094#7173::Tuple{Type{Float64}}
  ##a#7174::Float64
  ####G#7097#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7177::Tuple{}
  ##########x#7077#7079#7083#7100#7178::Float64
  ########_var0#7080#7084#7101#7179::Tuple{}
  ##a#7180::Float64
  ##exp_a#7181::Float64
  ##deriv#7182::Float64
  ####G#7145#7183::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7184::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7185::Tuple{}
  ##########x#7077#7079#7083#7148#7186::Float64
  ########_var0#7080#7084#7149#7187::Tuple{}
  ########tup#7076#7150#7154#7188::Tuple{}
  ########x#7077#7151#7155#7189::Float64
  ######_var0#7152#7156#7190::Tuple{}
  ########types#7091#7153#7157#7191::Tuple{Type{Float64}}
  ######tup#7090#7092#7192::Tuple{}
  ####_var0#7093#7193::Tuple{}
  ######types#7091#7094#7194::Tuple{Type{Float64}}
  ##a#7195::Float64
  ####G#7097#7196::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7197::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7198::Tuple{}
  ##########x#7077#7079#7083#7100#7199::Float64
  ########_var0#7080#7084#7101#7200::Tuple{}
  ######a#7158#7160#7201::Tuple{}
  ######b#7159#7161#7202::Tuple{}
  ####_var0#7162#7203::Tuple{}
  ##a#7204::Float64
  ##exp_a#7205::Float64
  ##deriv#7206::Float64
  ####G#7145#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7209::Tuple{}
  ##########x#7077#7079#7083#7148#7210::Float64
  ########_var0#7080#7084#7149#7211::Tuple{}
  ##a1#7212::Float64
  ##a2#7213::Float64
  ######a#7102#7106#7214::Tuple{}
  ######b#7103#7107#7215::Tuple{}
  ######afactor#7104#7108#7216::Float64
  ######bfactor#7105#7109#7217::Float64
  ####_var0#7110#7218::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7164 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7163::Float64))
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7164::Float64,##a#7163::Float64))))
      ####G#7085#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7170 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      ##a#7204 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7205 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7206 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7211 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7149#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7205::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7190 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7152#7156#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7193 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7093#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7195 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7195::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      ####G#7097#7196 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7200 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7080#7084#7101#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7195::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7172 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7174 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7174::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      ####G#7097#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7179 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7174::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7180 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7181 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7182 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7183 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7187 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7080#7084#7149#7187 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7181::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7203 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7162#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7212 = GenSym(14)
      ##a2#7213 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7218 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7110#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7212::Float64,##a2#7213::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7163::Float64
  ##div_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7085#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7168::Tuple{}
  ##########x#7077#7079#7083#7088#7169::Float64
  ########_var0#7080#7084#7089#7170::Tuple{}
  ######tup#7090#7092#7171::Tuple{}
  ####_var0#7093#7172::Tuple{}
  ######types#7091#7094#7173::Tuple{Type{Float64}}
  ##a#7174::Float64
  ####G#7097#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7177::Tuple{}
  ##########x#7077#7079#7083#7100#7178::Float64
  ########_var0#7080#7084#7101#7179::Tuple{}
  ##a#7180::Float64
  ##exp_a#7181::Float64
  ##deriv#7182::Float64
  ####G#7145#7183::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7184::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7185::Tuple{}
  ##########x#7077#7079#7083#7148#7186::Float64
  ########_var0#7080#7084#7149#7187::Tuple{}
  ########tup#7076#7150#7154#7188::Tuple{}
  ########x#7077#7151#7155#7189::Float64
  ######_var0#7152#7156#7190::Tuple{}
  ########types#7091#7153#7157#7191::Tuple{Type{Float64}}
  ######tup#7090#7092#7192::Tuple{}
  ####_var0#7093#7193::Tuple{}
  ######types#7091#7094#7194::Tuple{Type{Float64}}
  ##a#7195::Float64
  ####G#7097#7196::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7197::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7198::Tuple{}
  ##########x#7077#7079#7083#7100#7199::Float64
  ########_var0#7080#7084#7101#7200::Tuple{}
  ######a#7158#7160#7201::Tuple{}
  ######b#7159#7161#7202::Tuple{}
  ####_var0#7162#7203::Tuple{}
  ##a#7204::Float64
  ##exp_a#7205::Float64
  ##deriv#7206::Float64
  ####G#7145#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7209::Tuple{}
  ##########x#7077#7079#7083#7148#7210::Float64
  ########_var0#7080#7084#7149#7211::Tuple{}
  ##a1#7212::Float64
  ##a2#7213::Float64
  ######a#7102#7106#7214::Tuple{}
  ######b#7103#7107#7215::Tuple{}
  ######afactor#7104#7108#7216::Float64
  ######bfactor#7105#7109#7217::Float64
  ####_var0#7110#7218::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7164 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7163::Float64))
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7164::Float64,##a#7163::Float64))))
      ####G#7085#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7170 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      ##a#7204 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7205 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7206 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7211 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7149#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7205::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7190 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7152#7156#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7193 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7093#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7195 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7195::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      ####G#7097#7196 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7200 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7080#7084#7101#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7195::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7172 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7174 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7174::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      ####G#7097#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7179 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7174::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7180 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7181 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7182 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7183 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7187 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7080#7084#7149#7187 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7181::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7203 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7162#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7212 = GenSym(14)
      ##a2#7213 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7218 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7110#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7212::Float64,##a2#7213::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7163::Float64
  ##div_a#7164::Float64
  ##deriv#7165::Float64
  ####G#7085#7166::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7167::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7168::Tuple{}
  ##########x#7077#7079#7083#7088#7169::Float64
  ########_var0#7080#7084#7089#7170::Tuple{}
  ######tup#7090#7092#7171::Tuple{}
  ####_var0#7093#7172::Tuple{}
  ######types#7091#7094#7173::Tuple{Type{Float64}}
  ##a#7174::Float64
  ####G#7097#7175::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7176::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7177::Tuple{}
  ##########x#7077#7079#7083#7100#7178::Float64
  ########_var0#7080#7084#7101#7179::Tuple{}
  ##a#7180::Float64
  ##exp_a#7181::Float64
  ##deriv#7182::Float64
  ####G#7145#7183::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7184::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7185::Tuple{}
  ##########x#7077#7079#7083#7148#7186::Float64
  ########_var0#7080#7084#7149#7187::Tuple{}
  ########tup#7076#7150#7154#7188::Tuple{}
  ########x#7077#7151#7155#7189::Float64
  ######_var0#7152#7156#7190::Tuple{}
  ########types#7091#7153#7157#7191::Tuple{Type{Float64}}
  ######tup#7090#7092#7192::Tuple{}
  ####_var0#7093#7193::Tuple{}
  ######types#7091#7094#7194::Tuple{Type{Float64}}
  ##a#7195::Float64
  ####G#7097#7196::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7197::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7198::Tuple{}
  ##########x#7077#7079#7083#7100#7199::Float64
  ########_var0#7080#7084#7101#7200::Tuple{}
  ######a#7158#7160#7201::Tuple{}
  ######b#7159#7161#7202::Tuple{}
  ####_var0#7162#7203::Tuple{}
  ##a#7204::Float64
  ##exp_a#7205::Float64
  ##deriv#7206::Float64
  ####G#7145#7207::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7208::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7209::Tuple{}
  ##########x#7077#7079#7083#7148#7210::Float64
  ########_var0#7080#7084#7149#7211::Tuple{}
  ##a1#7212::Float64
  ##a2#7213::Float64
  ######a#7102#7106#7214::Tuple{}
  ######b#7103#7107#7215::Tuple{}
  ######afactor#7104#7108#7216::Float64
  ######bfactor#7105#7109#7217::Float64
  ####_var0#7110#7218::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 66:
      NewvarNode(:iα)
      unless (Base.lt_float)(2.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 67:
      ##a#7163 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7164 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7163::Float64))
      ##deriv#7165 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7164::Float64,##a#7163::Float64))))
      ####G#7085#7166 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7170 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7170 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7164::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 68:
      ##a#7204 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7205 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7206 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7204::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7207 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7211 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7149#7211 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      GenSym(13) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7205::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7190 = (top(tuple))()::Tuple{}
      goto 12
      ######_var0#7152#7156#7190 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7193 = (top(tuple))()::Tuple{}
      goto 14
      ####_var0#7093#7193 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      ##a#7195 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(10) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      GenSym(8) = (ForwardDiff.digamma)(##a#7195::Float64)::Float64
      GenSym(7) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7195::Float64,0)::Float64
      ####G#7097#7196 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7200 = (top(tuple))()::Tuple{}
      goto 16
      ########_var0#7080#7084#7101#7200 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      GenSym(11) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(10),##a#7195::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7172 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7172 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7174 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7174::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7174::Float64,0)::Float64
      ####G#7097#7175 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7179 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7179 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7174::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7180 = (top(getfield))(GenSym(5),:value)::Float64
      ##exp_a#7181 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7182 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7180::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7183 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7187 = (top(tuple))()::Tuple{}
      goto 10
      ########_var0#7080#7084#7149#7187 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      GenSym(12) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7181::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7203 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7162#7203 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      GenSym(14) = (top(getfield))(GenSym(13),:value)::Float64
      GenSym(15) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(11),:value)::Float64,(top(getfield))(GenSym(12),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##a1#7212 = GenSym(14)
      ##a2#7213 = GenSym(15)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7218 = (top(tuple))()::Tuple{}
      goto 22
      ####_var0#7110#7218 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7212::Float64,##a2#7213::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 70:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
mode
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64))))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7239::Float64
  ##div_a#7240::Float64
  ##deriv#7241::Float64
  ####G#7085#7242::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7243::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7244::Tuple{}
  ##########x#7077#7079#7083#7088#7245::Float64
  ########_var0#7080#7084#7089#7246::Tuple{}
  ######tup#7090#7092#7247::Tuple{}
  ####_var0#7093#7248::Tuple{}
  ######types#7091#7094#7249::Tuple{Type{Float64}}
  ##a1#7250::Float64
  ##a2#7251::Float64
  ##exp_a#7252::Float64
  ##powval#7253::Float64
  ##logval#7254::Float64
  ##new_bs#7255::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7225#7256::Float64
  ####exp_a#7226#7257::Float64
  ####deriv#7227#7258::Float64
  ######G#7219#7228#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7075#7081#7220#7229#7260::Tuple{Type{Float64},Type{Float64}}
  ############tup#7076#7078#7082#7221#7230#7261::Tuple{}
  ############x#7077#7079#7083#7222#7231#7262::Float64
  ##########_var0#7080#7084#7223#7232#7263::Tuple{}
  ######a#7102#7233#7264::Tuple{}
  ######b#7103#7234#7265::Tuple{}
  ######afactor#7104#7235#7266::Float64
  ######bfactor#7105#7236#7267::Float64
  ####_var0#7237#7268::Tuple{}
  ######types#7224#7238#7269::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ######a#7102#7106#7272::Tuple{}
  ######b#7103#7107#7273::Tuple{}
  ######afactor#7104#7108#7274::Float64
  ######bfactor#7105#7109#7275::Float64
  ####_var0#7110#7276::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      ##a#7239 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7240 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7239::Float64))
      ##deriv#7241 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7240::Float64,##a#7239::Float64))))
      ####G#7085#7242 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7246 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7240::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7248 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7093#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7250"))
      NewvarNode(symbol("##a2#7251"))
      NewvarNode(symbol("##exp_a#7252"))
      NewvarNode(symbol("##powval#7253"))
      NewvarNode(symbol("##logval#7254"))
      NewvarNode(symbol("##new_bs#7255"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7225#7256 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7226#7257 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(7),0)::Float64
      ####deriv#7227#7258 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(7))))::Float64))
      ######G#7219#7228#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7080#7084#7223#7232#7263 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7080#7084#7223#7232#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7226#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7250 = GenSym(1)
      ##a2#7251 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,##a2#7251::Float64,0)::Float64
      ##exp_a#7252 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,##a2#7251::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7251::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,GenSym(14),0)::Float64
      ##powval#7253 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7251::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0)::Float64
      ##logval#7254 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7252::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7250::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7237#7268 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7237#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7255 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7252::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7270 = GenSym(21)
      ##a2#7271 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7276 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7270::Float64,##a2#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      iα = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,iα::Float64,0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),iα::Float64)))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7239::Float64
  ##div_a#7240::Float64
  ##deriv#7241::Float64
  ####G#7085#7242::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7243::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7244::Tuple{}
  ##########x#7077#7079#7083#7088#7245::Float64
  ########_var0#7080#7084#7089#7246::Tuple{}
  ######tup#7090#7092#7247::Tuple{}
  ####_var0#7093#7248::Tuple{}
  ######types#7091#7094#7249::Tuple{Type{Float64}}
  ##a1#7250::Float64
  ##a2#7251::Float64
  ##exp_a#7252::Float64
  ##powval#7253::Float64
  ##logval#7254::Float64
  ##new_bs#7255::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7225#7256::Float64
  ####exp_a#7226#7257::Float64
  ####deriv#7227#7258::Float64
  ######G#7219#7228#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7075#7081#7220#7229#7260::Tuple{Type{Float64},Type{Float64}}
  ############tup#7076#7078#7082#7221#7230#7261::Tuple{}
  ############x#7077#7079#7083#7222#7231#7262::Float64
  ##########_var0#7080#7084#7223#7232#7263::Tuple{}
  ######a#7102#7233#7264::Tuple{}
  ######b#7103#7234#7265::Tuple{}
  ######afactor#7104#7235#7266::Float64
  ######bfactor#7105#7236#7267::Float64
  ####_var0#7237#7268::Tuple{}
  ######types#7224#7238#7269::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ######a#7102#7106#7272::Tuple{}
  ######b#7103#7107#7273::Tuple{}
  ######afactor#7104#7108#7274::Float64
  ######bfactor#7105#7109#7275::Float64
  ####_var0#7110#7276::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      ##a#7239 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7240 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7239::Float64))
      ##deriv#7241 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7240::Float64,##a#7239::Float64))))
      ####G#7085#7242 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7246 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7240::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7248 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7093#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7250"))
      NewvarNode(symbol("##a2#7251"))
      NewvarNode(symbol("##exp_a#7252"))
      NewvarNode(symbol("##powval#7253"))
      NewvarNode(symbol("##logval#7254"))
      NewvarNode(symbol("##new_bs#7255"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7225#7256 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7226#7257 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(7),0)::Float64
      ####deriv#7227#7258 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(7))))::Float64))
      ######G#7219#7228#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7080#7084#7223#7232#7263 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7080#7084#7223#7232#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7226#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7250 = GenSym(1)
      ##a2#7251 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,##a2#7251::Float64,0)::Float64
      ##exp_a#7252 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,##a2#7251::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7251::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,GenSym(14),0)::Float64
      ##powval#7253 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7251::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0)::Float64
      ##logval#7254 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7252::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7250::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7237#7268 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7237#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7255 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7252::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7270 = GenSym(21)
      ##a2#7271 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7276 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7270::Float64,##a2#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7239::Float64
  ##div_a#7240::Float64
  ##deriv#7241::Float64
  ####G#7085#7242::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7243::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7244::Tuple{}
  ##########x#7077#7079#7083#7088#7245::Float64
  ########_var0#7080#7084#7089#7246::Tuple{}
  ######tup#7090#7092#7247::Tuple{}
  ####_var0#7093#7248::Tuple{}
  ######types#7091#7094#7249::Tuple{Type{Float64}}
  ##a1#7250::Float64
  ##a2#7251::Float64
  ##exp_a#7252::Float64
  ##powval#7253::Float64
  ##logval#7254::Float64
  ##new_bs#7255::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7225#7256::Float64
  ####exp_a#7226#7257::Float64
  ####deriv#7227#7258::Float64
  ######G#7219#7228#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7075#7081#7220#7229#7260::Tuple{Type{Float64},Type{Float64}}
  ############tup#7076#7078#7082#7221#7230#7261::Tuple{}
  ############x#7077#7079#7083#7222#7231#7262::Float64
  ##########_var0#7080#7084#7223#7232#7263::Tuple{}
  ######a#7102#7233#7264::Tuple{}
  ######b#7103#7234#7265::Tuple{}
  ######afactor#7104#7235#7266::Float64
  ######bfactor#7105#7236#7267::Float64
  ####_var0#7237#7268::Tuple{}
  ######types#7224#7238#7269::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ######a#7102#7106#7272::Tuple{}
  ######b#7103#7107#7273::Tuple{}
  ######afactor#7104#7108#7274::Float64
  ######bfactor#7105#7109#7275::Float64
  ####_var0#7110#7276::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      ##a#7239 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7240 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7239::Float64))
      ##deriv#7241 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7240::Float64,##a#7239::Float64))))
      ####G#7085#7242 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7246 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7240::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7248 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7093#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7250"))
      NewvarNode(symbol("##a2#7251"))
      NewvarNode(symbol("##exp_a#7252"))
      NewvarNode(symbol("##powval#7253"))
      NewvarNode(symbol("##logval#7254"))
      NewvarNode(symbol("##new_bs#7255"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7225#7256 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7226#7257 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(7),0)::Float64
      ####deriv#7227#7258 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(7))))::Float64))
      ######G#7219#7228#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7080#7084#7223#7232#7263 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7080#7084#7223#7232#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7226#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7250 = GenSym(1)
      ##a2#7251 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,##a2#7251::Float64,0)::Float64
      ##exp_a#7252 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,##a2#7251::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7251::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,GenSym(14),0)::Float64
      ##powval#7253 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7251::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0)::Float64
      ##logval#7254 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7252::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7250::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7237#7268 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7237#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7255 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7252::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7270 = GenSym(21)
      ##a2#7271 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7276 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7270::Float64,##a2#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7239::Float64
  ##div_a#7240::Float64
  ##deriv#7241::Float64
  ####G#7085#7242::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7243::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7244::Tuple{}
  ##########x#7077#7079#7083#7088#7245::Float64
  ########_var0#7080#7084#7089#7246::Tuple{}
  ######tup#7090#7092#7247::Tuple{}
  ####_var0#7093#7248::Tuple{}
  ######types#7091#7094#7249::Tuple{Type{Float64}}
  ##a1#7250::Float64
  ##a2#7251::Float64
  ##exp_a#7252::Float64
  ##powval#7253::Float64
  ##logval#7254::Float64
  ##new_bs#7255::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7225#7256::Float64
  ####exp_a#7226#7257::Float64
  ####deriv#7227#7258::Float64
  ######G#7219#7228#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7075#7081#7220#7229#7260::Tuple{Type{Float64},Type{Float64}}
  ############tup#7076#7078#7082#7221#7230#7261::Tuple{}
  ############x#7077#7079#7083#7222#7231#7262::Float64
  ##########_var0#7080#7084#7223#7232#7263::Tuple{}
  ######a#7102#7233#7264::Tuple{}
  ######b#7103#7234#7265::Tuple{}
  ######afactor#7104#7235#7266::Float64
  ######bfactor#7105#7236#7267::Float64
  ####_var0#7237#7268::Tuple{}
  ######types#7224#7238#7269::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ######a#7102#7106#7272::Tuple{}
  ######b#7103#7107#7273::Tuple{}
  ######afactor#7104#7108#7274::Float64
  ######bfactor#7105#7109#7275::Float64
  ####_var0#7110#7276::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      ##a#7239 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7240 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7239::Float64))
      ##deriv#7241 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7240::Float64,##a#7239::Float64))))
      ####G#7085#7242 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7246 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7240::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7248 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7093#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7250"))
      NewvarNode(symbol("##a2#7251"))
      NewvarNode(symbol("##exp_a#7252"))
      NewvarNode(symbol("##powval#7253"))
      NewvarNode(symbol("##logval#7254"))
      NewvarNode(symbol("##new_bs#7255"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7225#7256 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7226#7257 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(7),0)::Float64
      ####deriv#7227#7258 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(7))))::Float64))
      ######G#7219#7228#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7080#7084#7223#7232#7263 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7080#7084#7223#7232#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7226#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7250 = GenSym(1)
      ##a2#7251 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,##a2#7251::Float64,0)::Float64
      ##exp_a#7252 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,##a2#7251::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7251::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,GenSym(14),0)::Float64
      ##powval#7253 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7251::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0)::Float64
      ##logval#7254 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7252::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7250::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7237#7268 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7237#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7255 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7252::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7270 = GenSym(21)
      ##a2#7271 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7276 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7270::Float64,##a2#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7239::Float64
  ##div_a#7240::Float64
  ##deriv#7241::Float64
  ####G#7085#7242::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7243::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7244::Tuple{}
  ##########x#7077#7079#7083#7088#7245::Float64
  ########_var0#7080#7084#7089#7246::Tuple{}
  ######tup#7090#7092#7247::Tuple{}
  ####_var0#7093#7248::Tuple{}
  ######types#7091#7094#7249::Tuple{Type{Float64}}
  ##a1#7250::Float64
  ##a2#7251::Float64
  ##exp_a#7252::Float64
  ##powval#7253::Float64
  ##logval#7254::Float64
  ##new_bs#7255::ForwardDiff.Partials{Union{},Tuple{}}
  ####a#7225#7256::Float64
  ####exp_a#7226#7257::Float64
  ####deriv#7227#7258::Float64
  ######G#7219#7228#7259::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7075#7081#7220#7229#7260::Tuple{Type{Float64},Type{Float64}}
  ############tup#7076#7078#7082#7221#7230#7261::Tuple{}
  ############x#7077#7079#7083#7222#7231#7262::Float64
  ##########_var0#7080#7084#7223#7232#7263::Tuple{}
  ######a#7102#7233#7264::Tuple{}
  ######b#7103#7234#7265::Tuple{}
  ######afactor#7104#7235#7266::Float64
  ######bfactor#7105#7236#7267::Float64
  ####_var0#7237#7268::Tuple{}
  ######types#7224#7238#7269::Tuple{Type{Float64}}
  _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a1#7270::Float64
  ##a2#7271::Float64
  ######a#7102#7106#7272::Tuple{}
  ######b#7103#7107#7273::Tuple{}
  ######afactor#7104#7108#7274::Float64
  ######bfactor#7105#7109#7275::Float64
  ####_var0#7110#7276::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 63:
      ##a#7239 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7240 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7239::Float64))
      ##deriv#7241 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7240::Float64,##a#7239::Float64))))
      ####G#7085#7242 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7246 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7246 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7240::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7093#7248 = (top(tuple))()::Tuple{}
      goto 3
      ####_var0#7093#7248 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      NewvarNode(symbol("##a1#7250"))
      NewvarNode(symbol("##a2#7251"))
      NewvarNode(symbol("##exp_a#7252"))
      NewvarNode(symbol("##powval#7253"))
      NewvarNode(symbol("##logval#7254"))
      NewvarNode(symbol("##new_bs#7255"))
      unless (top(getfield))((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:partials)::ForwardDiff.Partials{Float64,Tuple{}},:data)::Tuple{} == (top(getfield))($(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{}))),:data)::Tuple{}::Bool goto 6
      GenSym(3) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a#7225#7256 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(3),0)::Float64
      ####exp_a#7226#7257 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(3))))::Float64
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(GenSym(3),(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(10) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,####a#7225#7256::Float64,0,GenSym(7),0)::Float64
      ####deriv#7227#7258 = (Base.box)(Base.Float64,(Base.mul_float)(GenSym(3),(Base.Math.nan_dom_err)(GenSym(10),(Base.box)(Base.Float64,(Base.add_float)(####a#7225#7256::Float64,GenSym(7))))::Float64))
      ######G#7219#7228#7259 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ##########_var0#7080#7084#7223#7232#7263 = (top(tuple))()::Tuple{}
      goto 5
      ##########_var0#7080#7084#7223#7232#7263 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(####exp_a#7226#7257::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 8
      6: 
      GenSym(1) = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(2) = (top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7250 = GenSym(1)
      ##a2#7251 = GenSym(2)
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,##a2#7251::Float64,0)::Float64
      ##exp_a#7252 = (Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,##a2#7251::Float64)))::Float64
      GenSym(14) = (Base.box)(Base.Float64,(Base.sub_float)(##a2#7251::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(17) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0,GenSym(14),0)::Float64
      ##powval#7253 = (Base.box)(Base.Float64,(Base.mul_float)(##a2#7251::Float64,(Base.Math.nan_dom_err)(GenSym(17),(Base.box)(Base.Float64,(Base.add_float)(##a1#7250::Float64,GenSym(14))))::Float64))
      GenSym(19) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a1#7250::Float64,0)::Float64
      ##logval#7254 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7252::Float64,(Base.Math.nan_dom_err)(GenSym(19),##a1#7250::Float64)::Float64))
      $(Expr(:boundscheck, false))
      ####_var0#7237#7268 = (top(tuple))()::Tuple{}
      goto 7
      ####_var0#7237#7268 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      ##new_bs#7255 = $(Expr(:new, ForwardDiff.Partials{Union{},Tuple{}}, :((top(tuple))()::Tuple{})))
      _var0 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7252::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      8: 
      GenSym(20) = _var0::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      GenSym(21) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(22) = (top(getfield))(GenSym(20),:value)::Float64
      ##a1#7270 = GenSym(21)
      ##a2#7271 = GenSym(22)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7276 = (top(tuple))()::Tuple{}
      goto 9
      ####_var0#7110#7276 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7270::Float64,##a2#7271::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
modes
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  ##iα#7279::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7279 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64))))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7279::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7279::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7279::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7280::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7280 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7280::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7280::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7280::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7280::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7280 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7280::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7280::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7280::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ##iα#7280::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      ##iα#7280 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,##iα#7280::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(0),0,##iα#7280::Float64,0)::Float64
      return (top(vect))((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(GenSym(0),##iα#7280::Float64)))::Float64)))::Array{Float64,1}
  end::Array{Float64,1}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 74:
      return (top(vect))((Distributions.mode)(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}})::ForwardDiff.GradientNumber{0,Float64,Tuple{}})::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}
  end::Array{ForwardDiff.GradientNumber{0,Float64,Tuple{}},1}




____________________________
median
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64))))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)),(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7286::Float64
  ##div_a#7287::Float64
  ##deriv#7288::Float64
  ####G#7085#7289::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7290::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7291::Tuple{}
  ##########x#7077#7079#7083#7088#7292::Float64
  ########_var0#7080#7084#7089#7293::Tuple{}
  ##a#7294::Float64
  ##exp_a#7295::Float64
  ##deriv#7296::Float64
  ####G#7281#7297::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7282#7298::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7283#7299::Tuple{}
  ##########x#7077#7079#7083#7284#7300::Float64
  ########_var0#7080#7084#7285#7301::Tuple{}
  ##a1#7302::Float64
  ##a2#7303::Float64
  ######a#7102#7106#7304::Tuple{}
  ######b#7103#7107#7305::Tuple{}
  ######afactor#7104#7108#7306::Float64
  ######bfactor#7105#7109#7307::Float64
  ####_var0#7110#7308::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      ##a#7286 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7287 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7286::Float64))
      ##deriv#7288 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7287::Float64,##a#7286::Float64))))
      ####G#7085#7289 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7293 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7294 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7294::Float64,0)::Float64
      ##exp_a#7295 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7294::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7296 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7295::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7281#7297 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7285#7301 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7285#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7295::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7302 = GenSym(7)
      ##a2#7303 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7308 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7110#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7302::Float64,##a2#7303::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,GenSym(0))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7286::Float64
  ##div_a#7287::Float64
  ##deriv#7288::Float64
  ####G#7085#7289::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7290::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7291::Tuple{}
  ##########x#7077#7079#7083#7088#7292::Float64
  ########_var0#7080#7084#7089#7293::Tuple{}
  ##a#7294::Float64
  ##exp_a#7295::Float64
  ##deriv#7296::Float64
  ####G#7281#7297::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7282#7298::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7283#7299::Tuple{}
  ##########x#7077#7079#7083#7284#7300::Float64
  ########_var0#7080#7084#7285#7301::Tuple{}
  ##a1#7302::Float64
  ##a2#7303::Float64
  ######a#7102#7106#7304::Tuple{}
  ######b#7103#7107#7305::Tuple{}
  ######afactor#7104#7108#7306::Float64
  ######bfactor#7105#7109#7307::Float64
  ####_var0#7110#7308::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      ##a#7286 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7287 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7286::Float64))
      ##deriv#7288 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7287::Float64,##a#7286::Float64))))
      ####G#7085#7289 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7293 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7294 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7294::Float64,0)::Float64
      ##exp_a#7295 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7294::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7296 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7295::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7281#7297 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7285#7301 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7285#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7295::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7302 = GenSym(7)
      ##a2#7303 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7308 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7110#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7302::Float64,##a2#7303::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7286::Float64
  ##div_a#7287::Float64
  ##deriv#7288::Float64
  ####G#7085#7289::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7290::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7291::Tuple{}
  ##########x#7077#7079#7083#7088#7292::Float64
  ########_var0#7080#7084#7089#7293::Tuple{}
  ##a#7294::Float64
  ##exp_a#7295::Float64
  ##deriv#7296::Float64
  ####G#7281#7297::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7282#7298::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7283#7299::Tuple{}
  ##########x#7077#7079#7083#7284#7300::Float64
  ########_var0#7080#7084#7285#7301::Tuple{}
  ##a1#7302::Float64
  ##a2#7303::Float64
  ######a#7102#7106#7304::Tuple{}
  ######b#7103#7107#7305::Tuple{}
  ######afactor#7104#7108#7306::Float64
  ######bfactor#7105#7109#7307::Float64
  ####_var0#7110#7308::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      ##a#7286 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7287 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7286::Float64))
      ##deriv#7288 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7287::Float64,##a#7286::Float64))))
      ####G#7085#7289 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7293 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7294 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7294::Float64,0)::Float64
      ##exp_a#7295 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7294::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7296 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7295::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7281#7297 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7285#7301 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7285#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7295::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7302 = GenSym(7)
      ##a2#7303 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7308 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7110#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7302::Float64,##a2#7303::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7286::Float64
  ##div_a#7287::Float64
  ##deriv#7288::Float64
  ####G#7085#7289::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7290::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7291::Tuple{}
  ##########x#7077#7079#7083#7088#7292::Float64
  ########_var0#7080#7084#7089#7293::Tuple{}
  ##a#7294::Float64
  ##exp_a#7295::Float64
  ##deriv#7296::Float64
  ####G#7281#7297::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7282#7298::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7283#7299::Tuple{}
  ##########x#7077#7079#7083#7284#7300::Float64
  ########_var0#7080#7084#7285#7301::Tuple{}
  ##a1#7302::Float64
  ##a2#7303::Float64
  ######a#7102#7106#7304::Tuple{}
  ######b#7103#7107#7305::Tuple{}
  ######afactor#7104#7108#7306::Float64
  ######bfactor#7105#7109#7307::Float64
  ####_var0#7110#7308::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      ##a#7286 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7287 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7286::Float64))
      ##deriv#7288 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7287::Float64,##a#7286::Float64))))
      ####G#7085#7289 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7293 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7294 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7294::Float64,0)::Float64
      ##exp_a#7295 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7294::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7296 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7295::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7281#7297 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7285#7301 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7285#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7295::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7302 = GenSym(7)
      ##a2#7303 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7308 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7110#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7302::Float64,##a2#7303::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7286::Float64
  ##div_a#7287::Float64
  ##deriv#7288::Float64
  ####G#7085#7289::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7290::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7291::Tuple{}
  ##########x#7077#7079#7083#7088#7292::Float64
  ########_var0#7080#7084#7089#7293::Tuple{}
  ##a#7294::Float64
  ##exp_a#7295::Float64
  ##deriv#7296::Float64
  ####G#7281#7297::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7282#7298::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7283#7299::Tuple{}
  ##########x#7077#7079#7083#7284#7300::Float64
  ########_var0#7080#7084#7285#7301::Tuple{}
  ##a1#7302::Float64
  ##a2#7303::Float64
  ######a#7102#7106#7304::Tuple{}
  ######b#7103#7107#7305::Tuple{}
  ######afactor#7104#7108#7306::Float64
  ######bfactor#7105#7109#7307::Float64
  ####_var0#7110#7308::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 61:
      ##a#7286 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7287 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7286::Float64))
      ##deriv#7288 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7287::Float64,##a#7286::Float64))))
      ####G#7085#7289 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7293 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7293 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(0) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7287::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7294 = (top(getfield))(GenSym(0),:value)::Float64
      GenSym(3) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,0.6931471805599453,0,##a#7294::Float64,0)::Float64
      ##exp_a#7295 = (Base.Math.nan_dom_err)(GenSym(3),(Base.box)(Base.Float64,(Base.add_float)(0.6931471805599453,##a#7294::Float64)))::Float64
      GenSym(5) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,0.6931471805599453,0)::Float64
      ##deriv#7296 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7295::Float64,(Base.Math.nan_dom_err)(GenSym(5),0.6931471805599453)::Float64))
      ####G#7281#7297 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7285#7301 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7285#7301 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7295::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(8) = (top(getfield))(GenSym(6),:value)::Float64
      ##a1#7302 = GenSym(7)
      ##a2#7303 = GenSym(8)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7308 = (top(tuple))()::Tuple{}
      goto 5
      ####_var0#7110#7308 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7302::Float64,##a2#7303::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
skewness
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ####fy#7061#7309::Float64
  ##xs#7310::Tuple{}
  ##xs#7311::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      GenSym(0) = (top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64
      ####fy#7061#7309 = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0)))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(3.0,####fy#7061#7309::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(3.0,####fy#7061#7309::Float64)::Bool,(Base.lt_float)(####fy#7061#7309::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7061#7309::Float64)),GenSym(0))::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      GenSym(1) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(1),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(3),GenSym(1))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(13) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(10),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(13),(Base.box)(Base.Float64,(Base.add_float)(GenSym(10),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7354::Float64
  ##div_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7085#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7359::Tuple{}
  ##########x#7077#7079#7083#7088#7360::Float64
  ########_var0#7080#7084#7089#7361::Tuple{}
  ######tup#7090#7092#7362::Tuple{}
  ####_var0#7093#7363::Tuple{}
  ######types#7091#7094#7364::Tuple{Type{Float64}}
  ##a#7365::Float64
  ####G#7097#7366::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7367::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7368::Tuple{}
  ##########x#7077#7079#7083#7100#7369::Float64
  ########_var0#7080#7084#7101#7370::Tuple{}
  ########tup#7076#7150#7154#7371::Tuple{}
  ########x#7077#7151#7155#7372::Float64
  ######_var0#7152#7156#7373::Tuple{}
  ########types#7091#7153#7157#7374::Tuple{Type{Float64}}
  ######tup#7090#7092#7375::Tuple{}
  ####_var0#7093#7376::Tuple{}
  ######types#7091#7094#7377::Tuple{Type{Float64}}
  ##a#7378::Float64
  ####G#7097#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7381::Tuple{}
  ##########x#7077#7079#7083#7100#7382::Float64
  ########_var0#7080#7084#7101#7383::Tuple{}
  ########tup#7076#7150#7154#7384::Tuple{}
  ########x#7077#7151#7155#7385::Float64
  ######_var0#7152#7156#7386::Tuple{}
  ########types#7091#7153#7157#7387::Tuple{Type{Float64}}
  ######tup#7090#7092#7388::Tuple{}
  ####_var0#7093#7389::Tuple{}
  ######types#7091#7094#7390::Tuple{Type{Float64}}
  ##a#7391::Float64
  ####G#7097#7392::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7393::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7394::Tuple{}
  ##########x#7077#7079#7083#7100#7395::Float64
  ########_var0#7080#7084#7101#7396::Tuple{}
  ##a#7397::Float64
  ##exp_a#7398::Float64
  ##deriv#7399::Float64
  ####G#7145#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7402::Tuple{}
  ##########x#7077#7079#7083#7148#7403::Float64
  ########_var0#7080#7084#7149#7404::Tuple{}
  ######a#7158#7160#7405::Tuple{}
  ######b#7159#7161#7406::Tuple{}
  ####_var0#7162#7407::Tuple{}
  ##a#7408::Float64
  ##exp_a#7409::Float64
  ##deriv#7410::Float64
  ####G#7219#7411::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7220#7412::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7221#7413::Tuple{}
  ##########x#7077#7079#7083#7222#7414::Float64
  ########_var0#7080#7084#7223#7415::Tuple{}
  ##a#7416::Float64
  ##exp_a#7417::Float64
  ##deriv#7418::Float64
  ####G#7145#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7421::Tuple{}
  ##########x#7077#7079#7083#7148#7422::Float64
  ########_var0#7080#7084#7149#7423::Tuple{}
  ########tup#7325#7328#7332#7424::Tuple{}
  ########x#7326#7329#7333#7425::Int64
  ######_var0#7330#7334#7426::Tuple{}
  ########types#7327#7331#7335#7427::Tuple{Type{Int64}}
  ##xs#7428::Tuple{}
  ##########tup#7076#7150#7154#7314#7429::Tuple{}
  ##########x#7077#7151#7155#7315#7430::Float64
  ########_var0#7152#7156#7316#7431::Tuple{}
  ##########types#7091#7153#7157#7317#7432::Tuple{Type{Float64}}
  ####a1#7318#7433::Float64
  ####a2#7319#7434::Float64
  ########a#7102#7106#7320#7435::Tuple{}
  ########b#7103#7107#7321#7436::Tuple{}
  ########afactor#7104#7108#7322#7437::Float64
  ########bfactor#7105#7109#7323#7438::Float64
  ######_var0#7110#7324#7439::Tuple{}
  ######a#7158#7160#7440::Tuple{}
  ######b#7159#7161#7441::Tuple{}
  ####_var0#7162#7442::Tuple{}
  ######a#7336#7338#7443::Tuple{}
  ######b#7337#7339#7444::Tuple{}
  ####_var0#7340#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ##div_a#7448::Float64
  ####afactor#7346#7449::Float64
  ####bfactor#7347#7450::Float64
  ########a#7102#7341#7348#7451::Tuple{}
  ########b#7103#7342#7349#7452::Tuple{}
  ########afactor#7104#7343#7350#7453::Float64
  ########bfactor#7105#7344#7351#7454::Float64
  ######_var0#7345#7352#7455::Tuple{}
  ######types#7224#7353#7456::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      ##a#7354 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7355 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7354::Float64))
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7355::Float64,##a#7354::Float64))))
      ####G#7085#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7361 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7363 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7365 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7365::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      ####G#7097#7366 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7370 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7365::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7373 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7376 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7378 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7378::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      ####G#7097#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7383 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7378::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7386 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7389 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7391 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7391::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      ####G#7097#7392 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7396 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7391::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7431 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7152#7156#7316#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7433 = GenSym(24)
      ####a2#7319#7434 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7439 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7110#7324#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7433::Float64,####a2#7319#7434::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7442 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7162#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7416 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7417 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7418 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7145#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7423 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7426 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7330#7334#7426 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7445 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7340#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7397 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7398 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7399 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7404 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7080#7084#7149#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7398::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7407 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7162#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7408 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,1.5,0)::Float64
      ##exp_a#7409 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,GenSym(19),0)::Float64
      ##deriv#7410 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,GenSym(19))))::Float64))
      ####G#7219#7411 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7223#7415 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7223#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7409::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7446 = GenSym(28)
      ##a2#7447 = GenSym(29)
      ##div_a#7448 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7446::Float64,##a2#7447::Float64))
      ####afactor#7346#7449 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7447::Float64))
      ####bfactor#7347#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7446::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7447::Float64,##a2#7447::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7455 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7345#7352#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  ##xs#7312::Tuple{}
  ##xs#7313::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(9),0,1.5,0)::Float64
      return (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g3::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(3.0,g2::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)),g1::Float64)))))),(Base.Math.nan_dom_err)(GenSym(12),(Base.box)(Base.Float64,(Base.add_float)(GenSym(9),1.5)))::Float64))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7354::Float64
  ##div_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7085#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7359::Tuple{}
  ##########x#7077#7079#7083#7088#7360::Float64
  ########_var0#7080#7084#7089#7361::Tuple{}
  ######tup#7090#7092#7362::Tuple{}
  ####_var0#7093#7363::Tuple{}
  ######types#7091#7094#7364::Tuple{Type{Float64}}
  ##a#7365::Float64
  ####G#7097#7366::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7367::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7368::Tuple{}
  ##########x#7077#7079#7083#7100#7369::Float64
  ########_var0#7080#7084#7101#7370::Tuple{}
  ########tup#7076#7150#7154#7371::Tuple{}
  ########x#7077#7151#7155#7372::Float64
  ######_var0#7152#7156#7373::Tuple{}
  ########types#7091#7153#7157#7374::Tuple{Type{Float64}}
  ######tup#7090#7092#7375::Tuple{}
  ####_var0#7093#7376::Tuple{}
  ######types#7091#7094#7377::Tuple{Type{Float64}}
  ##a#7378::Float64
  ####G#7097#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7381::Tuple{}
  ##########x#7077#7079#7083#7100#7382::Float64
  ########_var0#7080#7084#7101#7383::Tuple{}
  ########tup#7076#7150#7154#7384::Tuple{}
  ########x#7077#7151#7155#7385::Float64
  ######_var0#7152#7156#7386::Tuple{}
  ########types#7091#7153#7157#7387::Tuple{Type{Float64}}
  ######tup#7090#7092#7388::Tuple{}
  ####_var0#7093#7389::Tuple{}
  ######types#7091#7094#7390::Tuple{Type{Float64}}
  ##a#7391::Float64
  ####G#7097#7392::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7393::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7394::Tuple{}
  ##########x#7077#7079#7083#7100#7395::Float64
  ########_var0#7080#7084#7101#7396::Tuple{}
  ##a#7397::Float64
  ##exp_a#7398::Float64
  ##deriv#7399::Float64
  ####G#7145#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7402::Tuple{}
  ##########x#7077#7079#7083#7148#7403::Float64
  ########_var0#7080#7084#7149#7404::Tuple{}
  ######a#7158#7160#7405::Tuple{}
  ######b#7159#7161#7406::Tuple{}
  ####_var0#7162#7407::Tuple{}
  ##a#7408::Float64
  ##exp_a#7409::Float64
  ##deriv#7410::Float64
  ####G#7219#7411::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7220#7412::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7221#7413::Tuple{}
  ##########x#7077#7079#7083#7222#7414::Float64
  ########_var0#7080#7084#7223#7415::Tuple{}
  ##a#7416::Float64
  ##exp_a#7417::Float64
  ##deriv#7418::Float64
  ####G#7145#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7421::Tuple{}
  ##########x#7077#7079#7083#7148#7422::Float64
  ########_var0#7080#7084#7149#7423::Tuple{}
  ########tup#7325#7328#7332#7424::Tuple{}
  ########x#7326#7329#7333#7425::Int64
  ######_var0#7330#7334#7426::Tuple{}
  ########types#7327#7331#7335#7427::Tuple{Type{Int64}}
  ##xs#7428::Tuple{}
  ##########tup#7076#7150#7154#7314#7429::Tuple{}
  ##########x#7077#7151#7155#7315#7430::Float64
  ########_var0#7152#7156#7316#7431::Tuple{}
  ##########types#7091#7153#7157#7317#7432::Tuple{Type{Float64}}
  ####a1#7318#7433::Float64
  ####a2#7319#7434::Float64
  ########a#7102#7106#7320#7435::Tuple{}
  ########b#7103#7107#7321#7436::Tuple{}
  ########afactor#7104#7108#7322#7437::Float64
  ########bfactor#7105#7109#7323#7438::Float64
  ######_var0#7110#7324#7439::Tuple{}
  ######a#7158#7160#7440::Tuple{}
  ######b#7159#7161#7441::Tuple{}
  ####_var0#7162#7442::Tuple{}
  ######a#7336#7338#7443::Tuple{}
  ######b#7337#7339#7444::Tuple{}
  ####_var0#7340#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ##div_a#7448::Float64
  ####afactor#7346#7449::Float64
  ####bfactor#7347#7450::Float64
  ########a#7102#7341#7348#7451::Tuple{}
  ########b#7103#7342#7349#7452::Tuple{}
  ########afactor#7104#7343#7350#7453::Float64
  ########bfactor#7105#7344#7351#7454::Float64
  ######_var0#7345#7352#7455::Tuple{}
  ######types#7224#7353#7456::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      ##a#7354 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7355 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7354::Float64))
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7355::Float64,##a#7354::Float64))))
      ####G#7085#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7361 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7363 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7365 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7365::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      ####G#7097#7366 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7370 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7365::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7373 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7376 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7378 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7378::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      ####G#7097#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7383 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7378::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7386 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7389 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7391 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7391::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      ####G#7097#7392 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7396 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7391::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7431 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7152#7156#7316#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7433 = GenSym(24)
      ####a2#7319#7434 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7439 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7110#7324#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7433::Float64,####a2#7319#7434::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7442 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7162#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7416 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7417 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7418 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7145#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7423 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7426 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7330#7334#7426 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7445 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7340#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7397 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7398 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7399 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7404 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7080#7084#7149#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7398::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7407 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7162#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7408 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,1.5,0)::Float64
      ##exp_a#7409 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,GenSym(19),0)::Float64
      ##deriv#7410 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,GenSym(19))))::Float64))
      ####G#7219#7411 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7223#7415 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7223#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7409::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7446 = GenSym(28)
      ##a2#7447 = GenSym(29)
      ##div_a#7448 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7446::Float64,##a2#7447::Float64))
      ####afactor#7346#7449 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7447::Float64))
      ####bfactor#7347#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7446::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7447::Float64,##a2#7447::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7455 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7345#7352#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7354::Float64
  ##div_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7085#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7359::Tuple{}
  ##########x#7077#7079#7083#7088#7360::Float64
  ########_var0#7080#7084#7089#7361::Tuple{}
  ######tup#7090#7092#7362::Tuple{}
  ####_var0#7093#7363::Tuple{}
  ######types#7091#7094#7364::Tuple{Type{Float64}}
  ##a#7365::Float64
  ####G#7097#7366::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7367::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7368::Tuple{}
  ##########x#7077#7079#7083#7100#7369::Float64
  ########_var0#7080#7084#7101#7370::Tuple{}
  ########tup#7076#7150#7154#7371::Tuple{}
  ########x#7077#7151#7155#7372::Float64
  ######_var0#7152#7156#7373::Tuple{}
  ########types#7091#7153#7157#7374::Tuple{Type{Float64}}
  ######tup#7090#7092#7375::Tuple{}
  ####_var0#7093#7376::Tuple{}
  ######types#7091#7094#7377::Tuple{Type{Float64}}
  ##a#7378::Float64
  ####G#7097#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7381::Tuple{}
  ##########x#7077#7079#7083#7100#7382::Float64
  ########_var0#7080#7084#7101#7383::Tuple{}
  ########tup#7076#7150#7154#7384::Tuple{}
  ########x#7077#7151#7155#7385::Float64
  ######_var0#7152#7156#7386::Tuple{}
  ########types#7091#7153#7157#7387::Tuple{Type{Float64}}
  ######tup#7090#7092#7388::Tuple{}
  ####_var0#7093#7389::Tuple{}
  ######types#7091#7094#7390::Tuple{Type{Float64}}
  ##a#7391::Float64
  ####G#7097#7392::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7393::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7394::Tuple{}
  ##########x#7077#7079#7083#7100#7395::Float64
  ########_var0#7080#7084#7101#7396::Tuple{}
  ##a#7397::Float64
  ##exp_a#7398::Float64
  ##deriv#7399::Float64
  ####G#7145#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7402::Tuple{}
  ##########x#7077#7079#7083#7148#7403::Float64
  ########_var0#7080#7084#7149#7404::Tuple{}
  ######a#7158#7160#7405::Tuple{}
  ######b#7159#7161#7406::Tuple{}
  ####_var0#7162#7407::Tuple{}
  ##a#7408::Float64
  ##exp_a#7409::Float64
  ##deriv#7410::Float64
  ####G#7219#7411::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7220#7412::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7221#7413::Tuple{}
  ##########x#7077#7079#7083#7222#7414::Float64
  ########_var0#7080#7084#7223#7415::Tuple{}
  ##a#7416::Float64
  ##exp_a#7417::Float64
  ##deriv#7418::Float64
  ####G#7145#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7421::Tuple{}
  ##########x#7077#7079#7083#7148#7422::Float64
  ########_var0#7080#7084#7149#7423::Tuple{}
  ########tup#7325#7328#7332#7424::Tuple{}
  ########x#7326#7329#7333#7425::Int64
  ######_var0#7330#7334#7426::Tuple{}
  ########types#7327#7331#7335#7427::Tuple{Type{Int64}}
  ##xs#7428::Tuple{}
  ##########tup#7076#7150#7154#7314#7429::Tuple{}
  ##########x#7077#7151#7155#7315#7430::Float64
  ########_var0#7152#7156#7316#7431::Tuple{}
  ##########types#7091#7153#7157#7317#7432::Tuple{Type{Float64}}
  ####a1#7318#7433::Float64
  ####a2#7319#7434::Float64
  ########a#7102#7106#7320#7435::Tuple{}
  ########b#7103#7107#7321#7436::Tuple{}
  ########afactor#7104#7108#7322#7437::Float64
  ########bfactor#7105#7109#7323#7438::Float64
  ######_var0#7110#7324#7439::Tuple{}
  ######a#7158#7160#7440::Tuple{}
  ######b#7159#7161#7441::Tuple{}
  ####_var0#7162#7442::Tuple{}
  ######a#7336#7338#7443::Tuple{}
  ######b#7337#7339#7444::Tuple{}
  ####_var0#7340#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ##div_a#7448::Float64
  ####afactor#7346#7449::Float64
  ####bfactor#7347#7450::Float64
  ########a#7102#7341#7348#7451::Tuple{}
  ########b#7103#7342#7349#7452::Tuple{}
  ########afactor#7104#7343#7350#7453::Float64
  ########bfactor#7105#7344#7351#7454::Float64
  ######_var0#7345#7352#7455::Tuple{}
  ######types#7224#7353#7456::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      ##a#7354 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7355 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7354::Float64))
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7355::Float64,##a#7354::Float64))))
      ####G#7085#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7361 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7363 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7365 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7365::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      ####G#7097#7366 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7370 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7365::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7373 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7376 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7378 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7378::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      ####G#7097#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7383 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7378::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7386 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7389 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7391 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7391::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      ####G#7097#7392 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7396 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7391::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7431 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7152#7156#7316#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7433 = GenSym(24)
      ####a2#7319#7434 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7439 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7110#7324#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7433::Float64,####a2#7319#7434::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7442 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7162#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7416 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7417 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7418 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7145#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7423 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7426 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7330#7334#7426 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7445 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7340#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7397 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7398 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7399 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7404 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7080#7084#7149#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7398::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7407 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7162#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7408 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,1.5,0)::Float64
      ##exp_a#7409 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,GenSym(19),0)::Float64
      ##deriv#7410 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,GenSym(19))))::Float64))
      ####G#7219#7411 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7223#7415 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7223#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7409::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7446 = GenSym(28)
      ##a2#7447 = GenSym(29)
      ##div_a#7448 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7446::Float64,##a2#7447::Float64))
      ####afactor#7346#7449 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7447::Float64))
      ####bfactor#7347#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7446::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7447::Float64,##a2#7447::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7455 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7345#7352#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7354::Float64
  ##div_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7085#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7359::Tuple{}
  ##########x#7077#7079#7083#7088#7360::Float64
  ########_var0#7080#7084#7089#7361::Tuple{}
  ######tup#7090#7092#7362::Tuple{}
  ####_var0#7093#7363::Tuple{}
  ######types#7091#7094#7364::Tuple{Type{Float64}}
  ##a#7365::Float64
  ####G#7097#7366::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7367::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7368::Tuple{}
  ##########x#7077#7079#7083#7100#7369::Float64
  ########_var0#7080#7084#7101#7370::Tuple{}
  ########tup#7076#7150#7154#7371::Tuple{}
  ########x#7077#7151#7155#7372::Float64
  ######_var0#7152#7156#7373::Tuple{}
  ########types#7091#7153#7157#7374::Tuple{Type{Float64}}
  ######tup#7090#7092#7375::Tuple{}
  ####_var0#7093#7376::Tuple{}
  ######types#7091#7094#7377::Tuple{Type{Float64}}
  ##a#7378::Float64
  ####G#7097#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7381::Tuple{}
  ##########x#7077#7079#7083#7100#7382::Float64
  ########_var0#7080#7084#7101#7383::Tuple{}
  ########tup#7076#7150#7154#7384::Tuple{}
  ########x#7077#7151#7155#7385::Float64
  ######_var0#7152#7156#7386::Tuple{}
  ########types#7091#7153#7157#7387::Tuple{Type{Float64}}
  ######tup#7090#7092#7388::Tuple{}
  ####_var0#7093#7389::Tuple{}
  ######types#7091#7094#7390::Tuple{Type{Float64}}
  ##a#7391::Float64
  ####G#7097#7392::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7393::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7394::Tuple{}
  ##########x#7077#7079#7083#7100#7395::Float64
  ########_var0#7080#7084#7101#7396::Tuple{}
  ##a#7397::Float64
  ##exp_a#7398::Float64
  ##deriv#7399::Float64
  ####G#7145#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7402::Tuple{}
  ##########x#7077#7079#7083#7148#7403::Float64
  ########_var0#7080#7084#7149#7404::Tuple{}
  ######a#7158#7160#7405::Tuple{}
  ######b#7159#7161#7406::Tuple{}
  ####_var0#7162#7407::Tuple{}
  ##a#7408::Float64
  ##exp_a#7409::Float64
  ##deriv#7410::Float64
  ####G#7219#7411::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7220#7412::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7221#7413::Tuple{}
  ##########x#7077#7079#7083#7222#7414::Float64
  ########_var0#7080#7084#7223#7415::Tuple{}
  ##a#7416::Float64
  ##exp_a#7417::Float64
  ##deriv#7418::Float64
  ####G#7145#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7421::Tuple{}
  ##########x#7077#7079#7083#7148#7422::Float64
  ########_var0#7080#7084#7149#7423::Tuple{}
  ########tup#7325#7328#7332#7424::Tuple{}
  ########x#7326#7329#7333#7425::Int64
  ######_var0#7330#7334#7426::Tuple{}
  ########types#7327#7331#7335#7427::Tuple{Type{Int64}}
  ##xs#7428::Tuple{}
  ##########tup#7076#7150#7154#7314#7429::Tuple{}
  ##########x#7077#7151#7155#7315#7430::Float64
  ########_var0#7152#7156#7316#7431::Tuple{}
  ##########types#7091#7153#7157#7317#7432::Tuple{Type{Float64}}
  ####a1#7318#7433::Float64
  ####a2#7319#7434::Float64
  ########a#7102#7106#7320#7435::Tuple{}
  ########b#7103#7107#7321#7436::Tuple{}
  ########afactor#7104#7108#7322#7437::Float64
  ########bfactor#7105#7109#7323#7438::Float64
  ######_var0#7110#7324#7439::Tuple{}
  ######a#7158#7160#7440::Tuple{}
  ######b#7159#7161#7441::Tuple{}
  ####_var0#7162#7442::Tuple{}
  ######a#7336#7338#7443::Tuple{}
  ######b#7337#7339#7444::Tuple{}
  ####_var0#7340#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ##div_a#7448::Float64
  ####afactor#7346#7449::Float64
  ####bfactor#7347#7450::Float64
  ########a#7102#7341#7348#7451::Tuple{}
  ########b#7103#7342#7349#7452::Tuple{}
  ########afactor#7104#7343#7350#7453::Float64
  ########bfactor#7105#7344#7351#7454::Float64
  ######_var0#7345#7352#7455::Tuple{}
  ######types#7224#7353#7456::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      ##a#7354 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7355 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7354::Float64))
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7355::Float64,##a#7354::Float64))))
      ####G#7085#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7361 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7363 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7365 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7365::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      ####G#7097#7366 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7370 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7365::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7373 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7376 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7378 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7378::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      ####G#7097#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7383 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7378::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7386 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7389 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7391 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7391::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      ####G#7097#7392 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7396 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7391::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7431 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7152#7156#7316#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7433 = GenSym(24)
      ####a2#7319#7434 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7439 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7110#7324#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7433::Float64,####a2#7319#7434::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7442 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7162#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7416 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7417 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7418 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7145#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7423 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7426 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7330#7334#7426 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7445 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7340#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7397 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7398 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7399 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7404 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7080#7084#7149#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7398::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7407 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7162#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7408 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,1.5,0)::Float64
      ##exp_a#7409 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,GenSym(19),0)::Float64
      ##deriv#7410 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,GenSym(19))))::Float64))
      ####G#7219#7411 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7223#7415 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7223#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7409::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7446 = GenSym(28)
      ##a2#7447 = GenSym(29)
      ##div_a#7448 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7446::Float64,##a2#7447::Float64))
      ####afactor#7346#7449 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7447::Float64))
      ####bfactor#7347#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7446::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7447::Float64,##a2#7447::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7455 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7345#7352#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7354::Float64
  ##div_a#7355::Float64
  ##deriv#7356::Float64
  ####G#7085#7357::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7358::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7359::Tuple{}
  ##########x#7077#7079#7083#7088#7360::Float64
  ########_var0#7080#7084#7089#7361::Tuple{}
  ######tup#7090#7092#7362::Tuple{}
  ####_var0#7093#7363::Tuple{}
  ######types#7091#7094#7364::Tuple{Type{Float64}}
  ##a#7365::Float64
  ####G#7097#7366::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7367::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7368::Tuple{}
  ##########x#7077#7079#7083#7100#7369::Float64
  ########_var0#7080#7084#7101#7370::Tuple{}
  ########tup#7076#7150#7154#7371::Tuple{}
  ########x#7077#7151#7155#7372::Float64
  ######_var0#7152#7156#7373::Tuple{}
  ########types#7091#7153#7157#7374::Tuple{Type{Float64}}
  ######tup#7090#7092#7375::Tuple{}
  ####_var0#7093#7376::Tuple{}
  ######types#7091#7094#7377::Tuple{Type{Float64}}
  ##a#7378::Float64
  ####G#7097#7379::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7380::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7381::Tuple{}
  ##########x#7077#7079#7083#7100#7382::Float64
  ########_var0#7080#7084#7101#7383::Tuple{}
  ########tup#7076#7150#7154#7384::Tuple{}
  ########x#7077#7151#7155#7385::Float64
  ######_var0#7152#7156#7386::Tuple{}
  ########types#7091#7153#7157#7387::Tuple{Type{Float64}}
  ######tup#7090#7092#7388::Tuple{}
  ####_var0#7093#7389::Tuple{}
  ######types#7091#7094#7390::Tuple{Type{Float64}}
  ##a#7391::Float64
  ####G#7097#7392::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7393::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7394::Tuple{}
  ##########x#7077#7079#7083#7100#7395::Float64
  ########_var0#7080#7084#7101#7396::Tuple{}
  ##a#7397::Float64
  ##exp_a#7398::Float64
  ##deriv#7399::Float64
  ####G#7145#7400::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7401::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7402::Tuple{}
  ##########x#7077#7079#7083#7148#7403::Float64
  ########_var0#7080#7084#7149#7404::Tuple{}
  ######a#7158#7160#7405::Tuple{}
  ######b#7159#7161#7406::Tuple{}
  ####_var0#7162#7407::Tuple{}
  ##a#7408::Float64
  ##exp_a#7409::Float64
  ##deriv#7410::Float64
  ####G#7219#7411::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7220#7412::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7221#7413::Tuple{}
  ##########x#7077#7079#7083#7222#7414::Float64
  ########_var0#7080#7084#7223#7415::Tuple{}
  ##a#7416::Float64
  ##exp_a#7417::Float64
  ##deriv#7418::Float64
  ####G#7145#7419::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7420::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7421::Tuple{}
  ##########x#7077#7079#7083#7148#7422::Float64
  ########_var0#7080#7084#7149#7423::Tuple{}
  ########tup#7325#7328#7332#7424::Tuple{}
  ########x#7326#7329#7333#7425::Int64
  ######_var0#7330#7334#7426::Tuple{}
  ########types#7327#7331#7335#7427::Tuple{Type{Int64}}
  ##xs#7428::Tuple{}
  ##########tup#7076#7150#7154#7314#7429::Tuple{}
  ##########x#7077#7151#7155#7315#7430::Float64
  ########_var0#7152#7156#7316#7431::Tuple{}
  ##########types#7091#7153#7157#7317#7432::Tuple{Type{Float64}}
  ####a1#7318#7433::Float64
  ####a2#7319#7434::Float64
  ########a#7102#7106#7320#7435::Tuple{}
  ########b#7103#7107#7321#7436::Tuple{}
  ########afactor#7104#7108#7322#7437::Float64
  ########bfactor#7105#7109#7323#7438::Float64
  ######_var0#7110#7324#7439::Tuple{}
  ######a#7158#7160#7440::Tuple{}
  ######b#7159#7161#7441::Tuple{}
  ####_var0#7162#7442::Tuple{}
  ######a#7336#7338#7443::Tuple{}
  ######b#7337#7339#7444::Tuple{}
  ####_var0#7340#7445::Tuple{}
  ##a1#7446::Float64
  ##a2#7447::Float64
  ##div_a#7448::Float64
  ####afactor#7346#7449::Float64
  ####bfactor#7347#7450::Float64
  ########a#7102#7341#7348#7451::Tuple{}
  ########b#7103#7342#7349#7452::Tuple{}
  ########afactor#7104#7343#7350#7453::Float64
  ########bfactor#7105#7344#7351#7454::Float64
  ######_var0#7345#7352#7455::Tuple{}
  ######types#7224#7353#7456::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 75:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 76:
      ##a#7354 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7355 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7354::Float64))
      ##deriv#7356 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7355::Float64,##a#7354::Float64))))
      ####G#7085#7357 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7361 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7361 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7355::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 77:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7363 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7363 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7365 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7365::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7365::Float64,0)::Float64
      ####G#7097#7366 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7370 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7370 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7365::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 78:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7373 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7373 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7376 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7376 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7378 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7378::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7378::Float64,0)::Float64
      ####G#7097#7379 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7383 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7383 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7378::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 79:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7386 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7386 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7389 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7389 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7391 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7391::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7391::Float64,0)::Float64
      ####G#7097#7392 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7396 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7396 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7391::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 80:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7431 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7152#7156#7316#7431 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(24) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(25) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7433 = GenSym(24)
      ####a2#7319#7434 = GenSym(25)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7439 = (top(tuple))()::Tuple{}
      goto 33
      ######_var0#7110#7324#7439 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      33: 
      GenSym(26) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7433::Float64,####a2#7319#7434::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7442 = (top(tuple))()::Tuple{}
      goto 35
      ####_var0#7162#7442 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      35: 
      ##a#7416 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7417 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,3)))::ANY)::Float64
      ##deriv#7418 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7416::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(3,1))))))::Float64))
      ####G#7145#7419 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7423 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7423 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(23) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7417::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7426 = (top(tuple))()::Tuple{}
      goto 30
      ######_var0#7330#7334#7426 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7445 = (top(tuple))()::Tuple{}
      goto 37
      ####_var0#7340#7445 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      37: 
      ##a#7397 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7398 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7399 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7397::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7400 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7404 = (top(tuple))()::Tuple{}
      goto 22
      ########_var0#7080#7084#7149#7404 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      GenSym(15) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7398::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7407 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7162#7407 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7408 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(15),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(18) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,1.5,0)::Float64
      ##exp_a#7409 = (Base.Math.nan_dom_err)(GenSym(18),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,1.5)))::Float64
      GenSym(19) = (Base.box)(Base.Float64,(Base.sub_float)(1.5,(Base.box)(Float64,(Base.sitofp)(Float64,1))))
      GenSym(22) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,##a#7408::Float64,0,GenSym(19),0)::Float64
      ##deriv#7410 = (Base.box)(Base.Float64,(Base.mul_float)(1.5,(Base.Math.nan_dom_err)(GenSym(22),(Base.box)(Base.Float64,(Base.add_float)(##a#7408::Float64,GenSym(19))))::Float64))
      ####G#7219#7411 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7223#7415 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7223#7415 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      GenSym(27) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7409::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(28) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(26),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(23),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,2))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(29) = (top(getfield))(GenSym(27),:value)::Float64
      ##a1#7446 = GenSym(28)
      ##a2#7447 = GenSym(29)
      ##div_a#7448 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7446::Float64,##a2#7447::Float64))
      ####afactor#7346#7449 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7447::Float64))
      ####bfactor#7347#7450 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7446::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7447::Float64,##a2#7447::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7455 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7345#7352#7455 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7448::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 82:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
kurtosis
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ####fy#7061#7457::Float64
  ##xs#7458::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      GenSym(0) = (top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64
      ####fy#7061#7457 = (Base.box)(Float64,(Base.sitofp)(Float64,GenSym(0)))
      unless (Base.box)(Base.Bool,(Base.or_int)((Base.lt_float)(3.0,####fy#7061#7457::Float64)::Bool,(Base.box)(Base.Bool,(Base.and_int)((Base.box)(Base.Bool,(Base.and_int)((Base.eq_float)(3.0,####fy#7061#7457::Float64)::Bool,(Base.lt_float)(####fy#7061#7457::Float64,9.223372036854776e18)::Bool)),(Base.slt_int)((Base.box)(Int64,(Base.fptosi)(Int64,####fy#7061#7457::Float64)),GenSym(0))::Bool)))) goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64)))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      GenSym(1) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(3) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(1),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(3),GenSym(1))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      GenSym(4) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(4),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(6),GenSym(4))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      GenSym(7) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(7),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(9),GenSym(7))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(10) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(12) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(10),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(12),GenSym(10))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7459::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7461::Float64
  ##div_a#7462::Float64
  ##deriv#7463::Float64
  ####G#7085#7464::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7465::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7466::Tuple{}
  ##########x#7077#7079#7083#7088#7467::Float64
  ########_var0#7080#7084#7089#7468::Tuple{}
  ######tup#7090#7092#7469::Tuple{}
  ####_var0#7093#7470::Tuple{}
  ######types#7091#7094#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ####G#7097#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7475::Tuple{}
  ##########x#7077#7079#7083#7100#7476::Float64
  ########_var0#7080#7084#7101#7477::Tuple{}
  ########tup#7076#7150#7154#7478::Tuple{}
  ########x#7077#7151#7155#7479::Float64
  ######_var0#7152#7156#7480::Tuple{}
  ########types#7091#7153#7157#7481::Tuple{Type{Float64}}
  ######tup#7090#7092#7482::Tuple{}
  ####_var0#7093#7483::Tuple{}
  ######types#7091#7094#7484::Tuple{Type{Float64}}
  ##a#7485::Float64
  ####G#7097#7486::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7487::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7488::Tuple{}
  ##########x#7077#7079#7083#7100#7489::Float64
  ########_var0#7080#7084#7101#7490::Tuple{}
  ########tup#7076#7150#7154#7491::Tuple{}
  ########x#7077#7151#7155#7492::Float64
  ######_var0#7152#7156#7493::Tuple{}
  ########types#7091#7153#7157#7494::Tuple{Type{Float64}}
  ######tup#7090#7092#7495::Tuple{}
  ####_var0#7093#7496::Tuple{}
  ######types#7091#7094#7497::Tuple{Type{Float64}}
  ##a#7498::Float64
  ####G#7097#7499::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7500::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7501::Tuple{}
  ##########x#7077#7079#7083#7100#7502::Float64
  ########_var0#7080#7084#7101#7503::Tuple{}
  ########tup#7076#7150#7154#7504::Tuple{}
  ########x#7077#7151#7155#7505::Float64
  ######_var0#7152#7156#7506::Tuple{}
  ########types#7091#7153#7157#7507::Tuple{Type{Float64}}
  ######tup#7090#7092#7508::Tuple{}
  ####_var0#7093#7509::Tuple{}
  ######types#7091#7094#7510::Tuple{Type{Float64}}
  ##a#7511::Float64
  ####G#7097#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7514::Tuple{}
  ##########x#7077#7079#7083#7100#7515::Float64
  ########_var0#7080#7084#7101#7516::Tuple{}
  ##a#7517::Float64
  ##exp_a#7518::Float64
  ##deriv#7519::Float64
  ####G#7145#7520::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7521::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7522::Tuple{}
  ##########x#7077#7079#7083#7148#7523::Float64
  ########_var0#7080#7084#7149#7524::Tuple{}
  ######a#7158#7160#7525::Tuple{}
  ######b#7159#7161#7526::Tuple{}
  ####_var0#7162#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7145#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7533::Tuple{}
  ##########x#7077#7079#7083#7148#7534::Float64
  ########_var0#7080#7084#7149#7535::Tuple{}
  ##a#7536::Float64
  ##exp_a#7537::Float64
  ##deriv#7538::Float64
  ####G#7145#7539::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7540::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7541::Tuple{}
  ##########x#7077#7079#7083#7148#7542::Float64
  ########_var0#7080#7084#7149#7543::Tuple{}
  ########tup#7325#7328#7332#7544::Tuple{}
  ########x#7326#7329#7333#7545::Int64
  ######_var0#7330#7334#7546::Tuple{}
  ########types#7327#7331#7335#7547::Tuple{Type{Int64}}
  ##xs#7548::Tuple{}
  ##########tup#7076#7150#7154#7314#7549::Tuple{}
  ##########x#7077#7151#7155#7315#7550::Float64
  ########_var0#7152#7156#7316#7551::Tuple{}
  ##########types#7091#7153#7157#7317#7552::Tuple{Type{Float64}}
  ####a1#7318#7553::Float64
  ####a2#7319#7554::Float64
  ########a#7102#7106#7320#7555::Tuple{}
  ########b#7103#7107#7321#7556::Tuple{}
  ########afactor#7104#7108#7322#7557::Float64
  ########bfactor#7105#7109#7323#7558::Float64
  ######_var0#7110#7324#7559::Tuple{}
  ######a#7158#7160#7560::Tuple{}
  ######b#7159#7161#7561::Tuple{}
  ####_var0#7162#7562::Tuple{}
  ######a#7336#7338#7563::Tuple{}
  ######b#7337#7339#7564::Tuple{}
  ####_var0#7340#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ##div_a#7568::Float64
  ####afactor#7346#7569::Float64
  ####bfactor#7347#7570::Float64
  ########a#7102#7341#7348#7571::Tuple{}
  ########b#7103#7342#7349#7572::Tuple{}
  ########afactor#7104#7343#7350#7573::Float64
  ########bfactor#7105#7344#7351#7574::Float64
  ######_var0#7345#7352#7575::Tuple{}
  ######types#7224#7353#7576::Tuple{Type{Float64}}
  ######types#7091#7460#7577::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      ##a#7461 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7462 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7461::Float64))
      ##deriv#7463 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7462::Float64,##a#7461::Float64))))
      ####G#7085#7464 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7468 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7462::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7470 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7472 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7472::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      ####G#7097#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7477 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7472::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7480 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7483 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7485 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7485::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      ####G#7097#7486 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7490 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7485::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7493 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7496 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7496 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7498 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7498::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      ####G#7097#7499 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7503 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7503 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7498::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7506 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7152#7156#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7509 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7093#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7511 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7511::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      ####G#7097#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7516 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7101#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7511::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7551 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7152#7156#7316#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7553 = GenSym(22)
      ####a2#7319#7554 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7559 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7110#7324#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7553::Float64,####a2#7319#7554::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7562 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7162#7562 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7536 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7537 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7538 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7539 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7543 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7080#7084#7149#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7537::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7546 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7330#7334#7546 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7565 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7340#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7517 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7518 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7519 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7520 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7524 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7524 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7518::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7527 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7162#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7528 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7535 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7080#7084#7149#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7566 = GenSym(26)
      ##a2#7567 = GenSym(27)
      ##div_a#7568 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7566::Float64,##a2#7567::Float64))
      ####afactor#7346#7569 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7567::Float64))
      ####bfactor#7347#7570 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7566::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7567::Float64,##a2#7567::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7575 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7345#7352#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7568::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7459::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  iα::Float64
  g1::Float64
  g2::Float64
  g3::Float64
  g4::Float64
  ##xs#7459::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      iα = (Base.box)(Base.Float64,(Base.div_float)(1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      GenSym(0) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,iα::Float64))
      GenSym(2) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      g1 = (Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      GenSym(3) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(2.0,iα::Float64))))
      GenSym(5) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(3),0)::Float64
      g2 = (Base.Math.nan_dom_err)(GenSym(5),GenSym(3))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      GenSym(6) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(3.0,iα::Float64))))
      GenSym(8) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(6),0)::Float64
      g3 = (Base.Math.nan_dom_err)(GenSym(8),GenSym(6))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      GenSym(9) = (Base.box)(Base.Float64,(Base.sub_float)(1.0,(Base.box)(Base.Float64,(Base.mul_float)(4.0,iα::Float64))))
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(9),0)::Float64
      g4 = (Base.Math.nan_dom_err)(GenSym(11),GenSym(9))::Float64 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      return (Base.box)(Base.Float64,(Base.sub_float)((Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.sub_float)(g4::Float64,(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Base.Float64,(Base.mul_float)(4.0,g3::Float64)),g1::Float64)))),(Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,3)),(Base.box)(Base.Float64,(Base.mul_float)(g2::Float64,g2::Float64)))))),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)((Base.box)(Base.Float64,(Base.sub_float)(g2::Float64,(Base.box)(Base.Float64,(Base.mul_float)(g1::Float64,g1::Float64)))),(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2))))::Float64)),6.0))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7461::Float64
  ##div_a#7462::Float64
  ##deriv#7463::Float64
  ####G#7085#7464::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7465::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7466::Tuple{}
  ##########x#7077#7079#7083#7088#7467::Float64
  ########_var0#7080#7084#7089#7468::Tuple{}
  ######tup#7090#7092#7469::Tuple{}
  ####_var0#7093#7470::Tuple{}
  ######types#7091#7094#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ####G#7097#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7475::Tuple{}
  ##########x#7077#7079#7083#7100#7476::Float64
  ########_var0#7080#7084#7101#7477::Tuple{}
  ########tup#7076#7150#7154#7478::Tuple{}
  ########x#7077#7151#7155#7479::Float64
  ######_var0#7152#7156#7480::Tuple{}
  ########types#7091#7153#7157#7481::Tuple{Type{Float64}}
  ######tup#7090#7092#7482::Tuple{}
  ####_var0#7093#7483::Tuple{}
  ######types#7091#7094#7484::Tuple{Type{Float64}}
  ##a#7485::Float64
  ####G#7097#7486::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7487::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7488::Tuple{}
  ##########x#7077#7079#7083#7100#7489::Float64
  ########_var0#7080#7084#7101#7490::Tuple{}
  ########tup#7076#7150#7154#7491::Tuple{}
  ########x#7077#7151#7155#7492::Float64
  ######_var0#7152#7156#7493::Tuple{}
  ########types#7091#7153#7157#7494::Tuple{Type{Float64}}
  ######tup#7090#7092#7495::Tuple{}
  ####_var0#7093#7496::Tuple{}
  ######types#7091#7094#7497::Tuple{Type{Float64}}
  ##a#7498::Float64
  ####G#7097#7499::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7500::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7501::Tuple{}
  ##########x#7077#7079#7083#7100#7502::Float64
  ########_var0#7080#7084#7101#7503::Tuple{}
  ########tup#7076#7150#7154#7504::Tuple{}
  ########x#7077#7151#7155#7505::Float64
  ######_var0#7152#7156#7506::Tuple{}
  ########types#7091#7153#7157#7507::Tuple{Type{Float64}}
  ######tup#7090#7092#7508::Tuple{}
  ####_var0#7093#7509::Tuple{}
  ######types#7091#7094#7510::Tuple{Type{Float64}}
  ##a#7511::Float64
  ####G#7097#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7514::Tuple{}
  ##########x#7077#7079#7083#7100#7515::Float64
  ########_var0#7080#7084#7101#7516::Tuple{}
  ##a#7517::Float64
  ##exp_a#7518::Float64
  ##deriv#7519::Float64
  ####G#7145#7520::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7521::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7522::Tuple{}
  ##########x#7077#7079#7083#7148#7523::Float64
  ########_var0#7080#7084#7149#7524::Tuple{}
  ######a#7158#7160#7525::Tuple{}
  ######b#7159#7161#7526::Tuple{}
  ####_var0#7162#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7145#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7533::Tuple{}
  ##########x#7077#7079#7083#7148#7534::Float64
  ########_var0#7080#7084#7149#7535::Tuple{}
  ##a#7536::Float64
  ##exp_a#7537::Float64
  ##deriv#7538::Float64
  ####G#7145#7539::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7540::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7541::Tuple{}
  ##########x#7077#7079#7083#7148#7542::Float64
  ########_var0#7080#7084#7149#7543::Tuple{}
  ########tup#7325#7328#7332#7544::Tuple{}
  ########x#7326#7329#7333#7545::Int64
  ######_var0#7330#7334#7546::Tuple{}
  ########types#7327#7331#7335#7547::Tuple{Type{Int64}}
  ##xs#7548::Tuple{}
  ##########tup#7076#7150#7154#7314#7549::Tuple{}
  ##########x#7077#7151#7155#7315#7550::Float64
  ########_var0#7152#7156#7316#7551::Tuple{}
  ##########types#7091#7153#7157#7317#7552::Tuple{Type{Float64}}
  ####a1#7318#7553::Float64
  ####a2#7319#7554::Float64
  ########a#7102#7106#7320#7555::Tuple{}
  ########b#7103#7107#7321#7556::Tuple{}
  ########afactor#7104#7108#7322#7557::Float64
  ########bfactor#7105#7109#7323#7558::Float64
  ######_var0#7110#7324#7559::Tuple{}
  ######a#7158#7160#7560::Tuple{}
  ######b#7159#7161#7561::Tuple{}
  ####_var0#7162#7562::Tuple{}
  ######a#7336#7338#7563::Tuple{}
  ######b#7337#7339#7564::Tuple{}
  ####_var0#7340#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ##div_a#7568::Float64
  ####afactor#7346#7569::Float64
  ####bfactor#7347#7570::Float64
  ########a#7102#7341#7348#7571::Tuple{}
  ########b#7103#7342#7349#7572::Tuple{}
  ########afactor#7104#7343#7350#7573::Float64
  ########bfactor#7105#7344#7351#7574::Float64
  ######_var0#7345#7352#7575::Tuple{}
  ######types#7224#7353#7576::Tuple{Type{Float64}}
  ######types#7091#7460#7577::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      ##a#7461 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7462 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7461::Float64))
      ##deriv#7463 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7462::Float64,##a#7461::Float64))))
      ####G#7085#7464 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7468 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7462::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7470 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7472 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7472::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      ####G#7097#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7477 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7472::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7480 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7483 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7485 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7485::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      ####G#7097#7486 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7490 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7485::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7493 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7496 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7496 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7498 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7498::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      ####G#7097#7499 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7503 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7503 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7498::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7506 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7152#7156#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7509 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7093#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7511 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7511::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      ####G#7097#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7516 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7101#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7511::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7551 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7152#7156#7316#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7553 = GenSym(22)
      ####a2#7319#7554 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7559 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7110#7324#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7553::Float64,####a2#7319#7554::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7562 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7162#7562 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7536 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7537 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7538 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7539 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7543 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7080#7084#7149#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7537::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7546 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7330#7334#7546 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7565 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7340#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7517 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7518 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7519 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7520 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7524 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7524 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7518::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7527 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7162#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7528 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7535 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7080#7084#7149#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7566 = GenSym(26)
      ##a2#7567 = GenSym(27)
      ##div_a#7568 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7566::Float64,##a2#7567::Float64))
      ####afactor#7346#7569 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7567::Float64))
      ####bfactor#7347#7570 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7566::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7567::Float64,##a2#7567::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7575 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7345#7352#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7568::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7461::Float64
  ##div_a#7462::Float64
  ##deriv#7463::Float64
  ####G#7085#7464::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7465::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7466::Tuple{}
  ##########x#7077#7079#7083#7088#7467::Float64
  ########_var0#7080#7084#7089#7468::Tuple{}
  ######tup#7090#7092#7469::Tuple{}
  ####_var0#7093#7470::Tuple{}
  ######types#7091#7094#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ####G#7097#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7475::Tuple{}
  ##########x#7077#7079#7083#7100#7476::Float64
  ########_var0#7080#7084#7101#7477::Tuple{}
  ########tup#7076#7150#7154#7478::Tuple{}
  ########x#7077#7151#7155#7479::Float64
  ######_var0#7152#7156#7480::Tuple{}
  ########types#7091#7153#7157#7481::Tuple{Type{Float64}}
  ######tup#7090#7092#7482::Tuple{}
  ####_var0#7093#7483::Tuple{}
  ######types#7091#7094#7484::Tuple{Type{Float64}}
  ##a#7485::Float64
  ####G#7097#7486::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7487::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7488::Tuple{}
  ##########x#7077#7079#7083#7100#7489::Float64
  ########_var0#7080#7084#7101#7490::Tuple{}
  ########tup#7076#7150#7154#7491::Tuple{}
  ########x#7077#7151#7155#7492::Float64
  ######_var0#7152#7156#7493::Tuple{}
  ########types#7091#7153#7157#7494::Tuple{Type{Float64}}
  ######tup#7090#7092#7495::Tuple{}
  ####_var0#7093#7496::Tuple{}
  ######types#7091#7094#7497::Tuple{Type{Float64}}
  ##a#7498::Float64
  ####G#7097#7499::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7500::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7501::Tuple{}
  ##########x#7077#7079#7083#7100#7502::Float64
  ########_var0#7080#7084#7101#7503::Tuple{}
  ########tup#7076#7150#7154#7504::Tuple{}
  ########x#7077#7151#7155#7505::Float64
  ######_var0#7152#7156#7506::Tuple{}
  ########types#7091#7153#7157#7507::Tuple{Type{Float64}}
  ######tup#7090#7092#7508::Tuple{}
  ####_var0#7093#7509::Tuple{}
  ######types#7091#7094#7510::Tuple{Type{Float64}}
  ##a#7511::Float64
  ####G#7097#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7514::Tuple{}
  ##########x#7077#7079#7083#7100#7515::Float64
  ########_var0#7080#7084#7101#7516::Tuple{}
  ##a#7517::Float64
  ##exp_a#7518::Float64
  ##deriv#7519::Float64
  ####G#7145#7520::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7521::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7522::Tuple{}
  ##########x#7077#7079#7083#7148#7523::Float64
  ########_var0#7080#7084#7149#7524::Tuple{}
  ######a#7158#7160#7525::Tuple{}
  ######b#7159#7161#7526::Tuple{}
  ####_var0#7162#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7145#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7533::Tuple{}
  ##########x#7077#7079#7083#7148#7534::Float64
  ########_var0#7080#7084#7149#7535::Tuple{}
  ##a#7536::Float64
  ##exp_a#7537::Float64
  ##deriv#7538::Float64
  ####G#7145#7539::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7540::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7541::Tuple{}
  ##########x#7077#7079#7083#7148#7542::Float64
  ########_var0#7080#7084#7149#7543::Tuple{}
  ########tup#7325#7328#7332#7544::Tuple{}
  ########x#7326#7329#7333#7545::Int64
  ######_var0#7330#7334#7546::Tuple{}
  ########types#7327#7331#7335#7547::Tuple{Type{Int64}}
  ##xs#7548::Tuple{}
  ##########tup#7076#7150#7154#7314#7549::Tuple{}
  ##########x#7077#7151#7155#7315#7550::Float64
  ########_var0#7152#7156#7316#7551::Tuple{}
  ##########types#7091#7153#7157#7317#7552::Tuple{Type{Float64}}
  ####a1#7318#7553::Float64
  ####a2#7319#7554::Float64
  ########a#7102#7106#7320#7555::Tuple{}
  ########b#7103#7107#7321#7556::Tuple{}
  ########afactor#7104#7108#7322#7557::Float64
  ########bfactor#7105#7109#7323#7558::Float64
  ######_var0#7110#7324#7559::Tuple{}
  ######a#7158#7160#7560::Tuple{}
  ######b#7159#7161#7561::Tuple{}
  ####_var0#7162#7562::Tuple{}
  ######a#7336#7338#7563::Tuple{}
  ######b#7337#7339#7564::Tuple{}
  ####_var0#7340#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ##div_a#7568::Float64
  ####afactor#7346#7569::Float64
  ####bfactor#7347#7570::Float64
  ########a#7102#7341#7348#7571::Tuple{}
  ########b#7103#7342#7349#7572::Tuple{}
  ########afactor#7104#7343#7350#7573::Float64
  ########bfactor#7105#7344#7351#7574::Float64
  ######_var0#7345#7352#7575::Tuple{}
  ######types#7224#7353#7576::Tuple{Type{Float64}}
  ######types#7091#7460#7577::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      ##a#7461 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7462 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7461::Float64))
      ##deriv#7463 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7462::Float64,##a#7461::Float64))))
      ####G#7085#7464 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7468 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7462::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7470 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7472 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7472::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      ####G#7097#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7477 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7472::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7480 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7483 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7485 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7485::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      ####G#7097#7486 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7490 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7485::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7493 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7496 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7496 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7498 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7498::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      ####G#7097#7499 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7503 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7503 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7498::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7506 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7152#7156#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7509 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7093#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7511 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7511::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      ####G#7097#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7516 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7101#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7511::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7551 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7152#7156#7316#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7553 = GenSym(22)
      ####a2#7319#7554 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7559 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7110#7324#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7553::Float64,####a2#7319#7554::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7562 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7162#7562 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7536 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7537 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7538 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7539 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7543 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7080#7084#7149#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7537::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7546 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7330#7334#7546 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7565 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7340#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7517 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7518 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7519 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7520 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7524 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7524 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7518::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7527 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7162#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7528 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7535 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7080#7084#7149#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7566 = GenSym(26)
      ##a2#7567 = GenSym(27)
      ##div_a#7568 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7566::Float64,##a2#7567::Float64))
      ####afactor#7346#7569 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7567::Float64))
      ####bfactor#7347#7570 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7566::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7567::Float64,##a2#7567::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7575 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7345#7352#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7568::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7461::Float64
  ##div_a#7462::Float64
  ##deriv#7463::Float64
  ####G#7085#7464::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7465::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7466::Tuple{}
  ##########x#7077#7079#7083#7088#7467::Float64
  ########_var0#7080#7084#7089#7468::Tuple{}
  ######tup#7090#7092#7469::Tuple{}
  ####_var0#7093#7470::Tuple{}
  ######types#7091#7094#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ####G#7097#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7475::Tuple{}
  ##########x#7077#7079#7083#7100#7476::Float64
  ########_var0#7080#7084#7101#7477::Tuple{}
  ########tup#7076#7150#7154#7478::Tuple{}
  ########x#7077#7151#7155#7479::Float64
  ######_var0#7152#7156#7480::Tuple{}
  ########types#7091#7153#7157#7481::Tuple{Type{Float64}}
  ######tup#7090#7092#7482::Tuple{}
  ####_var0#7093#7483::Tuple{}
  ######types#7091#7094#7484::Tuple{Type{Float64}}
  ##a#7485::Float64
  ####G#7097#7486::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7487::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7488::Tuple{}
  ##########x#7077#7079#7083#7100#7489::Float64
  ########_var0#7080#7084#7101#7490::Tuple{}
  ########tup#7076#7150#7154#7491::Tuple{}
  ########x#7077#7151#7155#7492::Float64
  ######_var0#7152#7156#7493::Tuple{}
  ########types#7091#7153#7157#7494::Tuple{Type{Float64}}
  ######tup#7090#7092#7495::Tuple{}
  ####_var0#7093#7496::Tuple{}
  ######types#7091#7094#7497::Tuple{Type{Float64}}
  ##a#7498::Float64
  ####G#7097#7499::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7500::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7501::Tuple{}
  ##########x#7077#7079#7083#7100#7502::Float64
  ########_var0#7080#7084#7101#7503::Tuple{}
  ########tup#7076#7150#7154#7504::Tuple{}
  ########x#7077#7151#7155#7505::Float64
  ######_var0#7152#7156#7506::Tuple{}
  ########types#7091#7153#7157#7507::Tuple{Type{Float64}}
  ######tup#7090#7092#7508::Tuple{}
  ####_var0#7093#7509::Tuple{}
  ######types#7091#7094#7510::Tuple{Type{Float64}}
  ##a#7511::Float64
  ####G#7097#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7514::Tuple{}
  ##########x#7077#7079#7083#7100#7515::Float64
  ########_var0#7080#7084#7101#7516::Tuple{}
  ##a#7517::Float64
  ##exp_a#7518::Float64
  ##deriv#7519::Float64
  ####G#7145#7520::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7521::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7522::Tuple{}
  ##########x#7077#7079#7083#7148#7523::Float64
  ########_var0#7080#7084#7149#7524::Tuple{}
  ######a#7158#7160#7525::Tuple{}
  ######b#7159#7161#7526::Tuple{}
  ####_var0#7162#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7145#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7533::Tuple{}
  ##########x#7077#7079#7083#7148#7534::Float64
  ########_var0#7080#7084#7149#7535::Tuple{}
  ##a#7536::Float64
  ##exp_a#7537::Float64
  ##deriv#7538::Float64
  ####G#7145#7539::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7540::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7541::Tuple{}
  ##########x#7077#7079#7083#7148#7542::Float64
  ########_var0#7080#7084#7149#7543::Tuple{}
  ########tup#7325#7328#7332#7544::Tuple{}
  ########x#7326#7329#7333#7545::Int64
  ######_var0#7330#7334#7546::Tuple{}
  ########types#7327#7331#7335#7547::Tuple{Type{Int64}}
  ##xs#7548::Tuple{}
  ##########tup#7076#7150#7154#7314#7549::Tuple{}
  ##########x#7077#7151#7155#7315#7550::Float64
  ########_var0#7152#7156#7316#7551::Tuple{}
  ##########types#7091#7153#7157#7317#7552::Tuple{Type{Float64}}
  ####a1#7318#7553::Float64
  ####a2#7319#7554::Float64
  ########a#7102#7106#7320#7555::Tuple{}
  ########b#7103#7107#7321#7556::Tuple{}
  ########afactor#7104#7108#7322#7557::Float64
  ########bfactor#7105#7109#7323#7558::Float64
  ######_var0#7110#7324#7559::Tuple{}
  ######a#7158#7160#7560::Tuple{}
  ######b#7159#7161#7561::Tuple{}
  ####_var0#7162#7562::Tuple{}
  ######a#7336#7338#7563::Tuple{}
  ######b#7337#7339#7564::Tuple{}
  ####_var0#7340#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ##div_a#7568::Float64
  ####afactor#7346#7569::Float64
  ####bfactor#7347#7570::Float64
  ########a#7102#7341#7348#7571::Tuple{}
  ########b#7103#7342#7349#7572::Tuple{}
  ########afactor#7104#7343#7350#7573::Float64
  ########bfactor#7105#7344#7351#7574::Float64
  ######_var0#7345#7352#7575::Tuple{}
  ######types#7224#7353#7576::Tuple{Type{Float64}}
  ######types#7091#7460#7577::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      ##a#7461 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7462 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7461::Float64))
      ##deriv#7463 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7462::Float64,##a#7461::Float64))))
      ####G#7085#7464 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7468 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7462::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7470 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7472 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7472::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      ####G#7097#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7477 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7472::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7480 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7483 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7485 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7485::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      ####G#7097#7486 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7490 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7485::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7493 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7496 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7496 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7498 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7498::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      ####G#7097#7499 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7503 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7503 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7498::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7506 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7152#7156#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7509 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7093#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7511 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7511::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      ####G#7097#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7516 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7101#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7511::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7551 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7152#7156#7316#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7553 = GenSym(22)
      ####a2#7319#7554 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7559 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7110#7324#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7553::Float64,####a2#7319#7554::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7562 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7162#7562 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7536 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7537 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7538 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7539 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7543 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7080#7084#7149#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7537::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7546 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7330#7334#7546 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7565 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7340#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7517 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7518 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7519 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7520 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7524 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7524 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7518::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7527 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7162#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7528 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7535 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7080#7084#7149#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7566 = GenSym(26)
      ##a2#7567 = GenSym(27)
      ##div_a#7568 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7566::Float64,##a2#7567::Float64))
      ####afactor#7346#7569 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7567::Float64))
      ####bfactor#7347#7570 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7566::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7567::Float64,##a2#7567::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7575 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7345#7352#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7568::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  ##a#7461::Float64
  ##div_a#7462::Float64
  ##deriv#7463::Float64
  ####G#7085#7464::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7465::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7466::Tuple{}
  ##########x#7077#7079#7083#7088#7467::Float64
  ########_var0#7080#7084#7089#7468::Tuple{}
  ######tup#7090#7092#7469::Tuple{}
  ####_var0#7093#7470::Tuple{}
  ######types#7091#7094#7471::Tuple{Type{Float64}}
  ##a#7472::Float64
  ####G#7097#7473::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7474::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7475::Tuple{}
  ##########x#7077#7079#7083#7100#7476::Float64
  ########_var0#7080#7084#7101#7477::Tuple{}
  ########tup#7076#7150#7154#7478::Tuple{}
  ########x#7077#7151#7155#7479::Float64
  ######_var0#7152#7156#7480::Tuple{}
  ########types#7091#7153#7157#7481::Tuple{Type{Float64}}
  ######tup#7090#7092#7482::Tuple{}
  ####_var0#7093#7483::Tuple{}
  ######types#7091#7094#7484::Tuple{Type{Float64}}
  ##a#7485::Float64
  ####G#7097#7486::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7487::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7488::Tuple{}
  ##########x#7077#7079#7083#7100#7489::Float64
  ########_var0#7080#7084#7101#7490::Tuple{}
  ########tup#7076#7150#7154#7491::Tuple{}
  ########x#7077#7151#7155#7492::Float64
  ######_var0#7152#7156#7493::Tuple{}
  ########types#7091#7153#7157#7494::Tuple{Type{Float64}}
  ######tup#7090#7092#7495::Tuple{}
  ####_var0#7093#7496::Tuple{}
  ######types#7091#7094#7497::Tuple{Type{Float64}}
  ##a#7498::Float64
  ####G#7097#7499::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7500::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7501::Tuple{}
  ##########x#7077#7079#7083#7100#7502::Float64
  ########_var0#7080#7084#7101#7503::Tuple{}
  ########tup#7076#7150#7154#7504::Tuple{}
  ########x#7077#7151#7155#7505::Float64
  ######_var0#7152#7156#7506::Tuple{}
  ########types#7091#7153#7157#7507::Tuple{Type{Float64}}
  ######tup#7090#7092#7508::Tuple{}
  ####_var0#7093#7509::Tuple{}
  ######types#7091#7094#7510::Tuple{Type{Float64}}
  ##a#7511::Float64
  ####G#7097#7512::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7098#7513::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7099#7514::Tuple{}
  ##########x#7077#7079#7083#7100#7515::Float64
  ########_var0#7080#7084#7101#7516::Tuple{}
  ##a#7517::Float64
  ##exp_a#7518::Float64
  ##deriv#7519::Float64
  ####G#7145#7520::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7521::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7522::Tuple{}
  ##########x#7077#7079#7083#7148#7523::Float64
  ########_var0#7080#7084#7149#7524::Tuple{}
  ######a#7158#7160#7525::Tuple{}
  ######b#7159#7161#7526::Tuple{}
  ####_var0#7162#7527::Tuple{}
  ##a#7528::Float64
  ##exp_a#7529::Float64
  ##deriv#7530::Float64
  ####G#7145#7531::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7532::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7533::Tuple{}
  ##########x#7077#7079#7083#7148#7534::Float64
  ########_var0#7080#7084#7149#7535::Tuple{}
  ##a#7536::Float64
  ##exp_a#7537::Float64
  ##deriv#7538::Float64
  ####G#7145#7539::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7146#7540::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7147#7541::Tuple{}
  ##########x#7077#7079#7083#7148#7542::Float64
  ########_var0#7080#7084#7149#7543::Tuple{}
  ########tup#7325#7328#7332#7544::Tuple{}
  ########x#7326#7329#7333#7545::Int64
  ######_var0#7330#7334#7546::Tuple{}
  ########types#7327#7331#7335#7547::Tuple{Type{Int64}}
  ##xs#7548::Tuple{}
  ##########tup#7076#7150#7154#7314#7549::Tuple{}
  ##########x#7077#7151#7155#7315#7550::Float64
  ########_var0#7152#7156#7316#7551::Tuple{}
  ##########types#7091#7153#7157#7317#7552::Tuple{Type{Float64}}
  ####a1#7318#7553::Float64
  ####a2#7319#7554::Float64
  ########a#7102#7106#7320#7555::Tuple{}
  ########b#7103#7107#7321#7556::Tuple{}
  ########afactor#7104#7108#7322#7557::Float64
  ########bfactor#7105#7109#7323#7558::Float64
  ######_var0#7110#7324#7559::Tuple{}
  ######a#7158#7160#7560::Tuple{}
  ######b#7159#7161#7561::Tuple{}
  ####_var0#7162#7562::Tuple{}
  ######a#7336#7338#7563::Tuple{}
  ######b#7337#7339#7564::Tuple{}
  ####_var0#7340#7565::Tuple{}
  ##a1#7566::Float64
  ##a2#7567::Float64
  ##div_a#7568::Float64
  ####afactor#7346#7569::Float64
  ####bfactor#7347#7570::Float64
  ########a#7102#7341#7348#7571::Tuple{}
  ########b#7103#7342#7349#7572::Tuple{}
  ########afactor#7104#7343#7350#7573::Float64
  ########bfactor#7105#7344#7351#7574::Float64
  ######_var0#7345#7352#7575::Tuple{}
  ######types#7224#7353#7576::Tuple{Type{Float64}}
  ######types#7091#7460#7577::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 87:
      NewvarNode(:iα)
      NewvarNode(:g1)
      NewvarNode(:g2)
      NewvarNode(:g3)
      NewvarNode(:g4)
      unless (Base.lt_float)(3.0,(top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64)::Bool goto 0 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 88:
      ##a#7461 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7462 = (Base.box)(Base.Float64,(Base.div_float)(1.0,##a#7461::Float64))
      ##deriv#7463 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7462::Float64,##a#7461::Float64))))
      ####G#7085#7464 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7468 = (top(tuple))()::Tuple{}
      goto 4
      ########_var0#7080#7084#7089#7468 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      iα = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7462::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 89:
      $(Expr(:boundscheck, false))
      ####_var0#7093#7470 = (top(tuple))()::Tuple{}
      goto 6
      ####_var0#7093#7470 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      ##a#7472 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      GenSym(2) = (ForwardDiff.digamma)(##a#7472::Float64)::Float64
      GenSym(1) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7472::Float64,0)::Float64
      ####G#7097#7473 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7477 = (top(tuple))()::Tuple{}
      goto 8
      ########_var0#7080#7084#7101#7477 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      8: 
      g1 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7472::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 90:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7480 = (top(tuple))()::Tuple{}
      goto 10
      ######_var0#7152#7156#7480 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      10: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7483 = (top(tuple))()::Tuple{}
      goto 12
      ####_var0#7093#7483 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      12: 
      ##a#7485 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,2.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(9) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      GenSym(7) = (ForwardDiff.digamma)(##a#7485::Float64)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7485::Float64,0)::Float64
      ####G#7097#7486 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7490 = (top(tuple))()::Tuple{}
      goto 14
      ########_var0#7080#7084#7101#7490 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      14: 
      g2 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(9),##a#7485::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 91:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7493 = (top(tuple))()::Tuple{}
      goto 16
      ######_var0#7152#7156#7493 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      16: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7496 = (top(tuple))()::Tuple{}
      goto 18
      ####_var0#7093#7496 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      18: 
      ##a#7498 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,3.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(14) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      GenSym(12) = (ForwardDiff.digamma)(##a#7498::Float64)::Float64
      GenSym(11) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7498::Float64,0)::Float64
      ####G#7097#7499 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7503 = (top(tuple))()::Tuple{}
      goto 20
      ########_var0#7080#7084#7101#7503 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      20: 
      g3 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(14),##a#7498::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 92:
      $(Expr(:boundscheck, false))
      ######_var0#7152#7156#7506 = (top(tuple))()::Tuple{}
      goto 22
      ######_var0#7152#7156#7506 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      22: 
      $(Expr(:boundscheck, false))
      ####_var0#7093#7509 = (top(tuple))()::Tuple{}
      goto 24
      ####_var0#7093#7509 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      24: 
      ##a#7511 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)(1.0,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(iα::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(19) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      GenSym(17) = (ForwardDiff.digamma)(##a#7511::Float64)::Float64
      GenSym(16) = (top(ccall))((top(tuple))(:tgamma,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7511::Float64,0)::Float64
      ####G#7097#7512 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7101#7516 = (top(tuple))()::Tuple{}
      goto 26
      ########_var0#7080#7084#7101#7516 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      26: 
      g4 = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(19),##a#7511::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))) # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 93:
      $(Expr(:boundscheck, false))
      ########_var0#7152#7156#7316#7551 = (top(tuple))()::Tuple{}
      goto 38
      ########_var0#7152#7156#7316#7551 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      38: 
      GenSym(22) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(g3::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,4.0))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(23) = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ####a1#7318#7553 = GenSym(22)
      ####a2#7319#7554 = GenSym(23)
      $(Expr(:boundscheck, false))
      ######_var0#7110#7324#7559 = (top(tuple))()::Tuple{}
      goto 39
      ######_var0#7110#7324#7559 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      39: 
      GenSym(24) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(####a1#7318#7553::Float64,####a2#7319#7554::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7562 = (top(tuple))()::Tuple{}
      goto 41
      ####_var0#7162#7562 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      41: 
      ##a#7536 = (top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7537 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7538 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7536::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7539 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7543 = (top(tuple))()::Tuple{}
      goto 34
      ########_var0#7080#7084#7149#7543 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      34: 
      GenSym(21) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7537::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ######_var0#7330#7334#7546 = (top(tuple))()::Tuple{}
      goto 36
      ######_var0#7330#7334#7546 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      36: 
      $(Expr(:boundscheck, false))
      ####_var0#7340#7565 = (top(tuple))()::Tuple{}
      goto 43
      ####_var0#7340#7565 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      43: 
      ##a#7517 = (top(getfield))(g1::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##exp_a#7518 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7519 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7517::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7520 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7524 = (top(tuple))()::Tuple{}
      goto 28
      ########_var0#7080#7084#7149#7524 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      28: 
      GenSym(20) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7518::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      $(Expr(:boundscheck, false))
      ####_var0#7162#7527 = (top(tuple))()::Tuple{}
      goto 30
      ####_var0#7162#7527 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      30: 
      ##a#7528 = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g2::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(20),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      ##exp_a#7529 = (Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,2)))::ANY)::Float64
      ##deriv#7530 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,2)),(Base.Math.box)(Base.Math.Float64,(Base.Math.powi_llvm)(##a#7528::Float64,(Base.box)(Int32,(Base.checked_trunc_sint)(Int32,(Base.box)(Int64,(Base.sub_int)(2,1))))))::Float64))
      ####G#7145#7531 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7149#7535 = (top(tuple))()::Tuple{}
      goto 32
      ########_var0#7080#7084#7149#7535 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      32: 
      GenSym(25) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7529::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(26) = (top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(g4::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64,(top(getfield))(GenSym(24),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64,(top(getfield))($(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(GenSym(21),:value)::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,3))))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{})))))),:value)::Float64
      GenSym(27) = (top(getfield))(GenSym(25),:value)::Float64
      ##a1#7566 = GenSym(26)
      ##a2#7567 = GenSym(27)
      ##div_a#7568 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7566::Float64,##a2#7567::Float64))
      ####afactor#7346#7569 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7567::Float64))
      ####bfactor#7347#7570 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7566::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7567::Float64,##a2#7567::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7575 = (top(tuple))()::Tuple{}
      goto 45
      ######_var0#7345#7352#7575 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      45: 
      GenSym(28) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7568::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.sub_float)((top(getfield))(GenSym(28),:value)::Float64,6.0))), :((top(getfield))(GenSym(28),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      goto 1
      0:  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 95:
      return Distributions.Inf
      1: 
  end::UNION{FLOAT64,FORWARDDIFF.GRADIENTNUMBER{0,FLOAT64,TUPLE{}}}




____________________________
entropy
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  γ::Float64
  ##xs#7578::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)),(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64))))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64)))))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7579::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7592::Float64
  ##a2#7593::Float64
  ##div_a#7594::Float64
  ####afactor#7346#7595::Float64
  ####bfactor#7347#7596::Float64
  ########a#7102#7341#7348#7597::Tuple{}
  ########b#7103#7342#7349#7598::Tuple{}
  ########afactor#7104#7343#7350#7599::Float64
  ########bfactor#7105#7344#7351#7600::Float64
  ######_var0#7345#7352#7601::Tuple{}
  ######types#7224#7353#7602::Tuple{Type{Float64}}
  ##a#7603::Float64
  ####G#7580#7604::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7581#7605::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7582#7606::Tuple{}
  ##########x#7077#7079#7083#7583#7607::Float64
  ########_var0#7080#7084#7584#7608::Tuple{}
  ##a#7609::Float64
  ##div_a#7610::Float64
  ##deriv#7611::Float64
  ####G#7085#7612::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7613::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7614::Tuple{}
  ##########x#7077#7079#7083#7088#7615::Float64
  ########_var0#7080#7084#7089#7616::Tuple{}
  ##xs#7617::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7091#7585#7586#7590#7618::Tuple{Type{Float64}}
  ########types#7091#7585#7591#7619::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      ##a#7609 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7610 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7609::Float64))
      ##deriv#7611 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7610::Float64,##a#7609::Float64))))
      ####G#7085#7612 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7616 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7080#7084#7089#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7610::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7592 = GenSym(0)
      ##a2#7593 = GenSym(1)
      ##div_a#7594 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7592::Float64,##a2#7593::Float64))
      ####afactor#7346#7595 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7593::Float64))
      ####bfactor#7347#7596 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7592::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7593::Float64,##a2#7593::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7601 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7345#7352#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7603 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7603::Float64,0)::Float64
      ####G#7580#7604 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7584#7608 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7584#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7603::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7579::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  γ::Float64
  ##xs#7579::Tuple{Float64}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      GenSym(0) = (Base.box)(Base.Float64,(Base.div_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(2) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(0),0)::Float64
      return (Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)((Base.box)(Base.Float64,(Base.add_float)(1.0,(Base.box)(Base.Float64,(Base.div_float)(γ::Float64,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64)))),γ::Float64)),(Base.Math.nan_dom_err)(GenSym(2),GenSym(0))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7592::Float64
  ##a2#7593::Float64
  ##div_a#7594::Float64
  ####afactor#7346#7595::Float64
  ####bfactor#7347#7596::Float64
  ########a#7102#7341#7348#7597::Tuple{}
  ########b#7103#7342#7349#7598::Tuple{}
  ########afactor#7104#7343#7350#7599::Float64
  ########bfactor#7105#7344#7351#7600::Float64
  ######_var0#7345#7352#7601::Tuple{}
  ######types#7224#7353#7602::Tuple{Type{Float64}}
  ##a#7603::Float64
  ####G#7580#7604::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7581#7605::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7582#7606::Tuple{}
  ##########x#7077#7079#7083#7583#7607::Float64
  ########_var0#7080#7084#7584#7608::Tuple{}
  ##a#7609::Float64
  ##div_a#7610::Float64
  ##deriv#7611::Float64
  ####G#7085#7612::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7613::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7614::Tuple{}
  ##########x#7077#7079#7083#7088#7615::Float64
  ########_var0#7080#7084#7089#7616::Tuple{}
  ##xs#7617::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7091#7585#7586#7590#7618::Tuple{Type{Float64}}
  ########types#7091#7585#7591#7619::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      ##a#7609 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7610 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7609::Float64))
      ##deriv#7611 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7610::Float64,##a#7609::Float64))))
      ####G#7085#7612 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7616 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7080#7084#7089#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7610::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7592 = GenSym(0)
      ##a2#7593 = GenSym(1)
      ##div_a#7594 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7592::Float64,##a2#7593::Float64))
      ####afactor#7346#7595 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7593::Float64))
      ####bfactor#7347#7596 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7592::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7593::Float64,##a2#7593::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7601 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7345#7352#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7603 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7603::Float64,0)::Float64
      ####G#7580#7604 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7584#7608 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7584#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7603::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7592::Float64
  ##a2#7593::Float64
  ##div_a#7594::Float64
  ####afactor#7346#7595::Float64
  ####bfactor#7347#7596::Float64
  ########a#7102#7341#7348#7597::Tuple{}
  ########b#7103#7342#7349#7598::Tuple{}
  ########afactor#7104#7343#7350#7599::Float64
  ########bfactor#7105#7344#7351#7600::Float64
  ######_var0#7345#7352#7601::Tuple{}
  ######types#7224#7353#7602::Tuple{Type{Float64}}
  ##a#7603::Float64
  ####G#7580#7604::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7581#7605::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7582#7606::Tuple{}
  ##########x#7077#7079#7083#7583#7607::Float64
  ########_var0#7080#7084#7584#7608::Tuple{}
  ##a#7609::Float64
  ##div_a#7610::Float64
  ##deriv#7611::Float64
  ####G#7085#7612::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7613::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7614::Tuple{}
  ##########x#7077#7079#7083#7088#7615::Float64
  ########_var0#7080#7084#7089#7616::Tuple{}
  ##xs#7617::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7091#7585#7586#7590#7618::Tuple{Type{Float64}}
  ########types#7091#7585#7591#7619::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      ##a#7609 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7610 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7609::Float64))
      ##deriv#7611 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7610::Float64,##a#7609::Float64))))
      ####G#7085#7612 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7616 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7080#7084#7089#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7610::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7592 = GenSym(0)
      ##a2#7593 = GenSym(1)
      ##div_a#7594 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7592::Float64,##a2#7593::Float64))
      ####afactor#7346#7595 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7593::Float64))
      ####bfactor#7347#7596 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7592::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7593::Float64,##a2#7593::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7601 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7345#7352#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7603 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7603::Float64,0)::Float64
      ####G#7580#7604 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7584#7608 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7584#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7603::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7592::Float64
  ##a2#7593::Float64
  ##div_a#7594::Float64
  ####afactor#7346#7595::Float64
  ####bfactor#7347#7596::Float64
  ########a#7102#7341#7348#7597::Tuple{}
  ########b#7103#7342#7349#7598::Tuple{}
  ########afactor#7104#7343#7350#7599::Float64
  ########bfactor#7105#7344#7351#7600::Float64
  ######_var0#7345#7352#7601::Tuple{}
  ######types#7224#7353#7602::Tuple{Type{Float64}}
  ##a#7603::Float64
  ####G#7580#7604::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7581#7605::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7582#7606::Tuple{}
  ##########x#7077#7079#7083#7583#7607::Float64
  ########_var0#7080#7084#7584#7608::Tuple{}
  ##a#7609::Float64
  ##div_a#7610::Float64
  ##deriv#7611::Float64
  ####G#7085#7612::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7613::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7614::Tuple{}
  ##########x#7077#7079#7083#7088#7615::Float64
  ########_var0#7080#7084#7089#7616::Tuple{}
  ##xs#7617::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7091#7585#7586#7590#7618::Tuple{Type{Float64}}
  ########types#7091#7585#7591#7619::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      ##a#7609 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7610 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7609::Float64))
      ##deriv#7611 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7610::Float64,##a#7609::Float64))))
      ####G#7085#7612 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7616 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7080#7084#7089#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7610::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7592 = GenSym(0)
      ##a2#7593 = GenSym(1)
      ##div_a#7594 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7592::Float64,##a2#7593::Float64))
      ####afactor#7346#7595 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7593::Float64))
      ####bfactor#7347#7596 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7592::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7593::Float64,##a2#7593::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7601 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7345#7352#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7603 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7603::Float64,0)::Float64
      ####G#7580#7604 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7584#7608 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7584#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7603::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  γ::Float64
  ##a1#7592::Float64
  ##a2#7593::Float64
  ##div_a#7594::Float64
  ####afactor#7346#7595::Float64
  ####bfactor#7347#7596::Float64
  ########a#7102#7341#7348#7597::Tuple{}
  ########b#7103#7342#7349#7598::Tuple{}
  ########afactor#7104#7343#7350#7599::Float64
  ########bfactor#7105#7344#7351#7600::Float64
  ######_var0#7345#7352#7601::Tuple{}
  ######types#7224#7353#7602::Tuple{Type{Float64}}
  ##a#7603::Float64
  ####G#7580#7604::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7581#7605::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7582#7606::Tuple{}
  ##########x#7077#7079#7083#7583#7607::Float64
  ########_var0#7080#7084#7584#7608::Tuple{}
  ##a#7609::Float64
  ##div_a#7610::Float64
  ##deriv#7611::Float64
  ####G#7085#7612::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7613::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7614::Tuple{}
  ##########x#7077#7079#7083#7088#7615::Float64
  ########_var0#7080#7084#7089#7616::Tuple{}
  ##xs#7617::Tuple{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##########types#7091#7585#7586#7590#7618::Tuple{Type{Float64}}
  ########types#7091#7585#7591#7619::Tuple{Type{Float64}}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 100:
      const γ::ANY
      γ = 0.5772156649015329 # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 101:
      ##a#7609 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7610 = (Base.box)(Base.Float64,(Base.div_float)(γ::Float64,##a#7609::Float64))
      ##deriv#7611 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7610::Float64,##a#7609::Float64))))
      ####G#7085#7612 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7616 = (top(tuple))()::Tuple{}
      goto 5
      ########_var0#7080#7084#7089#7616 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      GenSym(5) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7610::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(0) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(1) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##a1#7592 = GenSym(0)
      ##a2#7593 = GenSym(1)
      ##div_a#7594 = (Base.box)(Base.Float64,(Base.div_float)(##a1#7592::Float64,##a2#7593::Float64))
      ####afactor#7346#7595 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Float64,(Base.sitofp)(Float64,1)),##a2#7593::Float64))
      ####bfactor#7347#7596 = (Base.box)(Base.Float64,(Base.div_float)((Base.box)(Base.Float64,(Base.neg_float)(##a1#7592::Float64)),(Base.box)(Base.Float64,(Base.mul_float)(##a2#7593::Float64,##a2#7593::Float64))))
      $(Expr(:boundscheck, false))
      ######_var0#7345#7352#7601 = (top(tuple))()::Tuple{}
      goto 1
      ######_var0#7345#7352#7601 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(2) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7594::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7603 = (top(getfield))(GenSym(2),:value)::Float64
      GenSym(4) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,##a#7603::Float64,0)::Float64
      ####G#7580#7604 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7584#7608 = (top(tuple))()::Tuple{}
      goto 3
      ########_var0#7080#7084#7584#7608 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      3: 
      GenSym(6) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.Math.nan_dom_err)(GenSym(4),##a#7603::Float64)::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(7) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(5),:value)::Float64,1.0))), :((top(getfield))(GenSym(5),:partials)::ForwardDiff.Partials{Float64,Tuple{}})))
      return call($(Expr(:new, :((top(getfield))(Base,:AddFun)::Type{Base.AddFun}))),$(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.add_float)((top(getfield))(GenSym(7),:value)::Float64,γ::Float64))), :((top(getfield))(GenSym(7),:partials)::ForwardDiff.Partials{Float64,Tuple{}}))),GenSym(6))::ForwardDiff.GradientNumber{0,Float64,Tuple{}}
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
rand
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  ####ri#7633#7638::UInt64
  ####idx#7634#7639::UInt64
  ####x#7635#7640::Float64
  ########_var0#7625#7631#7636#7641::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7642::Float64
  ##_var0#7643::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7625#7631#7636#7641 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7625#7631#7636#7641 = false
      3: 
      ########_var0#7625#7631#7636#7641::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7642 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7623#7624#7626#7632#7637#7642 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7633#7638 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7642::Float64),0x000fffffffffffff))
      ####idx#7634#7639 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7638::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7640 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7638::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7639::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7638::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7639::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7643 = ####x#7635#7640::Float64
      goto 6
      5: 
      ##_var0#7643 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7639::UInt64,####x#7635#7640::Float64)::Float64
      goto 6
      ##_var0#7643 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7643::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:α)::Int64))))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.sitofp)(Float64,(top(getfield))(d::Distributions.Frechet{Int64},:θ)::Int64)),(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7633#7645::UInt64
  ####idx#7634#7646::UInt64
  ####x#7635#7647::Float64
  ########_var0#7625#7631#7636#7648::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7649::Float64
  ##_var0#7650::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7625#7631#7636#7648 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7625#7631#7636#7648 = false
      3: 
      ########_var0#7625#7631#7636#7648::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7649 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7623#7624#7626#7632#7637#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7633#7645 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7649::Float64),0x000fffffffffffff))
      ####idx#7634#7646 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7645::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7647 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7645::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7646::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7645::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7646::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7650 = ####x#7635#7647::Float64
      goto 6
      5: 
      ##_var0#7650 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7646::UInt64,####x#7635#7647::Float64)::Float64
      goto 6
      ##_var0#7650 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7650::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7656::Float64
  ##div_a#7657::Float64
  ##deriv#7658::Float64
  ####G#7085#7659::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7660::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7661::Tuple{}
  ##########x#7077#7079#7083#7088#7662::Float64
  ########_var0#7080#7084#7089#7663::Tuple{}
  ####ri#7633#7664::UInt64
  ####idx#7634#7665::UInt64
  ####x#7635#7666::Float64
  ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7668::Float64
  ##_var0#7669::Float64
  ##a#7670::Float64
  ##exp_a#7671::Float64
  ##deriv#7672::Float64
  ####G#7651#7673::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7652#7674::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7653#7675::Tuple{}
  ##########x#7077#7079#7083#7654#7676::Float64
  ########_var0#7080#7084#7655#7677::Tuple{}
  ##a1#7678::Float64
  ##a2#7679::Float64
  ######a#7102#7106#7680::Tuple{}
  ######b#7103#7107#7681::Tuple{}
  ######afactor#7104#7108#7682::Float64
  ######bfactor#7105#7109#7683::Float64
  ####_var0#7110#7684::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7625#7631#7636#7667 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7625#7631#7636#7667 = false
      4: 
      ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7668 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7623#7624#7626#7632#7637#7668 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7633#7664 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7668::Float64),0x000fffffffffffff))
      ####idx#7634#7665 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7664::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7666 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7664::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7664::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7669 = ####x#7635#7666::Float64
      goto 7
      6: 
      ##_var0#7669 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7665::UInt64,####x#7635#7666::Float64)::Float64
      goto 7
      ##_var0#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7669::Float64
      ##a#7656 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7657 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7656::Float64))
      ##deriv#7658 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7657::Float64,##a#7656::Float64))))
      ####G#7085#7659 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7663 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7657::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7670 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7670::Float64,0)::Float64
      ##exp_a#7671 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7670::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7672 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7671::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7651#7673 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7655#7677 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7080#7084#7655#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7671::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7678 = GenSym(10)
      ##a2#7679 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7684 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7110#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7678::Float64,##a2#7679::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7633#7645::UInt64
  ####idx#7634#7646::UInt64
  ####x#7635#7647::Float64
  ########_var0#7625#7631#7636#7648::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7649::Float64
  ##_var0#7650::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7625#7631#7636#7648 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7625#7631#7636#7648 = false
      3: 
      ########_var0#7625#7631#7636#7648::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7649 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7623#7624#7626#7632#7637#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7633#7645 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7649::Float64),0x000fffffffffffff))
      ####idx#7634#7646 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7645::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7647 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7645::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7646::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7645::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7646::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7650 = ####x#7635#7647::Float64
      goto 6
      5: 
      ##_var0#7650 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7646::UInt64,####x#7635#7647::Float64)::Float64
      goto 6
      ##_var0#7650 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7650::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  ####ri#7633#7645::UInt64
  ####idx#7634#7646::UInt64
  ####x#7635#7647::Float64
  ########_var0#7625#7631#7636#7648::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7649::Float64
  ##_var0#7650::Float64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 2
      ########_var0#7625#7631#7636#7648 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 3
      2: 
      ########_var0#7625#7631#7636#7648 = false
      3: 
      ########_var0#7625#7631#7636#7648::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7649 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 4
      ############_var0#7623#7624#7626#7632#7637#7649 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      4: 
      ####ri#7633#7645 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7649::Float64),0x000fffffffffffff))
      ####idx#7634#7646 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7645::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7647 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7645::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7646::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7645::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7646::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 5
      ##_var0#7650 = ####x#7635#7647::Float64
      goto 6
      5: 
      ##_var0#7650 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7646::UInt64,####x#7635#7647::Float64)::Float64
      goto 6
      ##_var0#7650 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      6: 
      GenSym(3) = ##_var0#7650::Float64
      GenSym(2) = (Base.box)(Base.Float64,(Base.div_float)(-1.0,(top(getfield))(d::Distributions.Frechet{Float64},:α)::Float64))
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(3),0,GenSym(2),0)::Float64
      return (Base.box)(Base.Float64,(Base.mul_float)((top(getfield))(d::Distributions.Frechet{Float64},:θ)::Float64,(Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(3),GenSym(2))))::Float64))
  end::Float64

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7656::Float64
  ##div_a#7657::Float64
  ##deriv#7658::Float64
  ####G#7085#7659::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7660::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7661::Tuple{}
  ##########x#7077#7079#7083#7088#7662::Float64
  ########_var0#7080#7084#7089#7663::Tuple{}
  ####ri#7633#7664::UInt64
  ####idx#7634#7665::UInt64
  ####x#7635#7666::Float64
  ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7668::Float64
  ##_var0#7669::Float64
  ##a#7670::Float64
  ##exp_a#7671::Float64
  ##deriv#7672::Float64
  ####G#7651#7673::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7652#7674::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7653#7675::Tuple{}
  ##########x#7077#7079#7083#7654#7676::Float64
  ########_var0#7080#7084#7655#7677::Tuple{}
  ##a1#7678::Float64
  ##a2#7679::Float64
  ######a#7102#7106#7680::Tuple{}
  ######b#7103#7107#7681::Tuple{}
  ######afactor#7104#7108#7682::Float64
  ######bfactor#7105#7109#7683::Float64
  ####_var0#7110#7684::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7625#7631#7636#7667 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7625#7631#7636#7667 = false
      4: 
      ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7668 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7623#7624#7626#7632#7637#7668 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7633#7664 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7668::Float64),0x000fffffffffffff))
      ####idx#7634#7665 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7664::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7666 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7664::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7664::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7669 = ####x#7635#7666::Float64
      goto 7
      6: 
      ##_var0#7669 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7665::UInt64,####x#7635#7666::Float64)::Float64
      goto 7
      ##_var0#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7669::Float64
      ##a#7656 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7657 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7656::Float64))
      ##deriv#7658 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7657::Float64,##a#7656::Float64))))
      ####G#7085#7659 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7663 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7657::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7670 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7670::Float64,0)::Float64
      ##exp_a#7671 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7670::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7672 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7671::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7651#7673 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7655#7677 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7080#7084#7655#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7671::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7678 = GenSym(10)
      ##a2#7679 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7684 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7110#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7678::Float64,##a2#7679::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7656::Float64
  ##div_a#7657::Float64
  ##deriv#7658::Float64
  ####G#7085#7659::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7660::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7661::Tuple{}
  ##########x#7077#7079#7083#7088#7662::Float64
  ########_var0#7080#7084#7089#7663::Tuple{}
  ####ri#7633#7664::UInt64
  ####idx#7634#7665::UInt64
  ####x#7635#7666::Float64
  ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7668::Float64
  ##_var0#7669::Float64
  ##a#7670::Float64
  ##exp_a#7671::Float64
  ##deriv#7672::Float64
  ####G#7651#7673::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7652#7674::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7653#7675::Tuple{}
  ##########x#7077#7079#7083#7654#7676::Float64
  ########_var0#7080#7084#7655#7677::Tuple{}
  ##a1#7678::Float64
  ##a2#7679::Float64
  ######a#7102#7106#7680::Tuple{}
  ######b#7103#7107#7681::Tuple{}
  ######afactor#7104#7108#7682::Float64
  ######bfactor#7105#7109#7683::Float64
  ####_var0#7110#7684::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7625#7631#7636#7667 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7625#7631#7636#7667 = false
      4: 
      ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7668 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7623#7624#7626#7632#7637#7668 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7633#7664 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7668::Float64),0x000fffffffffffff))
      ####idx#7634#7665 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7664::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7666 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7664::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7664::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7669 = ####x#7635#7666::Float64
      goto 7
      6: 
      ##_var0#7669 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7665::UInt64,####x#7635#7666::Float64)::Float64
      goto 7
      ##_var0#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7669::Float64
      ##a#7656 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7657 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7656::Float64))
      ##deriv#7658 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7657::Float64,##a#7656::Float64))))
      ####G#7085#7659 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7663 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7657::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7670 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7670::Float64,0)::Float64
      ##exp_a#7671 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7670::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7672 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7671::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7651#7673 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7655#7677 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7080#7084#7655#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7671::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7678 = GenSym(10)
      ##a2#7679 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7684 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7110#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7678::Float64,##a2#7679::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7656::Float64
  ##div_a#7657::Float64
  ##deriv#7658::Float64
  ####G#7085#7659::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7660::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7661::Tuple{}
  ##########x#7077#7079#7083#7088#7662::Float64
  ########_var0#7080#7084#7089#7663::Tuple{}
  ####ri#7633#7664::UInt64
  ####idx#7634#7665::UInt64
  ####x#7635#7666::Float64
  ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7668::Float64
  ##_var0#7669::Float64
  ##a#7670::Float64
  ##exp_a#7671::Float64
  ##deriv#7672::Float64
  ####G#7651#7673::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7652#7674::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7653#7675::Tuple{}
  ##########x#7077#7079#7083#7654#7676::Float64
  ########_var0#7080#7084#7655#7677::Tuple{}
  ##a1#7678::Float64
  ##a2#7679::Float64
  ######a#7102#7106#7680::Tuple{}
  ######b#7103#7107#7681::Tuple{}
  ######afactor#7104#7108#7682::Float64
  ######bfactor#7105#7109#7683::Float64
  ####_var0#7110#7684::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7625#7631#7636#7667 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7625#7631#7636#7667 = false
      4: 
      ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7668 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7623#7624#7626#7632#7637#7668 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7633#7664 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7668::Float64),0x000fffffffffffff))
      ####idx#7634#7665 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7664::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7666 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7664::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7664::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7669 = ####x#7635#7666::Float64
      goto 7
      6: 
      ##_var0#7669 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7665::UInt64,####x#7635#7666::Float64)::Float64
      goto 7
      ##_var0#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7669::Float64
      ##a#7656 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7657 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7656::Float64))
      ##deriv#7658 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7657::Float64,##a#7656::Float64))))
      ####G#7085#7659 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7663 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7657::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7670 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7670::Float64,0)::Float64
      ##exp_a#7671 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7670::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7672 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7671::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7651#7673 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7655#7677 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7080#7084#7655#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7671::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7678 = GenSym(10)
      ##a2#7679 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7684 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7110#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7678::Float64,##a2#7679::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ##a#7656::Float64
  ##div_a#7657::Float64
  ##deriv#7658::Float64
  ####G#7085#7659::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7086#7660::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7087#7661::Tuple{}
  ##########x#7077#7079#7083#7088#7662::Float64
  ########_var0#7080#7084#7089#7663::Tuple{}
  ####ri#7633#7664::UInt64
  ####idx#7634#7665::UInt64
  ####x#7635#7666::Float64
  ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
  ############_var0#7623#7624#7626#7632#7637#7668::Float64
  ##_var0#7669::Float64
  ##a#7670::Float64
  ##exp_a#7671::Float64
  ##deriv#7672::Float64
  ####G#7651#7673::Type{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  ########types#7075#7081#7652#7674::Tuple{Type{Float64},Type{Float64}}
  ##########tup#7076#7078#7082#7653#7675::Tuple{}
  ##########x#7077#7079#7083#7654#7676::Float64
  ########_var0#7080#7084#7655#7677::Tuple{}
  ##a1#7678::Float64
  ##a2#7679::Float64
  ######a#7102#7106#7680::Tuple{}
  ######b#7103#7107#7681::Tuple{}
  ######afactor#7104#7108#7682::Float64
  ######bfactor#7105#7109#7683::Float64
  ####_var0#7110#7684::Tuple{}

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariate/continuous/frechet.jl, line 136:
      $(Expr(:boundscheck, false))
      unless (top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64 === (Base.box)(Int64,(Base.sext_int)(Int64,Base.Random.MTCacheLength))::Bool goto 3
      ########_var0#7625#7631#7636#7667 = (Base.Random.gen_rand)(Base.Random.GLOBAL_RNG)::Int64
      goto 4
      3: 
      ########_var0#7625#7631#7636#7667 = false
      4: 
      ########_var0#7625#7631#7636#7667::UNION{BOOL,INT64}
      $(Expr(:boundscheck, false))
      GenSym(1) = (top(getfield))(Base.Random.GLOBAL_RNG,:vals)::Array{Float64,1}
      GenSym(0) = (top(setfield!))(Base.Random.GLOBAL_RNG,:idx,(Base.box)(Base.Int,(Base.add_int)((top(getfield))(Base.Random.GLOBAL_RNG,:idx)::Int64,1)))::Int64
      ############_var0#7623#7624#7626#7632#7637#7668 = (Base.arrayref)(GenSym(1),GenSym(0))::Float64
      goto 5
      ############_var0#7623#7624#7626#7632#7637#7668 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      5: 
      ####ri#7633#7664 = (Base.box)(UInt64,(Base.and_int)((Base.box)(UInt64,############_var0#7623#7624#7626#7632#7637#7668::Float64),0x000fffffffffffff))
      ####idx#7634#7665 = (Base.box)(UInt64,(Base.and_int)(####ri#7633#7664::UInt64,(Base.box)(UInt64,(Base.zext_int)(UInt64,0xff))))
      ####x#7635#7666 = (Base.box)(Base.Float64,(Base.mul_float)((Base.box)(Float64,(Base.uitofp)(Float64,####ri#7633#7664::UInt64)),(Base.arrayref)(Base.Random.we,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::Float64))
      unless (Base.ult_int)(####ri#7633#7664::UInt64,(Base.arrayref)(Base.Random.ke,(Base.box)(Int64,(Base.check_top_bit)((Base.box)(UInt64,(Base.add_int)(####idx#7634#7665::UInt64,(Base.box)(UInt64,(Base.check_top_bit)(1)))))))::UInt64)::Bool goto 6
      ##_var0#7669 = ####x#7635#7666::Float64
      goto 7
      6: 
      ##_var0#7669 = (Base.Random.randexp_unlikely)(Base.Random.GLOBAL_RNG,####idx#7634#7665::UInt64,####x#7635#7666::Float64)::Float64
      goto 7
      ##_var0#7669 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      7: 
      GenSym(2) = ##_var0#7669::Float64
      ##a#7656 = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:α)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      ##div_a#7657 = (Base.box)(Base.Float64,(Base.div_float)(-1.0,##a#7656::Float64))
      ##deriv#7658 = (Base.box)(Base.Float64,(Base.neg_float)((Base.box)(Base.Float64,(Base.div_float)(##div_a#7657::Float64,##a#7656::Float64))))
      ####G#7085#7659 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7089#7663 = (top(tuple))()::Tuple{}
      goto 1
      ########_var0#7080#7084#7089#7663 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      1: 
      GenSym(3) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##div_a#7657::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      ##a#7670 = (top(getfield))(GenSym(3),:value)::Float64
      GenSym(6) = (top(ccall))((top(tuple))(:pow,Base.Math.libm)::Tuple{Symbol,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64,Base.Math.Float64)::SimpleVector,GenSym(2),0,##a#7670::Float64,0)::Float64
      ##exp_a#7671 = (Base.Math.nan_dom_err)(GenSym(6),(Base.box)(Base.Float64,(Base.add_float)(GenSym(2),##a#7670::Float64)))::Float64
      GenSym(8) = (top(ccall))((top(tuple))("log",Base.Math.libm)::Tuple{ASCIIString,ASCIIString},Base.Math.Float64,(top(svec))(Base.Math.Float64)::SimpleVector,GenSym(2),0)::Float64
      ##deriv#7672 = (Base.box)(Base.Float64,(Base.mul_float)(##exp_a#7671::Float64,(Base.Math.nan_dom_err)(GenSym(8),GenSym(2))::Float64))
      ####G#7651#7673 = ForwardDiff.GradientNumber{0,Float64,Tuple{}}
      $(Expr(:boundscheck, false))
      ########_var0#7080#7084#7655#7677 = (top(tuple))()::Tuple{}
      goto 9
      ########_var0#7080#7084#7655#7677 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      9: 
      GenSym(9) = $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :(##exp_a#7671::Float64), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
      GenSym(10) = (top(getfield))((top(getfield))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},:θ)::ForwardDiff.GradientNumber{0,Float64,Tuple{}},:value)::Float64
      GenSym(11) = (top(getfield))(GenSym(9),:value)::Float64
      ##a1#7678 = GenSym(10)
      ##a2#7679 = GenSym(11)
      $(Expr(:boundscheck, false))
      ####_var0#7110#7684 = (top(tuple))()::Tuple{}
      goto 11
      ####_var0#7110#7684 = $(Expr(:boundscheck, :((top(getfield))(Base,:pop))))
      11: 
      return $(Expr(:new, ForwardDiff.GradientNumber{0,Float64,Tuple{}}, :((Base.box)(Base.Float64,(Base.mul_float)(##a1#7678::Float64,##a2#7679::Float64))), :($(Expr(:new, ForwardDiff.Partials{Float64,Tuple{}}, :((top(tuple))()::Tuple{}))))))
  end::ForwardDiff.GradientNumber{0,Float64,Tuple{}}




____________________________
pdf
____________________________

---- integer, integer ----

Variables:
  d::Distributions.Frechet{Int64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{Int64},x::Int64)::Tuple{Distributions.Frechet{Int64},Int64}))))::UNION{}
  end::UNION{}

---- integer, float ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{Float64},x::Int64)::Tuple{Distributions.Frechet{Float64},Int64}))))::UNION{}
  end::UNION{}

---- integer, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Tuple{Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Int64}))))::UNION{}
  end::UNION{}

---- float, integer ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{Float64},x::Int64)::Tuple{Distributions.Frechet{Float64},Int64}))))::UNION{}
  end::UNION{}

---- float, float ----

Variables:
  d::Distributions.Frechet{Float64}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{Float64},x::Int64)::Tuple{Distributions.Frechet{Float64},Int64}))))::UNION{}
  end::UNION{}

---- float, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Tuple{Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Int64}))))::UNION{}
  end::UNION{}

---- dual, integer ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Tuple{Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Int64}))))::UNION{}
  end::UNION{}

---- dual, float ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Tuple{Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Int64}))))::UNION{}
  end::UNION{}

---- dual, dual ----

Variables:
  d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}}
  x::Int64

Body:
  begin  # /Users/mrincredible/.julia/v0.4/Distributions/src/univariates.jl, line 102:
      return (Distributions.throw)($(Expr(:new, :((top(getfield))(Base,:MethodError)::Type{MethodError}), :(Distributions.pdf), :((top(tuple))(d::Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},x::Int64)::Tuple{Distributions.Frechet{ForwardDiff.GradientNumber{0,Float64,Tuple{}}},Int64}))))::UNION{}
  end::UNION{}




____________________________
mgf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





____________________________
cf
____________________________

---- integer, integer ----


---- integer, float ----


---- integer, dual ----


---- float, integer ----


---- float, float ----


---- float, dual ----


---- dual, integer ----


---- dual, float ----


---- dual, dual ----





